{"title":"数组","slug":"数组","date":"2022-05-02T02:05:55.000Z","updated":"2022-05-24T11:41:34.365Z","comments":true,"path":"api/articles/数组.json","realPath":null,"excerpt":null,"covers":["/article/32766/%E5%86%85%E5%AD%98%E5%9D%97%E5%9C%B0%E5%9D%80.jpg"],"cover":"/images/theme/coverphoto/数组.jpg","content":"<p><a href=\"https://time.geekbang.org/column/intro/100017301?tab=catalog\">参考学习自·数据结构与算法之美</a></p>\n<h2 id=\"数组：为什么很多编程语言中数组都从0开始编号？\"><a href=\"#数组：为什么很多编程语言中数组都从0开始编号？\" class=\"headerlink\" title=\"数组：为什么很多编程语言中数组都从0开始编号？\"></a>数组：为什么很多编程语言中数组都从0开始编号？</h2><p>数组（Array）是一种<strong>线性表</strong>数据结构。它用一组<strong>连续</strong>的内存空间，来存储一组具有<strong>相同类型</strong>的数据。</p>\n<ol>\n<li><p>线性表（Linear List）</p>\n<p>线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。</p>\n</li>\n<li><p>连续的内存空间和相同类型的数据</p>\n</li>\n</ol>\n<blockquote>\n<img src=\"/article/32766/%E5%86%85%E5%AD%98%E5%9D%97%E5%9C%B0%E5%9D%80.jpg\" class title=\"内存块地址\">\n</blockquote>\n<p>计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs wiki\">a[i]_address = base_address + i * data_type_size<br></code></pre></td></tr></table></figure>\n<p><strong>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)</strong></p>\n<h3 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h3><p>数组为了保持内存数据的连续性，会导致插入、删除这两个操作比较低效</p>\n<p><strong>插入操作</strong></p>\n<blockquote>\n<p>假设数组的长度为 n，现在，如果需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，需要将第 k～n 这部分的元素都顺序地往后挪一位。</p>\n<p>最好时间复杂度： O(1)</p>\n<p>最坏时间复杂度： O(n)</p>\n<p>平均情况时间复杂度: (1+2+…n)/n=O(n)</p>\n<p>如果数组中的数据是<strong>有序</strong>的，在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。</p>\n<hr>\n<p>但是，如果数组中存储的数据并<strong>没有任何规律</strong>，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据搬移，<strong>直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置</strong>。</p>\n</blockquote>\n<p><strong>删除操作</strong></p>\n<blockquote>\n<p>要删除第 k 个位置的数据</p>\n<p>最好时间复杂度： O(1)</p>\n<p>最坏时间复杂度： O(n)</p>\n<p>平均情况时间复杂度: (1+2+…n)/n=O(n)</p>\n</blockquote>\n<p>在某些特殊场景下，我们并不一定非得追求数组中数据的连续性</p>\n<blockquote>\n<p>数组 a[10]中存储了 8 个元素：a，b，c，d，e，f，g，h。依次删除 a，b，c 三个元素。</p>\n<p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作<strong>并不是真正地搬移数据</strong>，只是<strong>记录数据已经被删除</strong>。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p>\n</blockquote>\n<h3 id=\"警惕数组的访问越界问题\"><a href=\"#警惕数组的访问越界问题\" class=\"headerlink\" title=\"警惕数组的访问越界问题\"></a>警惕数组的访问越界问题</h3><blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span>* argv[])</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">3</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-keyword\">for</span>(; i&lt;=<span class=\"hljs-number\">3</span>; i++)&#123;<br>        arr[i] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这段代码的运行结果并非是打印三行“hello word”，而是会无限打印“hello world”</p>\n<p>因为，数组大小为 3，a[0]，a[1]，a[2]，而我们的代码因为书写错误，导致 for 循环的结束条件错写为了 i&lt;=3 而非 i&lt;3，所以当 i=3 时，数组 a[3]访问越界。</p>\n<p>在 <strong>C 语言</strong>中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。</p>\n<p><strong>数组越界在 C 语言中是一种未决行为</strong>，并没有规定数组访问越界时编译器应该如何处理。因为，<strong>访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误</strong>。</p>\n</blockquote>\n<h3 id=\"容器能否完全替代数组？\"><a href=\"#容器能否完全替代数组？\" class=\"headerlink\" title=\"容器能否完全替代数组？\"></a>容器能否完全替代数组？</h3><p>ArrayList 最大的优势就是可以将很多数组操作的细节封装起来，还有一个优势，就是支持动态扩容。</p>\n<p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p>\n<p>如果使用 ArrayList，我们就完全不需要关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。</p>\n<blockquote>\n<p>因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小。</p>\n</blockquote>\n<ol>\n<li>Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</li>\n<li>如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</li>\n<li>当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList&lt;ArrayList<object> &gt; array。</object></li>\n</ol>\n<h3 id=\"为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？\"><a href=\"#为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？\" class=\"headerlink\" title=\"为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？\"></a>为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？</h3><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是<strong>“偏移（offset）”</strong>。</p>\n<p>如果用 a 来表示数组的首地址，a[0]就是偏移为 0 的位置，也就是首地址，a[k]就表示偏移 k 个 type_size 的位置，所以计算 a[k]的内存地址只需要用这个公式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">a[k]_address = base_address + k * type_size<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k]的内存地址就会变为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">a[k]_address = base_address + (k-1)*type_size<br></code></pre></td></tr></table></figure>\n<p>从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p>\n</blockquote>\n<p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以<strong>为了减少一次减法操作</strong>，数组选择了从 0 开始编号，而不是从 1 开始。</p>\n","more":"<p><a href=\"https://time.geekbang.org/column/intro/100017301?tab=catalog\">参考学习自·数据结构与算法之美</a></p>\n<h2 id=\"数组：为什么很多编程语言中数组都从0开始编号？\"><a href=\"#数组：为什么很多编程语言中数组都从0开始编号？\" class=\"headerlink\" title=\"数组：为什么很多编程语言中数组都从0开始编号？\"></a>数组：为什么很多编程语言中数组都从0开始编号？</h2><p>数组（Array）是一种<strong>线性表</strong>数据结构。它用一组<strong>连续</strong>的内存空间，来存储一组具有<strong>相同类型</strong>的数据。</p>\n<ol>\n<li><p>线性表（Linear List）</p>\n<p>线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。</p>\n</li>\n<li><p>连续的内存空间和相同类型的数据</p>\n</li>\n</ol>\n<blockquote>\n<img src=\"/article/32766/%E5%86%85%E5%AD%98%E5%9D%97%E5%9C%B0%E5%9D%80.jpg\" class title=\"内存块地址\">\n</blockquote>\n<p>计算机会给每个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs wiki\">a[i]_address = base_address + i * data_type_size<br></code></pre></td></tr></table></figure>\n<p><strong>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)</strong></p>\n<h3 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h3><p>数组为了保持内存数据的连续性，会导致插入、删除这两个操作比较低效</p>\n<p><strong>插入操作</strong></p>\n<blockquote>\n<p>假设数组的长度为 n，现在，如果需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，需要将第 k～n 这部分的元素都顺序地往后挪一位。</p>\n<p>最好时间复杂度： O(1)</p>\n<p>最坏时间复杂度： O(n)</p>\n<p>平均情况时间复杂度: (1+2+…n)/n=O(n)</p>\n<p>如果数组中的数据是<strong>有序</strong>的，在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。</p>\n<hr>\n<p>但是，如果数组中存储的数据并<strong>没有任何规律</strong>，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据搬移，<strong>直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置</strong>。</p>\n</blockquote>\n<p><strong>删除操作</strong></p>\n<blockquote>\n<p>要删除第 k 个位置的数据</p>\n<p>最好时间复杂度： O(1)</p>\n<p>最坏时间复杂度： O(n)</p>\n<p>平均情况时间复杂度: (1+2+…n)/n=O(n)</p>\n</blockquote>\n<p>在某些特殊场景下，我们并不一定非得追求数组中数据的连续性</p>\n<blockquote>\n<p>数组 a[10]中存储了 8 个元素：a，b，c，d，e，f，g，h。依次删除 a，b，c 三个元素。</p>\n<p>为了避免 d，e，f，g，h 这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作<strong>并不是真正地搬移数据</strong>，只是<strong>记录数据已经被删除</strong>。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</p>\n</blockquote>\n<h3 id=\"警惕数组的访问越界问题\"><a href=\"#警惕数组的访问越界问题\" class=\"headerlink\" title=\"警惕数组的访问越界问题\"></a>警惕数组的访问越界问题</h3><blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span>* argv[])</span></span>&#123;<br>    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> arr[<span class=\"hljs-number\">3</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-keyword\">for</span>(; i&lt;=<span class=\"hljs-number\">3</span>; i++)&#123;<br>        arr[i] = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;hello world\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这段代码的运行结果并非是打印三行“hello word”，而是会无限打印“hello world”</p>\n<p>因为，数组大小为 3，a[0]，a[1]，a[2]，而我们的代码因为书写错误，导致 for 循环的结束条件错写为了 i&lt;=3 而非 i&lt;3，所以当 i=3 时，数组 a[3]访问越界。</p>\n<p>在 <strong>C 语言</strong>中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的。根据我们前面讲的数组寻址公式，a[3]也会被定位到某块不属于数组的内存地址上，而这个地址正好是存储变量 i 的内存地址，那么 a[3]=0 就相当于 i=0，所以就会导致代码无限循环。</p>\n<p><strong>数组越界在 C 语言中是一种未决行为</strong>，并没有规定数组访问越界时编译器应该如何处理。因为，<strong>访问数组的本质就是访问一段连续内存，只要数组通过偏移计算得到的内存地址是可用的，那么程序就可能不会报任何错误</strong>。</p>\n</blockquote>\n<h3 id=\"容器能否完全替代数组？\"><a href=\"#容器能否完全替代数组？\" class=\"headerlink\" title=\"容器能否完全替代数组？\"></a>容器能否完全替代数组？</h3><p>ArrayList 最大的优势就是可以将很多数组操作的细节封装起来，还有一个优势，就是支持动态扩容。</p>\n<p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。</p>\n<p>如果使用 ArrayList，我们就完全不需要关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5 倍大小。</p>\n<blockquote>\n<p>因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小。</p>\n</blockquote>\n<ol>\n<li>Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。</li>\n<li>如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</li>\n<li>当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList&lt;ArrayList<object> &gt; array。</object></li>\n</ol>\n<h3 id=\"为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？\"><a href=\"#为什么大多数编程语言中，数组要从-0-开始编号，而不是从-1-开始呢？\" class=\"headerlink\" title=\"为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？\"></a>为什么大多数编程语言中，数组要从 0 开始编号，而不是从 1 开始呢？</h3><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是<strong>“偏移（offset）”</strong>。</p>\n<p>如果用 a 来表示数组的首地址，a[0]就是偏移为 0 的位置，也就是首地址，a[k]就表示偏移 k 个 type_size 的位置，所以计算 a[k]的内存地址只需要用这个公式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">a[k]_address = base_address + k * type_size<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>但是，如果数组从 1 开始计数，那我们计算数组元素 a[k]的内存地址就会变为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">a[k]_address = base_address + (k-1)*type_size<br></code></pre></td></tr></table></figure>\n<p>从 1 开始编号，每次随机访问数组元素都多了一次减法运算，对于 CPU 来说，就是多了一次减法指令。</p>\n</blockquote>\n<p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是其非常基础的编程操作，效率的优化就要尽可能做到极致。所以<strong>为了减少一次减法操作</strong>，数组选择了从 0 开始编号，而不是从 1 开始。</p>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"数组","path":"api/categories/数组.json"}],"tags":[{"name":"数据结构与算法,数组","path":"api/tags/数据结构与算法,数组.json"}]}