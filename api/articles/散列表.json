{"title":"散列表","slug":"散列表","date":"2022-05-15T01:47:00.000Z","updated":"2022-05-24T11:41:34.373Z","comments":true,"path":"api/articles/散列表.json","realPath":null,"excerpt":null,"covers":["/article/31130/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.jpg","/article/31130/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE.jpg","/article/31130/%E9%93%BE%E8%A1%A8%E6%B3%95.jpg","/article/31130/%E6%95%A3%E5%88%97%E8%A1%A8%E9%93%BE%E8%A1%A8URL.jpg"],"cover":"/images/theme/coverphoto/散列表（哈希表）.jpg","content":"<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><p><strong>散列表(Hash Table)，也叫“哈希表”或者“Hash 表”</strong></p>\n<p><strong>散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。</strong></p>\n<p>散列表用的就是数组支持按照下标随机访问的时候，时间复杂度是 O(1) 的特性。通过散列函数把元素的键值映射为下标，然后将数据存储在数组中对应下标的位置。按照键值查询元素时，我们用同样的散列函数，将键值转化数组下标，从对应的数组下标的位置取数据。</p>\n<h3 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h3><p>散列函数，顾名思义，它是一个函数。我们可以把它定义成 <strong>hash(key)</strong>，其中 key 表示元素的键值，hash(key) 的值表示经过散列函数计算得到的散列值。</p>\n<p><strong>散列函数设计的基本要求：</strong></p>\n<ol>\n<li>散列函数计算得到的散列值是一个非负整数；</li>\n<li>如果 key1 = key2，那 hash(key1) == hash(key2)；</li>\n<li>如果 key1 ≠ key2，那 hash(key1) ≠ hash(key2)。</li>\n</ol>\n<h3 id=\"散列冲突\"><a href=\"#散列冲突\" class=\"headerlink\" title=\"散列冲突\"></a>散列冲突</h3><p><strong>再好的散列函数也无法避免散列冲突</strong></p>\n<ol>\n<li><p>开放寻址法</p>\n<p>开放寻址法的<strong>核心思想</strong>是，如果出现了散列冲突，我们就重新探测一个空闲位置，将其插入。</p>\n<ol>\n<li><p>线性探测（Linear Probing）</p>\n<p><strong>插入数据</strong><br>往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p>\n<blockquote>\n<img src=\"/article/31130/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.jpg\" class title=\"线性探测插入数据\">\n<p>散列表的大小为 10，在元素 x 插入散列表之前，已经 6 个元素插入到散列表中。x 经过 Hash 算法之后，被散列到位置下标为 7 的位置，但是这个位置已经有数据了，所以就产生了冲突。</p>\n<p>于是顺序地往后一个一个找，看有没有空闲的位置，遍历到尾部都没有找到空闲的位置，于是我们再从表头开始找，直到找到空闲位置 2，于是将其插入到这个位置。</p>\n</blockquote>\n<p><strong>查找数据</strong></p>\n<p>在散列表中查找元素的过程有点儿类似插入过程。</p>\n<p>通过散列函数求出要查找元素的键值对应的散列值，然后比较数组中下标为散列值的元素和要查找的元素。如果相等，则说明就是我们要找的元素；否则就顺序往后依次查找。如果遍历到数组中的空闲位置，还没有找到，就说明要查找的元素并没有在散列表中。</p>\n<blockquote>\n<img src=\"/article/31130/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE.jpg\" class title=\"线性探测查找数据\">\n</blockquote>\n<p><strong>删除数据</strong></p>\n<p>删除数据时，不能单纯地把要删除的元素设置为空</p>\n<blockquote>\n<p>因为在查找的时候，一旦通过线性探测方法，找到一个空闲位置，就可以认定散列表中不存在这个数据。但是，如果这个空闲位置是我们后来删除的，就会导致原来的查找算法失效。本来存在的数据，会被认定为不存在。</p>\n</blockquote>\n<p>将删除的元素，<strong>特殊标记为 deleted</strong>。当线性探测查找的时候，遇到标记为 deleted 的空间，并不是停下来，而是继续往下探测。</p>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>**线性探测问题：**当散列表中插入的数据越来越多时，散列冲突发生的可能性就会越来越大，空闲位置会越来越少，线性探测的时间就会越来越久。极端情况下，可能需要探测整个散列表，所以最坏情况下的时间复杂度为 O(n)。同理，在删除和查找时，也有可能会线性探测整张散列表，才能找到要查找或者删除的数据。\n</code></pre><ol start=\"2\">\n<li><p>二次探测（Quadratic probing）</p>\n<p>所谓二次探测，跟线性探测很像，线性探测每次探测的步长是 1，那它探测的下标序列就是 hash(key)+0，hash(key)+1，hash(key)+2……而二次探测探测的步长就变成了原来的“二次方”，也就是说，它探测的下标序列就是 hash(key)+0，hash(key)+1<sup>2</sup>，hash(key)+2<sup>2</sup>……</p>\n</li>\n<li><p>双重散列（Double hashing）</p>\n<p>所谓双重散列，意思就是不仅要使用一个散列函数。我们使用一组散列函数 hash1(key)，hash2(key)，hash3(key)……我们先用第一个散列函数，如果计算得到的存储位置已经被占用，再用第二个散列函数，依次类推，直到找到空闲的存储位置。</p>\n</li>\n</ol>\n<p>   不管采用哪种探测方法，当散列表中空闲位置不多的时候，散列冲突的概率就会大大提高。为了尽可能保证散列表的操作效率，一般情况下，我们会<strong>尽可能保证散列表中有一定比例的空闲槽位</strong>。我们用<strong>装载因子（load factor）</strong>来表示空位的多少。</p>\n<p>   <strong>散列表的装载因子=填入表中的元素个数/散列表的长度</strong></p>\n<p>   装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降。</p>\n<ol start=\"2\">\n<li><p>链表法</p>\n<p>在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。</p>\n<blockquote>\n<img src=\"/article/31130/%E9%93%BE%E8%A1%A8%E6%B3%95.jpg\" class title=\"链表法\">\n</blockquote>\n<p>当插入的时候，我们只需要通过散列函数计算出对应的散列槽位，将其插入到对应链表中即可，所以插入的时间复杂度是 O(1)。</p>\n<p>当查找、删除一个元素时，同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除。</p>\n<p>时间复杂度跟链表的长度 k 成正比，也就是 O(k)。对于散列比较均匀的散列函数来说，理论上讲，k=n/m，其中 n 表示散列中数据的个数，m 表示散列表中“槽”的个数。</p>\n</li>\n</ol>\n<h3 id=\"如何选择冲突解决方法？\"><a href=\"#如何选择冲突解决方法？\" class=\"headerlink\" title=\"如何选择冲突解决方法？\"></a>如何选择冲突解决方法？</h3><ol>\n<li><p>开放寻址法</p>\n<p><strong>优点：</strong>开放寻址法不像链表法，需要拉很多链表。散列表中的数据都存储在数组中，可以有效地利用 CPU 缓存加快查询速度。而且，这种方法实现的散列表，序列化起来比较简单。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>用开放寻址法解决冲突的散列表，删除数据的时候比较麻烦，需要特殊标记已经删除掉的数据。</li>\n<li>而且，在开放寻址法中，所有的数据都存储在一个数组中，比起链表法来说，冲突的代价更高。所以，使用开放寻址法解决冲突的散列表，装载因子的上限不能太大。这也导致这种方法比链表法更浪费内存空间。</li>\n</ol>\n<p><strong>当数据量比较小、装载因子小的时候，适合采用开放寻址法。这也是 Java 中的ThreadLocalMap使用开放寻址法解决散列冲突的原因。</strong></p>\n</li>\n<li><p>链表法</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li>首先，链表法对内存的利用率比开放寻址法要高。因为链表结点可以在需要的时候再创建，并不需要像开放寻址法那样事先申请好。</li>\n<li>链表法比起开放寻址法，对大装载因子的容忍度更高。开放寻址法只能适用装载因子小于 1 的情况。接近 1 时，就可能会有大量的散列冲突，导致大量的探测、再散列等，性能会下降很多。但是对于链表法来说，只要散列函数的值随机均匀，即便装载因子变成 10，也就是链表的长度变长了而已，虽然查找效率有所下降，但是比起顺序查找还是快很多。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>链表因为要存储指针，所以对于比较小的对象的存储，是比较消耗内存的，还有可能会让内存的消耗翻倍。</li>\n<li>因为链表中的结点是零散分布在内存中的，不是连续的，所以对 CPU 缓存是不友好的，这方面对于执行效率也有一定的影响。</li>\n</ol>\n<p><strong>基于链表的散列冲突处理方法比较适合存储大对象、大数据量的散列表，而且，比起开放寻址法，它更加灵活，支持更多的优化策略，比如用红黑树代替链表。</strong></p>\n</li>\n</ol>\n<h3 id=\"如何设计散列函数？\"><a href=\"#如何设计散列函数？\" class=\"headerlink\" title=\"如何设计散列函数？\"></a>如何设计散列函数？</h3><ol>\n<li><p>散列函数的设计不能太复杂</p>\n<p>过于复杂的散列函数，势必会消耗很多计算时间，也就间接地影响到散列表的性能</p>\n</li>\n<li><p>散列函数生成的值要尽可能随机并且均匀分布</p>\n<p>这样才能避免或者最小化散列冲突，而且即便出现冲突，散列到每个槽里的数据也会比较平均，不会出现某个槽内数据特别多的情况</p>\n</li>\n</ol>\n<h3 id=\"装载因子过大了怎么办？\"><a href=\"#装载因子过大了怎么办？\" class=\"headerlink\" title=\"装载因子过大了怎么办？\"></a>装载因子过大了怎么办？</h3><p>装载因子越大，说明散列表中的元素越多，空闲位置越少，散列冲突的概率就越大。不仅插入数据的过程要多次寻址或者拉很长的链，查找的过程也会因此变得很慢。</p>\n<p>针对散列表，当装载因子过大时，可以进行<strong>动态扩容</strong>，重新申请一个更大的散列表，将数据搬移到这个新散列表中。</p>\n<p>针对散列表的扩容，因为散列表的大小变了，数据的存储位置也变了，所以需要通过散列函数重新计算每个数据的存储位置。</p>\n<p>装载因子阈值的设置要权衡时间、空间复杂度。如果内存空间不紧张，对执行效率要求很高，可以降低负载因子的阈值；相反，如果内存空间紧张，对执行效率要求又不高，可以增加负载因子的值，甚至可以大于 1。</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><ol>\n<li><p><strong>插入数据时间复杂度</strong></p>\n<p><strong>最好时间复杂度：</strong>插入一个数据，最好情况下，不需要扩容，最好时间复杂度是 O(1)。</p>\n<p><strong>最坏时间复杂度：</strong>最坏情况下，散列表装载因子过高，启动扩容，需要重新申请内存空间，重新计算哈希位置，并且搬移数据，所以时间复杂度是 O(n)。</p>\n<p><strong>摊还时间复杂度：</strong>用摊还分析法，均摊情况下，时间复杂度接近最好情况，就是 O(1)。</p>\n</li>\n<li><p><strong>删除数据时间复杂度</strong></p>\n<p>删除数据时间复杂度为O(1)。</p>\n<p>对于动态散列表，随着数据的删除，散列表中的数据会越来越少，空闲空间会越来越多。如果我们对空间消耗非常敏感，我们可以在装载因子小于某个值之后，启动动态缩容。</p>\n</li>\n</ol>\n<h3 id=\"如何避免低效的扩容？\"><a href=\"#如何避免低效的扩容？\" class=\"headerlink\" title=\"如何避免低效的扩容？\"></a>如何避免低效的扩容？</h3><p>为了解决一次性扩容耗时过多的情况，我们可以将扩容操作穿插在插入操作的过程中，分批完成。当装载因子触达阈值之后，我们只申请新空间，但并不将老的数据搬移到新散列表中。</p>\n<p>当有新数据要插入时，将新数据插入新散列表中，并且从老的散列表中拿出一个数据放入到新散列表。每次插入一个数据到散列表，都重复上面的过程。</p>\n<p>经过多次插入操作之后，老的散列表中的数据就一点一点全部搬移到新散列表中了。这样没有了集中的一次性数据搬移，插入操作就都变得很快了。</p>\n<p>对于查询操作，为了兼容了新、老散列表中的数据，先从新散列表中查找，如果没有找到，再去老的散列表中查找。</p>\n<p>通过这样均摊的方法，将一次性扩容的代价，均摊到多次插入操作中，就避免了一次性扩容耗时过多的情况。<strong>这种实现方式，任何情况下，插入一个数据的时间复杂度都是 O(1)。</strong></p>\n<h3 id=\"工业级散列表举例分析（Java-HashMap）\"><a href=\"#工业级散列表举例分析（Java-HashMap）\" class=\"headerlink\" title=\"工业级散列表举例分析（Java HashMap）\"></a>工业级散列表举例分析（Java HashMap）</h3><ol>\n<li><p>初始大小</p>\n<p>HashMap 默认的初始大小是 16，当然这个默认值是可以设置的，如果事先知道大概的数据量有多大，可以通过修改默认初始大小，减少动态扩容的次数，这样会大大提高 HashMap 的性能。</p>\n</li>\n<li><p>装载因子和动态扩容</p>\n<p>最大装载因子默认是 0.75，当 HashMap 中元素个数超过 0.75*capacity（capacity 表示散列表的容量）的时候，就会启动扩容，每次扩容都会扩容为原来的两倍大小。</p>\n</li>\n<li><p>散列冲突解决方法</p>\n<p>HashMap 底层采用链表法来解决冲突。即使负载因子和散列函数设计得再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响 HashMap 的性能。</p>\n<p>在 JDK1.8 版本中，为了对 HashMap 做进一步优化，<strong>引入了红黑树</strong>。而当链表长度太长（默认超过 8）时，链表就转换为红黑树。但不是所有的链表长度为8后都会转成树，还需要判断存放key值的数组桶长度是否小于64。如果小于则需要扩容，扩容后链表上的数据会被拆分散列的相应的桶节点上，也就把链表长度缩短了。</p>\n<p>可以利用红黑树快速增删改查的特点，提高 HashMap 的性能。当红黑树结点个数少于 8 个的时候，又会将红黑树转化为链表。因为在数据量较小的情况下，红黑树要维护平衡，比起链表来，性能上的优势并不明显。</p>\n</li>\n<li><p>散列函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">hash</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> h = key.hashCode()；<br>  <span class=\"hljs-keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"hljs-number\">16</span>)) &amp; (capicity -<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//capicity表示散列表的大小</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>hashCode() 返回的是 Java 对象的 hash code。比如 String 类型的对象的 hashCode() 就是下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">hashCode</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> var1 = <span class=\"hljs-keyword\">this</span>.hash;<br>  <span class=\"hljs-keyword\">if</span>(var1 == <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.value.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">char</span>[] var2 = <span class=\"hljs-keyword\">this</span>.value;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> var3 = <span class=\"hljs-number\">0</span>; var3 &lt; <span class=\"hljs-keyword\">this</span>.value.length; ++var3) &#123;<br>      var1 = <span class=\"hljs-number\">31</span> * var1 + var2[var3];<br>    &#125;<br>    <span class=\"hljs-keyword\">this</span>.hash = var1;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> var1;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：如何设计一个工业级的散列函数？</strong></p>\n<blockquote>\n<p>何为一个工业级的散列表？工业级的散列表应该具有哪些特性？</p>\n<ol>\n<li>支持快速地查询、插入、删除操作；</li>\n<li>内存占用合理，不能浪费过多的内存空间；</li>\n<li>性能稳定，极端情况下，散列表的性能也不会退化到无法接受的情况。</li>\n</ol>\n</blockquote>\n<p>设计思路：</p>\n<ol>\n<li>设计一个合适的散列函数；</li>\n<li>定义装载因子阈值，并且设计动态扩容策略；</li>\n<li>选择合适的散列冲突解决方法。</li>\n</ol>\n</blockquote>\n<h3 id=\"LRU-缓存淘汰算法\"><a href=\"#LRU-缓存淘汰算法\" class=\"headerlink\" title=\"LRU 缓存淘汰算法\"></a>LRU 缓存淘汰算法</h3><p><strong>借助散列表，可以把 LRU 缓存淘汰算法的时间复杂度降低为 O(1)</strong></p>\n<blockquote>\n<p>如何通过链表实现 LRU 缓存淘汰算法?</p>\n<p>需要维护一个按照访问时间从大到小有序排列的链表结构。因为缓存大小有限，当缓存空间不够，需要淘汰一个数据的时候，直接将链表头部的结点删除。</p>\n<p>当要缓存某个数据的时候，先在链表中查找这个数据。如果没有找到，则直接将数据放到链表的尾部；如果找到了，我们就把它移动到链表的尾部。因为查找数据需要遍历链表，所以单纯用链表实现的 LRU 缓存淘汰算法的时间复杂很高，是 O(n)。</p>\n</blockquote>\n<p>一个缓存（cache）系统主要包含下面这几个操作：</p>\n<ol>\n<li>往缓存中添加一个数据；</li>\n<li>从缓存中删除一个数据；</li>\n<li>在缓存中查找一个数据。</li>\n</ol>\n<blockquote>\n<p>单纯地采用链表的话，时间复杂度只能是 O(n)</p>\n<p>将散列表和链表两种数据结构组合使用，可以将这三个操作的时间复杂度都降低到 <strong>O(1)</strong></p>\n</blockquote>\n<img src=\"/article/31130/%E6%95%A3%E5%88%97%E8%A1%A8%E9%93%BE%E8%A1%A8URL.jpg\" class title=\"散列表链表URL\">\n<p>使用双向链表存储数据，链表中的每个结点处理存储数据（data）、前驱指针（prev）、后继指针（next）之外，还新增了一个特殊的字段 hnext</p>\n<p>散列表是通过链表法解决散列冲突的，所以每个结点会在两条链中。一个链是双向链表，另一个链是散列表中的拉链。前驱和后继指针是为了将结点串在双向链表中，hnext 指针是为了将结点串在散列表的拉链中。</p>\n<p><strong>如何查找一个数据：</strong>散列表中查找数据的时间复杂度接近 O(1)，所以通过散列表，可以很快地在缓存中找到一个数据。当找到数据之后，还需要将它移动到双向链表的尾部。</p>\n<p><strong>如何删除一个数据：</strong>需要找到数据所在的结点，然后将结点删除。借助散列表，可以在 O(1) 时间复杂度里找到要删除的结点。因为链表是双向链表，双向链表可以通过前驱指针 O(1) 时间复杂度获取前驱结点，所以在双向链表中，删除结点只需要 O(1) 的时间复杂度。</p>\n<p><strong>如何添加一个数据：</strong>需要先看这个数据是否已经在缓存中。如果已经在其中，需要将其移动到双向链表的尾部；如果不在其中，还要看缓存有没有满。如果满了，则将双向链表头部的结点删除，然后再将数据放到链表的尾部；如果没有满，就直接将数据放到链表的尾部。</p>\n","more":"<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><p><strong>散列表(Hash Table)，也叫“哈希表”或者“Hash 表”</strong></p>\n<p><strong>散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。</strong></p>\n<p>散列表用的就是数组支持按照下标随机访问的时候，时间复杂度是 O(1) 的特性。通过散列函数把元素的键值映射为下标，然后将数据存储在数组中对应下标的位置。按照键值查询元素时，我们用同样的散列函数，将键值转化数组下标，从对应的数组下标的位置取数据。</p>\n<h3 id=\"散列函数\"><a href=\"#散列函数\" class=\"headerlink\" title=\"散列函数\"></a>散列函数</h3><p>散列函数，顾名思义，它是一个函数。我们可以把它定义成 <strong>hash(key)</strong>，其中 key 表示元素的键值，hash(key) 的值表示经过散列函数计算得到的散列值。</p>\n<p><strong>散列函数设计的基本要求：</strong></p>\n<ol>\n<li>散列函数计算得到的散列值是一个非负整数；</li>\n<li>如果 key1 = key2，那 hash(key1) == hash(key2)；</li>\n<li>如果 key1 ≠ key2，那 hash(key1) ≠ hash(key2)。</li>\n</ol>\n<h3 id=\"散列冲突\"><a href=\"#散列冲突\" class=\"headerlink\" title=\"散列冲突\"></a>散列冲突</h3><p><strong>再好的散列函数也无法避免散列冲突</strong></p>\n<ol>\n<li><p>开放寻址法</p>\n<p>开放寻址法的<strong>核心思想</strong>是，如果出现了散列冲突，我们就重新探测一个空闲位置，将其插入。</p>\n<ol>\n<li><p>线性探测（Linear Probing）</p>\n<p><strong>插入数据</strong><br>往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p>\n<blockquote>\n<img src=\"/article/31130/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.jpg\" class title=\"线性探测插入数据\">\n<p>散列表的大小为 10，在元素 x 插入散列表之前，已经 6 个元素插入到散列表中。x 经过 Hash 算法之后，被散列到位置下标为 7 的位置，但是这个位置已经有数据了，所以就产生了冲突。</p>\n<p>于是顺序地往后一个一个找，看有没有空闲的位置，遍历到尾部都没有找到空闲的位置，于是我们再从表头开始找，直到找到空闲位置 2，于是将其插入到这个位置。</p>\n</blockquote>\n<p><strong>查找数据</strong></p>\n<p>在散列表中查找元素的过程有点儿类似插入过程。</p>\n<p>通过散列函数求出要查找元素的键值对应的散列值，然后比较数组中下标为散列值的元素和要查找的元素。如果相等，则说明就是我们要找的元素；否则就顺序往后依次查找。如果遍历到数组中的空闲位置，还没有找到，就说明要查找的元素并没有在散列表中。</p>\n<blockquote>\n<img src=\"/article/31130/%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE.jpg\" class title=\"线性探测查找数据\">\n</blockquote>\n<p><strong>删除数据</strong></p>\n<p>删除数据时，不能单纯地把要删除的元素设置为空</p>\n<blockquote>\n<p>因为在查找的时候，一旦通过线性探测方法，找到一个空闲位置，就可以认定散列表中不存在这个数据。但是，如果这个空闲位置是我们后来删除的，就会导致原来的查找算法失效。本来存在的数据，会被认定为不存在。</p>\n</blockquote>\n<p>将删除的元素，<strong>特殊标记为 deleted</strong>。当线性探测查找的时候，遇到标记为 deleted 的空间，并不是停下来，而是继续往下探测。</p>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>**线性探测问题：**当散列表中插入的数据越来越多时，散列冲突发生的可能性就会越来越大，空闲位置会越来越少，线性探测的时间就会越来越久。极端情况下，可能需要探测整个散列表，所以最坏情况下的时间复杂度为 O(n)。同理，在删除和查找时，也有可能会线性探测整张散列表，才能找到要查找或者删除的数据。\n</code></pre><ol start=\"2\">\n<li><p>二次探测（Quadratic probing）</p>\n<p>所谓二次探测，跟线性探测很像，线性探测每次探测的步长是 1，那它探测的下标序列就是 hash(key)+0，hash(key)+1，hash(key)+2……而二次探测探测的步长就变成了原来的“二次方”，也就是说，它探测的下标序列就是 hash(key)+0，hash(key)+1<sup>2</sup>，hash(key)+2<sup>2</sup>……</p>\n</li>\n<li><p>双重散列（Double hashing）</p>\n<p>所谓双重散列，意思就是不仅要使用一个散列函数。我们使用一组散列函数 hash1(key)，hash2(key)，hash3(key)……我们先用第一个散列函数，如果计算得到的存储位置已经被占用，再用第二个散列函数，依次类推，直到找到空闲的存储位置。</p>\n</li>\n</ol>\n<p>   不管采用哪种探测方法，当散列表中空闲位置不多的时候，散列冲突的概率就会大大提高。为了尽可能保证散列表的操作效率，一般情况下，我们会<strong>尽可能保证散列表中有一定比例的空闲槽位</strong>。我们用<strong>装载因子（load factor）</strong>来表示空位的多少。</p>\n<p>   <strong>散列表的装载因子=填入表中的元素个数/散列表的长度</strong></p>\n<p>   装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降。</p>\n<ol start=\"2\">\n<li><p>链表法</p>\n<p>在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。</p>\n<blockquote>\n<img src=\"/article/31130/%E9%93%BE%E8%A1%A8%E6%B3%95.jpg\" class title=\"链表法\">\n</blockquote>\n<p>当插入的时候，我们只需要通过散列函数计算出对应的散列槽位，将其插入到对应链表中即可，所以插入的时间复杂度是 O(1)。</p>\n<p>当查找、删除一个元素时，同样通过散列函数计算出对应的槽，然后遍历链表查找或者删除。</p>\n<p>时间复杂度跟链表的长度 k 成正比，也就是 O(k)。对于散列比较均匀的散列函数来说，理论上讲，k=n/m，其中 n 表示散列中数据的个数，m 表示散列表中“槽”的个数。</p>\n</li>\n</ol>\n<h3 id=\"如何选择冲突解决方法？\"><a href=\"#如何选择冲突解决方法？\" class=\"headerlink\" title=\"如何选择冲突解决方法？\"></a>如何选择冲突解决方法？</h3><ol>\n<li><p>开放寻址法</p>\n<p><strong>优点：</strong>开放寻址法不像链表法，需要拉很多链表。散列表中的数据都存储在数组中，可以有效地利用 CPU 缓存加快查询速度。而且，这种方法实现的散列表，序列化起来比较简单。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>用开放寻址法解决冲突的散列表，删除数据的时候比较麻烦，需要特殊标记已经删除掉的数据。</li>\n<li>而且，在开放寻址法中，所有的数据都存储在一个数组中，比起链表法来说，冲突的代价更高。所以，使用开放寻址法解决冲突的散列表，装载因子的上限不能太大。这也导致这种方法比链表法更浪费内存空间。</li>\n</ol>\n<p><strong>当数据量比较小、装载因子小的时候，适合采用开放寻址法。这也是 Java 中的ThreadLocalMap使用开放寻址法解决散列冲突的原因。</strong></p>\n</li>\n<li><p>链表法</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li>首先，链表法对内存的利用率比开放寻址法要高。因为链表结点可以在需要的时候再创建，并不需要像开放寻址法那样事先申请好。</li>\n<li>链表法比起开放寻址法，对大装载因子的容忍度更高。开放寻址法只能适用装载因子小于 1 的情况。接近 1 时，就可能会有大量的散列冲突，导致大量的探测、再散列等，性能会下降很多。但是对于链表法来说，只要散列函数的值随机均匀，即便装载因子变成 10，也就是链表的长度变长了而已，虽然查找效率有所下降，但是比起顺序查找还是快很多。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>链表因为要存储指针，所以对于比较小的对象的存储，是比较消耗内存的，还有可能会让内存的消耗翻倍。</li>\n<li>因为链表中的结点是零散分布在内存中的，不是连续的，所以对 CPU 缓存是不友好的，这方面对于执行效率也有一定的影响。</li>\n</ol>\n<p><strong>基于链表的散列冲突处理方法比较适合存储大对象、大数据量的散列表，而且，比起开放寻址法，它更加灵活，支持更多的优化策略，比如用红黑树代替链表。</strong></p>\n</li>\n</ol>\n<h3 id=\"如何设计散列函数？\"><a href=\"#如何设计散列函数？\" class=\"headerlink\" title=\"如何设计散列函数？\"></a>如何设计散列函数？</h3><ol>\n<li><p>散列函数的设计不能太复杂</p>\n<p>过于复杂的散列函数，势必会消耗很多计算时间，也就间接地影响到散列表的性能</p>\n</li>\n<li><p>散列函数生成的值要尽可能随机并且均匀分布</p>\n<p>这样才能避免或者最小化散列冲突，而且即便出现冲突，散列到每个槽里的数据也会比较平均，不会出现某个槽内数据特别多的情况</p>\n</li>\n</ol>\n<h3 id=\"装载因子过大了怎么办？\"><a href=\"#装载因子过大了怎么办？\" class=\"headerlink\" title=\"装载因子过大了怎么办？\"></a>装载因子过大了怎么办？</h3><p>装载因子越大，说明散列表中的元素越多，空闲位置越少，散列冲突的概率就越大。不仅插入数据的过程要多次寻址或者拉很长的链，查找的过程也会因此变得很慢。</p>\n<p>针对散列表，当装载因子过大时，可以进行<strong>动态扩容</strong>，重新申请一个更大的散列表，将数据搬移到这个新散列表中。</p>\n<p>针对散列表的扩容，因为散列表的大小变了，数据的存储位置也变了，所以需要通过散列函数重新计算每个数据的存储位置。</p>\n<p>装载因子阈值的设置要权衡时间、空间复杂度。如果内存空间不紧张，对执行效率要求很高，可以降低负载因子的阈值；相反，如果内存空间紧张，对执行效率要求又不高，可以增加负载因子的值，甚至可以大于 1。</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><ol>\n<li><p><strong>插入数据时间复杂度</strong></p>\n<p><strong>最好时间复杂度：</strong>插入一个数据，最好情况下，不需要扩容，最好时间复杂度是 O(1)。</p>\n<p><strong>最坏时间复杂度：</strong>最坏情况下，散列表装载因子过高，启动扩容，需要重新申请内存空间，重新计算哈希位置，并且搬移数据，所以时间复杂度是 O(n)。</p>\n<p><strong>摊还时间复杂度：</strong>用摊还分析法，均摊情况下，时间复杂度接近最好情况，就是 O(1)。</p>\n</li>\n<li><p><strong>删除数据时间复杂度</strong></p>\n<p>删除数据时间复杂度为O(1)。</p>\n<p>对于动态散列表，随着数据的删除，散列表中的数据会越来越少，空闲空间会越来越多。如果我们对空间消耗非常敏感，我们可以在装载因子小于某个值之后，启动动态缩容。</p>\n</li>\n</ol>\n<h3 id=\"如何避免低效的扩容？\"><a href=\"#如何避免低效的扩容？\" class=\"headerlink\" title=\"如何避免低效的扩容？\"></a>如何避免低效的扩容？</h3><p>为了解决一次性扩容耗时过多的情况，我们可以将扩容操作穿插在插入操作的过程中，分批完成。当装载因子触达阈值之后，我们只申请新空间，但并不将老的数据搬移到新散列表中。</p>\n<p>当有新数据要插入时，将新数据插入新散列表中，并且从老的散列表中拿出一个数据放入到新散列表。每次插入一个数据到散列表，都重复上面的过程。</p>\n<p>经过多次插入操作之后，老的散列表中的数据就一点一点全部搬移到新散列表中了。这样没有了集中的一次性数据搬移，插入操作就都变得很快了。</p>\n<p>对于查询操作，为了兼容了新、老散列表中的数据，先从新散列表中查找，如果没有找到，再去老的散列表中查找。</p>\n<p>通过这样均摊的方法，将一次性扩容的代价，均摊到多次插入操作中，就避免了一次性扩容耗时过多的情况。<strong>这种实现方式，任何情况下，插入一个数据的时间复杂度都是 O(1)。</strong></p>\n<h3 id=\"工业级散列表举例分析（Java-HashMap）\"><a href=\"#工业级散列表举例分析（Java-HashMap）\" class=\"headerlink\" title=\"工业级散列表举例分析（Java HashMap）\"></a>工业级散列表举例分析（Java HashMap）</h3><ol>\n<li><p>初始大小</p>\n<p>HashMap 默认的初始大小是 16，当然这个默认值是可以设置的，如果事先知道大概的数据量有多大，可以通过修改默认初始大小，减少动态扩容的次数，这样会大大提高 HashMap 的性能。</p>\n</li>\n<li><p>装载因子和动态扩容</p>\n<p>最大装载因子默认是 0.75，当 HashMap 中元素个数超过 0.75*capacity（capacity 表示散列表的容量）的时候，就会启动扩容，每次扩容都会扩容为原来的两倍大小。</p>\n</li>\n<li><p>散列冲突解决方法</p>\n<p>HashMap 底层采用链表法来解决冲突。即使负载因子和散列函数设计得再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响 HashMap 的性能。</p>\n<p>在 JDK1.8 版本中，为了对 HashMap 做进一步优化，<strong>引入了红黑树</strong>。而当链表长度太长（默认超过 8）时，链表就转换为红黑树。但不是所有的链表长度为8后都会转成树，还需要判断存放key值的数组桶长度是否小于64。如果小于则需要扩容，扩容后链表上的数据会被拆分散列的相应的桶节点上，也就把链表长度缩短了。</p>\n<p>可以利用红黑树快速增删改查的特点，提高 HashMap 的性能。当红黑树结点个数少于 8 个的时候，又会将红黑树转化为链表。因为在数据量较小的情况下，红黑树要维护平衡，比起链表来，性能上的优势并不明显。</p>\n</li>\n<li><p>散列函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">hash</span><span class=\"hljs-params\">(Object key)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> h = key.hashCode()；<br>  <span class=\"hljs-keyword\">return</span> (h ^ (h &gt;&gt;&gt; <span class=\"hljs-number\">16</span>)) &amp; (capicity -<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//capicity表示散列表的大小</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>hashCode() 返回的是 Java 对象的 hash code。比如 String 类型的对象的 hashCode() 就是下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">hashCode</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> var1 = <span class=\"hljs-keyword\">this</span>.hash;<br>  <span class=\"hljs-keyword\">if</span>(var1 == <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.value.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>    <span class=\"hljs-keyword\">char</span>[] var2 = <span class=\"hljs-keyword\">this</span>.value;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> var3 = <span class=\"hljs-number\">0</span>; var3 &lt; <span class=\"hljs-keyword\">this</span>.value.length; ++var3) &#123;<br>      var1 = <span class=\"hljs-number\">31</span> * var1 + var2[var3];<br>    &#125;<br>    <span class=\"hljs-keyword\">this</span>.hash = var1;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> var1;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：如何设计一个工业级的散列函数？</strong></p>\n<blockquote>\n<p>何为一个工业级的散列表？工业级的散列表应该具有哪些特性？</p>\n<ol>\n<li>支持快速地查询、插入、删除操作；</li>\n<li>内存占用合理，不能浪费过多的内存空间；</li>\n<li>性能稳定，极端情况下，散列表的性能也不会退化到无法接受的情况。</li>\n</ol>\n</blockquote>\n<p>设计思路：</p>\n<ol>\n<li>设计一个合适的散列函数；</li>\n<li>定义装载因子阈值，并且设计动态扩容策略；</li>\n<li>选择合适的散列冲突解决方法。</li>\n</ol>\n</blockquote>\n<h3 id=\"LRU-缓存淘汰算法\"><a href=\"#LRU-缓存淘汰算法\" class=\"headerlink\" title=\"LRU 缓存淘汰算法\"></a>LRU 缓存淘汰算法</h3><p><strong>借助散列表，可以把 LRU 缓存淘汰算法的时间复杂度降低为 O(1)</strong></p>\n<blockquote>\n<p>如何通过链表实现 LRU 缓存淘汰算法?</p>\n<p>需要维护一个按照访问时间从大到小有序排列的链表结构。因为缓存大小有限，当缓存空间不够，需要淘汰一个数据的时候，直接将链表头部的结点删除。</p>\n<p>当要缓存某个数据的时候，先在链表中查找这个数据。如果没有找到，则直接将数据放到链表的尾部；如果找到了，我们就把它移动到链表的尾部。因为查找数据需要遍历链表，所以单纯用链表实现的 LRU 缓存淘汰算法的时间复杂很高，是 O(n)。</p>\n</blockquote>\n<p>一个缓存（cache）系统主要包含下面这几个操作：</p>\n<ol>\n<li>往缓存中添加一个数据；</li>\n<li>从缓存中删除一个数据；</li>\n<li>在缓存中查找一个数据。</li>\n</ol>\n<blockquote>\n<p>单纯地采用链表的话，时间复杂度只能是 O(n)</p>\n<p>将散列表和链表两种数据结构组合使用，可以将这三个操作的时间复杂度都降低到 <strong>O(1)</strong></p>\n</blockquote>\n<img src=\"/article/31130/%E6%95%A3%E5%88%97%E8%A1%A8%E9%93%BE%E8%A1%A8URL.jpg\" class title=\"散列表链表URL\">\n<p>使用双向链表存储数据，链表中的每个结点处理存储数据（data）、前驱指针（prev）、后继指针（next）之外，还新增了一个特殊的字段 hnext</p>\n<p>散列表是通过链表法解决散列冲突的，所以每个结点会在两条链中。一个链是双向链表，另一个链是散列表中的拉链。前驱和后继指针是为了将结点串在双向链表中，hnext 指针是为了将结点串在散列表的拉链中。</p>\n<p><strong>如何查找一个数据：</strong>散列表中查找数据的时间复杂度接近 O(1)，所以通过散列表，可以很快地在缓存中找到一个数据。当找到数据之后，还需要将它移动到双向链表的尾部。</p>\n<p><strong>如何删除一个数据：</strong>需要找到数据所在的结点，然后将结点删除。借助散列表，可以在 O(1) 时间复杂度里找到要删除的结点。因为链表是双向链表，双向链表可以通过前驱指针 O(1) 时间复杂度获取前驱结点，所以在双向链表中，删除结点只需要 O(1) 的时间复杂度。</p>\n<p><strong>如何添加一个数据：</strong>需要先看这个数据是否已经在缓存中。如果已经在其中，需要将其移动到双向链表的尾部；如果不在其中，还要看缓存有没有满。如果满了，则将双向链表头部的结点删除，然后再将数据放到链表的尾部；如果没有满，就直接将数据放到链表的尾部。</p>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"散列表","path":"api/categories/散列表.json"}],"tags":[{"name":"数据结构与算法,散列表","path":"api/tags/数据结构与算法,散列表.json"}]}