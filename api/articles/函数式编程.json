{"title":"函数式编程","slug":"函数式编程","date":"2022-04-25T02:34:35.000Z","updated":"2022-05-24T11:41:34.372Z","comments":true,"path":"api/articles/函数式编程.json","realPath":null,"excerpt":null,"covers":["https://img2020.cnblogs.com/blog/2026387/202011/2026387-20201126155856126-577400707.jpg","/article/62985/Stream%E6%93%8D%E4%BD%9C%E5%88%86%E7%B1%BB.png"],"cover":"https://img2020.cnblogs.com/blog/2026387/202011/2026387-20201126155856126-577400707.jpg","content":"<p><strong>函数式编程关心数据的映射，命令式编程关心解决问题的步骤</strong></p>\n<p>函数式编程是种编程方式，它将电脑运算视为函数的计算。函数编程语言最重要的基础是λ演算（lambda calculus），而且λ演算的函数可以接受函数当作输入（参数）和输出（返回值）。</p>\n<h2 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h2><p>Lambda 表达式（lambda expression）是一个<a href=\"https://baike.baidu.com/item/匿名函数/4337265\">匿名函数</a>，Lambda表达式基于数学中的<a href=\"https://baike.baidu.com/item/λ演算\">λ演算</a>得名，直接对应于其中的lambda抽象（lambda abstraction），是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示<a href=\"https://baike.baidu.com/item/闭包/10908873\">闭包</a>（注意和数学传统意义上的不同）。</p>\n<p><strong>核心原则：可推导可省略</strong></p>\n<p><strong>基本格式：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">(参数列表)-&gt;(代码)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>实例一：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;新线程中run方法被执行了&quot;</span>);<br>      &#125;     <br>    &#125;).start();<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> <span class=\"hljs-keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"hljs-string\">&quot;新线程中run方法被执行了&quot;</span>)).start();<br>  &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p> 实例二：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntBinaryOperator;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span> i = calculateNum(<span class=\"hljs-keyword\">new</span> IntBinaryOperator() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">applyAsInt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> left, <span class=\"hljs-keyword\">int</span> right)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> left + right;<br>      &#125;<br>    &#125;);<br>    System.out.println(i);<br>   <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calculateNum</span><span class=\"hljs-params\">(IntBinaryOperator operator)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;<br>   <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">20</span>;<br>    <span class=\"hljs-keyword\">return</span> operator.applyAsInt(a, b);<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntBinaryOperator;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br><span class=\"hljs-keyword\">int</span> i = calculateNum((<span class=\"hljs-keyword\">int</span> left, <span class=\"hljs-keyword\">int</span> right) -&gt; &#123;<br>     <span class=\"hljs-keyword\">return</span> left + right;<br>   &#125;);<br>    System.out.println(i);<br>   &#125;<br>   <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calculateNum</span><span class=\"hljs-params\">(IntBinaryOperator operator)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;<br>   <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">20</span>;<br>    <span class=\"hljs-keyword\">return</span> operator.applyAsInt(a, b);<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>实例三：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> printNum(<span class=\"hljs-keyword\">new</span> IntPredicate() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> value % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;<br>      &#125;<br>    &#125;);<br>   &#125;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(IntPredicate predicate)</span> </span>&#123;<br>   <span class=\"hljs-keyword\">int</span> arr[] = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i : arr) &#123;<br>      <span class=\"hljs-keyword\">if</span> (predicate.test(i)) &#123;<br>        System.out.println(i);<br>      &#125;<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;\t<br>\tprintNum((<span class=\"hljs-keyword\">int</span> value) -&gt; &#123;<br>     <span class=\"hljs-keyword\">return</span> value % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;<br>   &#125;);<br>   &#125;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(IntPredicate predicate)</span> </span>&#123;<br>   <span class=\"hljs-keyword\">int</span> arr[] = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i : arr) &#123;<br>      <span class=\"hljs-keyword\">if</span> (predicate.test(i)) &#123;<br>        System.out.println(i);<br>      &#125;<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p> 实例四：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> Integer integer = typeConver(<span class=\"hljs-keyword\">new</span> Function&lt;String, Integer&gt;() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(String s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> Integer.valueOf(s);<br>      &#125;<br>    &#125;);<br>    System.out.println(integer);<br>   &#125;<br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;R&gt; <span class=\"hljs-function\">R <span class=\"hljs-title\">typeConver</span><span class=\"hljs-params\">(Function&lt;String,R&gt; function)</span></span>&#123;<br>   String str = <span class=\"hljs-string\">&quot;1235&quot;</span>;<br>   R result = function.apply(str);<br>    <span class=\"hljs-keyword\">return</span> result;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> Integer integer = typeConver((String s) -&gt; &#123;<br>     <span class=\"hljs-keyword\">return</span> Integer.valueOf(s);<br>    &#125;);<br>    System.out.println(integer);<br>   &#125;<br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;R&gt; <span class=\"hljs-function\">R <span class=\"hljs-title\">typeConver</span><span class=\"hljs-params\">(Function&lt;String,R&gt; function)</span></span>&#123;<br>   String str = <span class=\"hljs-string\">&quot;1235&quot;</span>;<br>   R result = function.apply(str);<br>    <span class=\"hljs-keyword\">return</span> result;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p> 实例五：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntConsumer;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> foreachArr(<span class=\"hljs-keyword\">new</span> IntConsumer() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">accept</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        System.out.println(value);<br>      &#125;<br>    &#125;);<br>   &#125;<br>   <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foreachArr</span><span class=\"hljs-params\">(IntConsumer consumer)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span>[] arr = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i :<br>         arr) &#123;<br>      consumer.accept(i);<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntConsumer;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> foreachArr(<span class=\"hljs-keyword\">new</span> IntConsumer() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">accept</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        System.out.println(value);<br>      &#125;<br>    &#125;);<br>   &#125;<br>   <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foreachArr</span><span class=\"hljs-params\">(IntConsumer consumer)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span>[] arr = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i :<br>         arr) &#123;<br>      consumer.accept(i);<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>省略规则：</strong></p>\n<ol>\n<li>参数类型可以省略</li>\n<li>方法体只有一句代码时打括号return和唯一一句代码的分号可以省略</li>\n<li>方法体只有一个参数时小括号可以省略</li>\n</ol>\n<h2 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h2><ol>\n<li>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果；</li>\n<li>stream不会改变数据源，通常情况下会产生一个新的集合；</li>\n<li>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li>\n<li>对stream操作分为终端操作和中间操作，那么这两者分别代表什么呢？<ol>\n<li>终端操作：会消费流，这种操作会产生一个结果的，如果一个流被消费过了，那它就不能被重用的。</li>\n<li>中间操作：中间操作会产生另一个流。因此中间操作可以用来创建执行一系列动作的管道。一个特别需要注意的点是:中间操作不是立即发生的。相反，当在中间操作创建的新流上执行完终端操作后，中间操作指定的操作才会发生。所以中间操作是延迟发生的，中间操作的延迟行为主要是让流API能够更加高效地执行。</li>\n</ol>\n</li>\n<li>stream不可复用，对一个已经进行过终端操作的流再次调用，会抛出异常。</li>\n</ol>\n<blockquote>\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.EqualsAndHashCode;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@EqualsAndHashCode</span><span class=\"hljs-comment\">//用于后期的去重使用</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> </span>&#123;<br>  <span class=\"hljs-comment\">//id</span><br>  <span class=\"hljs-keyword\">private</span> Long id;<br>  <span class=\"hljs-comment\">//书名</span><br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-comment\">//分类</span><br>  <span class=\"hljs-keyword\">private</span> String category;<br>  <span class=\"hljs-comment\">//评分</span><br>  <span class=\"hljs-keyword\">private</span> Integer score;<br>  <span class=\"hljs-comment\">//简介</span><br>  <span class=\"hljs-keyword\">private</span> String intro;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.EqualsAndHashCode;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Objects;<br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@EqualsAndHashCode</span><span class=\"hljs-comment\">//用于后期的去重使用</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">Author</span>&gt;</span>&#123;<br>  <span class=\"hljs-comment\">//id</span><br>  <span class=\"hljs-keyword\">private</span> Long id;<br>  <span class=\"hljs-comment\">//姓名</span><br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-comment\">//年龄</span><br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-comment\">//简介</span><br>  <span class=\"hljs-keyword\">private</span> String intro;<br>  <span class=\"hljs-comment\">//作品</span><br>  <span class=\"hljs-keyword\">private</span> List&lt;Book&gt; books;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Author o)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> o.getAge()-<span class=\"hljs-keyword\">this</span>.getAge();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.*;<br><span class=\"hljs-keyword\">import</span> java.util.function.*;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Stream;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StreamDemo</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    List&lt;Author&gt; authors = getAuthors();<br>    test01(authors);<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">(List&lt;Author&gt; authors)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//把集合转换成流</span><br>    authors.stream()<br>      .distinct()<br>      .filter(author -&gt; &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;test&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> author.getAge() &lt; <span class=\"hljs-number\">18</span>;<br>      &#125;)<br>      .forEach(author -&gt; System.out.println(author.getName()));<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;Author&gt; <span class=\"hljs-title\">getAuthors</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">//数据初始化</span><br>    Author author = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">1L</span>,<span class=\"hljs-string\">&quot;蒙多&quot;</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-string\">&quot;一个从菜刀中明悟哲理的祖安人&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br>    Author author2 = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">2L</span>,<span class=\"hljs-string\">&quot;亚拉索&quot;</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-string\">&quot;狂风也追逐不上他的思考速度&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br>    Author author3 = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;易&quot;</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;是这个世界在限制他的思维&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br>    Author author4 = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;易&quot;</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;是这个世界在限制他的思维&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br><br>    <span class=\"hljs-comment\">//书籍列表</span><br>    List&lt;Book&gt; books1 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    List&lt;Book&gt; books2 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    List&lt;Book&gt; books3 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br><br>    books1.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">1L</span>,<span class=\"hljs-string\">&quot;刀的两侧是光明与黑暗&quot;</span>,<span class=\"hljs-string\">&quot;哲学,爱情&quot;</span>,<span class=\"hljs-number\">88</span>,<span class=\"hljs-string\">&quot;用一把刀划分了爱恨&quot;</span>));<br>    books1.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">2L</span>,<span class=\"hljs-string\">&quot;一个人不能死在同一把刀下&quot;</span>,<span class=\"hljs-string\">&quot;个人成长,爱情&quot;</span>,<span class=\"hljs-number\">99</span>,<span class=\"hljs-string\">&quot;讲述如何从失败中明悟真理&quot;</span>));<br><br>    books2.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;那风吹不到的地方&quot;</span>,<span class=\"hljs-string\">&quot;哲学&quot;</span>,<span class=\"hljs-number\">85</span>,<span class=\"hljs-string\">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;那风吹不到的地方&quot;</span>,<span class=\"hljs-string\">&quot;哲学&quot;</span>,<span class=\"hljs-number\">85</span>,<span class=\"hljs-string\">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">4L</span>,<span class=\"hljs-string\">&quot;吹或不吹&quot;</span>,<span class=\"hljs-string\">&quot;爱情,个人传记&quot;</span>,<span class=\"hljs-number\">56</span>,<span class=\"hljs-string\">&quot;一个哲学家的恋爱观注定很难把他所在的时代理解&quot;</span>));<br><br>    books3.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">5L</span>,<span class=\"hljs-string\">&quot;你的剑就是我的剑&quot;</span>,<span class=\"hljs-string\">&quot;爱情&quot;</span>,<span class=\"hljs-number\">56</span>,<span class=\"hljs-string\">&quot;无法想象一个武者能对他的伴侣这么的宽容&quot;</span>));<br>    books3.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">6L</span>,<span class=\"hljs-string\">&quot;风与剑&quot;</span>,<span class=\"hljs-string\">&quot;个人传记&quot;</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br>    books3.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">6L</span>,<span class=\"hljs-string\">&quot;风与剑&quot;</span>,<span class=\"hljs-string\">&quot;个人传记&quot;</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br><br>    author.setBooks(books1);<br>    author2.setBooks(books2);<br>    author3.setBooks(books3);<br>    author4.setBooks(books3);<br><br>    List&lt;Author&gt; authorList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(author,author2,author3,author4));<br>    <span class=\"hljs-keyword\">return</span> authorList;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<ol>\n<li><code>Sequence of elements（元素序列）</code>：简单来说，就是我们操作的集合中的所有元素</li>\n<li><code>source（数据源）</code> ：Stream流的作用就是操作数据，那么source 就是为Stream提供可操作的<code>源数据</code>(一般，集合、数组或I/OI/O resources 都可以成为Stream的source )</li>\n<li><code>Data processing operations（数据处理操作）</code>：上面菜单程序代码中出现的<strong>filter、sorted、map、collect</strong>，以及<strong>reduce、find、match</strong>等都属于Stream 的一些操作数据的方法接口。这些操作可以顺序进行，也可以并行执行。</li>\n<li><code>Pipelining（管道、流水线）</code>：Stream对数据的操作类似数据库查询，也像电子厂的生产流线一样，Stream的每一个中间操作（后面解释什么是中间操作）比如上面的filter、sorted、map，每一步都会返回一个新的流，这些操作全部连起来就是想是一个工厂得生产流水线 ：<br><a href=\"https://img2020.cnblogs.com/blog/2026387/202011/2026387-20201126155856126-577400707.jpg\"><img src=\"https://img2020.cnblogs.com/blog/2026387/202011/2026387-20201126155856126-577400707.jpg\"><span class=\"image-caption\">img</span></a></li>\n<li><code>Internal iteration（内部迭代）</code>：Stream API 实现了对数据迭代的封装，不用你再像操作集合一样，手动写for循环显示迭代数据。</li>\n</ol>\n</blockquote>\n<p><strong>Stream最主要的三组成部分</strong></p>\n<ol>\n<li>创建流，也就是Stream开始的地方，负责创建一个Stream实例</li>\n<li>中间操作，主要是一些对数据的过滤筛选，添加删除等等操作，形成一个流程链。</li>\n<li>收尾，也就是终端操作，我感觉更适合叫终结操作，终端操作会从流的流水线（中间操作）生成结果</li>\n</ol>\n<p><strong>Stream流的生命周期:</strong>同一个流只能遍历一次，遍历完后，这个流就已经被消费掉了。你如果还需要在遍历，可以从原始数据源那里再获得一个新的流来重新遍历一遍。</p>\n<p><strong>Stream操作分类</strong></p>\n<img src=\"/article/62985/Stream%E6%93%8D%E4%BD%9C%E5%88%86%E7%B1%BB.png\" class title=\"Stream操作分类\">\n<p><strong>常用中间操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">操作参数</th>\n<th style=\"text-align:center\">函数描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">filter</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\">Predicate<T></T></td>\n<td style=\"text-align:center\">T-&gt;boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">map</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<R></R></td>\n<td style=\"text-align:center\">Function&lt;T,R&gt;</td>\n<td style=\"text-align:center\">T-&gt;R</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limit</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sorted</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\">Comparator<T></T></td>\n<td style=\"text-align:center\">(T,T)-&gt;int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">distinct</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>常用终端操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">forEach</td>\n<td style=\"text-align:center\">终端</td>\n<td style=\"text-align:center\">消费流中的每个元素并对其应用Lambda，返回void</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count</td>\n<td style=\"text-align:center\">终端</td>\n<td style=\"text-align:center\">返回流中元素的个数(long)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">collect</td>\n<td style=\"text-align:center\">终端</td>\n<td style=\"text-align:center\">把流归约成一个集合，如List、Map、Integer</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流的常用创建方法\"><a href=\"#流的常用创建方法\" class=\"headerlink\" title=\"流的常用创建方法\"></a>流的常用创建方法</h3><ol>\n<li><p>使用Collection下的 stream() 和 parallelStream() 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>Stream&lt;String&gt; stream = list.stream(); <span class=\"hljs-comment\">//获取一个顺序流</span><br>Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class=\"hljs-comment\">//获取一个并行流</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用Arrays 中的 stream() 方法，将数组转成流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Integer[] nums = <span class=\"hljs-keyword\">new</span> Integer[<span class=\"hljs-number\">10</span>];<br>Stream&lt;Integer&gt; stream = Arrays.stream(nums);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用Stream中的静态方法：of()、iterate()、generate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Stream&lt;Integer&gt; stream = Stream.of(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>);<br> <br>Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class=\"hljs-number\">0</span>, (x) -&gt; x + <span class=\"hljs-number\">2</span>).limit(<span class=\"hljs-number\">6</span>);<br>stream2.forEach(System.out::println); <span class=\"hljs-comment\">// 0 2 4 6 8 10</span><br> <br>Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class=\"hljs-number\">2</span>);<br>stream3.forEach(System.out::println);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用 BufferedReader.lines() 方法，将每行内容转成流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">BufferedReader reader = <span class=\"hljs-keyword\">new</span> BufferedReader(<span class=\"hljs-keyword\">new</span> FileReader(<span class=\"hljs-string\">&quot;F:\\\\test_stream.txt&quot;</span>));<br>Stream&lt;String&gt; lineStream = reader.lines();<br>lineStream.forEach(System.out::println);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Pattern.splitAsStream() 方法，将字符串分隔成流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Pattern pattern = Pattern.compile(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class=\"hljs-string\">&quot;a,b,c,d&quot;</span>);<br>stringStream.forEach(System.out::println);<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"流的中间操作\"><a href=\"#流的中间操作\" class=\"headerlink\" title=\"流的中间操作\"></a>流的中间操作</h3><ol>\n<li><p>过滤通过 filter() 方法可以从流中筛选出我们想要的元素</p>\n<p>distinct() 方法是一个中间操作（去重），它会返回一个新的流（没有共同元素）</p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">(List&lt;Author&gt; authors)</span> </span>&#123;<br>  authors.stream()<span class=\"hljs-comment\">//把集合转换成流</span><br>    .distinct()<br>    .filter(author -&gt; &#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;test&quot;</span>);<br>      <span class=\"hljs-keyword\">return</span> author.getAge() &lt; <span class=\"hljs-number\">18</span>;<br>    &#125;)<br>    .forEach(author -&gt; System.out.println(author.getName()));<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>filter() 方法接收的是一个 Predicate（Java 8 新增的一个函数式接口，接受一个输入参数返回一个布尔值结果）类型的参数，因此，我们可以直接将一个 Lambda 表达式传递给该方法。</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>如果想通过某种操作把一个流中的元素转化成新的流中的元素，可以使用 map() 方法</p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test05</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-comment\">//        打印所有作家的姓名</span><br>  List&lt;Author&gt; authors = getAuthors();<br><br>  authors.stream()<br>    .map(<span class=\"hljs-keyword\">new</span> Function&lt;Author, String&gt;() &#123;<br>      <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(Author author)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> author.getName();<br>      &#125;<br>    &#125;)<br>    .forEach(s -&gt; System.out.println(s));<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>map() 方法接收的是一个 Function（Java 8 新增的一个函数式接口，接受一个输入参数 T，返回一个结果 R）类型的参数，此时参数 为 String 类的 length 方法，也就是把 Stream<Author> 的流转成一个 Stream<Integer> 的流。</Integer></Author></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>sorted() 方法按自然顺序排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test07</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  List&lt;Author&gt; authors = getAuthors();<br>  <span class=\"hljs-comment\">//对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span><br>  authors.stream()<br>    .distinct()<br>    .sorted(<span class=\"hljs-keyword\">new</span> Comparator&lt;Author&gt;() &#123;<br>      <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(Author o1, Author o2)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> o2.getAge() - o1.getAge();<br>      &#125;<br>    &#125;)<br>    .forEach(author -&gt; System.out.println(author.getAge()));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回由该流的元素组成的流，按自然顺序排序。如果此流的元素不是 Comparable，则在执行终端操作时可能会抛出 java.lang.ClassCastException。对于有序流，排序是稳定的。对于无序流，不保证稳定性。</p>\n<p>(如果调用空参的 sorted() 方法，需要流中的元素是实现了 Comparable 接口)</p>\n</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/339038230\">https://zhuanlan.zhihu.com/p/339038230</a></p>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1662741032559775199&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1662741032559775199&amp;wfr=spider&amp;for=pc</a></p>\n<p><a href=\"https://www.cnblogs.com/MrYuChen-Blog/p/14042801.html\">https://www.cnblogs.com/MrYuChen-Blog/p/14042801.html</a></p>\n<p><a href=\"https://blog.csdn.net/y_k_y/article/details/84633001?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1\">https://blog.csdn.net/y_k_y/article/details/84633001?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1</a></p>\n","more":"<p><strong>函数式编程关心数据的映射，命令式编程关心解决问题的步骤</strong></p>\n<p>函数式编程是种编程方式，它将电脑运算视为函数的计算。函数编程语言最重要的基础是λ演算（lambda calculus），而且λ演算的函数可以接受函数当作输入（参数）和输出（返回值）。</p>\n<h2 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h2><p>Lambda 表达式（lambda expression）是一个<a href=\"https://baike.baidu.com/item/匿名函数/4337265\">匿名函数</a>，Lambda表达式基于数学中的<a href=\"https://baike.baidu.com/item/λ演算\">λ演算</a>得名，直接对应于其中的lambda抽象（lambda abstraction），是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示<a href=\"https://baike.baidu.com/item/闭包/10908873\">闭包</a>（注意和数学传统意义上的不同）。</p>\n<p><strong>核心原则：可推导可省略</strong></p>\n<p><strong>基本格式：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">(参数列表)-&gt;(代码)<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>实例一：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;新线程中run方法被执行了&quot;</span>);<br>      &#125;     <br>    &#125;).start();<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> <span class=\"hljs-keyword\">new</span> Thread(() -&gt; System.out.println(<span class=\"hljs-string\">&quot;新线程中run方法被执行了&quot;</span>)).start();<br>  &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p> 实例二：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntBinaryOperator;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span> i = calculateNum(<span class=\"hljs-keyword\">new</span> IntBinaryOperator() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">applyAsInt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> left, <span class=\"hljs-keyword\">int</span> right)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> left + right;<br>      &#125;<br>    &#125;);<br>    System.out.println(i);<br>   <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calculateNum</span><span class=\"hljs-params\">(IntBinaryOperator operator)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;<br>   <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">20</span>;<br>    <span class=\"hljs-keyword\">return</span> operator.applyAsInt(a, b);<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntBinaryOperator;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br><span class=\"hljs-keyword\">int</span> i = calculateNum((<span class=\"hljs-keyword\">int</span> left, <span class=\"hljs-keyword\">int</span> right) -&gt; &#123;<br>     <span class=\"hljs-keyword\">return</span> left + right;<br>   &#125;);<br>    System.out.println(i);<br>   &#125;<br>   <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calculateNum</span><span class=\"hljs-params\">(IntBinaryOperator operator)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">10</span>;<br>   <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">20</span>;<br>    <span class=\"hljs-keyword\">return</span> operator.applyAsInt(a, b);<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>实例三：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> printNum(<span class=\"hljs-keyword\">new</span> IntPredicate() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> value % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;<br>      &#125;<br>    &#125;);<br>   &#125;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(IntPredicate predicate)</span> </span>&#123;<br>   <span class=\"hljs-keyword\">int</span> arr[] = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i : arr) &#123;<br>      <span class=\"hljs-keyword\">if</span> (predicate.test(i)) &#123;<br>        System.out.println(i);<br>      &#125;<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;\t<br>\tprintNum((<span class=\"hljs-keyword\">int</span> value) -&gt; &#123;<br>     <span class=\"hljs-keyword\">return</span> value % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;<br>   &#125;);<br>   &#125;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printNum</span><span class=\"hljs-params\">(IntPredicate predicate)</span> </span>&#123;<br>   <span class=\"hljs-keyword\">int</span> arr[] = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i : arr) &#123;<br>      <span class=\"hljs-keyword\">if</span> (predicate.test(i)) &#123;<br>        System.out.println(i);<br>      &#125;<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p> 实例四：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> Integer integer = typeConver(<span class=\"hljs-keyword\">new</span> Function&lt;String, Integer&gt;() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(String s)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> Integer.valueOf(s);<br>      &#125;<br>    &#125;);<br>    System.out.println(integer);<br>   &#125;<br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;R&gt; <span class=\"hljs-function\">R <span class=\"hljs-title\">typeConver</span><span class=\"hljs-params\">(Function&lt;String,R&gt; function)</span></span>&#123;<br>   String str = <span class=\"hljs-string\">&quot;1235&quot;</span>;<br>   R result = function.apply(str);<br>    <span class=\"hljs-keyword\">return</span> result;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> Integer integer = typeConver((String s) -&gt; &#123;<br>     <span class=\"hljs-keyword\">return</span> Integer.valueOf(s);<br>    &#125;);<br>    System.out.println(integer);<br>   &#125;<br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;R&gt; <span class=\"hljs-function\">R <span class=\"hljs-title\">typeConver</span><span class=\"hljs-params\">(Function&lt;String,R&gt; function)</span></span>&#123;<br>   String str = <span class=\"hljs-string\">&quot;1235&quot;</span>;<br>   R result = function.apply(str);<br>    <span class=\"hljs-keyword\">return</span> result;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p> 实例五：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntConsumer;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> foreachArr(<span class=\"hljs-keyword\">new</span> IntConsumer() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">accept</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        System.out.println(value);<br>      &#125;<br>    &#125;);<br>   &#125;<br>   <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foreachArr</span><span class=\"hljs-params\">(IntConsumer consumer)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span>[] arr = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i :<br>         arr) &#123;<br>      consumer.accept(i);<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>Lambda表达式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&gt;<span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntConsumer;<br><span class=\"hljs-keyword\">import</span> java.util.function.IntPredicate;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LambdaDemo01</span> </span>&#123;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br> foreachArr(<span class=\"hljs-keyword\">new</span> IntConsumer() &#123;<br>     <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">accept</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>        System.out.println(value);<br>      &#125;<br>    &#125;);<br>   &#125;<br>   <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foreachArr</span><span class=\"hljs-params\">(IntConsumer consumer)</span> </span>&#123;<br> <span class=\"hljs-keyword\">int</span>[] arr = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>&#125;;<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i :<br>         arr) &#123;<br>      consumer.accept(i);<br>    &#125;<br>   &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>省略规则：</strong></p>\n<ol>\n<li>参数类型可以省略</li>\n<li>方法体只有一句代码时打括号return和唯一一句代码的分号可以省略</li>\n<li>方法体只有一个参数时小括号可以省略</li>\n</ol>\n<h2 id=\"Stream流\"><a href=\"#Stream流\" class=\"headerlink\" title=\"Stream流\"></a>Stream流</h2><ol>\n<li>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果；</li>\n<li>stream不会改变数据源，通常情况下会产生一个新的集合；</li>\n<li>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</li>\n<li>对stream操作分为终端操作和中间操作，那么这两者分别代表什么呢？<ol>\n<li>终端操作：会消费流，这种操作会产生一个结果的，如果一个流被消费过了，那它就不能被重用的。</li>\n<li>中间操作：中间操作会产生另一个流。因此中间操作可以用来创建执行一系列动作的管道。一个特别需要注意的点是:中间操作不是立即发生的。相反，当在中间操作创建的新流上执行完终端操作后，中间操作指定的操作才会发生。所以中间操作是延迟发生的，中间操作的延迟行为主要是让流API能够更加高效地执行。</li>\n</ol>\n</li>\n<li>stream不可复用，对一个已经进行过终端操作的流再次调用，会抛出异常。</li>\n</ol>\n<blockquote>\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.EqualsAndHashCode;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@EqualsAndHashCode</span><span class=\"hljs-comment\">//用于后期的去重使用</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> </span>&#123;<br>  <span class=\"hljs-comment\">//id</span><br>  <span class=\"hljs-keyword\">private</span> Long id;<br>  <span class=\"hljs-comment\">//书名</span><br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-comment\">//分类</span><br>  <span class=\"hljs-keyword\">private</span> String category;<br>  <span class=\"hljs-comment\">//评分</span><br>  <span class=\"hljs-keyword\">private</span> Integer score;<br>  <span class=\"hljs-comment\">//简介</span><br>  <span class=\"hljs-keyword\">private</span> String intro;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.EqualsAndHashCode;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Objects;<br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@EqualsAndHashCode</span><span class=\"hljs-comment\">//用于后期的去重使用</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Author</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">Author</span>&gt;</span>&#123;<br>  <span class=\"hljs-comment\">//id</span><br>  <span class=\"hljs-keyword\">private</span> Long id;<br>  <span class=\"hljs-comment\">//姓名</span><br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-comment\">//年龄</span><br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-comment\">//简介</span><br>  <span class=\"hljs-keyword\">private</span> String intro;<br>  <span class=\"hljs-comment\">//作品</span><br>  <span class=\"hljs-keyword\">private</span> List&lt;Book&gt; books;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Author o)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> o.getAge()-<span class=\"hljs-keyword\">this</span>.getAge();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.*;<br><span class=\"hljs-keyword\">import</span> java.util.function.*;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Stream;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StreamDemo</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    List&lt;Author&gt; authors = getAuthors();<br>    test01(authors);<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">(List&lt;Author&gt; authors)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//把集合转换成流</span><br>    authors.stream()<br>      .distinct()<br>      .filter(author -&gt; &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;test&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> author.getAge() &lt; <span class=\"hljs-number\">18</span>;<br>      &#125;)<br>      .forEach(author -&gt; System.out.println(author.getName()));<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;Author&gt; <span class=\"hljs-title\">getAuthors</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">//数据初始化</span><br>    Author author = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">1L</span>,<span class=\"hljs-string\">&quot;蒙多&quot;</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-string\">&quot;一个从菜刀中明悟哲理的祖安人&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br>    Author author2 = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">2L</span>,<span class=\"hljs-string\">&quot;亚拉索&quot;</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-string\">&quot;狂风也追逐不上他的思考速度&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br>    Author author3 = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;易&quot;</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;是这个世界在限制他的思维&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br>    Author author4 = <span class=\"hljs-keyword\">new</span> Author(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;易&quot;</span>,<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;是这个世界在限制他的思维&quot;</span>,<span class=\"hljs-keyword\">null</span>);<br><br>    <span class=\"hljs-comment\">//书籍列表</span><br>    List&lt;Book&gt; books1 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    List&lt;Book&gt; books2 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    List&lt;Book&gt; books3 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br><br>    books1.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">1L</span>,<span class=\"hljs-string\">&quot;刀的两侧是光明与黑暗&quot;</span>,<span class=\"hljs-string\">&quot;哲学,爱情&quot;</span>,<span class=\"hljs-number\">88</span>,<span class=\"hljs-string\">&quot;用一把刀划分了爱恨&quot;</span>));<br>    books1.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">2L</span>,<span class=\"hljs-string\">&quot;一个人不能死在同一把刀下&quot;</span>,<span class=\"hljs-string\">&quot;个人成长,爱情&quot;</span>,<span class=\"hljs-number\">99</span>,<span class=\"hljs-string\">&quot;讲述如何从失败中明悟真理&quot;</span>));<br><br>    books2.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;那风吹不到的地方&quot;</span>,<span class=\"hljs-string\">&quot;哲学&quot;</span>,<span class=\"hljs-number\">85</span>,<span class=\"hljs-string\">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">3L</span>,<span class=\"hljs-string\">&quot;那风吹不到的地方&quot;</span>,<span class=\"hljs-string\">&quot;哲学&quot;</span>,<span class=\"hljs-number\">85</span>,<span class=\"hljs-string\">&quot;带你用思维去领略世界的尽头&quot;</span>));<br>    books2.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">4L</span>,<span class=\"hljs-string\">&quot;吹或不吹&quot;</span>,<span class=\"hljs-string\">&quot;爱情,个人传记&quot;</span>,<span class=\"hljs-number\">56</span>,<span class=\"hljs-string\">&quot;一个哲学家的恋爱观注定很难把他所在的时代理解&quot;</span>));<br><br>    books3.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">5L</span>,<span class=\"hljs-string\">&quot;你的剑就是我的剑&quot;</span>,<span class=\"hljs-string\">&quot;爱情&quot;</span>,<span class=\"hljs-number\">56</span>,<span class=\"hljs-string\">&quot;无法想象一个武者能对他的伴侣这么的宽容&quot;</span>));<br>    books3.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">6L</span>,<span class=\"hljs-string\">&quot;风与剑&quot;</span>,<span class=\"hljs-string\">&quot;个人传记&quot;</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br>    books3.add(<span class=\"hljs-keyword\">new</span> Book(<span class=\"hljs-number\">6L</span>,<span class=\"hljs-string\">&quot;风与剑&quot;</span>,<span class=\"hljs-string\">&quot;个人传记&quot;</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-string\">&quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&quot;</span>));<br><br>    author.setBooks(books1);<br>    author2.setBooks(books2);<br>    author3.setBooks(books3);<br>    author4.setBooks(books3);<br><br>    List&lt;Author&gt; authorList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(author,author2,author3,author4));<br>    <span class=\"hljs-keyword\">return</span> authorList;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<ol>\n<li><code>Sequence of elements（元素序列）</code>：简单来说，就是我们操作的集合中的所有元素</li>\n<li><code>source（数据源）</code> ：Stream流的作用就是操作数据，那么source 就是为Stream提供可操作的<code>源数据</code>(一般，集合、数组或I/OI/O resources 都可以成为Stream的source )</li>\n<li><code>Data processing operations（数据处理操作）</code>：上面菜单程序代码中出现的<strong>filter、sorted、map、collect</strong>，以及<strong>reduce、find、match</strong>等都属于Stream 的一些操作数据的方法接口。这些操作可以顺序进行，也可以并行执行。</li>\n<li><code>Pipelining（管道、流水线）</code>：Stream对数据的操作类似数据库查询，也像电子厂的生产流线一样，Stream的每一个中间操作（后面解释什么是中间操作）比如上面的filter、sorted、map，每一步都会返回一个新的流，这些操作全部连起来就是想是一个工厂得生产流水线 ：<br><a href=\"https://img2020.cnblogs.com/blog/2026387/202011/2026387-20201126155856126-577400707.jpg\"><img src=\"https://img2020.cnblogs.com/blog/2026387/202011/2026387-20201126155856126-577400707.jpg\"><span class=\"image-caption\">img</span></a></li>\n<li><code>Internal iteration（内部迭代）</code>：Stream API 实现了对数据迭代的封装，不用你再像操作集合一样，手动写for循环显示迭代数据。</li>\n</ol>\n</blockquote>\n<p><strong>Stream最主要的三组成部分</strong></p>\n<ol>\n<li>创建流，也就是Stream开始的地方，负责创建一个Stream实例</li>\n<li>中间操作，主要是一些对数据的过滤筛选，添加删除等等操作，形成一个流程链。</li>\n<li>收尾，也就是终端操作，我感觉更适合叫终结操作，终端操作会从流的流水线（中间操作）生成结果</li>\n</ol>\n<p><strong>Stream流的生命周期:</strong>同一个流只能遍历一次，遍历完后，这个流就已经被消费掉了。你如果还需要在遍历，可以从原始数据源那里再获得一个新的流来重新遍历一遍。</p>\n<p><strong>Stream操作分类</strong></p>\n<img src=\"/article/62985/Stream%E6%93%8D%E4%BD%9C%E5%88%86%E7%B1%BB.png\" class title=\"Stream操作分类\">\n<p><strong>常用中间操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">操作参数</th>\n<th style=\"text-align:center\">函数描述符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">filter</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\">Predicate<T></T></td>\n<td style=\"text-align:center\">T-&gt;boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">map</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<R></R></td>\n<td style=\"text-align:center\">Function&lt;T,R&gt;</td>\n<td style=\"text-align:center\">T-&gt;R</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">limit</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sorted</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\">Comparator<T></T></td>\n<td style=\"text-align:center\">(T,T)-&gt;int</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">distinct</td>\n<td style=\"text-align:center\">中间</td>\n<td style=\"text-align:center\">Stream<T></T></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p><strong>常用终端操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">目的</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">forEach</td>\n<td style=\"text-align:center\">终端</td>\n<td style=\"text-align:center\">消费流中的每个元素并对其应用Lambda，返回void</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">count</td>\n<td style=\"text-align:center\">终端</td>\n<td style=\"text-align:center\">返回流中元素的个数(long)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">collect</td>\n<td style=\"text-align:center\">终端</td>\n<td style=\"text-align:center\">把流归约成一个集合，如List、Map、Integer</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"流的常用创建方法\"><a href=\"#流的常用创建方法\" class=\"headerlink\" title=\"流的常用创建方法\"></a>流的常用创建方法</h3><ol>\n<li><p>使用Collection下的 stream() 和 parallelStream() 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>Stream&lt;String&gt; stream = list.stream(); <span class=\"hljs-comment\">//获取一个顺序流</span><br>Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class=\"hljs-comment\">//获取一个并行流</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用Arrays 中的 stream() 方法，将数组转成流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Integer[] nums = <span class=\"hljs-keyword\">new</span> Integer[<span class=\"hljs-number\">10</span>];<br>Stream&lt;Integer&gt; stream = Arrays.stream(nums);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用Stream中的静态方法：of()、iterate()、generate()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Stream&lt;Integer&gt; stream = Stream.of(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>);<br> <br>Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class=\"hljs-number\">0</span>, (x) -&gt; x + <span class=\"hljs-number\">2</span>).limit(<span class=\"hljs-number\">6</span>);<br>stream2.forEach(System.out::println); <span class=\"hljs-comment\">// 0 2 4 6 8 10</span><br> <br>Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class=\"hljs-number\">2</span>);<br>stream3.forEach(System.out::println);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用 BufferedReader.lines() 方法，将每行内容转成流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">BufferedReader reader = <span class=\"hljs-keyword\">new</span> BufferedReader(<span class=\"hljs-keyword\">new</span> FileReader(<span class=\"hljs-string\">&quot;F:\\\\test_stream.txt&quot;</span>));<br>Stream&lt;String&gt; lineStream = reader.lines();<br>lineStream.forEach(System.out::println);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>使用 Pattern.splitAsStream() 方法，将字符串分隔成流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Pattern pattern = Pattern.compile(<span class=\"hljs-string\">&quot;,&quot;</span>);<br>Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class=\"hljs-string\">&quot;a,b,c,d&quot;</span>);<br>stringStream.forEach(System.out::println);<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"流的中间操作\"><a href=\"#流的中间操作\" class=\"headerlink\" title=\"流的中间操作\"></a>流的中间操作</h3><ol>\n<li><p>过滤通过 filter() 方法可以从流中筛选出我们想要的元素</p>\n<p>distinct() 方法是一个中间操作（去重），它会返回一个新的流（没有共同元素）</p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">(List&lt;Author&gt; authors)</span> </span>&#123;<br>  authors.stream()<span class=\"hljs-comment\">//把集合转换成流</span><br>    .distinct()<br>    .filter(author -&gt; &#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;test&quot;</span>);<br>      <span class=\"hljs-keyword\">return</span> author.getAge() &lt; <span class=\"hljs-number\">18</span>;<br>    &#125;)<br>    .forEach(author -&gt; System.out.println(author.getName()));<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>filter() 方法接收的是一个 Predicate（Java 8 新增的一个函数式接口，接受一个输入参数返回一个布尔值结果）类型的参数，因此，我们可以直接将一个 Lambda 表达式传递给该方法。</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>如果想通过某种操作把一个流中的元素转化成新的流中的元素，可以使用 map() 方法</p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test05</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-comment\">//        打印所有作家的姓名</span><br>  List&lt;Author&gt; authors = getAuthors();<br><br>  authors.stream()<br>    .map(<span class=\"hljs-keyword\">new</span> Function&lt;Author, String&gt;() &#123;<br>      <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">apply</span><span class=\"hljs-params\">(Author author)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> author.getName();<br>      &#125;<br>    &#125;)<br>    .forEach(s -&gt; System.out.println(s));<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>map() 方法接收的是一个 Function（Java 8 新增的一个函数式接口，接受一个输入参数 T，返回一个结果 R）类型的参数，此时参数 为 String 类的 length 方法，也就是把 Stream<Author> 的流转成一个 Stream<Integer> 的流。</Integer></Author></p>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>sorted() 方法按自然顺序排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test07</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  List&lt;Author&gt; authors = getAuthors();<br>  <span class=\"hljs-comment\">//对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。</span><br>  authors.stream()<br>    .distinct()<br>    .sorted(<span class=\"hljs-keyword\">new</span> Comparator&lt;Author&gt;() &#123;<br>      <span class=\"hljs-meta\">@Override</span><br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(Author o1, Author o2)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> o2.getAge() - o1.getAge();<br>      &#125;<br>    &#125;)<br>    .forEach(author -&gt; System.out.println(author.getAge()));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回由该流的元素组成的流，按自然顺序排序。如果此流的元素不是 Comparable，则在执行终端操作时可能会抛出 java.lang.ClassCastException。对于有序流，排序是稳定的。对于无序流，不保证稳定性。</p>\n<p>(如果调用空参的 sorted() 方法，需要流中的元素是实现了 Comparable 接口)</p>\n</li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/339038230\">https://zhuanlan.zhihu.com/p/339038230</a></p>\n<p><a href=\"https://baijiahao.baidu.com/s?id=1662741032559775199&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1662741032559775199&amp;wfr=spider&amp;for=pc</a></p>\n<p><a href=\"https://www.cnblogs.com/MrYuChen-Blog/p/14042801.html\">https://www.cnblogs.com/MrYuChen-Blog/p/14042801.html</a></p>\n<p><a href=\"https://blog.csdn.net/y_k_y/article/details/84633001?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1\">https://blog.csdn.net/y_k_y/article/details/84633001?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=1</a></p>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"函数式编程","path":"api/categories/函数式编程.json"}],"tags":[{"name":"函数式编程,Java","path":"api/tags/函数式编程,Java.json"}]}