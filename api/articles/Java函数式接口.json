{"title":"Java函数式接口","slug":"Java函数式接口","date":"2021-12-19T12:25:36.000Z","updated":"2021-12-19T13:33:53.991Z","comments":true,"path":"api/articles/Java函数式接口.json","realPath":null,"excerpt":null,"covers":null,"cover":"/images/theme/coverphoto/java.jpg","content":"<blockquote>\n<p> The world rushes on over the strings of the lingering heart making  the music of sadness. </p>\n<p>世界在踌躇之心的琴弦上跑过去，奏出忧郁的乐声。 </p>\n</blockquote>\n<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p>\n<p>函数式接口可以被隐式转换为<a href=\"/article/4774.html\" title=\"Java-Lambda表达式\">Java-Lambda表达式</a>。</p>\n<p>Lambda 表达式和方法引用（实际上也可认为是Lambda表达式）上。</p>\n<p>如定义了一个函数式接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FunctionalInterface</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingService</span> </span><br><span class=\"hljs-class\"></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayMessage</span><span class=\"hljs-params\">(String message)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>那么就可以使用<a href=\"/article/4774.html\" title=\"Java-Lambda表达式\">Java-Lambda表达式</a>来表示该接口的一个实现(注：JAVA 8 之前一般是用匿名类实现的)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">GreetingService greetService1 = message -&gt; System.out.println(<span class=\"hljs-string\">&quot;Hello &quot;</span> + message);<br></code></pre></td></tr></table></figure>\n<p><strong>函数式接口实例</strong></p>\n<p>Predicate <T> 接口是一个函数式接口，它接受一个输入参数 T，返回一个布尔值结果。</T></p>\n<p>该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）。</p>\n<p>该接口用于测试对象是 true 或 false。</p>\n<p>我们可以通过以下实例（Java8Tester.java）来了解函数式接口 Predicate <T> 的使用：</T></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.function.Predicate;<br> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span></span>&#123;<br>      List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>);<br>        <br>      <span class=\"hljs-comment\">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span><br>      <span class=\"hljs-comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span><br>      <span class=\"hljs-comment\">// n 如果存在则 test 方法返回 true</span><br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;输出所有数据:&quot;</span>);<br>        <br>      <span class=\"hljs-comment\">// 传递参数 n</span><br>      eval(list, n-&gt;<span class=\"hljs-keyword\">true</span>);<br>        <br>      <span class=\"hljs-comment\">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span><br>      <span class=\"hljs-comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span><br>      <span class=\"hljs-comment\">// 如果 n%2 为 0 test 方法返回 true</span><br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;输出所有偶数:&quot;</span>);<br>      eval(list, n-&gt; n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> );<br>        <br>      <span class=\"hljs-comment\">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span><br>      <span class=\"hljs-comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span><br>      <span class=\"hljs-comment\">// 如果 n 大于 3 test 方法返回 true</span><br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;输出大于 3 的所有数字:&quot;</span>);<br>      eval(list, n-&gt; n &gt; <span class=\"hljs-number\">3</span> );<br>   &#125;<br>    <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">eval</span><span class=\"hljs-params\">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">for</span>(Integer n: list) &#123;<br>        <br>         <span class=\"hljs-keyword\">if</span>(predicate.test(n)) &#123;<br>            System.out.println(n + <span class=\"hljs-string\">&quot; &quot;</span>);<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">$ javac Java8Tester.java </span><br><span class=\"hljs-comment\">$ java Java8Tester</span><br><span class=\"hljs-comment\">输出所有数据:</span><br><span class=\"hljs-comment\">1 </span><br><span class=\"hljs-comment\">2 </span><br><span class=\"hljs-comment\">3 </span><br><span class=\"hljs-comment\">4 </span><br><span class=\"hljs-comment\">5 </span><br><span class=\"hljs-comment\">6 </span><br><span class=\"hljs-comment\">7 </span><br><span class=\"hljs-comment\">8 </span><br><span class=\"hljs-comment\">9 </span><br><span class=\"hljs-comment\">输出所有偶数:</span><br><span class=\"hljs-comment\">2 </span><br><span class=\"hljs-comment\">4 </span><br><span class=\"hljs-comment\">6 </span><br><span class=\"hljs-comment\">8 </span><br><span class=\"hljs-comment\">输出大于 3 的所有数字:</span><br><span class=\"hljs-comment\">4 </span><br><span class=\"hljs-comment\">5 </span><br><span class=\"hljs-comment\">6 </span><br><span class=\"hljs-comment\">7 </span><br><span class=\"hljs-comment\">8 </span><br><span class=\"hljs-comment\">9 </span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p> The world rushes on over the strings of the lingering heart making  the music of sadness. </p>\n<p>世界在踌躇之心的琴弦上跑过去，奏出忧郁的乐声。 </p>\n</blockquote>\n<h2 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h2><p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p>\n<p>函数式接口可以被隐式转换为<a href=\"/article/4774.html\" title=\"Java-Lambda表达式\">Java-Lambda表达式</a>。</p>\n<p>Lambda 表达式和方法引用（实际上也可认为是Lambda表达式）上。</p>\n<p>如定义了一个函数式接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@FunctionalInterface</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingService</span> </span><br><span class=\"hljs-class\"></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayMessage</span><span class=\"hljs-params\">(String message)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>那么就可以使用<a href=\"/article/4774.html\" title=\"Java-Lambda表达式\">Java-Lambda表达式</a>来表示该接口的一个实现(注：JAVA 8 之前一般是用匿名类实现的)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">GreetingService greetService1 = message -&gt; System.out.println(<span class=\"hljs-string\">&quot;Hello &quot;</span> + message);<br></code></pre></td></tr></table></figure>\n<p><strong>函数式接口实例</strong></p>\n<p>Predicate <T> 接口是一个函数式接口，它接受一个输入参数 T，返回一个布尔值结果。</T></p>\n<p>该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）。</p>\n<p>该接口用于测试对象是 true 或 false。</p>\n<p>我们可以通过以下实例（Java8Tester.java）来了解函数式接口 Predicate <T> 的使用：</T></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.function.Predicate;<br> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span></span>&#123;<br>      List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>);<br>        <br>      <span class=\"hljs-comment\">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span><br>      <span class=\"hljs-comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span><br>      <span class=\"hljs-comment\">// n 如果存在则 test 方法返回 true</span><br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;输出所有数据:&quot;</span>);<br>        <br>      <span class=\"hljs-comment\">// 传递参数 n</span><br>      eval(list, n-&gt;<span class=\"hljs-keyword\">true</span>);<br>        <br>      <span class=\"hljs-comment\">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span><br>      <span class=\"hljs-comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span><br>      <span class=\"hljs-comment\">// 如果 n%2 为 0 test 方法返回 true</span><br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;输出所有偶数:&quot;</span>);<br>      eval(list, n-&gt; n%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> );<br>        <br>      <span class=\"hljs-comment\">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span><br>      <span class=\"hljs-comment\">// n 是一个参数传递到 Predicate 接口的 test 方法</span><br>      <span class=\"hljs-comment\">// 如果 n 大于 3 test 方法返回 true</span><br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;输出大于 3 的所有数字:&quot;</span>);<br>      eval(list, n-&gt; n &gt; <span class=\"hljs-number\">3</span> );<br>   &#125;<br>    <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">eval</span><span class=\"hljs-params\">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">for</span>(Integer n: list) &#123;<br>        <br>         <span class=\"hljs-keyword\">if</span>(predicate.test(n)) &#123;<br>            System.out.println(n + <span class=\"hljs-string\">&quot; &quot;</span>);<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">$ javac Java8Tester.java </span><br><span class=\"hljs-comment\">$ java Java8Tester</span><br><span class=\"hljs-comment\">输出所有数据:</span><br><span class=\"hljs-comment\">1 </span><br><span class=\"hljs-comment\">2 </span><br><span class=\"hljs-comment\">3 </span><br><span class=\"hljs-comment\">4 </span><br><span class=\"hljs-comment\">5 </span><br><span class=\"hljs-comment\">6 </span><br><span class=\"hljs-comment\">7 </span><br><span class=\"hljs-comment\">8 </span><br><span class=\"hljs-comment\">9 </span><br><span class=\"hljs-comment\">输出所有偶数:</span><br><span class=\"hljs-comment\">2 </span><br><span class=\"hljs-comment\">4 </span><br><span class=\"hljs-comment\">6 </span><br><span class=\"hljs-comment\">8 </span><br><span class=\"hljs-comment\">输出大于 3 的所有数字:</span><br><span class=\"hljs-comment\">4 </span><br><span class=\"hljs-comment\">5 </span><br><span class=\"hljs-comment\">6 </span><br><span class=\"hljs-comment\">7 </span><br><span class=\"hljs-comment\">8 </span><br><span class=\"hljs-comment\">9 </span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"函数式接口","path":"api/categories/函数式接口.json"}],"tags":[{"name":"Java,函数式接口","path":"api/tags/Java,函数式接口.json"}]}