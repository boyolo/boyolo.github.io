{"title":"Spring","slug":"Spring","date":"2022-01-12T07:33:48.000Z","updated":"2022-01-24T09:03:44.925Z","comments":true,"path":"api/articles/Spring.json","realPath":null,"excerpt":null,"covers":["/article/18155/Spring%E7%BB%84%E6%88%90.jpg","/article/18155/1.png","/article/18155/2.png","/article/18155/3.png","/article/18155/Spring%E4%B8%8EBean%E7%9A%84%E5%85%B3%E7%B3%BB.png","/article/18155/singleton.png","/article/18155/prototype.png","/article/18155/image-20220119212811856.png","/article/18155/image-20220119212737264.png","/article/18155/image-20220119212640569.png","/article/18155/image-20220120203442870.png"],"cover":"/images/theme/coverphoto/spring.jpg","content":"<blockquote>\n<p>The grass seeks her crowd in the earth.<br>The tree seeks his solitude of the sky.</p>\n<p>绿草求她地上的伴侣。　　　　　　　　　　　　　　　　　　　　　　　<br>树木求他天空的寂寞。　</p>\n</blockquote>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><p>Spring框架是由于<a href=\"https://baike.baidu.com/item/软件开发/3448966\">软件开发</a>的复杂性而创建的。Spring使用的是基本的<a href=\"https://baike.baidu.com/item/JavaBean/529577\">JavaBean</a>来完成以前只可能由<a href=\"https://baike.baidu.com/item/EJB/144195\">EJB</a>完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p>\n<p><strong>Spring</strong>是一个轻量级控制反转（IOC）哥面向切面（AOP）的容器框架</p>\n<p><a href=\"https://spring.io/projects/spring-framework\">点击跳转Spring官方地址</a></p>\n<p><a href=\"https://repo.spring.io/release/org/springframework/spring\">点击跳转Spring官方下载地址</a></p>\n<p><a href=\"https://github.com/spring-projects/spring-framework\">点击跳转Spring官方GitHub地址</a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>使用maven配置<code>spring-webmvc</code> <code>spring-jdbc</code></p>\n<a href=\"/article/37040.html\" title=\"点击跳转Spring-Maven配置\">点击跳转Spring-Maven配置</a>\n<p><strong>优点</strong></p>\n<ol>\n<li>Spring是一个开源的免费的框架（容器）</li>\n<li>Spring是一个轻量级的、非入侵式框架</li>\n<li><strong>AOP编程的支持</strong></li>\n<li><strong>IOC编程的支持</strong></li>\n<li>支持事务的处理、对框架整合的支持</li>\n</ol>\n<p><strong>缺点</strong></p>\n<p>配置十分繁琐</p>\n<p><strong>组成</strong></p>\n<img src=\"/article/18155/Spring%E7%BB%84%E6%88%90.jpg\" class title=\"Spring组成\">\n<h3 id=\"IOC理论\"><a href=\"#IOC理论\" class=\"headerlink\" title=\"IOC理论\"></a>IOC理论</h3><p>IOC是Inversion of Control的缩写，即为控制反转</p>\n<p><strong>IOC 容器</strong>具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做。</p>\n<ol>\n<li>耦合的对象</li>\n</ol>\n<img src=\"/article/18155/1.png\" class title=\"img\">\n<ol start=\"2\">\n<li><p>解耦的过程</p>\n<img src=\"/article/18155/2.png\" class title=\"img\">\n</li>\n<li><p>理想的系统</p>\n<img src=\"/article/18155/3.png\" class title=\"img\">\n<p>在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度</p>\n</li>\n</ol>\n<p><strong>控制反转是一种通过获得描述（XML或注解）并通过第三方去生产或获取的特定对象的方式，在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入<code>dependency injection(DI)</code></strong></p>\n<img src=\"/article/18155/Spring%E4%B8%8EBean%E7%9A%84%E5%85%B3%E7%B3%BB.png\" class title=\"Spring Bean\">\n<h4 id=\"程序说明\"><a href=\"#程序说明\" class=\"headerlink\" title=\"程序说明\"></a>程序说明</h4><blockquote>\n<p>  实体类</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span> </span>&#123;<br> <span class=\"hljs-keyword\">private</span> String str;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getStr</span><span class=\"hljs-params\">()</span> </span>&#123;<br>     <span class=\"hljs-keyword\">return</span> str;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setStr</span><span class=\"hljs-params\">(String str)</span> </span>&#123;<br>     <span class=\"hljs-keyword\">this</span>.str = str;<br> &#125;<br> <span class=\"hljs-meta\">@Override</span><br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello&#123;&quot;</span> +<br>             <span class=\"hljs-string\">&quot;str=&#x27;&quot;</span> + str + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>             <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"IOC-XML配置\"><a href=\"#IOC-XML配置\" class=\"headerlink\" title=\"IOC-XML配置\"></a><strong>IOC-XML配置</strong></h5><p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;...&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span>  <br>    <span class=\"hljs-comment\">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;...&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- more bean definitions go here --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>例</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--使用spring来创建对象，在Spring这些都称为Bean</span><br><span class=\"hljs-comment\">        类型 变量名 = new 类型；</span><br><span class=\"hljs-comment\">        bean = 对象  new Hello();</span><br><span class=\"hljs-comment\">        id = 变量名</span><br><span class=\"hljs-comment\">        class = new 的对象；</span><br><span class=\"hljs-comment\">        property 相当于给对象中的属性设置一个值</span><br><span class=\"hljs-comment\">    --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Hello&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;str&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Spring&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- more bean definitions go here --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"实例化容器\"><a href=\"#实例化容器\" class=\"headerlink\" title=\"实例化容器\"></a><strong>实例化容器</strong></h5><p>提供给ApplicationContext构造函数的位置路径是资源字符串，允许容器从各种外部资源（如本地文件系统、Java <code>CLASSPATH</code>等）加载配置元数据。</p>\n<p>获取Spring的上下文对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p><strong>例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.pojo.Hello;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//获取Spring的上下文对象</span><br>    ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br>    <span class=\"hljs-comment\">//我们的对象现在都在Spring中管理了，我们要使用，直接去里面取出来</span><br>    Hello hello =(Hello)context.getBean(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>    System.out.println(hello.toString());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>hello对象是由Spring创建的，hello对象的属性是由Spring设置的</li>\n</ul>\n<h4 id=\"Bean作用域\"><a href=\"#Bean作用域\" class=\"headerlink\" title=\"Bean作用域\"></a>Bean作用域</h4><p>当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。</p>\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td>\n</tr>\n<tr>\n<td>request</td>\n<td>每次HTTP请求都会创建一个新的Bean，该作用域<strong>仅适用于WebApplicationContext环境</strong></td>\n</tr>\n<tr>\n<td>session</td>\n<td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td>\n</tr>\n<tr>\n<td>global-session</td>\n<td>一般用于Portlet应用环境，该作用域<strong>仅适用于WebApplicationContext环境</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>singleton 作用域</strong></p>\n<p>singleton 是默认的作用域</p>\n<p>当一个bean的作用域为 <code>Singleton</code>，那么 Spring IoC 容器中<strong>只会存在一个共享的 bean 实例</strong>，并且所有对 bean 的请求，只要 id 与该 bean 定义相匹配，则只会返回 bean 的同一实例。</p>\n<p>也就是说，当将一个 bean 定义设置为 singleton 作用域的时候，Spring IoC 容器只会创建该 bean 定义的<strong>唯一实例</strong>。</p>\n<img src=\"/article/18155/singleton.png\" class title=\"singleton\">\n<p>Singleton 是<strong>单例类型</strong>，就是在创建起容器时就同时自动创建了一个 bean 的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton 作用域是 Spring 中的缺省作用域。</p>\n<p><strong>prototype 作用域</strong></p>\n<p>当一个 bean 的作用域为 <code>Prototype</code>，表示<strong>一个 bean 定义对应多个对象实例</strong>。Prototype 作用域的 bean 会导致在每次对该 bean 请求（将其注入到另一个 bean 中，或者以程序的方式调用容器的 getBean() 方法）时都会创建一个新的 bean 实例。</p>\n<img src=\"/article/18155/prototype.png\" class title=\"prototype\">\n<p>Prototype 是<strong>原型类型</strong>，<strong>它在我们创建容器的时候并没有实例化</strong>，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的 bean 应该使用 prototype 作用域，而对无状态的bean则应该使用 singleton 作用域。</p>\n<h4 id=\"IOC创建对象的方式\"><a href=\"#IOC创建对象的方式\" class=\"headerlink\" title=\"IOC创建对象的方式\"></a>IOC创建对象的方式</h4><p><strong>在创建<code>ApplicationContext</code>实例时，<code>bean</code>已经被注册</strong></p>\n<blockquote>\n<p>例：</p>\n<p><code>User</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br> <span class=\"hljs-keyword\">private</span> String name;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">()</span> </span>&#123;<br>   System.out.println(<span class=\"hljs-string\">&quot;User的无参构造&quot;</span>);<br> &#125;<br>  <span class=\"hljs-comment\">//有参构造</span><br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(String name)</span></span>&#123;<br>   <span class=\"hljs-keyword\">this</span>.name=name;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>   <span class=\"hljs-keyword\">return</span> name;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>   <span class=\"hljs-keyword\">this</span>.name = name;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span></span>&#123;<br>   System.out.println(<span class=\"hljs-string\">&quot;name+&quot;</span> + name);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>MyTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>  <span class=\"hljs-comment\">//在配置文件加载的时候，容器中管理的对象就已经初始化了</span><br>    ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br>    User user = (User) context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    user.show();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li><p>使用无参构造创建对象（默认）</p>\n<p><code>beans.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--无参构造创建对象--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">User的无参构造<br>name+bobo<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>使用有参构造创建对象</p>\n<ol>\n<li><p>第一种：下标赋值</p>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"> <span class=\"hljs-comment\">&lt;!--第一种：下标赋值--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;第一种有参构造 &quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">constructor-arg</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">name+第一种有参构造<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第二种：类型赋值 <strong>多个相同类型不建议使用</strong></p>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--第二种：类型赋值 多个相同类型不建议使用--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;java.lang.String&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;第二种有参构造&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>基本类型可以直接用，引用类型必须写全限定名</p>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">name+第二种有参构造<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第三种：直接通过参数名</p>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;第三种有参构造&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">name+第三种有参构造<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p><strong>取别名</strong></p>\n<ol>\n<li><code>alias</code>标签</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--给对象取别名--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">alias</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">alias</span>=<span class=\"hljs-string\">&quot;userbobo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>创建<code>bean</code>时通过<code>name</code>属性取别名，可以取多个别名，用多种方法分割，</p>\n<p>u1 u2 u3 u4 都是user的别名</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;u1,u2 u3;u4&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"DI依赖注入\"><a href=\"#DI依赖注入\" class=\"headerlink\" title=\"DI依赖注入\"></a>DI依赖注入</h3><p>Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系。</p>\n<h4 id=\"基于构造函数的依赖注入\"><a href=\"#基于构造函数的依赖注入\" class=\"headerlink\" title=\"基于构造函数的依赖注入\"></a>基于构造函数的依赖注入</h4><p>当容器调用带有一组参数的类构造函数时，基于构造函数的 DI 就完成了，其中每个参数代表一个对其他类的依赖。</p>\n<p>即<strong>使用有参构造创建对象</strong></p>\n<p><strong>例</strong></p>\n<blockquote>\n<p><strong>DI.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.dao;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DI</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> IDI idi;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DI</span><span class=\"hljs-params\">(IDI idi)</span></span>&#123;<br>     System.out.println(<span class=\"hljs-string\">&quot;IDI被注入&quot;</span>);<br>     <span class=\"hljs-keyword\">this</span>.idi = idi;<br>  &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">diCheck</span><span class=\"hljs-params\">()</span></span>&#123;<br>       idi.checkIDI();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>IDI.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.dao;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IDI</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">IDI</span><span class=\"hljs-params\">()</span></span>&#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;IDI注入&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkIDI</span><span class=\"hljs-params\">()</span> </span>&#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;Inside checkIDI.&quot;</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;di&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.dao.DI&quot;</span>&gt;</span><br>  \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;idi&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;idi&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.dao.IDI&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面这个例子里，将依赖类 IDI.java注入到DI.java 文件,便称为依赖注入。</p>\n<h4 id=\"基于设值函数的依赖注入（重点）\"><a href=\"#基于设值函数的依赖注入（重点）\" class=\"headerlink\" title=\"基于设值函数的依赖注入（重点）\"></a>基于设值函数的依赖注入（重点）</h4><p><strong>依赖：</strong>bean对象的创建依赖于容器</p>\n<p><strong>注入：</strong>bean对象的所有属性，由容器来注入</p>\n<p><strong>例</strong></p>\n<blockquote>\n<p><strong>Student.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> java.util.*;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-keyword\">private</span> Address address;<br>  <span class=\"hljs-keyword\">private</span> String[] books;<br>  <span class=\"hljs-keyword\">private</span> List&lt;String&gt; hobbies;<br>  <span class=\"hljs-keyword\">private</span> Map&lt;String,String&gt; card;<br>  <span class=\"hljs-keyword\">private</span> Set&lt;String&gt; games;<br>  <span class=\"hljs-keyword\">private</span> String wife;<br>  <span class=\"hljs-keyword\">private</span> Properties info;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getWife</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> wife;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setWife</span><span class=\"hljs-params\">(String wife)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.wife = wife;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> name;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Address <span class=\"hljs-title\">getAddress</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> address;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAddress</span><span class=\"hljs-params\">(Address address)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.address = address;<br>  &#125;<br>  <span class=\"hljs-keyword\">public</span> String[] getBooks() &#123;<br>    <span class=\"hljs-keyword\">return</span> books;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBooks</span><span class=\"hljs-params\">(String[] books)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.books = books;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title\">getHobbies</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> hobbies;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setHobbies</span><span class=\"hljs-params\">(List&lt;String&gt; hobbies)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.hobbies = hobbies;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map&lt;String, String&gt; <span class=\"hljs-title\">getCard</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> card;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCard</span><span class=\"hljs-params\">(Map&lt;String, String&gt; card)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.card = card;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set&lt;String&gt; <span class=\"hljs-title\">getGames</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> games;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setGames</span><span class=\"hljs-params\">(Set&lt;String&gt; games)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.games = games;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Properties <span class=\"hljs-title\">getInfo</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> info;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setInfo</span><span class=\"hljs-params\">(Properties info)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.info = info;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, address=&quot;</span> + address.toString() +<br>      <span class=\"hljs-string\">&quot;, books=&quot;</span> + Arrays.toString(books) +<br>      <span class=\"hljs-string\">&quot;, hobbies=&quot;</span> + hobbies +<br>      <span class=\"hljs-string\">&quot;, card=&quot;</span> + card +<br>      <span class=\"hljs-string\">&quot;, games=&quot;</span> + games +<br>      <span class=\"hljs-string\">&quot;, wife=&#x27;&quot;</span> + wife + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, info=&quot;</span> + info +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Address.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Address</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String address;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getAddress</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> address;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAddress</span><span class=\"hljs-params\">(String address)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.address = address;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Address&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;address=&#x27;&quot;</span> + address + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>注入</strong></p>\n<blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:p</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;address&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Address&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;address&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;西安&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Student&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--普通注入 value--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--bean注入 ref--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;address&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;address&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--数组注入--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;books&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>红楼梦<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>水浒传<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>三国演义<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>西游记<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--List注入--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobbies&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>听歌<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>敲代码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>看电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--Map--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;card&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;身份证&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123123123123123123&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;银行卡&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;456456456456456456&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--Set--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;games&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>SCII<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>BOB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--null--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;wife&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">null</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--properites--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;info&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;学号&quot;</span>&gt;</span>123123123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;性别&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"拓展方式注入\"><a href=\"#拓展方式注入\" class=\"headerlink\" title=\"拓展方式注入\"></a>拓展方式注入</h4><ol>\n<li><p><code>c</code>注入</p>\n<p>必须有有参构造器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--c命名空间注入，通过构造器注入 : constructs-args--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span> <span class=\"hljs-attr\">c:age</span>=<span class=\"hljs-string\">&quot;18&quot;</span> <span class=\"hljs-attr\">c:name</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>p</code>注入</p>\n<p>p 命名空间注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--p命名注入，可以直接注入属性的值 ：property--&gt;</span><br><span class=\"hljs-comment\">&lt;!--scope=&quot;singleton&quot; 单例模式--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span> <span class=\"hljs-attr\">p:name</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>注意</strong></p>\n<p>c 、 p 命名空间注入不能直接使用，需要导入约束</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">xmlns:p=&quot;http://www.springframework.org/schema/p&quot; <br>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br></code></pre></td></tr></table></figure>\n<h3 id=\"SpringBean-自动装配\"><a href=\"#SpringBean-自动装配\" class=\"headerlink\" title=\"SpringBean 自动装配\"></a>SpringBean 自动装配</h3><p>Spring 容器可以在不使用<code>&lt;constructor-arg&gt;</code>和<code>&lt;property&gt;</code> 元素的情况下<strong>自动装配</strong>相互协作的 bean 之间的关系。</p>\n<blockquote>\n<p><strong>显式装配</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span>&gt;</span>--&gt;<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>--&gt;<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dog&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>--&gt;<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;cat&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>--&gt;<br>&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>--&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li><p>Spring 自动装配 byName</p>\n<ol>\n<li>这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 <em>auto-wire</em> 属性设置为 <em>byName</em>。</li>\n<li>然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。</li>\n<li>如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br><span class=\"hljs-comment\">&lt;!--隐式装配   autowire=&quot;byName&quot;</span><br><span class=\"hljs-comment\">\t会在容器中上下文中查找，和自己对象set方法后面的值对应的beanid！</span><br><span class=\"hljs-comment\">\t需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byName&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>使用byName，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致</strong></p>\n</li>\n<li><p>Spring 自动装配 byType</p>\n<ol>\n<li>这种模式由属性类型指定自动装配。Spring 容器看作 beans ，在 XML 配置文件中 beans 的 autowire 属性设置为 byType 。</li>\n<li>然后，如果它的 type 恰好与配置文件中 beans 名称中的一个相匹配，它将尝试匹配和连接它的属性。</li>\n<li>如果找到匹配项，它将注入这些 beans ，否则，它将抛出异常。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br><span class=\"hljs-comment\">&lt;!--隐式装配   autowire=&quot;byType&quot;</span><br><span class=\"hljs-comment\">\t会在容器中上下文中查找，和自己对象属性类型相同的beanid！</span><br><span class=\"hljs-comment\">\t要保证类型全局唯一</span><br><span class=\"hljs-comment\">\t需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byType&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>即使</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog111&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>对象名称不匹配，也可以根据类型找到对应的bean</p>\n</li>\n</ul>\n<p><strong>要保证类型全局唯一</strong><br><strong>需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</strong></p>\n</li>\n<li><p>Spring <strong>注解</strong> 自动装配 </p>\n</li>\n</ol>\n   <a href=\"/article/37040.html\" title=\"点击跳转注解配置\">点击跳转注解配置</a>\n<p>   <code>@Autowire</code> 默认通过<code>byType</code>的方式实现 ，如果存在多个类型相同的，通过byname实现，必须要求这个对象存在<br>   <code>@Resource</code> 默认通过<code>byname</code>的方式实现 ，如果找不到名字，则通过byType实现 ！ 如果两个都找不到的情况下报错 </p>\n<blockquote>\n<p><strong><code>People.java</code>类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">People</span> </span>&#123;<br>  <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> Cat cat;<br>    <span class=\"hljs-comment\">//@Qualifier  允许beans 中对象名 与类中id与类型都不同</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-meta\">@Qualifier(value = &quot;dogdog&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Dog dog;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-comment\">&lt;!--context、aop 支持注解装配--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span></span><br><span class=\"hljs-tag\"></span><br><span class=\"hljs-tag\">  &lt;!<span class=\"hljs-attr\">--</span>支持注解装配  开启注解支持<span class=\"hljs-attr\">--</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:annotation-config</span>/&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--注解装配--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dogdog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--@Autowired 与 @Resource区别</span><br><span class=\"hljs-comment\">     都是用来自动装配的</span><br><span class=\"hljs-comment\">     @Autowire 默认通过byType的方式实现 ，如果存在多个类型相同的，通过byname实现，必须要求这个对象存在</span><br><span class=\"hljs-comment\">     @Resource 默认通过byname的方式实现 ，如果找不到名字，则通过byType实现 ！ 如果两个都找不到的情况下报错</span><br><span class=\"hljs-comment\">     --&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"使用注解开发\"><a href=\"#使用注解开发\" class=\"headerlink\" title=\"使用注解开发\"></a>使用注解开发</h3><p>使用注解开发，必须要保证<code>aop</code>的包导入</p>\n<a href=\"/article/37040.html\" title=\"点击跳转使用注解开发\">点击跳转使用注解开发</a>\n<p>有两种方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--制定扫描包，包下注解会生效--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;com.bobo&quot;</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:annotation-config</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"使用component-scan\"><a href=\"#使用component-scan\" class=\"headerlink\" title=\"使用component-scan\"></a>使用<code>component-scan</code></h4><p><code>&lt;context:component-scan base-package=&quot;com.bobo&quot;/&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-comment\">//@Component  等价于   &lt;bean id=&quot;user&quot; class=&quot;com.bobo.pojo.User&quot;&gt;&lt;/bean&gt;</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>  <span class=\"hljs-comment\">//@Value(&quot;bobo&quot;) 相当于  &lt;property name=&quot;name&quot; value=&quot;bobo&quot;&gt;&lt;/property&gt;</span><br>  <span class=\"hljs-meta\">@Value(&quot;bobo&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> String name;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-comment\">//@Component  等价于   &lt;bean id=&quot;user&quot; class=&quot;com.bobo.pojo.User&quot;&gt;&lt;/bean&gt;</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>  <span class=\"hljs-comment\">//@Value(&quot;bobo&quot;) 相当于  &lt;property name=&quot;name&quot; value=&quot;bobo&quot;&gt;&lt;/property&gt;</span><br>  <span class=\"hljs-keyword\">public</span> String name;<br>  <span class=\"hljs-comment\">//也可以注入在set方法上</span><br>  <span class=\"hljs-meta\">@Value(&quot;bobo&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>@Component</strong>衍生注解</p>\n<ol>\n<li><p>@Repository   与 @Component功能相似，作用在dao层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.dao;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Repository;<br><span class=\"hljs-comment\">//@Repository 与 @Component功能相似，作用在dao层</span><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDao</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>@Service   与 @Component功能相似，作用在service层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.service;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><span class=\"hljs-comment\">//@Service 与 @Component功能相似，作用在service层</span><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserService</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>@Controller   与 @Component功能相似，作用在controller层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-comment\">//@Controller 与 @Component功能相似，作用在controller层</span><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"使用-Scope\"><a href=\"#使用-Scope\" class=\"headerlink\" title=\"使用@Scope\"></a><strong>使用</strong><code>@Scope</code></h4><p>作用就和在bean标签中使用scope属性实现的功能是一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Scope</span><br></code></pre></td></tr></table></figure>\n<p>用于指定bean的作用范围</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Value</span><br></code></pre></td></tr></table></figure>\n<p>指定范围的取值</p>\n<h3 id=\"使用Java的方式配置Spring\"><a href=\"#使用Java的方式配置Spring\" class=\"headerlink\" title=\"使用Java的方式配置Spring\"></a>使用Java的方式配置Spring</h3><a href=\"/article/37040.html\" title=\"点击跳转基于Java注解的配置\">点击跳转基于Java注解的配置</a>\n<p><strong>@import、@Configuration 和 @Bean 注解</strong></p>\n<p><strong>@Configuration</strong> 注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。</p>\n<p><strong>@Bean</strong> 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。</p>\n<p><strong>@import</strong> 注解允许从另一个配置类中加载 @Bean 定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.config;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Import;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-comment\">//@Configuration 相当于&lt;beans&gt;</span><br><span class=\"hljs-comment\">//@Configuration 代表这是一个配置累 与beans.xml是一样的</span><br><span class=\"hljs-meta\">@Configuration</span>  <br><span class=\"hljs-meta\">@ComponentScan(&quot;com.bobo.pojo&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">boboConfig</span> </span>&#123;<br><br>  <span class=\"hljs-comment\">//注册一个bean，就相当于我门之前写的一个bean标签</span><br>  <span class=\"hljs-comment\">//这个方法的名字，就相当于bean标签中的id属性</span><br>  <span class=\"hljs-comment\">//这个方法的返回值就相当于bean标签中的class属性</span><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">user</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User();  <span class=\"hljs-comment\">//就是返回要注入到bean 的对象</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>这个方法的返回值就相当于bean标签中的class属性</strong>,所以在测试类中可以识别到User类</p>\n<p>带有 @Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。你的配置类可以声明多个 @Bean。</p>\n<p>一旦定义了配置类，你就可以使用 <code>AnnotationConfigApplicationContext</code>来加载并把他们提供给 Spring 容器，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.config.boboConfig;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//如果完全使用了配类方式去做，只能通过AnnotationConfig上下文来获取容器，通过配置类的class对象加载</span><br>    ApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext(boboConfig.class);<br>    User getUser = (User) context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    System.out.println(user.getName());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"AOP框架\"><a href=\"#AOP框架\" class=\"headerlink\" title=\"AOP框架\"></a>AOP框架</h3><p>使用AOP织入，需要导入<code>aspectjweaver</code>依赖包</p>\n<a href=\"/article/37040.html\" title=\"点击跳转Spring-AOP配置\">点击跳转Spring-AOP配置</a>\n<p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。</p>\n<p>跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。在软件开发过程中有各种各样的很好的切面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p>\n<p><strong>AOP 术语</strong></p>\n<table>\n<thead>\n<tr>\n<th>项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Aspect（切面）</td>\n<td>一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</td>\n</tr>\n<tr>\n<td>Join point（连接点）</td>\n<td>在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td>\n</tr>\n<tr>\n<td>Advice（通知）</td>\n<td>这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td>\n</tr>\n<tr>\n<td>Pointcut（切入点）</td>\n<td>这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td>\n</tr>\n<tr>\n<td>Introduction</td>\n<td>引用允许你添加新方法或属性到现有的类中。</td>\n</tr>\n<tr>\n<td>Target object（被通知对象）</td>\n<td>被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td>\n</tr>\n<tr>\n<td>Weaving</td>\n<td>Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td>\n</tr>\n<tr>\n<td>Proxy（代理）</td>\n<td>向目标对象应用通知之后创建的对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>通知的类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>通知</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>前置通知</td>\n<td>在一个方法执行之前，执行通知。</td>\n</tr>\n<tr>\n<td>后置通知</td>\n<td>在一个方法执行之后，不考虑其结果，执行通知。</td>\n</tr>\n<tr>\n<td>返回后通知</td>\n<td>在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td>\n</tr>\n<tr>\n<td>抛出异常后通知</td>\n<td>在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td>\n</tr>\n<tr>\n<td>环绕通知</td>\n<td>在建议方法调用之前和之后，执行通知。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"基于-AOP-的-XML架构\"><a href=\"#基于-AOP-的-XML架构\" class=\"headerlink\" title=\"基于 AOP 的 XML架构\"></a><strong>基于 AOP 的 XML架构</strong></h4><p>在xml中使用 aop 命名空间标签，你需要导入 spring-aop 架构</p>\n<blockquote>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.service.UserService;<br><span class=\"hljs-keyword\">import</span> com.bobo.service.UserServiceImpl;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br>    <span class=\"hljs-comment\">//动态代理 代理的是接口</span><br>    UserService userService = context.getBean(<span class=\"hljs-string\">&quot;userService&quot;</span>, UserService.class);<br>    userService.add();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>方式一</strong>  自定义类</p>\n<ol>\n<li><p><strong>声明一个 aspect</strong></p>\n<p>一个 <strong>aspect</strong> 是使用 元素声明的，支持的 bean 是使用 <strong>ref</strong> 属性引用的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myAspect&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span>&gt;</span><br>    ...<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>声明一个切入点</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myAspect&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;businessService&quot;</span></span><br><span class=\"hljs-tag\">      <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.service..*.*(..))&quot;</span>/&gt;</span><br>   ...<br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>一个切入点表达式决定了我们感兴趣的哪个方法会真正被执行。</li>\n<li>一个切入点标签包含一个名称和任意数量的参数。方法的真正内容是不相干的，并且实际上它应该是空的。</li>\n</ul>\n</li>\n<li><p><strong>例</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;diy&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.diy.DiyPointCut&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--自定义切面，ref要引用的类--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;diy&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--切入点--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;point&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.service.UserServiceImpl.*(..) )&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--通知--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:before</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;before&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;point&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;after&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;point&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Class DiyPointCut</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.diy;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DiyPointCut</span></span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行前=============&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">after</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行后=============&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>测试结果：</p>\n<img src=\"/article/18155/image-20220119212811856.png\" class title=\"image-20220119212811856\">\n</li>\n</ol>\n<p><strong>方式二</strong>   使用原生Spring API接口</p>\n<ol>\n<li><p>声明一个通知器</p>\n<p>定义<code>&lt; aop:advisor &gt;</code>中引用的通知时，通知必须实现Advice接口</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p><strong>例</strong></p>\n<blockquote>\n<ol>\n<li><p>通知前环绕</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JAVA\"><span class=\"hljs-keyword\">package</span> com.bobo.log;<br><span class=\"hljs-keyword\">import</span> org.springframework.aop.MethodBeforeAdvice;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Log</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">MethodBeforeAdvice</span> </span>&#123;<br>  <span class=\"hljs-comment\">//method   要执行的目标对象的方法</span><br>  <span class=\"hljs-comment\">//Object   参数</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">(Method method, Object[] args, Object target)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>\tSystem.out.println(target.getClass().getName()+<span class=\"hljs-string\">&quot;的&quot;</span>+method.getName()+<span class=\"hljs-string\">&quot;被执行了&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通知后环绕</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.log;<br><span class=\"hljs-keyword\">import</span> org.springframework.aop.AfterAdvice;<br><span class=\"hljs-keyword\">import</span> org.springframework.aop.AfterReturningAdvice;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AfterLog</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AfterReturningAdvice</span> </span>&#123;<br>    <span class=\"hljs-comment\">//returnValue  返回值</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterReturning</span><span class=\"hljs-params\">(Object returnValue, Method method, Object[] args, Object target)</span> <span class=\"hljs-keyword\">throws</span> Throwable</span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;执行了&quot;</span>+method.getName()+<span class=\"hljs-string\">&quot;方法，返回结果为：&quot;</span>+returnValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>配置XML</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--注册bean--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;log&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.log.Log&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;afterLog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.log.AfterLog&quot;</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--    配置aop:需要导入aop的约束--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.service.UserServiceImpl.*(..) )&quot;</span>/&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--执行环绕增加--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">&quot;log&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">&quot;afterLog&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>测试结果：</p>\n<img src=\"/article/18155/image-20220119212737264.png\" class title=\"image-20220119212737264\">\n</li>\n</ol>\n<p>​    </p>\n<p><strong>方式三</strong>   使用注解配置</p>\n<p>配置XML，开启注解支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>声明一个 aspect</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AspectModule</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>声明一个切入点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>例</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;AnnotationPointCut&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.diy.AnnotationPointCut&quot;</span>/&gt;</span><br><span class=\"hljs-comment\">&lt;!--开启注解支持   JDK（默认）proxy-target-class=&quot;false&quot;     cglib:proxy-target-class=&quot;true&quot;--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.Signature;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.After;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Around;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><br><span class=\"hljs-meta\">@Aspect</span>   <span class=\"hljs-comment\">//标注这个类是一个切面</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationPointCut</span> </span>&#123;<br><br>  <span class=\"hljs-meta\">@Before(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行前=============&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@After(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">after</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行后=============&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Around(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">around</span><span class=\"hljs-params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;环绕前&quot;</span>);<br>    <span class=\"hljs-comment\">//执行方法</span><br>    Object proceed = proceedingJoinPoint.proceed();<br>    System.out.println(<span class=\"hljs-string\">&quot;环绕后&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>ProceedingJoinPoint proceedingJoinPoint</code>代表当前执行的方法</p>\n<p>测试结果：</p>\n<img src=\"/article/18155/image-20220119212640569.png\" class title=\"image-20220119212640569\">\n</li>\n</ol>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li><p><code>aop:aspect</code>与<code>op:advisor</code>不同</p>\n<ol>\n<li><p>实现方式不同</p>\n<p><a href=\"aop:aspect\">aop:aspect</a>定义切面时，只需要定义一般的bean就行，而定义<a href=\"aop:advisor\">aop:advisor</a>中引用的通知时，通知必须实现Advice接口。</p>\n</li>\n<li><p>使用场景不同</p>\n<p><a href=\"aop:advisor\">aop:advisor</a>大多用于事务管理</p>\n</li>\n</ol>\n</li>\n<li><p><strong>execution表达式</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">execution(* com.bobo.service..*. *(..))<br></code></pre></td></tr></table></figure>\n<ol>\n<li>第一个 <code>*</code> 表示返回类型， *号表示所有的类型</li>\n<li>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.bobo.service包、子孙包下所有类的方法 (“..”出现在类名中时，后面必须跟“*”)</li>\n<li>第二个 <code>*</code> 号：表示类名，*号表示所有的类</li>\n<li><code>*(..)</code>:最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"整合Mybatis\"><a href=\"#整合Mybatis\" class=\"headerlink\" title=\"整合Mybatis\"></a>整合Mybatis</h3><p><a href=\"http://mybatis.org/spring/zh/index.html\">整合Mybatis步骤官方中文文档</a></p>\n<a href=\"/article/13919.html\" title=\"点击跳转Mybatis详解\">点击跳转Mybatis详解</a>\n<p>导入相关jar包  <a href=\"/article/37040.html\" title=\"点击跳转Spring-Mybatis Maven配置\">点击跳转Spring-Mybatis Maven配置</a></p>\n<ol>\n<li><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 <code>SqlSessionFactory</code> 和至少一个数据映射器类。</p>\n<p>在 MyBatis-Spring 中，可使用 <code>SqlSessionFactoryBean</code>来创建 <code>SqlSessionFactory</code>。 </p>\n<ol>\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--sqlSessionFactory--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/数据库名?useSSL=false<span class=\"hljs-symbol\">&amp;amp;</span>serverTimezone=UTC<span class=\"hljs-symbol\">&amp;amp;</span>characterEncoding=utf8<span class=\"hljs-symbol\">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--SqlSessionTemplate 就是我们使用的sqlSession--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--只能使用构造器注入sqlSessionFactory ，因为没有set方法--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li><p><code>SqlSessionTemplate</code> 是 MyBatis-Spring 的核心。作为 <code>SqlSession</code> 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 <code>SqlSession</code>。 <code>SqlSessionTemplate</code> 是线程安全的，可以被多个 DAO 或映射器所共享使用。</p>\n</li>\n<li><p>当调用 SQL 方法时（包括由 <code>getMapper()</code> 方法返回的映射器中的方法），<code>SqlSessionTemplate</code> 将会保证使用的 <code>SqlSession</code> 与当前 Spring 的事务相关。 此外，它管理 session 的生命周期，包含必要的关闭、提交或回滚操作。另外，它也负责将 MyBatis 的异常翻译成 Spring 中的 <code>DataAccessExceptions</code>。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>现在，这个 sqlSession 就可以直接注入到你的 Mapper bean 中了。你需要在你的 bean 中添加一个 SqlSession 属性，就像下面这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserMapperImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserMapper</span></span>&#123;<br><br>  <span class=\"hljs-comment\">//我们的所有操作都使用sqlSession来执行，在原来，现在我们都使用SqlSessionTrmplate</span><br>  <span class=\"hljs-keyword\">private</span> SqlSessionTemplate sqlSession;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setSqlSession</span><span class=\"hljs-params\">(SqlSessionTemplate sqlSession)</span></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.sqlSession=sqlSession;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>按下面这样，注入 <code>SqlSessionTemplate</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userMapper&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapperImpl&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>现在所有的映射语句可以进行批量操作了，可以在 Mapper.xml 中编写如下的代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapper&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;selectUser&quot;</span> <span class=\"hljs-attr\">resultType</span>=<span class=\"hljs-string\">&quot;user&quot;</span>&gt;</span><br>    select * from mybatis.user;<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>&#123;<br>  ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br><br>  UserMapper userMapper = context.getBean(<span class=\"hljs-string\">&quot;userMapper&quot;</span>, UserMapper.class);<br><br>  <span class=\"hljs-keyword\">for</span> (User user : userMapper.selectUser()) &#123;<br>    System.out.println(user);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>完整实例</strong></p>\n<img src=\"/article/18155/image-20220120203442870.png\" class title=\"image-20220120203442870\">\n<blockquote>\n<p><strong>pojo.User</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String pwd;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>Mapper.UserMapper</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserMapper</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">selectUser</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Mapper.UserMapper.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">mapper</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapper&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;selectUser&quot;</span> <span class=\"hljs-attr\">resultType</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user;<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>Mapper.UserMapperImpl</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserMapperImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserMapper</span></span>&#123;<br><br>  <span class=\"hljs-comment\">//我们的所有操作都使用sqlSession来执行，在原来，现在我们都使用SqlSessionTrmplate</span><br>  <span class=\"hljs-keyword\">private</span> SqlSessionTemplate sqlSession;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setSqlSession</span><span class=\"hljs-params\">(SqlSessionTemplate sqlSession)</span></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.sqlSession=sqlSession;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">selectUser</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    <span class=\"hljs-keyword\">return</span> mapper.selectUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>resources.mybatis-config.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">configuration</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">typeAliases</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">package</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">typeAliases</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--&lt;mappers&gt;--&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--    &lt;mapper class=&quot;com.bobo.mapper.UserMapper&quot;/&gt;--&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--&lt;/mappers&gt;--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>resources.spring-dao.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>  <span class=\"hljs-comment\">&lt;!--DataSource:使用Spring的数据源替换Mybatis的配置</span><br><span class=\"hljs-comment\">        使用Spring提供的JDBC</span><br><span class=\"hljs-comment\">      --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306数据库名?useSSL=false<span class=\"hljs-symbol\">&amp;amp;</span>serverTimezone=UTC<span class=\"hljs-symbol\">&amp;amp;</span>characterEncoding=utf8<span class=\"hljs-symbol\">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>用户名/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>  <span class=\"hljs-comment\">&lt;!--sqlSessionFactory--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--绑定Mybatis配置文件--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;configLocation&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mapperLocations&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;classpath*:com/bobo/mapper/UserMapper.xml&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>  <span class=\"hljs-comment\">&lt;!--SqlSessionTemplate 就是我们使用的sqlSession--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--只能使用构造器注入sqlSessionFactory ，因为没有set方法--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>resources.applicationContext.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">import</span> <span class=\"hljs-attr\">resource</span>=<span class=\"hljs-string\">&quot;spring-dao.xml&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userMapper&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapperImpl&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>MyTest</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.mapper.UserMapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.io.Resources;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSession;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class=\"hljs-keyword\">import</span> org.junit.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.io.InputStream;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>&#123;<br>        ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br><br>        UserMapper userMapper = context.getBean(<span class=\"hljs-string\">&quot;userMapper&quot;</span>, UserMapper.class);<br><br>        <span class=\"hljs-keyword\">for</span> (User user : userMapper.selectUser()) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>SqlSessionDaoSupport</strong></p>\n<p><code>SqlSessionDaoSupport</code> 是一个抽象的支持类，用来为你提供 <code>SqlSession</code>。调用 <code>getSqlSession()</code> 方法你会得到一个 <code>SqlSessionTemplate</code>，之后可以用于执行 SQL 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSession;<br><span class=\"hljs-keyword\">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserMapperImpl</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SqlSessionDaoSupport</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserMapper</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">selectUser</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        SqlSession sqlSession = getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class=\"hljs-keyword\">return</span> mapper.selectUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>一个使用 MyBatis-Spring 的其中一个主要原因是它允许 MyBatis 参与到 Spring 的事务管理中。而不是给 MyBatis 创建一个新的专用事务管理器，MyBatis-Spring 借助了 Spring 中的 <code>DataSourceTransactionManager</code> 来实现事务管理。</p>\n<p><strong>标准配置</strong></p>\n<p>要开启 Spring 的事务处理功能，在 Spring 的配置文件中创建一个 <code>DataSourceTransactionManager</code> 对象：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--配置声明式事务--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transcationManager&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>传入的 <code>DataSource</code> 可以是任何能够与 Spring 兼容的 JDBC <code>DataSource</code>。包括连接池和通过 JNDI 查找获得的 <code>DataSource</code>。</p>\n<p>注意：为事务管理器指定的 <code>DataSource</code> <strong>必须</strong>和用来创建 <code>SqlSessionFactoryBean</code> 的是同一个数据源，否则事务管理器就无法工作了。</p>\n<h4 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h4><p>（交由容器管理事务）</p>\n<p><strong>配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--配置声明式事务--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transcationManager&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>结合AOP实现事务的织入</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--配置事务的类 通知--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:advice</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txAdvice&quot;</span> <span class=\"hljs-attr\">transaction-manager</span>=<span class=\"hljs-string\">&quot;transcationManager&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--给哪些方法配置事务--&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--配置事务的传播特性--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:attributes</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;add&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;delete&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;update&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;query&quot;</span> <span class=\"hljs-attr\">read-only</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;*&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tx:attributes</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tx:advice</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--配置事务切入--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txPointCut&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.mapper.*.*(..))&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">&quot;txAdvice&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;txPointCut&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p>The grass seeks her crowd in the earth.<br>The tree seeks his solitude of the sky.</p>\n<p>绿草求她地上的伴侣。　　　　　　　　　　　　　　　　　　　　　　　<br>树木求他天空的寂寞。　</p>\n</blockquote>\n<h2 id=\"Spring\"><a href=\"#Spring\" class=\"headerlink\" title=\"Spring\"></a>Spring</h2><p>Spring框架是由于<a href=\"https://baike.baidu.com/item/软件开发/3448966\">软件开发</a>的复杂性而创建的。Spring使用的是基本的<a href=\"https://baike.baidu.com/item/JavaBean/529577\">JavaBean</a>来完成以前只可能由<a href=\"https://baike.baidu.com/item/EJB/144195\">EJB</a>完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p>\n<p><strong>Spring</strong>是一个轻量级控制反转（IOC）哥面向切面（AOP）的容器框架</p>\n<p><a href=\"https://spring.io/projects/spring-framework\">点击跳转Spring官方地址</a></p>\n<p><a href=\"https://repo.spring.io/release/org/springframework/spring\">点击跳转Spring官方下载地址</a></p>\n<p><a href=\"https://github.com/spring-projects/spring-framework\">点击跳转Spring官方GitHub地址</a></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>使用maven配置<code>spring-webmvc</code> <code>spring-jdbc</code></p>\n<a href=\"/article/37040.html\" title=\"点击跳转Spring-Maven配置\">点击跳转Spring-Maven配置</a>\n<p><strong>优点</strong></p>\n<ol>\n<li>Spring是一个开源的免费的框架（容器）</li>\n<li>Spring是一个轻量级的、非入侵式框架</li>\n<li><strong>AOP编程的支持</strong></li>\n<li><strong>IOC编程的支持</strong></li>\n<li>支持事务的处理、对框架整合的支持</li>\n</ol>\n<p><strong>缺点</strong></p>\n<p>配置十分繁琐</p>\n<p><strong>组成</strong></p>\n<img src=\"/article/18155/Spring%E7%BB%84%E6%88%90.jpg\" class title=\"Spring组成\">\n<h3 id=\"IOC理论\"><a href=\"#IOC理论\" class=\"headerlink\" title=\"IOC理论\"></a>IOC理论</h3><p>IOC是Inversion of Control的缩写，即为控制反转</p>\n<p><strong>IOC 容器</strong>具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做。</p>\n<ol>\n<li>耦合的对象</li>\n</ol>\n<img src=\"/article/18155/1.png\" class title=\"img\">\n<ol start=\"2\">\n<li><p>解耦的过程</p>\n<img src=\"/article/18155/2.png\" class title=\"img\">\n</li>\n<li><p>理想的系统</p>\n<img src=\"/article/18155/3.png\" class title=\"img\">\n<p>在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度</p>\n</li>\n</ol>\n<p><strong>控制反转是一种通过获得描述（XML或注解）并通过第三方去生产或获取的特定对象的方式，在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入<code>dependency injection(DI)</code></strong></p>\n<img src=\"/article/18155/Spring%E4%B8%8EBean%E7%9A%84%E5%85%B3%E7%B3%BB.png\" class title=\"Spring Bean\">\n<h4 id=\"程序说明\"><a href=\"#程序说明\" class=\"headerlink\" title=\"程序说明\"></a>程序说明</h4><blockquote>\n<p>  实体类</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hello</span> </span>&#123;<br> <span class=\"hljs-keyword\">private</span> String str;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getStr</span><span class=\"hljs-params\">()</span> </span>&#123;<br>     <span class=\"hljs-keyword\">return</span> str;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setStr</span><span class=\"hljs-params\">(String str)</span> </span>&#123;<br>     <span class=\"hljs-keyword\">this</span>.str = str;<br> &#125;<br> <span class=\"hljs-meta\">@Override</span><br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello&#123;&quot;</span> +<br>             <span class=\"hljs-string\">&quot;str=&#x27;&quot;</span> + str + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>             <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h5 id=\"IOC-XML配置\"><a href=\"#IOC-XML配置\" class=\"headerlink\" title=\"IOC-XML配置\"></a><strong>IOC-XML配置</strong></h5><p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">    <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;...&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span>  <br>    <span class=\"hljs-comment\">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;...&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- more bean definitions go here --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>例</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--使用spring来创建对象，在Spring这些都称为Bean</span><br><span class=\"hljs-comment\">        类型 变量名 = new 类型；</span><br><span class=\"hljs-comment\">        bean = 对象  new Hello();</span><br><span class=\"hljs-comment\">        id = 变量名</span><br><span class=\"hljs-comment\">        class = new 的对象；</span><br><span class=\"hljs-comment\">        property 相当于给对象中的属性设置一个值</span><br><span class=\"hljs-comment\">    --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Hello&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- collaborators and configuration for this bean go here --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;str&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Spring&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- more bean definitions go here --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"实例化容器\"><a href=\"#实例化容器\" class=\"headerlink\" title=\"实例化容器\"></a><strong>实例化容器</strong></h5><p>提供给ApplicationContext构造函数的位置路径是资源字符串，允许容器从各种外部资源（如本地文件系统、Java <code>CLASSPATH</code>等）加载配置元数据。</p>\n<p>获取Spring的上下文对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p><strong>例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.pojo.Hello;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//获取Spring的上下文对象</span><br>    ClassPathXmlApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br>    <span class=\"hljs-comment\">//我们的对象现在都在Spring中管理了，我们要使用，直接去里面取出来</span><br>    Hello hello =(Hello)context.getBean(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>    System.out.println(hello.toString());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>hello对象是由Spring创建的，hello对象的属性是由Spring设置的</li>\n</ul>\n<h4 id=\"Bean作用域\"><a href=\"#Bean作用域\" class=\"headerlink\" title=\"Bean作用域\"></a>Bean作用域</h4><p>当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。</p>\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td>\n</tr>\n<tr>\n<td>request</td>\n<td>每次HTTP请求都会创建一个新的Bean，该作用域<strong>仅适用于WebApplicationContext环境</strong></td>\n</tr>\n<tr>\n<td>session</td>\n<td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td>\n</tr>\n<tr>\n<td>global-session</td>\n<td>一般用于Portlet应用环境，该作用域<strong>仅适用于WebApplicationContext环境</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>singleton 作用域</strong></p>\n<p>singleton 是默认的作用域</p>\n<p>当一个bean的作用域为 <code>Singleton</code>，那么 Spring IoC 容器中<strong>只会存在一个共享的 bean 实例</strong>，并且所有对 bean 的请求，只要 id 与该 bean 定义相匹配，则只会返回 bean 的同一实例。</p>\n<p>也就是说，当将一个 bean 定义设置为 singleton 作用域的时候，Spring IoC 容器只会创建该 bean 定义的<strong>唯一实例</strong>。</p>\n<img src=\"/article/18155/singleton.png\" class title=\"singleton\">\n<p>Singleton 是<strong>单例类型</strong>，就是在创建起容器时就同时自动创建了一个 bean 的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton 作用域是 Spring 中的缺省作用域。</p>\n<p><strong>prototype 作用域</strong></p>\n<p>当一个 bean 的作用域为 <code>Prototype</code>，表示<strong>一个 bean 定义对应多个对象实例</strong>。Prototype 作用域的 bean 会导致在每次对该 bean 请求（将其注入到另一个 bean 中，或者以程序的方式调用容器的 getBean() 方法）时都会创建一个新的 bean 实例。</p>\n<img src=\"/article/18155/prototype.png\" class title=\"prototype\">\n<p>Prototype 是<strong>原型类型</strong>，<strong>它在我们创建容器的时候并没有实例化</strong>，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的 bean 应该使用 prototype 作用域，而对无状态的bean则应该使用 singleton 作用域。</p>\n<h4 id=\"IOC创建对象的方式\"><a href=\"#IOC创建对象的方式\" class=\"headerlink\" title=\"IOC创建对象的方式\"></a>IOC创建对象的方式</h4><p><strong>在创建<code>ApplicationContext</code>实例时，<code>bean</code>已经被注册</strong></p>\n<blockquote>\n<p>例：</p>\n<p><code>User</code>类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br> <span class=\"hljs-keyword\">private</span> String name;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">()</span> </span>&#123;<br>   System.out.println(<span class=\"hljs-string\">&quot;User的无参构造&quot;</span>);<br> &#125;<br>  <span class=\"hljs-comment\">//有参构造</span><br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(String name)</span></span>&#123;<br>   <span class=\"hljs-keyword\">this</span>.name=name;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>   <span class=\"hljs-keyword\">return</span> name;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>   <span class=\"hljs-keyword\">this</span>.name = name;<br> &#125;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span></span>&#123;<br>   System.out.println(<span class=\"hljs-string\">&quot;name+&quot;</span> + name);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>MyTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>  <span class=\"hljs-comment\">//在配置文件加载的时候，容器中管理的对象就已经初始化了</span><br>    ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br>    User user = (User) context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    user.show();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li><p>使用无参构造创建对象（默认）</p>\n<p><code>beans.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--无参构造创建对象--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">User的无参构造<br>name+bobo<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>使用有参构造创建对象</p>\n<ol>\n<li><p>第一种：下标赋值</p>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"> <span class=\"hljs-comment\">&lt;!--第一种：下标赋值--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;第一种有参构造 &quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">constructor-arg</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">name+第一种有参构造<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第二种：类型赋值 <strong>多个相同类型不建议使用</strong></p>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--第二种：类型赋值 多个相同类型不建议使用--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;java.lang.String&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;第二种有参构造&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>基本类型可以直接用，引用类型必须写全限定名</p>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">name+第二种有参构造<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>第三种：直接通过参数名</p>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;第三种有参构造&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>输出结果</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">name+第三种有参构造<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p><strong>取别名</strong></p>\n<ol>\n<li><code>alias</code>标签</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--给对象取别名--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">alias</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">alias</span>=<span class=\"hljs-string\">&quot;userbobo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><p>创建<code>bean</code>时通过<code>name</code>属性取别名，可以取多个别名，用多种方法分割，</p>\n<p>u1 u2 u3 u4 都是user的别名</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;u1,u2 u3;u4&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"DI依赖注入\"><a href=\"#DI依赖注入\" class=\"headerlink\" title=\"DI依赖注入\"></a>DI依赖注入</h3><p>Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系。</p>\n<h4 id=\"基于构造函数的依赖注入\"><a href=\"#基于构造函数的依赖注入\" class=\"headerlink\" title=\"基于构造函数的依赖注入\"></a>基于构造函数的依赖注入</h4><p>当容器调用带有一组参数的类构造函数时，基于构造函数的 DI 就完成了，其中每个参数代表一个对其他类的依赖。</p>\n<p>即<strong>使用有参构造创建对象</strong></p>\n<p><strong>例</strong></p>\n<blockquote>\n<p><strong>DI.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.dao;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DI</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> IDI idi;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DI</span><span class=\"hljs-params\">(IDI idi)</span></span>&#123;<br>     System.out.println(<span class=\"hljs-string\">&quot;IDI被注入&quot;</span>);<br>     <span class=\"hljs-keyword\">this</span>.idi = idi;<br>  &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">diCheck</span><span class=\"hljs-params\">()</span></span>&#123;<br>       idi.checkIDI();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>IDI.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.dao;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IDI</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">IDI</span><span class=\"hljs-params\">()</span></span>&#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;IDI注入&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">checkIDI</span><span class=\"hljs-params\">()</span> </span>&#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;Inside checkIDI.&quot;</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;di&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.dao.DI&quot;</span>&gt;</span><br>  \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;idi&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;idi&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.dao.IDI&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>上面这个例子里，将依赖类 IDI.java注入到DI.java 文件,便称为依赖注入。</p>\n<h4 id=\"基于设值函数的依赖注入（重点）\"><a href=\"#基于设值函数的依赖注入（重点）\" class=\"headerlink\" title=\"基于设值函数的依赖注入（重点）\"></a>基于设值函数的依赖注入（重点）</h4><p><strong>依赖：</strong>bean对象的创建依赖于容器</p>\n<p><strong>注入：</strong>bean对象的所有属性，由容器来注入</p>\n<p><strong>例</strong></p>\n<blockquote>\n<p><strong>Student.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> java.util.*;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-keyword\">private</span> Address address;<br>  <span class=\"hljs-keyword\">private</span> String[] books;<br>  <span class=\"hljs-keyword\">private</span> List&lt;String&gt; hobbies;<br>  <span class=\"hljs-keyword\">private</span> Map&lt;String,String&gt; card;<br>  <span class=\"hljs-keyword\">private</span> Set&lt;String&gt; games;<br>  <span class=\"hljs-keyword\">private</span> String wife;<br>  <span class=\"hljs-keyword\">private</span> Properties info;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getWife</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> wife;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setWife</span><span class=\"hljs-params\">(String wife)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.wife = wife;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> name;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Address <span class=\"hljs-title\">getAddress</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> address;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAddress</span><span class=\"hljs-params\">(Address address)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.address = address;<br>  &#125;<br>  <span class=\"hljs-keyword\">public</span> String[] getBooks() &#123;<br>    <span class=\"hljs-keyword\">return</span> books;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setBooks</span><span class=\"hljs-params\">(String[] books)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.books = books;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title\">getHobbies</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> hobbies;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setHobbies</span><span class=\"hljs-params\">(List&lt;String&gt; hobbies)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.hobbies = hobbies;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map&lt;String, String&gt; <span class=\"hljs-title\">getCard</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> card;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCard</span><span class=\"hljs-params\">(Map&lt;String, String&gt; card)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.card = card;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Set&lt;String&gt; <span class=\"hljs-title\">getGames</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> games;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setGames</span><span class=\"hljs-params\">(Set&lt;String&gt; games)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.games = games;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Properties <span class=\"hljs-title\">getInfo</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> info;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setInfo</span><span class=\"hljs-params\">(Properties info)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.info = info;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Student&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, address=&quot;</span> + address.toString() +<br>      <span class=\"hljs-string\">&quot;, books=&quot;</span> + Arrays.toString(books) +<br>      <span class=\"hljs-string\">&quot;, hobbies=&quot;</span> + hobbies +<br>      <span class=\"hljs-string\">&quot;, card=&quot;</span> + card +<br>      <span class=\"hljs-string\">&quot;, games=&quot;</span> + games +<br>      <span class=\"hljs-string\">&quot;, wife=&#x27;&quot;</span> + wife + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, info=&quot;</span> + info +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Address.java</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Address</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String address;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getAddress</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> address;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAddress</span><span class=\"hljs-params\">(String address)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.address = address;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Address&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;address=&#x27;&quot;</span> + address + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>注入</strong></p>\n<blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:p</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;address&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Address&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;address&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;西安&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Student&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--普通注入 value--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--bean注入 ref--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;address&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;address&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--数组注入--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;books&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>红楼梦<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>水浒传<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>三国演义<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>西游记<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--List注入--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hobbies&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>听歌<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>敲代码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>看电影<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--Map--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;card&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;身份证&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123123123123123123&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;银行卡&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;456456456456456456&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--Set--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;games&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>SCII<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>BOB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--null--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;wife&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">null</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--properites--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;info&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;学号&quot;</span>&gt;</span>123123123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;性别&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"拓展方式注入\"><a href=\"#拓展方式注入\" class=\"headerlink\" title=\"拓展方式注入\"></a>拓展方式注入</h4><ol>\n<li><p><code>c</code>注入</p>\n<p>必须有有参构造器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--c命名空间注入，通过构造器注入 : constructs-args--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span> <span class=\"hljs-attr\">c:age</span>=<span class=\"hljs-string\">&quot;18&quot;</span> <span class=\"hljs-attr\">c:name</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><code>p</code>注入</p>\n<p>p 命名空间注入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--p命名注入，可以直接注入属性的值 ：property--&gt;</span><br><span class=\"hljs-comment\">&lt;!--scope=&quot;singleton&quot; 单例模式--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span> <span class=\"hljs-attr\">p:name</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>注意</strong></p>\n<p>c 、 p 命名空间注入不能直接使用，需要导入约束</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">xmlns:p=&quot;http://www.springframework.org/schema/p&quot; <br>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br></code></pre></td></tr></table></figure>\n<h3 id=\"SpringBean-自动装配\"><a href=\"#SpringBean-自动装配\" class=\"headerlink\" title=\"SpringBean 自动装配\"></a>SpringBean 自动装配</h3><p>Spring 容器可以在不使用<code>&lt;constructor-arg&gt;</code>和<code>&lt;property&gt;</code> 元素的情况下<strong>自动装配</strong>相互协作的 bean 之间的关系。</p>\n<blockquote>\n<p><strong>显式装配</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br>&gt;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span>&gt;</span>--&gt;<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>--&gt;<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dog&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>--&gt;<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;cat&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>--&gt;<br>&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>--&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li><p>Spring 自动装配 byName</p>\n<ol>\n<li>这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 <em>auto-wire</em> 属性设置为 <em>byName</em>。</li>\n<li>然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。</li>\n<li>如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br><span class=\"hljs-comment\">&lt;!--隐式装配   autowire=&quot;byName&quot;</span><br><span class=\"hljs-comment\">\t会在容器中上下文中查找，和自己对象set方法后面的值对应的beanid！</span><br><span class=\"hljs-comment\">\t需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byName&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>使用byName，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法一致</strong></p>\n</li>\n<li><p>Spring 自动装配 byType</p>\n<ol>\n<li>这种模式由属性类型指定自动装配。Spring 容器看作 beans ，在 XML 配置文件中 beans 的 autowire 属性设置为 byType 。</li>\n<li>然后，如果它的 type 恰好与配置文件中 beans 名称中的一个相匹配，它将尝试匹配和连接它的属性。</li>\n<li>如果找到匹配项，它将注入这些 beans ，否则，它将抛出异常。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br><span class=\"hljs-comment\">&lt;!--隐式装配   autowire=&quot;byType&quot;</span><br><span class=\"hljs-comment\">\t会在容器中上下文中查找，和自己对象属性类型相同的beanid！</span><br><span class=\"hljs-comment\">\t要保证类型全局唯一</span><br><span class=\"hljs-comment\">\t需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byType&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;bobo&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>即使</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog111&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>对象名称不匹配，也可以根据类型找到对应的bean</p>\n</li>\n</ul>\n<p><strong>要保证类型全局唯一</strong><br><strong>需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</strong></p>\n</li>\n<li><p>Spring <strong>注解</strong> 自动装配 </p>\n</li>\n</ol>\n   <a href=\"/article/37040.html\" title=\"点击跳转注解配置\">点击跳转注解配置</a>\n<p>   <code>@Autowire</code> 默认通过<code>byType</code>的方式实现 ，如果存在多个类型相同的，通过byname实现，必须要求这个对象存在<br>   <code>@Resource</code> 默认通过<code>byname</code>的方式实现 ，如果找不到名字，则通过byType实现 ！ 如果两个都找不到的情况下报错 </p>\n<blockquote>\n<p><strong><code>People.java</code>类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">People</span> </span>&#123;<br>  <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> Cat cat;<br>    <span class=\"hljs-comment\">//@Qualifier  允许beans 中对象名 与类中id与类型都不同</span><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-meta\">@Qualifier(value = &quot;dogdog&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Dog dog;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>applicationContext.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-comment\">&lt;!--context、aop 支持注解装配--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/context</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span></span><br><span class=\"hljs-tag\"></span><br><span class=\"hljs-tag\">  &lt;!<span class=\"hljs-attr\">--</span>支持注解装配  开启注解支持<span class=\"hljs-attr\">--</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:annotation-config</span>/&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--注解装配--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;cat&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Cat&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dogdog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.Dog&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;people&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.People&quot;</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--@Autowired 与 @Resource区别</span><br><span class=\"hljs-comment\">     都是用来自动装配的</span><br><span class=\"hljs-comment\">     @Autowire 默认通过byType的方式实现 ，如果存在多个类型相同的，通过byname实现，必须要求这个对象存在</span><br><span class=\"hljs-comment\">     @Resource 默认通过byname的方式实现 ，如果找不到名字，则通过byType实现 ！ 如果两个都找不到的情况下报错</span><br><span class=\"hljs-comment\">     --&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"使用注解开发\"><a href=\"#使用注解开发\" class=\"headerlink\" title=\"使用注解开发\"></a>使用注解开发</h3><p>使用注解开发，必须要保证<code>aop</code>的包导入</p>\n<a href=\"/article/37040.html\" title=\"点击跳转使用注解开发\">点击跳转使用注解开发</a>\n<p>有两种方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--制定扫描包，包下注解会生效--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;com.bobo&quot;</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:annotation-config</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"使用component-scan\"><a href=\"#使用component-scan\" class=\"headerlink\" title=\"使用component-scan\"></a>使用<code>component-scan</code></h4><p><code>&lt;context:component-scan base-package=&quot;com.bobo&quot;/&gt;</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-comment\">//@Component  等价于   &lt;bean id=&quot;user&quot; class=&quot;com.bobo.pojo.User&quot;&gt;&lt;/bean&gt;</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>  <span class=\"hljs-comment\">//@Value(&quot;bobo&quot;) 相当于  &lt;property name=&quot;name&quot; value=&quot;bobo&quot;&gt;&lt;/property&gt;</span><br>  <span class=\"hljs-meta\">@Value(&quot;bobo&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> String name;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-comment\">//@Component  等价于   &lt;bean id=&quot;user&quot; class=&quot;com.bobo.pojo.User&quot;&gt;&lt;/bean&gt;</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>  <span class=\"hljs-comment\">//@Value(&quot;bobo&quot;) 相当于  &lt;property name=&quot;name&quot; value=&quot;bobo&quot;&gt;&lt;/property&gt;</span><br>  <span class=\"hljs-keyword\">public</span> String name;<br>  <span class=\"hljs-comment\">//也可以注入在set方法上</span><br>  <span class=\"hljs-meta\">@Value(&quot;bobo&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.name = name;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>@Component</strong>衍生注解</p>\n<ol>\n<li><p>@Repository   与 @Component功能相似，作用在dao层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.dao;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Repository;<br><span class=\"hljs-comment\">//@Repository 与 @Component功能相似，作用在dao层</span><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserDao</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>@Service   与 @Component功能相似，作用在service层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.service;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><span class=\"hljs-comment\">//@Service 与 @Component功能相似，作用在service层</span><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserService</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>@Controller   与 @Component功能相似，作用在controller层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-comment\">//@Controller 与 @Component功能相似，作用在controller层</span><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserController</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"使用-Scope\"><a href=\"#使用-Scope\" class=\"headerlink\" title=\"使用@Scope\"></a><strong>使用</strong><code>@Scope</code></h4><p>作用就和在bean标签中使用scope属性实现的功能是一样的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Scope</span><br></code></pre></td></tr></table></figure>\n<p>用于指定bean的作用范围</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Value</span><br></code></pre></td></tr></table></figure>\n<p>指定范围的取值</p>\n<h3 id=\"使用Java的方式配置Spring\"><a href=\"#使用Java的方式配置Spring\" class=\"headerlink\" title=\"使用Java的方式配置Spring\"></a>使用Java的方式配置Spring</h3><a href=\"/article/37040.html\" title=\"点击跳转基于Java注解的配置\">点击跳转基于Java注解的配置</a>\n<p><strong>@import、@Configuration 和 @Bean 注解</strong></p>\n<p><strong>@Configuration</strong> 注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。</p>\n<p><strong>@Bean</strong> 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。</p>\n<p><strong>@import</strong> 注解允许从另一个配置类中加载 @Bean 定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.config;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Import;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-comment\">//@Configuration 相当于&lt;beans&gt;</span><br><span class=\"hljs-comment\">//@Configuration 代表这是一个配置累 与beans.xml是一样的</span><br><span class=\"hljs-meta\">@Configuration</span>  <br><span class=\"hljs-meta\">@ComponentScan(&quot;com.bobo.pojo&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">boboConfig</span> </span>&#123;<br><br>  <span class=\"hljs-comment\">//注册一个bean，就相当于我门之前写的一个bean标签</span><br>  <span class=\"hljs-comment\">//这个方法的名字，就相当于bean标签中的id属性</span><br>  <span class=\"hljs-comment\">//这个方法的返回值就相当于bean标签中的class属性</span><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">user</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User();  <span class=\"hljs-comment\">//就是返回要注入到bean 的对象</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>这个方法的返回值就相当于bean标签中的class属性</strong>,所以在测试类中可以识别到User类</p>\n<p>带有 @Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。你的配置类可以声明多个 @Bean。</p>\n<p>一旦定义了配置类，你就可以使用 <code>AnnotationConfigApplicationContext</code>来加载并把他们提供给 Spring 容器，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.config.boboConfig;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//如果完全使用了配类方式去做，只能通过AnnotationConfig上下文来获取容器，通过配置类的class对象加载</span><br>    ApplicationContext context = <span class=\"hljs-keyword\">new</span> AnnotationConfigApplicationContext(boboConfig.class);<br>    User getUser = (User) context.getBean(<span class=\"hljs-string\">&quot;user&quot;</span>);<br>    System.out.println(user.getName());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"AOP框架\"><a href=\"#AOP框架\" class=\"headerlink\" title=\"AOP框架\"></a>AOP框架</h3><p>使用AOP织入，需要导入<code>aspectjweaver</code>依赖包</p>\n<a href=\"/article/37040.html\" title=\"点击跳转Spring-AOP配置\">点击跳转Spring-AOP配置</a>\n<p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。</p>\n<p>跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。在软件开发过程中有各种各样的很好的切面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p>\n<p><strong>AOP 术语</strong></p>\n<table>\n<thead>\n<tr>\n<th>项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Aspect（切面）</td>\n<td>一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</td>\n</tr>\n<tr>\n<td>Join point（连接点）</td>\n<td>在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td>\n</tr>\n<tr>\n<td>Advice（通知）</td>\n<td>这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td>\n</tr>\n<tr>\n<td>Pointcut（切入点）</td>\n<td>这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td>\n</tr>\n<tr>\n<td>Introduction</td>\n<td>引用允许你添加新方法或属性到现有的类中。</td>\n</tr>\n<tr>\n<td>Target object（被通知对象）</td>\n<td>被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td>\n</tr>\n<tr>\n<td>Weaving</td>\n<td>Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td>\n</tr>\n<tr>\n<td>Proxy（代理）</td>\n<td>向目标对象应用通知之后创建的对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>通知的类型</strong></p>\n<table>\n<thead>\n<tr>\n<th>通知</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>前置通知</td>\n<td>在一个方法执行之前，执行通知。</td>\n</tr>\n<tr>\n<td>后置通知</td>\n<td>在一个方法执行之后，不考虑其结果，执行通知。</td>\n</tr>\n<tr>\n<td>返回后通知</td>\n<td>在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td>\n</tr>\n<tr>\n<td>抛出异常后通知</td>\n<td>在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td>\n</tr>\n<tr>\n<td>环绕通知</td>\n<td>在建议方法调用之前和之后，执行通知。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"基于-AOP-的-XML架构\"><a href=\"#基于-AOP-的-XML架构\" class=\"headerlink\" title=\"基于 AOP 的 XML架构\"></a><strong>基于 AOP 的 XML架构</strong></h4><p>在xml中使用 aop 命名空间标签，你需要导入 spring-aop 架构</p>\n<blockquote>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.service.UserService;<br><span class=\"hljs-keyword\">import</span> com.bobo.service.UserServiceImpl;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br>    <span class=\"hljs-comment\">//动态代理 代理的是接口</span><br>    UserService userService = context.getBean(<span class=\"hljs-string\">&quot;userService&quot;</span>, UserService.class);<br>    userService.add();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>方式一</strong>  自定义类</p>\n<ol>\n<li><p><strong>声明一个 aspect</strong></p>\n<p>一个 <strong>aspect</strong> 是使用 元素声明的，支持的 bean 是使用 <strong>ref</strong> 属性引用的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myAspect&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span>&gt;</span><br>    ...<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>声明一个切入点</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myAspect&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;businessService&quot;</span></span><br><span class=\"hljs-tag\">      <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.service..*.*(..))&quot;</span>/&gt;</span><br>   ...<br>   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;aBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span><br>...<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>一个切入点表达式决定了我们感兴趣的哪个方法会真正被执行。</li>\n<li>一个切入点标签包含一个名称和任意数量的参数。方法的真正内容是不相干的，并且实际上它应该是空的。</li>\n</ul>\n</li>\n<li><p><strong>例</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;diy&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.diy.DiyPointCut&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--自定义切面，ref要引用的类--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;diy&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--切入点--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;point&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.service.UserServiceImpl.*(..) )&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--通知--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:before</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;before&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;point&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;after&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;point&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Class DiyPointCut</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.diy;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DiyPointCut</span></span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行前=============&quot;</span>);<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">after</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行后=============&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>测试结果：</p>\n<img src=\"/article/18155/image-20220119212811856.png\" class title=\"image-20220119212811856\">\n</li>\n</ol>\n<p><strong>方式二</strong>   使用原生Spring API接口</p>\n<ol>\n<li><p>声明一个通知器</p>\n<p>定义<code>&lt; aop:advisor &gt;</code>中引用的通知时，通知必须实现Advice接口</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p><strong>例</strong></p>\n<blockquote>\n<ol>\n<li><p>通知前环绕</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JAVA\"><span class=\"hljs-keyword\">package</span> com.bobo.log;<br><span class=\"hljs-keyword\">import</span> org.springframework.aop.MethodBeforeAdvice;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Log</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">MethodBeforeAdvice</span> </span>&#123;<br>  <span class=\"hljs-comment\">//method   要执行的目标对象的方法</span><br>  <span class=\"hljs-comment\">//Object   参数</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">(Method method, Object[] args, Object target)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>\tSystem.out.println(target.getClass().getName()+<span class=\"hljs-string\">&quot;的&quot;</span>+method.getName()+<span class=\"hljs-string\">&quot;被执行了&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>通知后环绕</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.log;<br><span class=\"hljs-keyword\">import</span> org.springframework.aop.AfterAdvice;<br><span class=\"hljs-keyword\">import</span> org.springframework.aop.AfterReturningAdvice;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AfterLog</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">AfterReturningAdvice</span> </span>&#123;<br>    <span class=\"hljs-comment\">//returnValue  返回值</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterReturning</span><span class=\"hljs-params\">(Object returnValue, Method method, Object[] args, Object target)</span> <span class=\"hljs-keyword\">throws</span> Throwable</span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;执行了&quot;</span>+method.getName()+<span class=\"hljs-string\">&quot;方法，返回结果为：&quot;</span>+returnValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>配置XML</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--注册bean--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;log&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.log.Log&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;afterLog&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.log.AfterLog&quot;</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--    配置aop:需要导入aop的约束--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.service.UserServiceImpl.*(..) )&quot;</span>/&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--执行环绕增加--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">&quot;log&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">&quot;afterLog&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;pointcut&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>测试结果：</p>\n<img src=\"/article/18155/image-20220119212737264.png\" class title=\"image-20220119212737264\">\n</li>\n</ol>\n<p>​    </p>\n<p><strong>方式三</strong>   使用注解配置</p>\n<p>配置XML，开启注解支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>声明一个 aspect</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AspectModule</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>声明一个切入点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>例</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.service.UserServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;AnnotationPointCut&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.diy.AnnotationPointCut&quot;</span>/&gt;</span><br><span class=\"hljs-comment\">&lt;!--开启注解支持   JDK（默认）proxy-target-class=&quot;false&quot;     cglib:proxy-target-class=&quot;true&quot;--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.Signature;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.After;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Around;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><br><span class=\"hljs-meta\">@Aspect</span>   <span class=\"hljs-comment\">//标注这个类是一个切面</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AnnotationPointCut</span> </span>&#123;<br><br>  <span class=\"hljs-meta\">@Before(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行前=============&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@After(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">after</span><span class=\"hljs-params\">()</span></span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;=============方法执行后=============&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Around(&quot;execution(* com.bobo.service.UserServiceImpl.*(..))&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">around</span><span class=\"hljs-params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;环绕前&quot;</span>);<br>    <span class=\"hljs-comment\">//执行方法</span><br>    Object proceed = proceedingJoinPoint.proceed();<br>    System.out.println(<span class=\"hljs-string\">&quot;环绕后&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><code>ProceedingJoinPoint proceedingJoinPoint</code>代表当前执行的方法</p>\n<p>测试结果：</p>\n<img src=\"/article/18155/image-20220119212640569.png\" class title=\"image-20220119212640569\">\n</li>\n</ol>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li><p><code>aop:aspect</code>与<code>op:advisor</code>不同</p>\n<ol>\n<li><p>实现方式不同</p>\n<p><a href=\"aop:aspect\">aop:aspect</a>定义切面时，只需要定义一般的bean就行，而定义<a href=\"aop:advisor\">aop:advisor</a>中引用的通知时，通知必须实现Advice接口。</p>\n</li>\n<li><p>使用场景不同</p>\n<p><a href=\"aop:advisor\">aop:advisor</a>大多用于事务管理</p>\n</li>\n</ol>\n</li>\n<li><p><strong>execution表达式</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">execution(* com.bobo.service..*. *(..))<br></code></pre></td></tr></table></figure>\n<ol>\n<li>第一个 <code>*</code> 表示返回类型， *号表示所有的类型</li>\n<li>包名：表示需要拦截的包名，后面的两个句点表示当前包和当前包的所有子包，com.bobo.service包、子孙包下所有类的方法 (“..”出现在类名中时，后面必须跟“*”)</li>\n<li>第二个 <code>*</code> 号：表示类名，*号表示所有的类</li>\n<li><code>*(..)</code>:最后这个星号表示方法名，*号表示所有的方法，后面括弧里面表示方法的参数，两个句点表示任何参数</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"整合Mybatis\"><a href=\"#整合Mybatis\" class=\"headerlink\" title=\"整合Mybatis\"></a>整合Mybatis</h3><p><a href=\"http://mybatis.org/spring/zh/index.html\">整合Mybatis步骤官方中文文档</a></p>\n<a href=\"/article/13919.html\" title=\"点击跳转Mybatis详解\">点击跳转Mybatis详解</a>\n<p>导入相关jar包  <a href=\"/article/37040.html\" title=\"点击跳转Spring-Mybatis Maven配置\">点击跳转Spring-Mybatis Maven配置</a></p>\n<ol>\n<li><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 <code>SqlSessionFactory</code> 和至少一个数据映射器类。</p>\n<p>在 MyBatis-Spring 中，可使用 <code>SqlSessionFactoryBean</code>来创建 <code>SqlSessionFactory</code>。 </p>\n<ol>\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--sqlSessionFactory--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li></li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/数据库名?useSSL=false<span class=\"hljs-symbol\">&amp;amp;</span>serverTimezone=UTC<span class=\"hljs-symbol\">&amp;amp;</span>characterEncoding=utf8<span class=\"hljs-symbol\">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--SqlSessionTemplate 就是我们使用的sqlSession--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--只能使用构造器注入sqlSessionFactory ，因为没有set方法--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li><p><code>SqlSessionTemplate</code> 是 MyBatis-Spring 的核心。作为 <code>SqlSession</code> 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 <code>SqlSession</code>。 <code>SqlSessionTemplate</code> 是线程安全的，可以被多个 DAO 或映射器所共享使用。</p>\n</li>\n<li><p>当调用 SQL 方法时（包括由 <code>getMapper()</code> 方法返回的映射器中的方法），<code>SqlSessionTemplate</code> 将会保证使用的 <code>SqlSession</code> 与当前 Spring 的事务相关。 此外，它管理 session 的生命周期，包含必要的关闭、提交或回滚操作。另外，它也负责将 MyBatis 的异常翻译成 Spring 中的 <code>DataAccessExceptions</code>。</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>现在，这个 sqlSession 就可以直接注入到你的 Mapper bean 中了。你需要在你的 bean 中添加一个 SqlSession 属性，就像下面这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserMapperImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserMapper</span></span>&#123;<br><br>  <span class=\"hljs-comment\">//我们的所有操作都使用sqlSession来执行，在原来，现在我们都使用SqlSessionTrmplate</span><br>  <span class=\"hljs-keyword\">private</span> SqlSessionTemplate sqlSession;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setSqlSession</span><span class=\"hljs-params\">(SqlSessionTemplate sqlSession)</span></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.sqlSession=sqlSession;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>按下面这样，注入 <code>SqlSessionTemplate</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userMapper&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapperImpl&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>现在所有的映射语句可以进行批量操作了，可以在 Mapper.xml 中编写如下的代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapper&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;selectUser&quot;</span> <span class=\"hljs-attr\">resultType</span>=<span class=\"hljs-string\">&quot;user&quot;</span>&gt;</span><br>    select * from mybatis.user;<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>&#123;<br>  ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br><br>  UserMapper userMapper = context.getBean(<span class=\"hljs-string\">&quot;userMapper&quot;</span>, UserMapper.class);<br><br>  <span class=\"hljs-keyword\">for</span> (User user : userMapper.selectUser()) &#123;<br>    System.out.println(user);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>完整实例</strong></p>\n<img src=\"/article/18155/image-20220120203442870.png\" class title=\"image-20220120203442870\">\n<blockquote>\n<p><strong>pojo.User</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.pojo;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String pwd;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>Mapper.UserMapper</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserMapper</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">selectUser</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>Mapper.UserMapper.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">mapper</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapper&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;selectUser&quot;</span> <span class=\"hljs-attr\">resultType</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user;<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>Mapper.UserMapperImpl</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.mybatis.spring.SqlSessionTemplate;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserMapperImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserMapper</span></span>&#123;<br><br>  <span class=\"hljs-comment\">//我们的所有操作都使用sqlSession来执行，在原来，现在我们都使用SqlSessionTrmplate</span><br>  <span class=\"hljs-keyword\">private</span> SqlSessionTemplate sqlSession;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setSqlSession</span><span class=\"hljs-params\">(SqlSessionTemplate sqlSession)</span></span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.sqlSession=sqlSession;<br>  &#125;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">selectUser</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    <span class=\"hljs-keyword\">return</span> mapper.selectUser();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>resources.mybatis-config.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">configuration</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-keyword\">PUBLIC</span> <span class=\"hljs-meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">typeAliases</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">package</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;com.bobo.pojo&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">typeAliases</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--&lt;mappers&gt;--&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--    &lt;mapper class=&quot;com.bobo.mapper.UserMapper&quot;/&gt;--&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--&lt;/mappers&gt;--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>resources.spring-dao.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>  <span class=\"hljs-comment\">&lt;!--DataSource:使用Spring的数据源替换Mybatis的配置</span><br><span class=\"hljs-comment\">        使用Spring提供的JDBC</span><br><span class=\"hljs-comment\">      --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306数据库名?useSSL=false<span class=\"hljs-symbol\">&amp;amp;</span>serverTimezone=UTC<span class=\"hljs-symbol\">&amp;amp;</span>characterEncoding=utf8<span class=\"hljs-symbol\">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>用户名/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>  <span class=\"hljs-comment\">&lt;!--sqlSessionFactory--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--绑定Mybatis配置文件--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;configLocation&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mapperLocations&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;classpath*:com/bobo/mapper/UserMapper.xml&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>  <span class=\"hljs-comment\">&lt;!--SqlSessionTemplate 就是我们使用的sqlSession--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--只能使用构造器注入sqlSessionFactory ，因为没有set方法--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>resources.applicationContext.xml</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       http://www.springframework.org/schema/aop</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">import</span> <span class=\"hljs-attr\">resource</span>=<span class=\"hljs-string\">&quot;spring-dao.xml&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userMapper&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.mapper.UserMapperImpl&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;sqlSession&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>MyTest</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bobo.mapper.UserMapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.io.Resources;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSession;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class=\"hljs-keyword\">import</span> org.junit.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.io.InputStream;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyTest</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>&#123;<br>        ApplicationContext context = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">&quot;applicationContext.xml&quot;</span>);<br><br>        UserMapper userMapper = context.getBean(<span class=\"hljs-string\">&quot;userMapper&quot;</span>, UserMapper.class);<br><br>        <span class=\"hljs-keyword\">for</span> (User user : userMapper.selectUser()) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>SqlSessionDaoSupport</strong></p>\n<p><code>SqlSessionDaoSupport</code> 是一个抽象的支持类，用来为你提供 <code>SqlSession</code>。调用 <code>getSqlSession()</code> 方法你会得到一个 <code>SqlSessionTemplate</code>，之后可以用于执行 SQL 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.mapper;<br><span class=\"hljs-keyword\">import</span> com.bobo.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSession;<br><span class=\"hljs-keyword\">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserMapperImpl</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SqlSessionDaoSupport</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserMapper</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">selectUser</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        SqlSession sqlSession = getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class=\"hljs-keyword\">return</span> mapper.selectUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>一个使用 MyBatis-Spring 的其中一个主要原因是它允许 MyBatis 参与到 Spring 的事务管理中。而不是给 MyBatis 创建一个新的专用事务管理器，MyBatis-Spring 借助了 Spring 中的 <code>DataSourceTransactionManager</code> 来实现事务管理。</p>\n<p><strong>标准配置</strong></p>\n<p>要开启 Spring 的事务处理功能，在 Spring 的配置文件中创建一个 <code>DataSourceTransactionManager</code> 对象：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--配置声明式事务--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transcationManager&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>传入的 <code>DataSource</code> 可以是任何能够与 Spring 兼容的 JDBC <code>DataSource</code>。包括连接池和通过 JNDI 查找获得的 <code>DataSource</code>。</p>\n<p>注意：为事务管理器指定的 <code>DataSource</code> <strong>必须</strong>和用来创建 <code>SqlSessionFactoryBean</code> 的是同一个数据源，否则事务管理器就无法工作了。</p>\n<h4 id=\"声明式事务\"><a href=\"#声明式事务\" class=\"headerlink\" title=\"声明式事务\"></a>声明式事务</h4><p>（交由容器管理事务）</p>\n<p><strong>配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--配置声明式事务--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transcationManager&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>结合AOP实现事务的织入</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--配置事务的类 通知--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:advice</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txAdvice&quot;</span> <span class=\"hljs-attr\">transaction-manager</span>=<span class=\"hljs-string\">&quot;transcationManager&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--给哪些方法配置事务--&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--配置事务的传播特性--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:attributes</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;add&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;delete&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;update&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;query&quot;</span> <span class=\"hljs-attr\">read-only</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;*&quot;</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">&quot;REQUIRED&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tx:attributes</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tx:advice</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--配置事务切入--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txPointCut&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;execution(* com.bobo.mapper.*.*(..))&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">&quot;txAdvice&quot;</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">&quot;txPointCut&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Spring","path":"api/categories/Spring.json"},{"name":"Spring","path":"api/categories/Spring.json"}],"tags":[{"name":"Spring,Java","path":"api/tags/Spring,Java.json"}]}