{"title":"SpringMVC","slug":"SpringMVC","date":"2022-01-24T09:07:15.000Z","updated":"2022-02-07T08:21:03.235Z","comments":true,"path":"api/articles/SpringMVC.json","realPath":null,"excerpt":null,"covers":["/article/4780/1619751763609616.png","/article/4780/springmvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90.jpg","/article/4780/1066923-20190307172453210-409890354-20220125171300287.png","/article/4780/image-20220125170144231.png","/article/4780/image-20220125170209664.png","/article/4780/image-20220125170358415.png","/article/4780/image-20220125170447409.png","/article/4780/image-20220125170532472.png","/article/4780/image-20220125170607589.png"],"cover":"/images/theme/coverphoto/SpringMVC.jpeg","content":"<blockquote>\n<p>In my solitude of heart I feel the sigh of this widowed evening veiled with mist and rain.</p>\n<p>这寡独的黄昏，幕着雾与雨，我在我的心的孤寂里，感觉到它的叹息。　</p>\n</blockquote>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html\">SpringMVC官方文档</a></p>\n<h2 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h2><p>Spring MVC 是 Spring 提供的一个基于 MVC 设计模式的轻量级 Web 开发框架，本质上相当于 Servlet。</p>\n<p><strong>Spring MVC 是结构最清晰的 Servlet+JSP+JavaBean 的实现</strong></p>\n<p>在 Spring MVC 框架中，Controller 替换 Servlet 来担负控制器的职责，用于接收请求，调用相应的 Model 进行处理，处理器完成业务处理后返回处理结果。Controller 调用相应的 View 并对处理结果进行视图渲染，最终客户端得到响应信息。</p>\n<p>Spring的模型-视图-控制器（MVC）框架是围绕一个<code>DispatcherServlet</code>来设计的，这个Servlet会把请求分发给各个处理器，并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染等，甚至还能支持文件上传。</p>\n<p>在Spring Web MVC中，你可以使用任何对象来作为命令对象或表单返回对象，而无须实现一个框架相关的接口或基类。</p>\n<p><strong>使用SpringMVC基础配置</strong></p>\n<a href=\"/article/37040.html\" title=\"点击跳转springmvc\">点击跳转springmvc</a>\n<h3 id=\"原生配置实现SpringMVC\"><a href=\"#原生配置实现SpringMVC\" class=\"headerlink\" title=\"原生配置实现SpringMVC\"></a>原生配置实现SpringMVC</h3><p><strong>SpringMVC执行原理</strong></p>\n<img src=\"/article/4780/1619751763609616.png\" class title=\"img\">\n<p><code>DispatcherServlet</code>其实就是个<code>Servlet</code>（它继承自<code>HttpServlet</code>基类），同样也需要在你web应用的<code>web.xml</code>配置文件下声明。你需要在<code>web.xml</code>文件中把你希望<code>DispatcherServlet</code>处理的请求映射到对应的URL上去。</p>\n<blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>com.bobo.servlet.helloServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<img src=\"/article/4780/springmvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90.jpg\" class title=\"springmvc执行流程解析\">\n</blockquote>\n<img src=\"/article/4780/1066923-20190307172453210-409890354-20220125171300287.png\" class title=\"img\">\n<p>实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现</p>\n<ol>\n<li><p>DispatcherServlet表示前置控制器，使整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求；</p>\n<ul>\n<li>假设请求为：<a href=\"http://localhost:8080/SpringMVC/hello\">http://localhost:8080/SpringMVC/hello</a></li>\n<li><a href=\"http://localhost:8080服务器域名\">http://localhost:8080服务器域名</a></li>\n<li>SpringMVC表示部署在服务器上的web站点</li>\n<li>hello表示控制器</li>\n<li>通过分析，如上请求表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</li>\n</ul>\n<blockquote>\n<img src=\"/article/4780/image-20220125170144231.png\" class title=\"image-20220125170144231\">\n</blockquote>\n</li>\n<li><p>HandlerMapping为处理器映射，DispatcherServlet调用HandlerMapping，HandlerMapping根据请求查找Handler；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--Handler 处理器--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;/hello&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.Controller.HelloController&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>HandlerExecution表示具体的Handler，其主要作用是根据请求查找控制器，比如 <em>SpringMVC站点的hello控制器</em>；</p>\n</li>\n<li><p>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等；</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170209664.png\" class title=\"image-20220125170209664\">\n</blockquote>\n</li>\n<li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler；</p>\n</li>\n<li><p>Handler让具体的Controller执行；</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170358415.png\" class title=\"image-20220125170358415\">\n</blockquote>\n</li>\n<li><p>controller将具体执行的信息返回给HandlerAdapter，如ModelAndView；</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170447409.png\" class title=\"image-20220125170447409\">\n</blockquote>\n</li>\n<li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet；</p>\n</li>\n<li><p>DispatcherServlet调用试图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView</span><br><span class=\"hljs-comment\">    1。获取了ModelAndView中的数据</span><br><span class=\"hljs-comment\">    2。解析ModelAndView中的视图名</span><br><span class=\"hljs-comment\">    3。拼接视图名字，找到对应视图</span><br><span class=\"hljs-comment\">    4。将数据渲染到视图上</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--前缀--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;prefix&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--后缀--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;suffix&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;.jsp&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<img src=\"/article/4780/image-20220125170532472.png\" class title=\"image-20220125170532472\">\n</blockquote>\n</li>\n<li><p>视图解析器将解析的逻辑视图名传递给DispatcherServlet；</p>\n</li>\n<li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图；</p>\n</li>\n<li><p>最终视图呈现给用户。</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170607589.png\" class title=\"image-20220125170607589\">\n</blockquote>\n</li>\n</ol>\n<h3 id=\"注解开发SpringMVC\"><a href=\"#注解开发SpringMVC\" class=\"headerlink\" title=\"注解开发SpringMVC\"></a>注解开发SpringMVC</h3><p>首先，进行<a href=\"/article/37040.html\" title=\"SpringMVC基础配置+注解配置\">SpringMVC基础配置+注解配置</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;com.bobo.controller&quot;</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- 让Spring MVC不处理静态资源    .css .js  .html .mp3 .mp4 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- 支持mvc注解驱动</span><br><span class=\"hljs-comment\">在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class=\"hljs-comment\">要想使@RequestMapping注解生效</span><br><span class=\"hljs-comment\">必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class=\"hljs-comment\">和一个AnnotationMethodHandlerAdapter实例</span><br><span class=\"hljs-comment\">这两个实例分别在类级别和方法级别处理。</span><br><span class=\"hljs-comment\">而annotation-driven配置帮助我们自动完成上述两个实例的注入。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>pring 2.5以后引入了基于注解的编程模型，你可以在你的控制器实现上添加<code>@RequestMapping</code>、<code>@RequestParam</code>、<code>@ModelAttribute</code>等注解。</p>\n<a href=\"/article/37040.html\" title=\"点击跳转注解，查看SpringMVC相关注解\">点击跳转注解，查看SpringMVC相关注解</a>\n<p><strong>实例</strong></p>\n<blockquote>\n<p><code>HelloController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.ui.Model;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloController</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@RequestMapping(&quot;/h1&quot;)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">hello</span><span class=\"hljs-params\">(Model model)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//封装数据</span><br>        model.addAttribute(<span class=\"hljs-string\">&quot;msg&quot;</span>, <span class=\"hljs-string\">&quot;Hello,SpringMVCAnnotation&quot;</span>);<br><br>        <span class=\"hljs-comment\">//会被视图解析器处理</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>hello.jsp</code></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: pro<br>  Date: <span class=\"hljs-number\">2021</span>/<span class=\"hljs-number\">10</span>/<span class=\"hljs-number\">14</span><br>  Time: <span class=\"hljs-number\">23</span>:<span class=\"hljs-number\">10</span><br>  To change <span class=\"hljs-keyword\">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class=\"hljs-string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"hljs-string\">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>控制器Controller</strong></p>\n<ol>\n<li>控制器负责提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现；</li>\n<li>控制器负责解析用户的请求并将其转换为一个模型；</li>\n<li>在Spring MVC中一个控制器类可以包含多个方法；</li>\n<li>在SpringMVC中，对Controller的配置方法有很多种。</li>\n</ol>\n<h3 id=\"Spring-MVC-视图重定向\"><a href=\"#Spring-MVC-视图重定向\" class=\"headerlink\" title=\"Spring MVC 视图重定向\"></a>Spring MVC 视图重定向</h3><p>控制器通常都会返回一个逻辑视图名，然后视图解析器会把它解析到一个具体的视图技术上去渲染。</p>\n<p><strong>重定向前缀——redirect:</strong></p>\n<p><code>redirect:</code>。如果返回的视图名中含有<code>redirect:</code>前缀，那么<code>UrlBasedViewResolver</code>（及它的所有子类）就会接受到这个信号，意识到这里需要发生重定向。然后视图名剩下的部分会被解析成重定向URL。</p>\n<p>这种方式与通过控制器返回一个重定向视图<code>RedirectView</code>所达到的效果是一样的，不过这样一来控制器就可以只专注于处理并返回逻辑视图名了。</p>\n<p><strong>重定向前缀——forward:</strong></p>\n<p>对于最终会被<code>UrlBasedViewResolver</code>或其子类解析的视图名，你可以使用一个特殊的前缀：<code>forward:</code>。这会导致一个<code>InternalResourceView</code>视图对象的创建（它最终会调用<code>RequestDispatcher.forward()</code>方法），后者会认为视图名剩下的部分是一个URL</p>\n<h2 id=\"RestFul风格\"><a href=\"#RestFul风格\" class=\"headerlink\" title=\"RestFul风格\"></a>RestFul风格</h2><p>一种软件架构风格、设计风格，而<strong>不是</strong>标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p><strong>特性</strong></p>\n<ol>\n<li><p><strong>表现层(Representation)</strong>：把资源具体呈现出来的形式，叫做它的表现层(Representation)。</p>\n</li>\n<li><p><strong>状态转换(State Transfer)</strong>：每发出一个请求，就代表了客户端和服务器的一次交互过程。</p>\n<p>HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转换”(State Transfer)。</p>\n<p>而这种转换是建立在表现层之上的，所以就是“表现层状态转换”。</p>\n<p>具体说，就是HTTP协议里面，四个表示操作方式的动词：<strong>GET、POST、PUT、DELETE</strong>。他们分别对应四种基本操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。</p>\n<blockquote>\n<p>传统方式操作资源</p>\n<p><a href=\"http://127.0.0.1/item/queryUser.action?id=1\">http://127.0.0.1/item/queryUser.action?id=1</a>   查询,GET<br><a href=\"http://127.0.0.1/item/saveUser.action\">http://127.0.0.1/item/saveUser.action</a>         新增,POST<br><a href=\"http://127.0.0.1/item/updateUser.action\">http://127.0.0.1/item/updateUser.action</a>       更新,POST<br><a href=\"http://127.0.0.1/item/deleteUser.action?id=1\">http://127.0.0.1/item/deleteUser.action?id=1</a>  删除,GET或POST</p>\n<p>使用RESTful操作资源</p>\n<p><a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a>     查询,GET</p>\n<p><a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a>       新增,POST </p>\n<p><a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a>       更新,POST </p>\n<p><a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a>     删除,GET或POST</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>SpringMVC对RESTful的支持</strong></p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringMVC对RESTful的支持\">点击跳转SpringMVC对RESTful的支持</a>\n<ol>\n<li>使路径变得更加简洁</li>\n<li>获得参数更加方便，框架会自动进行类型转换</li>\n<li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求</li>\n<li>安全</li>\n</ol>\n<p><strong>API设计风格基本规则</strong></p>\n<ol>\n<li><p>使用名词而不是动词</p>\n</li>\n<li><p>Get方法和查询参数不应该涉及状态改变</p>\n<p>使用<strong>PUT, POST</strong> 和<strong>DELETE</strong> 方法 而不是 <strong>GET</strong> 方法来改变状态，不要使用<strong>GET</strong> 进行状态改变:</p>\n</li>\n<li><p>使用复数名词</p>\n<p>不要混淆名词单数和复数，为了保持简单，只对所有资源使用复数。</p>\n</li>\n<li><p>使用子资源表达关系</p>\n<p>如果一个资源与另外一个资源有关系，使用子资源</p>\n</li>\n<li><p>使用Http头声明序列化格式</p>\n<p>在客户端和服务端，双方都要知道通讯的格式，格式在HTTP-Header中指定</p>\n</li>\n<li><p>为集合提供<strong>过滤 排序 选择和分页等功能</strong></p>\n</li>\n<li><p>使用Http状态码处理错误</p>\n</li>\n</ol>\n","more":"<blockquote>\n<p>In my solitude of heart I feel the sigh of this widowed evening veiled with mist and rain.</p>\n<p>这寡独的黄昏，幕着雾与雨，我在我的心的孤寂里，感觉到它的叹息。　</p>\n</blockquote>\n<p><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html\">SpringMVC官方文档</a></p>\n<h2 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h2><p>Spring MVC 是 Spring 提供的一个基于 MVC 设计模式的轻量级 Web 开发框架，本质上相当于 Servlet。</p>\n<p><strong>Spring MVC 是结构最清晰的 Servlet+JSP+JavaBean 的实现</strong></p>\n<p>在 Spring MVC 框架中，Controller 替换 Servlet 来担负控制器的职责，用于接收请求，调用相应的 Model 进行处理，处理器完成业务处理后返回处理结果。Controller 调用相应的 View 并对处理结果进行视图渲染，最终客户端得到响应信息。</p>\n<p>Spring的模型-视图-控制器（MVC）框架是围绕一个<code>DispatcherServlet</code>来设计的，这个Servlet会把请求分发给各个处理器，并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染等，甚至还能支持文件上传。</p>\n<p>在Spring Web MVC中，你可以使用任何对象来作为命令对象或表单返回对象，而无须实现一个框架相关的接口或基类。</p>\n<p><strong>使用SpringMVC基础配置</strong></p>\n<a href=\"/article/37040.html\" title=\"点击跳转springmvc\">点击跳转springmvc</a>\n<h3 id=\"原生配置实现SpringMVC\"><a href=\"#原生配置实现SpringMVC\" class=\"headerlink\" title=\"原生配置实现SpringMVC\"></a>原生配置实现SpringMVC</h3><p><strong>SpringMVC执行原理</strong></p>\n<img src=\"/article/4780/1619751763609616.png\" class title=\"img\">\n<p><code>DispatcherServlet</code>其实就是个<code>Servlet</code>（它继承自<code>HttpServlet</code>基类），同样也需要在你web应用的<code>web.xml</code>配置文件下声明。你需要在<code>web.xml</code>文件中把你希望<code>DispatcherServlet</code>处理的请求映射到对应的URL上去。</p>\n<blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>com.bobo.servlet.helloServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<img src=\"/article/4780/springmvc%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90.jpg\" class title=\"springmvc执行流程解析\">\n</blockquote>\n<img src=\"/article/4780/1066923-20190307172453210-409890354-20220125171300287.png\" class title=\"img\">\n<p>实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现</p>\n<ol>\n<li><p>DispatcherServlet表示前置控制器，使整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求；</p>\n<ul>\n<li>假设请求为：<a href=\"http://localhost:8080/SpringMVC/hello\">http://localhost:8080/SpringMVC/hello</a></li>\n<li><a href=\"http://localhost:8080服务器域名\">http://localhost:8080服务器域名</a></li>\n<li>SpringMVC表示部署在服务器上的web站点</li>\n<li>hello表示控制器</li>\n<li>通过分析，如上请求表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</li>\n</ul>\n<blockquote>\n<img src=\"/article/4780/image-20220125170144231.png\" class title=\"image-20220125170144231\">\n</blockquote>\n</li>\n<li><p>HandlerMapping为处理器映射，DispatcherServlet调用HandlerMapping，HandlerMapping根据请求查找Handler；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--Handler 处理器--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;/hello&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.bobo.Controller.HelloController&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>HandlerExecution表示具体的Handler，其主要作用是根据请求查找控制器，比如 <em>SpringMVC站点的hello控制器</em>；</p>\n</li>\n<li><p>HandlerExecution将解析后的信息传递给DispatcherServlet，如解析控制器映射等；</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170209664.png\" class title=\"image-20220125170209664\">\n</blockquote>\n</li>\n<li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler；</p>\n</li>\n<li><p>Handler让具体的Controller执行；</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170358415.png\" class title=\"image-20220125170358415\">\n</blockquote>\n</li>\n<li><p>controller将具体执行的信息返回给HandlerAdapter，如ModelAndView；</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170447409.png\" class title=\"image-20220125170447409\">\n</blockquote>\n</li>\n<li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet；</p>\n</li>\n<li><p>DispatcherServlet调用试图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑视图名；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView</span><br><span class=\"hljs-comment\">    1。获取了ModelAndView中的数据</span><br><span class=\"hljs-comment\">    2。解析ModelAndView中的视图名</span><br><span class=\"hljs-comment\">    3。拼接视图名字，找到对应视图</span><br><span class=\"hljs-comment\">    4。将数据渲染到视图上</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;InternalResourceViewResolver&quot;</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--前缀--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;prefix&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--后缀--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;suffix&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;.jsp&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<img src=\"/article/4780/image-20220125170532472.png\" class title=\"image-20220125170532472\">\n</blockquote>\n</li>\n<li><p>视图解析器将解析的逻辑视图名传递给DispatcherServlet；</p>\n</li>\n<li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图；</p>\n</li>\n<li><p>最终视图呈现给用户。</p>\n<blockquote>\n<img src=\"/article/4780/image-20220125170607589.png\" class title=\"image-20220125170607589\">\n</blockquote>\n</li>\n</ol>\n<h3 id=\"注解开发SpringMVC\"><a href=\"#注解开发SpringMVC\" class=\"headerlink\" title=\"注解开发SpringMVC\"></a>注解开发SpringMVC</h3><p>首先，进行<a href=\"/article/37040.html\" title=\"SpringMVC基础配置+注解配置\">SpringMVC基础配置+注解配置</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;com.bobo.controller&quot;</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- 让Spring MVC不处理静态资源    .css .js  .html .mp3 .mp4 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- 支持mvc注解驱动</span><br><span class=\"hljs-comment\">在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class=\"hljs-comment\">要想使@RequestMapping注解生效</span><br><span class=\"hljs-comment\">必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class=\"hljs-comment\">和一个AnnotationMethodHandlerAdapter实例</span><br><span class=\"hljs-comment\">这两个实例分别在类级别和方法级别处理。</span><br><span class=\"hljs-comment\">而annotation-driven配置帮助我们自动完成上述两个实例的注入。 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>pring 2.5以后引入了基于注解的编程模型，你可以在你的控制器实现上添加<code>@RequestMapping</code>、<code>@RequestParam</code>、<code>@ModelAttribute</code>等注解。</p>\n<a href=\"/article/37040.html\" title=\"点击跳转注解，查看SpringMVC相关注解\">点击跳转注解，查看SpringMVC相关注解</a>\n<p><strong>实例</strong></p>\n<blockquote>\n<p><code>HelloController</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Controller;<br><span class=\"hljs-keyword\">import</span> org.springframework.ui.Model;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class=\"hljs-meta\">@Controller</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloController</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@RequestMapping(&quot;/h1&quot;)</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">hello</span><span class=\"hljs-params\">(Model model)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//封装数据</span><br>        model.addAttribute(<span class=\"hljs-string\">&quot;msg&quot;</span>, <span class=\"hljs-string\">&quot;Hello,SpringMVCAnnotation&quot;</span>);<br><br>        <span class=\"hljs-comment\">//会被视图解析器处理</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>hello.jsp</code></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: pro<br>  Date: <span class=\"hljs-number\">2021</span>/<span class=\"hljs-number\">10</span>/<span class=\"hljs-number\">14</span><br>  Time: <span class=\"hljs-number\">23</span>:<span class=\"hljs-number\">10</span><br>  To change <span class=\"hljs-keyword\">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class=\"hljs-string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"hljs-string\">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>$&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>控制器Controller</strong></p>\n<ol>\n<li>控制器负责提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现；</li>\n<li>控制器负责解析用户的请求并将其转换为一个模型；</li>\n<li>在Spring MVC中一个控制器类可以包含多个方法；</li>\n<li>在SpringMVC中，对Controller的配置方法有很多种。</li>\n</ol>\n<h3 id=\"Spring-MVC-视图重定向\"><a href=\"#Spring-MVC-视图重定向\" class=\"headerlink\" title=\"Spring MVC 视图重定向\"></a>Spring MVC 视图重定向</h3><p>控制器通常都会返回一个逻辑视图名，然后视图解析器会把它解析到一个具体的视图技术上去渲染。</p>\n<p><strong>重定向前缀——redirect:</strong></p>\n<p><code>redirect:</code>。如果返回的视图名中含有<code>redirect:</code>前缀，那么<code>UrlBasedViewResolver</code>（及它的所有子类）就会接受到这个信号，意识到这里需要发生重定向。然后视图名剩下的部分会被解析成重定向URL。</p>\n<p>这种方式与通过控制器返回一个重定向视图<code>RedirectView</code>所达到的效果是一样的，不过这样一来控制器就可以只专注于处理并返回逻辑视图名了。</p>\n<p><strong>重定向前缀——forward:</strong></p>\n<p>对于最终会被<code>UrlBasedViewResolver</code>或其子类解析的视图名，你可以使用一个特殊的前缀：<code>forward:</code>。这会导致一个<code>InternalResourceView</code>视图对象的创建（它最终会调用<code>RequestDispatcher.forward()</code>方法），后者会认为视图名剩下的部分是一个URL</p>\n<h2 id=\"RestFul风格\"><a href=\"#RestFul风格\" class=\"headerlink\" title=\"RestFul风格\"></a>RestFul风格</h2><p>一种软件架构风格、设计风格，而<strong>不是</strong>标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p>\n<p><strong>特性</strong></p>\n<ol>\n<li><p><strong>表现层(Representation)</strong>：把资源具体呈现出来的形式，叫做它的表现层(Representation)。</p>\n</li>\n<li><p><strong>状态转换(State Transfer)</strong>：每发出一个请求，就代表了客户端和服务器的一次交互过程。</p>\n<p>HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转换”(State Transfer)。</p>\n<p>而这种转换是建立在表现层之上的，所以就是“表现层状态转换”。</p>\n<p>具体说，就是HTTP协议里面，四个表示操作方式的动词：<strong>GET、POST、PUT、DELETE</strong>。他们分别对应四种基本操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源。</p>\n<blockquote>\n<p>传统方式操作资源</p>\n<p><a href=\"http://127.0.0.1/item/queryUser.action?id=1\">http://127.0.0.1/item/queryUser.action?id=1</a>   查询,GET<br><a href=\"http://127.0.0.1/item/saveUser.action\">http://127.0.0.1/item/saveUser.action</a>         新增,POST<br><a href=\"http://127.0.0.1/item/updateUser.action\">http://127.0.0.1/item/updateUser.action</a>       更新,POST<br><a href=\"http://127.0.0.1/item/deleteUser.action?id=1\">http://127.0.0.1/item/deleteUser.action?id=1</a>  删除,GET或POST</p>\n<p>使用RESTful操作资源</p>\n<p><a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a>     查询,GET</p>\n<p><a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a>       新增,POST </p>\n<p><a href=\"http://127.0.0.1/item\">http://127.0.0.1/item</a>       更新,POST </p>\n<p><a href=\"http://127.0.0.1/item/1\">http://127.0.0.1/item/1</a>     删除,GET或POST</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>SpringMVC对RESTful的支持</strong></p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringMVC对RESTful的支持\">点击跳转SpringMVC对RESTful的支持</a>\n<ol>\n<li>使路径变得更加简洁</li>\n<li>获得参数更加方便，框架会自动进行类型转换</li>\n<li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求</li>\n<li>安全</li>\n</ol>\n<p><strong>API设计风格基本规则</strong></p>\n<ol>\n<li><p>使用名词而不是动词</p>\n</li>\n<li><p>Get方法和查询参数不应该涉及状态改变</p>\n<p>使用<strong>PUT, POST</strong> 和<strong>DELETE</strong> 方法 而不是 <strong>GET</strong> 方法来改变状态，不要使用<strong>GET</strong> 进行状态改变:</p>\n</li>\n<li><p>使用复数名词</p>\n<p>不要混淆名词单数和复数，为了保持简单，只对所有资源使用复数。</p>\n</li>\n<li><p>使用子资源表达关系</p>\n<p>如果一个资源与另外一个资源有关系，使用子资源</p>\n</li>\n<li><p>使用Http头声明序列化格式</p>\n<p>在客户端和服务端，双方都要知道通讯的格式，格式在HTTP-Header中指定</p>\n</li>\n<li><p>为集合提供<strong>过滤 排序 选择和分页等功能</strong></p>\n</li>\n<li><p>使用Http状态码处理错误</p>\n</li>\n</ol>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"SpringMVC","path":"api/categories/SpringMVC.json"},{"name":"SpringMVC","path":"api/categories/SpringMVC.json"}],"tags":[{"name":"SpringMVC,Java","path":"api/tags/SpringMVC,Java.json"}]}