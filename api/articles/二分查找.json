{"title":"二分查找","slug":"二分查找","date":"2022-05-13T02:46:38.000Z","updated":"2022-09-06T05:22:17.332Z","comments":true,"path":"api/articles/二分查找.json","realPath":null,"excerpt":null,"covers":["/article/42877/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8C%BA%E9%97%B4%E5%8F%98%E5%8C%96.jpg","/article/42877/%E5%8F%98%E4%BD%93%E4%B8%80.jpg"],"cover":"/images/theme/coverphoto/二分查找.jpg","content":"<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>二分查找（Binary Search）算法，也叫折半查找算法</p>\n<p>二分查找针对的是一个<strong>有序的数据集合</strong>，查找思想有点<strong>类似分治思想</strong>。<strong>每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</strong></p>\n<h3 id=\"时间复杂度：O-logn\"><a href=\"#时间复杂度：O-logn\" class=\"headerlink\" title=\"时间复杂度：O(logn)\"></a>时间复杂度：O(logn)</h3><blockquote>\n<p>假设数据大小是 n，每次查找后数据都会缩小为原来的一半，也就是会除以 2。最坏情况下，直到查找区间被缩小为空，才停止。</p>\n<img src=\"/article/42877/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8C%BA%E9%97%B4%E5%8F%98%E5%8C%96.jpg\" class title=\"二分查找区间变化\">\n<p>其中 n/2k=1 时，k 的值就是总共缩小的次数。</p>\n<p>而每一次缩小操作只涉及两个数据的大小比较，所以，经过了 k 次区间缩小操作，时间复杂度就是 O(k)。</p>\n<p>通过 n/2<sup>k</sup>=1，我们可以求得 k=log<sub>2</sub>n，所以<strong>时间复杂度就是 O(logn)</strong>。</p>\n</blockquote>\n<p>指数时间复杂度的算法在大规模数据面前是无效的</p>\n<h3 id=\"二分查找的递归与非递归实现\"><a href=\"#二分查找的递归与非递归实现\" class=\"headerlink\" title=\"二分查找的递归与非递归实现\"></a>二分查找的递归与非递归实现</h3><p><strong>非递归实现</strong></p>\n<blockquote>\n<p>有序数组中不存在重复元素，用二分查找值等于给定值的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>      <span class=\"hljs-comment\">//int mid = (low + high) / 2;</span><br>      <span class=\"hljs-keyword\">int</span> mid = low+(high-low)/<span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-keyword\">if</span> (a[mid] == value) &#123;<br>        <span class=\"hljs-keyword\">return</span> mid;<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>        low = mid + <span class=\"hljs-number\">1</span>;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        high = mid - <span class=\"hljs-number\">1</span>;<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>注意：</strong></p>\n<ol>\n<li><p>注意是 low&lt;=high，而不是 &lt;</p>\n</li>\n<li><p><strong>mid=(low+high)/2 这种写法是有问题的</strong>。</p>\n<p>因为如果 low 和 high 比较大的话，两者之和就有可能会溢出。</p>\n<p><strong>改进的方法是将 mid 的计算方式写成 low+(high-low)/2。</strong>更进一步，如果要将性能优化到极致的话，我们可以将这里的除以 2 操作转化成位运算 <strong>low+((high-low)&gt;&gt;1)</strong>。因为相比除法运算来说，计算机处理位运算要快得多。</p>\n</li>\n<li><p>low 和 high 的更新</p>\n<p>low=mid+1，high=mid-1</p>\n</li>\n</ol>\n<p><strong>递归实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 二分查找的递归实现</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> val)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> bsearchInternally(a, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, val);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearchInternally</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> low, <span class=\"hljs-keyword\">int</span> high, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (low &gt; high) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br><br>  <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-keyword\">if</span> (a[mid] == value) &#123;<br>    <span class=\"hljs-keyword\">return</span> mid;<br>  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>    <span class=\"hljs-keyword\">return</span> bsearchInternally(a, mid+<span class=\"hljs-number\">1</span>, high, value);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> bsearchInternally(a, low, mid-<span class=\"hljs-number\">1</span>, value);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"二分查找应用场景的局限性\"><a href=\"#二分查找应用场景的局限性\" class=\"headerlink\" title=\"二分查找应用场景的局限性\"></a>二分查找应用场景的局限性</h3><ol>\n<li><p>首先，二分查找依赖的是顺序表结构，简单点说就是数组。</p>\n<p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果你的数据是通过其他数据结构存储的，则无法应用二分查找。</p>\n</li>\n<li><p>其次，二分查找针对的是有序数据。</p>\n<p>二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中</p>\n</li>\n<li><p>再次，数据量太小不适合二分查找。</p>\n<p><strong>例外：</strong>如果数据之间的比较操作非常耗时，不管数据量大小，推荐使用二分查找。比如，数组中存储的都是长度超过 300 的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。</p>\n</li>\n<li><p>最后，数据量太大也不适合二分查找。</p>\n</li>\n</ol>\n<h3 id=\"二分查找变形问题\"><a href=\"#二分查找变形问题\" class=\"headerlink\" title=\"二分查找变形问题\"></a>二分查找变形问题</h3><h4 id=\"查找第一个值等于给定值的元素\"><a href=\"#查找第一个值等于给定值的元素\" class=\"headerlink\" title=\"查找第一个值等于给定值的元素\"></a>查找第一个值等于给定值的元素</h4><p><strong>问题：有序数据集合中存在重复的数据，希望找到第一个值等于给定值的数据</strong></p>\n<blockquote>\n<p>下面这样一个有序数组，其中，a[5]，a[6]，a[7]的值都等于 8，是重复的数据。希望查找第一个等于 8 的数据，也就是下标是 5 的元素。</p>\n<img src=\"/article/42877/%E5%8F%98%E4%BD%93%E4%B8%80.jpg\" class title=\"变体一\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//写法一：</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid = low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt;= value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (low &lt; n &amp;&amp; a[low]==value) <span class=\"hljs-keyword\">return</span> low;<br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-comment\">//写法二：</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt; value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == <span class=\"hljs-number\">0</span>) || (a[mid - <span class=\"hljs-number\">1</span>] != value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"查找最后一个值等于给定值的元素\"><a href=\"#查找最后一个值等于给定值的元素\" class=\"headerlink\" title=\"查找最后一个值等于给定值的元素\"></a>查找最后一个值等于给定值的元素</h4><p><strong>问题：有序数据集合中存在重复的数据，希望查找最后一个值等于给定值的元素</strong></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt; value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == n - <span class=\"hljs-number\">1</span>) || (a[mid + <span class=\"hljs-number\">1</span>] != value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"查找第一个大于等于给定值的元素\"><a href=\"#查找第一个大于等于给定值的元素\" class=\"headerlink\" title=\"查找第一个大于等于给定值的元素\"></a>查找第一个大于等于给定值的元素</h4><p><strong>问题：在有序数组中，查找第一个大于等于给定值的元素</strong></p>\n<blockquote>\n<p>数组中存储的这样一个序列：3，4，6，7，10。如果查找第一个大于等于 5 的元素，那就是 6。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt;= value) &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == <span class=\"hljs-number\">0</span>) || (a[mid - <span class=\"hljs-number\">1</span>] &lt; value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"查找最后一个小于等于给定值的元素\"><a href=\"#查找最后一个小于等于给定值的元素\" class=\"headerlink\" title=\"查找最后一个小于等于给定值的元素\"></a>查找最后一个小于等于给定值的元素</h4><p><strong>问题：查找最后一个小于等于给定值的元素</strong></p>\n<blockquote>\n<p>数组中存储了这样一组数据：3，5，6，8，9，10。最后一个小于等于 7 的元素就是 6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch7</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt; value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == n - <span class=\"hljs-number\">1</span>) || (a[mid + <span class=\"hljs-number\">1</span>] &gt; value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"LeetCode实战经验\"><a href=\"#LeetCode实战经验\" class=\"headerlink\" title=\"LeetCode实战经验\"></a>LeetCode实战经验</h3><ol>\n<li><p>target 是在一个在左闭右闭的区间，<strong>[left, right]</strong> </p>\n<p>left = 0;<br>right = nums.length - 1;</p>\n<p>二分细节</p>\n<blockquote>\n<p>循环体：<strong>当left==right，区间[left, right]依然有效，所以用 &lt;=</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span> (left &lt;= right)&#123;&#125;;<br></code></pre></td></tr></table></figure>\n<p>target 在左区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">right = middle - <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n<p>target 在右区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">left = middle + <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>target 是在一个在左闭右开的区间里，<strong>[left, right)</strong> </p>\n<p>left = 0;<br>right = nums.length;</p>\n<p>二分细节</p>\n<blockquote>\n<p>循环体：<strong>因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span> (left &lt; right)&#123;&#125;;<br></code></pre></td></tr></table></figure>\n<p>target 在左区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">right = middle;<br></code></pre></td></tr></table></figure>\n<p>target 在右区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">left = middle + <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Leetcode实战\"><a href=\"#Leetcode实战\" class=\"headerlink\" title=\"Leetcode实战\"></a>Leetcode实战</h3><p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a></p>\n<ol>\n<li><p>先找到位置，遍历左右</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span>[] searchRange(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target) &#123;<br>    <span class=\"hljs-keyword\">int</span> len = nums.length;<br>    <span class=\"hljs-keyword\">if</span>(len == <span class=\"hljs-number\">0</span> || nums[<span class=\"hljs-number\">0</span>] &gt; target || nums[len-<span class=\"hljs-number\">1</span>] &lt; target)&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>&#125;;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> result = -<span class=\"hljs-number\">1</span>;<br>    result =  binarySearch(nums,target);<br>    <span class=\"hljs-keyword\">if</span>(result != -<span class=\"hljs-number\">1</span>)&#123;<br>      <span class=\"hljs-keyword\">int</span> left = result;<br>      <span class=\"hljs-keyword\">int</span> right = result;<br>      <span class=\"hljs-keyword\">while</span>(left - <span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; nums[left-<span class=\"hljs-number\">1</span>] == target )&#123;<br>        left--;<br>      &#125;<br>      <span class=\"hljs-keyword\">while</span>(right + <span class=\"hljs-number\">1</span> &lt; len &amp;&amp; nums[right+<span class=\"hljs-number\">1</span>] == target )&#123;<br>        right++;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;left,right&#125;;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>&#125;;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> right = nums.length;<br>    <span class=\"hljs-keyword\">while</span>(left &lt; right)&#123;<br>      <span class=\"hljs-keyword\">int</span> mid = left + (right - left)/<span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-keyword\">if</span>(nums[mid] &gt; target)&#123;<br>        right = mid;<br>      &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(nums[mid] &lt; target)&#123;<br>        left = mid + <span class=\"hljs-number\">1</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> mid;<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>直接找到左右边界</p>\n<ol>\n<li><p>寻找右边界（不包括target）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getRightBorder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> right = nums.length - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">int</span> rightBorder = -<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 记录一下rightBorder没有被赋值的情况</span><br>  <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>    <span class=\"hljs-keyword\">int</span> middle = left + ((right - left) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">if</span> (nums[middle] &gt; target) &#123;<br>      right = middle - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 寻找右边界，nums[middle] == target的时候更新left</span><br>      left = middle + <span class=\"hljs-number\">1</span>;<br>      rightBorder = left;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> rightBorder;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>寻找左边界（不包括target）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getLeftBorder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> right = nums.length - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">int</span> leftBorder = -<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 记录一下leftBorder没有被赋值的情况</span><br>  <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>    <span class=\"hljs-keyword\">int</span> middle = left + ((right - left) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">if</span> (nums[middle] &gt;= target) &#123; <span class=\"hljs-comment\">// 寻找左边界，nums[middle] == target的时候更新right</span><br>      right = middle - <span class=\"hljs-number\">1</span>;<br>      leftBorder = right;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      left = middle + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> leftBorder;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>主函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] searchRange(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target) &#123;<br>  <span class=\"hljs-keyword\">int</span> leftBorder = getLeftBorder(nums, target);<br>  <span class=\"hljs-keyword\">int</span> rightBorder = getRightBorder(nums, target);<br>  <span class=\"hljs-keyword\">if</span> (leftBorder == -<span class=\"hljs-number\">2</span> || rightBorder == -<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>&#125;;<br>  <span class=\"hljs-keyword\">if</span> (rightBorder - leftBorder &gt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;leftBorder + <span class=\"hljs-number\">1</span>, rightBorder - <span class=\"hljs-number\">1</span>&#125;;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> len = nums.length;<br>    <span class=\"hljs-keyword\">if</span>(len == <span class=\"hljs-number\">0</span> || nums == <span class=\"hljs-keyword\">null</span>)&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> right = nums.length;<br>    <span class=\"hljs-keyword\">while</span>(left &lt; right)&#123;<br>      <span class=\"hljs-keyword\">int</span> mid = left + (right - left)/<span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-keyword\">if</span>(nums[mid] &gt; target)&#123;<br>        right = mid;<br>      &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(nums[mid] &lt; target)&#123;<br>        left = mid + <span class=\"hljs-number\">1</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> mid;<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 分别处理如下四种情况</span><br>    <span class=\"hljs-comment\">// 目标值在数组所有元素之前 [0,0)</span><br>    <span class=\"hljs-comment\">// 目标值等于数组中某一个元素 return middle</span><br>    <span class=\"hljs-comment\">// 目标值插入数组中的位置 [left, right) ，return right 即可</span><br>    <span class=\"hljs-comment\">// 目标值在数组所有元素之后的情况 [left, right)，因为是右开区间，所以 return right</span><br>    <span class=\"hljs-keyword\">return</span> right;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","more":"<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><p>二分查找（Binary Search）算法，也叫折半查找算法</p>\n<p>二分查找针对的是一个<strong>有序的数据集合</strong>，查找思想有点<strong>类似分治思想</strong>。<strong>每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</strong></p>\n<h3 id=\"时间复杂度：O-logn\"><a href=\"#时间复杂度：O-logn\" class=\"headerlink\" title=\"时间复杂度：O(logn)\"></a>时间复杂度：O(logn)</h3><blockquote>\n<p>假设数据大小是 n，每次查找后数据都会缩小为原来的一半，也就是会除以 2。最坏情况下，直到查找区间被缩小为空，才停止。</p>\n<img src=\"/article/42877/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%8C%BA%E9%97%B4%E5%8F%98%E5%8C%96.jpg\" class title=\"二分查找区间变化\">\n<p>其中 n/2k=1 时，k 的值就是总共缩小的次数。</p>\n<p>而每一次缩小操作只涉及两个数据的大小比较，所以，经过了 k 次区间缩小操作，时间复杂度就是 O(k)。</p>\n<p>通过 n/2<sup>k</sup>=1，我们可以求得 k=log<sub>2</sub>n，所以<strong>时间复杂度就是 O(logn)</strong>。</p>\n</blockquote>\n<p>指数时间复杂度的算法在大规模数据面前是无效的</p>\n<h3 id=\"二分查找的递归与非递归实现\"><a href=\"#二分查找的递归与非递归实现\" class=\"headerlink\" title=\"二分查找的递归与非递归实现\"></a>二分查找的递归与非递归实现</h3><p><strong>非递归实现</strong></p>\n<blockquote>\n<p>有序数组中不存在重复元素，用二分查找值等于给定值的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>      <span class=\"hljs-comment\">//int mid = (low + high) / 2;</span><br>      <span class=\"hljs-keyword\">int</span> mid = low+(high-low)/<span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-keyword\">if</span> (a[mid] == value) &#123;<br>        <span class=\"hljs-keyword\">return</span> mid;<br>      &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>        low = mid + <span class=\"hljs-number\">1</span>;<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        high = mid - <span class=\"hljs-number\">1</span>;<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>注意：</strong></p>\n<ol>\n<li><p>注意是 low&lt;=high，而不是 &lt;</p>\n</li>\n<li><p><strong>mid=(low+high)/2 这种写法是有问题的</strong>。</p>\n<p>因为如果 low 和 high 比较大的话，两者之和就有可能会溢出。</p>\n<p><strong>改进的方法是将 mid 的计算方式写成 low+(high-low)/2。</strong>更进一步，如果要将性能优化到极致的话，我们可以将这里的除以 2 操作转化成位运算 <strong>low+((high-low)&gt;&gt;1)</strong>。因为相比除法运算来说，计算机处理位运算要快得多。</p>\n</li>\n<li><p>low 和 high 的更新</p>\n<p>low=mid+1，high=mid-1</p>\n</li>\n</ol>\n<p><strong>递归实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 二分查找的递归实现</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> val)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">return</span> bsearchInternally(a, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>, val);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearchInternally</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> low, <span class=\"hljs-keyword\">int</span> high, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (low &gt; high) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br><br>  <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>  <span class=\"hljs-keyword\">if</span> (a[mid] == value) &#123;<br>    <span class=\"hljs-keyword\">return</span> mid;<br>  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>    <span class=\"hljs-keyword\">return</span> bsearchInternally(a, mid+<span class=\"hljs-number\">1</span>, high, value);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> bsearchInternally(a, low, mid-<span class=\"hljs-number\">1</span>, value);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"二分查找应用场景的局限性\"><a href=\"#二分查找应用场景的局限性\" class=\"headerlink\" title=\"二分查找应用场景的局限性\"></a>二分查找应用场景的局限性</h3><ol>\n<li><p>首先，二分查找依赖的是顺序表结构，简单点说就是数组。</p>\n<p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果你的数据是通过其他数据结构存储的，则无法应用二分查找。</p>\n</li>\n<li><p>其次，二分查找针对的是有序数据。</p>\n<p>二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中</p>\n</li>\n<li><p>再次，数据量太小不适合二分查找。</p>\n<p><strong>例外：</strong>如果数据之间的比较操作非常耗时，不管数据量大小，推荐使用二分查找。比如，数组中存储的都是长度超过 300 的字符串，如此长的两个字符串之间比对大小，就会非常耗时。我们需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。</p>\n</li>\n<li><p>最后，数据量太大也不适合二分查找。</p>\n</li>\n</ol>\n<h3 id=\"二分查找变形问题\"><a href=\"#二分查找变形问题\" class=\"headerlink\" title=\"二分查找变形问题\"></a>二分查找变形问题</h3><h4 id=\"查找第一个值等于给定值的元素\"><a href=\"#查找第一个值等于给定值的元素\" class=\"headerlink\" title=\"查找第一个值等于给定值的元素\"></a>查找第一个值等于给定值的元素</h4><p><strong>问题：有序数据集合中存在重复的数据，希望找到第一个值等于给定值的数据</strong></p>\n<blockquote>\n<p>下面这样一个有序数组，其中，a[5]，a[6]，a[7]的值都等于 8，是重复的数据。希望查找第一个等于 8 的数据，也就是下标是 5 的元素。</p>\n<img src=\"/article/42877/%E5%8F%98%E4%BD%93%E4%B8%80.jpg\" class title=\"变体一\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//写法一：</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid = low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt;= value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">if</span> (low &lt; n &amp;&amp; a[low]==value) <span class=\"hljs-keyword\">return</span> low;<br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br><span class=\"hljs-comment\">//写法二：</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt; value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == <span class=\"hljs-number\">0</span>) || (a[mid - <span class=\"hljs-number\">1</span>] != value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"查找最后一个值等于给定值的元素\"><a href=\"#查找最后一个值等于给定值的元素\" class=\"headerlink\" title=\"查找最后一个值等于给定值的元素\"></a>查找最后一个值等于给定值的元素</h4><p><strong>问题：有序数据集合中存在重复的数据，希望查找最后一个值等于给定值的元素</strong></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt; value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[mid] &lt; value) &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == n - <span class=\"hljs-number\">1</span>) || (a[mid + <span class=\"hljs-number\">1</span>] != value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"查找第一个大于等于给定值的元素\"><a href=\"#查找第一个大于等于给定值的元素\" class=\"headerlink\" title=\"查找第一个大于等于给定值的元素\"></a>查找第一个大于等于给定值的元素</h4><p><strong>问题：在有序数组中，查找第一个大于等于给定值的元素</strong></p>\n<blockquote>\n<p>数组中存储的这样一个序列：3，4，6，7，10。如果查找第一个大于等于 5 的元素，那就是 6。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt;= value) &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == <span class=\"hljs-number\">0</span>) || (a[mid - <span class=\"hljs-number\">1</span>] &lt; value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"查找最后一个小于等于给定值的元素\"><a href=\"#查找最后一个小于等于给定值的元素\" class=\"headerlink\" title=\"查找最后一个小于等于给定值的元素\"></a>查找最后一个小于等于给定值的元素</h4><p><strong>问题：查找最后一个小于等于给定值的元素</strong></p>\n<blockquote>\n<p>数组中存储了这样一组数据：3，5，6，8，9，10。最后一个小于等于 7 的元素就是 6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bsearch7</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> low = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> high = n - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">while</span> (low &lt;= high) &#123;<br>    <span class=\"hljs-keyword\">int</span> mid =  low + ((high - low) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-keyword\">if</span> (a[mid] &gt; value) &#123;<br>      high = mid - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> ((mid == n - <span class=\"hljs-number\">1</span>) || (a[mid + <span class=\"hljs-number\">1</span>] &gt; value)) <span class=\"hljs-keyword\">return</span> mid;<br>      <span class=\"hljs-keyword\">else</span> low = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"LeetCode实战经验\"><a href=\"#LeetCode实战经验\" class=\"headerlink\" title=\"LeetCode实战经验\"></a>LeetCode实战经验</h3><ol>\n<li><p>target 是在一个在左闭右闭的区间，<strong>[left, right]</strong> </p>\n<p>left = 0;<br>right = nums.length - 1;</p>\n<p>二分细节</p>\n<blockquote>\n<p>循环体：<strong>当left==right，区间[left, right]依然有效，所以用 &lt;=</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span> (left &lt;= right)&#123;&#125;;<br></code></pre></td></tr></table></figure>\n<p>target 在左区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">right = middle - <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n<p>target 在右区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">left = middle + <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>target 是在一个在左闭右开的区间里，<strong>[left, right)</strong> </p>\n<p>left = 0;<br>right = nums.length;</p>\n<p>二分细节</p>\n<blockquote>\n<p>循环体：<strong>因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">while</span> (left &lt; right)&#123;&#125;;<br></code></pre></td></tr></table></figure>\n<p>target 在左区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">right = middle;<br></code></pre></td></tr></table></figure>\n<p>target 在右区间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">left = middle + <span class=\"hljs-number\">1</span>;<br></code></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Leetcode实战\"><a href=\"#Leetcode实战\" class=\"headerlink\" title=\"Leetcode实战\"></a>Leetcode实战</h3><p><a href=\"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a></p>\n<ol>\n<li><p>先找到位置，遍历左右</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span>[] searchRange(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target) &#123;<br>    <span class=\"hljs-keyword\">int</span> len = nums.length;<br>    <span class=\"hljs-keyword\">if</span>(len == <span class=\"hljs-number\">0</span> || nums[<span class=\"hljs-number\">0</span>] &gt; target || nums[len-<span class=\"hljs-number\">1</span>] &lt; target)&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>&#125;;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> result = -<span class=\"hljs-number\">1</span>;<br>    result =  binarySearch(nums,target);<br>    <span class=\"hljs-keyword\">if</span>(result != -<span class=\"hljs-number\">1</span>)&#123;<br>      <span class=\"hljs-keyword\">int</span> left = result;<br>      <span class=\"hljs-keyword\">int</span> right = result;<br>      <span class=\"hljs-keyword\">while</span>(left - <span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; nums[left-<span class=\"hljs-number\">1</span>] == target )&#123;<br>        left--;<br>      &#125;<br>      <span class=\"hljs-keyword\">while</span>(right + <span class=\"hljs-number\">1</span> &lt; len &amp;&amp; nums[right+<span class=\"hljs-number\">1</span>] == target )&#123;<br>        right++;<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;left,right&#125;;<br>    &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>,-<span class=\"hljs-number\">1</span>&#125;;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> right = nums.length;<br>    <span class=\"hljs-keyword\">while</span>(left &lt; right)&#123;<br>      <span class=\"hljs-keyword\">int</span> mid = left + (right - left)/<span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-keyword\">if</span>(nums[mid] &gt; target)&#123;<br>        right = mid;<br>      &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(nums[mid] &lt; target)&#123;<br>        left = mid + <span class=\"hljs-number\">1</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> mid;<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>直接找到左右边界</p>\n<ol>\n<li><p>寻找右边界（不包括target）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getRightBorder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> right = nums.length - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">int</span> rightBorder = -<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 记录一下rightBorder没有被赋值的情况</span><br>  <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>    <span class=\"hljs-keyword\">int</span> middle = left + ((right - left) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">if</span> (nums[middle] &gt; target) &#123;<br>      right = middle - <span class=\"hljs-number\">1</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 寻找右边界，nums[middle] == target的时候更新left</span><br>      left = middle + <span class=\"hljs-number\">1</span>;<br>      rightBorder = left;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> rightBorder;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>寻找左边界（不包括target）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getLeftBorder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> right = nums.length - <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">int</span> leftBorder = -<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 记录一下leftBorder没有被赋值的情况</span><br>  <span class=\"hljs-keyword\">while</span> (left &lt;= right) &#123;<br>    <span class=\"hljs-keyword\">int</span> middle = left + ((right - left) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">if</span> (nums[middle] &gt;= target) &#123; <span class=\"hljs-comment\">// 寻找左边界，nums[middle] == target的时候更新right</span><br>      right = middle - <span class=\"hljs-number\">1</span>;<br>      leftBorder = right;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      left = middle + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> leftBorder;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>主函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] searchRange(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target) &#123;<br>  <span class=\"hljs-keyword\">int</span> leftBorder = getLeftBorder(nums, target);<br>  <span class=\"hljs-keyword\">int</span> rightBorder = getRightBorder(nums, target);<br>  <span class=\"hljs-keyword\">if</span> (leftBorder == -<span class=\"hljs-number\">2</span> || rightBorder == -<span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>&#125;;<br>  <span class=\"hljs-keyword\">if</span> (rightBorder - leftBorder &gt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;leftBorder + <span class=\"hljs-number\">1</span>, rightBorder - <span class=\"hljs-number\">1</span>&#125;;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://leetcode.cn/problems/search-insert-position/\">35. 搜索插入位置</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> len = nums.length;<br>    <span class=\"hljs-keyword\">if</span>(len == <span class=\"hljs-number\">0</span> || nums == <span class=\"hljs-keyword\">null</span>)&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">int</span> right = nums.length;<br>    <span class=\"hljs-keyword\">while</span>(left &lt; right)&#123;<br>      <span class=\"hljs-keyword\">int</span> mid = left + (right - left)/<span class=\"hljs-number\">2</span>;<br>      <span class=\"hljs-keyword\">if</span>(nums[mid] &gt; target)&#123;<br>        right = mid;<br>      &#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(nums[mid] &lt; target)&#123;<br>        left = mid + <span class=\"hljs-number\">1</span>;<br>      &#125;<span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> mid;<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">// 分别处理如下四种情况</span><br>    <span class=\"hljs-comment\">// 目标值在数组所有元素之前 [0,0)</span><br>    <span class=\"hljs-comment\">// 目标值等于数组中某一个元素 return middle</span><br>    <span class=\"hljs-comment\">// 目标值插入数组中的位置 [left, right) ，return right 即可</span><br>    <span class=\"hljs-comment\">// 目标值在数组所有元素之后的情况 [left, right)，因为是右开区间，所以 return right</span><br>    <span class=\"hljs-keyword\">return</span> right;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"二分查找","path":"api/categories/二分查找.json"}],"tags":[{"name":"数据结构与算法,二分查找","path":"api/tags/数据结构与算法,二分查找.json"}]}