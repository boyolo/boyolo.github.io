{"title":"SpringBoot Web开发","slug":"SpringBoot-Web开发","date":"2022-02-10T09:39:33.000Z","updated":"2022-02-22T05:47:13.072Z","comments":true,"path":"api/articles/SpringBoot-Web开发.json","realPath":null,"excerpt":null,"covers":["/article/43108/image-20220215235857183.png","/article/43108/image-20220220111203172.png","/article/43108/1.png","/article/43108/2.png","/article/43108/3.png","/article/43108/image-20220221145938830.png","/article/43108/image-20220221153135200.png","/article/43108/86E55D7D3EBC4093ABAFF624FF75F523.png","/article/43108/20151223153918914.jpeg"],"cover":"/images/theme/coverphoto/Springboot.jpg","content":"<blockquote>\n<p>The scabbard is content to be dull when it protects the keenness of the sword.</p>\n<p>刀鞘保护刀的锋利，它自己则满足于它的迟钝。</p>\n</blockquote>\n<h2 id=\"SpringBoot-Web开发\"><a href=\"#SpringBoot-Web开发\" class=\"headerlink\" title=\"SpringBoot Web开发\"></a>SpringBoot Web开发</h2><a href=\"/article/4780.html\" title=\"SpringMVC\">SpringMVC</a>SpringMVC 是 Spring 提供的一个基于 MVC 设计模式的轻量级 Web 开发框架，其本身就是 Spring 框架的一部分，可以与 Spring 无缝集成，性能方面具有先天的优越性，是当今业界最主流的 Web 开发框架之一。<br><br>SpringBoot 是在 Spring 的基础上创建一款开源框架，它提供了 spring-boot-starter-web（Web 场景启动器） 来为 Web 开发予以支持。spring-boot-starter-web 为我们提供了嵌入的 Servlet 容器以及 SpringMVC 的依赖，并为 SpringMVC 提供了大量自动配置，可以适用于大多数 Web 开发场景。<br><br><br><br>### 静态资源导入<br><br>在 Web 应用中会涉及到大量的静态资源，例如 JS、CSS 和 HTML 等。我们知道，Spring MVC 导入静态资源文件时，需要配置静态资源的映射；但在 SpringBoot 中则不再需要进行此项配置，因为 SpringBoot 已经默认完成了这一工作。<br><br>Spring Boot 默认为我们提供了 3 种静态资源映射规则：<br><br>1. WebJars 映射<br>2. 默认资源映射<br>3. 静态首页（欢迎页）映射<br><br><br><br>#### WebJars 映射<br><br>WebJars 可以将 Web 前端资源（JS，CSS 等）打成一个个的 Jar 包，然后将这些 Jar 包部署到 Maven 中央仓库中进行统一管理，当 Spring Boot 项目中需要引入 Web 前端资源时，只需要访问 <a href=\"https://www.webjars.org/\">WebJars 官网</a>，找到所需资源的 pom 依赖，将其导入到项目中即可。<br><br>所有通过 WebJars 引入的前端资源都存放在当前项目类路径（classpath）下的“<strong>/META-INF/resources/webjars/</strong>” 目录中。<br><br><br><br>#### 默认静态资源映射<br><br>当访问项目中的任意资源（即“/<strong>”）时，SpringBoot 会默认从以下路径中查找资源文件（优先级依次降低）：<br><br>1. classpath:/META-INF/resources/<br>2. classpath:/resources/<br>3. classpath:/static/<br>4. classpath:/public/<br><br>这些路径又被称为静态资源文件夹，它们的优先级顺序为：classpath:/META-INF/resources/ &gt; classpath:/resources/ &gt; classpath:/static/ &gt; classpath:/public/ 。<br><br>当我们请求某个静态资源（即以“.html”结尾的请求）时，SpringBoot 会先查找优先级高的文件夹，再查找优先级低的文件夹，直到找到指定的静态资源为止。<br><br><br><br>#### 静态首页（欢迎页）映射<br><br>静态资源文件夹下的所有 index.html 被称为静态首页或者欢迎页，它们会被被 `/</strong><code>映射，换句话说就是，当我们访问</code>/<code>或者</code>/index.html<code>时，都会跳转到静态首页（欢迎页）。\n\n\n\n### Thymeleaf\n\n[官方网站](https://www.thymeleaf.org)\n\n[官方文档](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)\n\nThymeleaf 是一款用于渲染 XML/XHTML/HTML5 内容的模板引擎。它与 JSP，Velocity，FreeMaker 等模板引擎类似，也可以轻易地与 SpringMVC 等 Web 框架集成。与其它模板引擎相比，Thymeleaf 最大的特点是，即使不启动 Web 应用，也可以直接在浏览器中打开并正确显示模板页面 。\n\n\n\nThymeleaf 支持 HTML 原型，其文件后缀为</code>.html`，因此它可以直接被浏览器打开，此时浏览器会忽略未定义的 Thymeleaf 标签属性，展示 thymeleaf 模板的静态页面效果；当通过 Web 应用程序访问时，Thymeleaf 会动态地替换掉静态内容，使页面动态显示。<br><br>#### 依赖<br><br>使用thymeleaf,Maven导入依赖<br><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-spring5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf.extras<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<img src=\"/article/43108/image-20220215235857183.png\" class title=\"image-20220215235857183\">\n<p>我们要将html放在我们的<code>templates</code>目录下</p>\n<h4 id=\"Thymeleaf-的特点\"><a href=\"#Thymeleaf-的特点\" class=\"headerlink\" title=\"Thymeleaf 的特点\"></a>Thymeleaf 的特点</h4><p>Thymeleaf 模板引擎具有以下特点：</p>\n<ul>\n<li>动静结合：Thymeleaf 既可以直接使用浏览器打开，查看页面的静态效果，也可以通过 Web 应用程序进行访问，查看动态页面效果。</li>\n<li>开箱即用：Thymeleaf 提供了 Spring 标准方言以及一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>\n<li>多方言支持：它提供了 Thymeleaf 标准和 Spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL 表达式；必要时，开发人员也可以扩展和创建自定义的方言。</li>\n<li>与 SpringBoot 完美整合：SpringBoot 为 Thymeleaf 提供了的默认配置，并且还为 Thymeleaf 设置了视图解析器，因此 Thymeleaf 可以与 Spring Boot 完美整合。</li>\n</ul>\n<h4 id=\"标准表达式语法\"><a href=\"#标准表达式语法\" class=\"headerlink\" title=\"标准表达式语法\"></a>标准表达式语法</h4><p>Thymeleaf 模板引擎支持多种表达式：</p>\n<ul>\n<li><p>变量表达式：${…}</p>\n<ul>\n<li>获取对象的属性和方法</li>\n<li>使用内置的基本对象<ul>\n<li>#ctx ：上下文对象；</li>\n<li>#vars ：上下文变量；</li>\n<li>#locale：上下文的语言环境；</li>\n<li>#request：HttpServletRequest 对象（仅在 Web 应用中可用）；</li>\n<li>#response：HttpServletResponse 对象（仅在 Web 应用中可用）；</li>\n<li>#session：HttpSession 对象（仅在 Web 应用中可用）；</li>\n<li>#servletContext：ServletContext 对象（仅在 Web 应用中可用）。</li>\n</ul>\n</li>\n<li>使用内置的工具对象</li>\n</ul>\n</li>\n<li><p>选择变量表达式：*{…}</p>\n<ul>\n<li><p>选择变量表达式与变量表达式功能基本一致，只是在变量表达式的基础上增加了与 th:object 的配合使用。当使用 th:object 存储一个对象后，我们可以在其后代中使用选择变量表达式<code>*&#123;...&#125;</code>获取该对象中的属性，其中，<code>*</code> 即代表该对象。</p>\n</li>\n<li><p><code>`</code>html<br><div th:object=\"${session.user}\"></div></p>\n<pre><code>&lt;p th:text=&quot;*&#123;fisrtName&#125;&quot;&gt;firstname&lt;/p&gt;\n</code></pre><p></p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><br>- 链接表达式：@&#123;...&#125;<br><br>  - 不管是静态资源的引用，还是 form 表单的请求，凡是链接都可以用链接表达式 `@&#123;...&#125;`。 链接表达式的形式结构如下： 无参请求：@&#123;<span class=\"hljs-regexp\">/xxx&#125; 有参请求：@&#123;/xxx</span>(k1=v1,k2=v2)&#125; <br><br>- 国际化表达式：<span class=\"hljs-comment\">#&#123;...&#125;</span><br><br>- 片段引用表达式：~&#123;...&#125;<br><br>  - 推荐：~&#123;templatename::fragmentname&#125;<br>  - 支持：~&#123;templatename::<span class=\"hljs-comment\">#id&#125;</span><br>  - templatename：模版名，Thymeleaf 会根据模版名解析完整路径：/resources/templates/templatename.html，要注意文件的路径。<br>  - fragmentname：片段名，Thymeleaf 通过 <span class=\"hljs-symbol\">th:</span>fragment 声明定义代码块，即：<span class=\"hljs-symbol\">th:</span>fragment=<span class=\"hljs-string\">&quot;fragmentname&quot;</span><br>  - id：HTML 的 id 选择器，使用时要在前面加上 <span class=\"hljs-comment\"># 号，不支持 class 选择器。</span><br><br><span class=\"hljs-comment\">#### th 属性</span><br><br>|   属性    |                             描述                             |<br>| <span class=\"hljs-symbol\">:-------</span>: | <span class=\"hljs-symbol\">:----------------------------------------------------------</span>: |<br>|   <span class=\"hljs-symbol\">th:</span>id   |                     替换 HTML 的 id 属性                     |<br>|  <span class=\"hljs-symbol\">th:</span>text  |                    文本替换，转义特殊字符                    |<br>| <span class=\"hljs-symbol\">th:</span>utext  |                   文本替换，不转义特殊字符                   |<br>|  <span class=\"hljs-symbol\">th:</span>each  |              遍历，支持 Iterable、Map、数组等。              |<br>| <span class=\"hljs-symbol\">th:</span>object | 在父标签选择对象，子标签使用 *&#123;…&#125; 选择表达式选取值。 没有选择对象，那子标签使用选择表达式和 <span class=\"hljs-variable\">$&#123;</span>…&#125; 变量表达式是一样的效果。 同时即使选择了对象，子标签仍然可以使用变量表达式。 |<br>|  <span class=\"hljs-symbol\">th:</span><span class=\"hljs-keyword\">with</span>  |                       局部变量赋值运算                       |<br>|   <span class=\"hljs-symbol\">th:</span>if   |                根据条件判断是否需要展示此标签                |<br>| <span class=\"hljs-symbol\">th:</span><span class=\"hljs-keyword\">unless</span> |             和 <span class=\"hljs-symbol\">th:</span>if 判断相反，满足条件时不显示              |<br><br><br><br><span class=\"hljs-comment\">### SpringBoot定制SpringMVC</span><br><br>SpringBoot 抛弃了传统 xml 配置文件，通过配置类（标注 <span class=\"hljs-variable\">@Configuration</span> 的类，相当于一个 xml 配置文件）以 JavaBean 形式进行相关配置。<br><br>SpringBoot 对 SpringMVC 的自动配置可以满足我们的大部分需求，但是我们也可以通过自定义配置类（标注 <span class=\"hljs-variable\">@Configuration</span> 的类）并实现 WebMvcConfigurer 接口来定制 Spring MVC 配置，<br><br>在 Spring Boot 项目中，我们可以通过以下 <span class=\"hljs-number\">2</span> 中形式定制 Spring <span class=\"hljs-symbol\">MVC:</span><br><br>- 扩展 Spring MVC<br>- 全面接管 Spring MVC<br><br><span class=\"hljs-comment\">#### 扩展 SpringMVC </span><br><br>如果 SpringBoot 对 SpringMVC 的自动配置不能满足我们的需要，我们还可以通过自定义一个 WebMvcConfigurer 类型（**实现 WebMvcConfigurer 接口**）的配置类（**标注 <span class=\"hljs-variable\">@Configuration</span>，但不标注 <span class=\"hljs-variable\">@EnableWebMvc</span>** 注解的类），来扩展 SpringMVC。这样不但能够保留 SpringBoot 对 SpringMVC 的自动配置，享受 SpringBoot 自动配置带来的便利，还能额外增加自定义的 SpringMVC 配置。<br><br><span class=\"hljs-comment\">#### 全面接管 SpringMVC</span><br><br>在一些特殊情况下，我们可能需要抛弃 SpringBoot 对 SpringMVC 的全部自动配置，完全接管 SpringMVC。此时我们可以自定义一个 WebMvcConfigurer 类型（**实现 WebMvcConfigurer 接口**）的配置类，并在该类上**标注 <span class=\"hljs-variable\">@EnableWebMvc</span> 注解**，来实现完全接管 Spring MVC。<br><br><br><br><span class=\"hljs-comment\">### 国际化</span><br><br>国际化（Internationalization 简称 I18n，其中“I”和“n”分别为首末字符，<span class=\"hljs-number\">18</span> 则为中间的字符数）是指软件开发时应该具备支持多种语言和地区的功能。换句话说就是，开发的软件需要能同时应对不同国家和地区的用户访问，并根据用户地区和语言习惯，提供相应的、符合用具阅读习惯的页面和数据，例如，为中国用户提供汉语界面显示，为美国用户提供提供英语界面显示。<br><br>在 Spring 项目中实现国际化，通常需要以下 <span class=\"hljs-number\">3</span> 步：<br><br><span class=\"hljs-number\">1</span>. 编写国际化资源（配置）文件；<br><span class=\"hljs-number\">2</span>. 使用 ResourceBundleMessageSource 管理国际化资源文件；<br><span class=\"hljs-number\">3</span>. 在页面获取国际化内容。<br><span class=\"hljs-number\">4</span>. <br><br><span class=\"hljs-comment\">#### 编写国际化资源文件</span><br><br>在 Spring Boot 的类路径下创建国际化资源文件，文件名格式为：基本名_语言代码_国家或地区代码，例如 login_en_US.properties、login_zh_CN.properties。<br><br>在 src/main/resources 下创建一个 i18n 的目录，并在该目录中按照国际化资源文件命名格式分别创建以下三个文件，<br><br>- login.properties：无语言设置时生效<br>- login_en_US.properties ：英语时生效<br>- login_zh_CN.properties：中文时生效<br><br>以上国际化资源文件创建完成后，IDEA 会自动识别它们，并转换成如下的模式：<br><br>![image<span class=\"hljs-number\">-20220219143717888</span>](SpringBoot-Web开发/image<span class=\"hljs-number\">-20220219143717888</span>.png)<br><br>打开任意一个国际化资源文件，并切换为 Resource Bundle 模式，然后点击“+”号，创建所需的国际化属性<br><br><br><br><span class=\"hljs-comment\">#### 使用 ResourceBundleMessageSource 管理国际化资源文件</span><br><br>SpringBoot 已经对 ResourceBundleMessageSource 提供了默认的自动配置。<br><br>只需要在 SpringBoot 全局配置文件中，使用配置参数`spring.messages.basename`指定我们自定义的国际资源文件的基本名即可，代码如下（当指定多个资源文件时，用逗号分隔）。<br><br>```properties<br>spring.messages.basename=i18n.login<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"获取国际化内容\"><a href=\"#获取国际化内容\" class=\"headerlink\" title=\"获取国际化内容\"></a>获取国际化内容</h4><p>由于页面使用的是 Tymeleaf 模板引擎，因此我们可以通过表达式 #{…} 获取国际化内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-sm&quot;</span> <span class=\"hljs-attr\">th:href</span>=<span class=\"hljs-string\">&quot;@&#123;index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-sm&quot;</span> <span class=\"hljs-attr\">th:href</span>=<span class=\"hljs-string\">&quot;@&#123;index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"SpringBoot拦截器\"><a href=\"#SpringBoot拦截器\" class=\"headerlink\" title=\"SpringBoot拦截器\"></a>SpringBoot拦截器</h3><p>在 Spring Boot 项目中，使用拦截器功能通常需要以下 3 步：</p>\n<ol>\n<li>定义拦截器；</li>\n<li>注册拦截器；</li>\n<li>指定拦截规则（如果是拦截所有，静态资源也会被拦截）。</li>\n</ol>\n<h4 id=\"定义拦截器\"><a href=\"#定义拦截器\" class=\"headerlink\" title=\"定义拦截器\"></a>定义拦截器</h4><p>在 SpringBoot 中定义拦截器十分的简单，只需要创建一个拦截器类，并实现 <code>HandlerInterceptor</code> 接口即可。</p>\n<p>HandlerInterceptor 接口中定义以下 3 个方法，如下表。</p>\n<table>\n<thead>\n<tr>\n<th>返回值类型</th>\n<th>方法声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</td>\n<td>该方法在控制器处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</td>\n</tr>\n<tr>\n<td>void</td>\n<td>postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</td>\n<td>该方法在控制器处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步修改。</td>\n</tr>\n<tr>\n<td>void</td>\n<td>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</td>\n<td>该方法在视图渲染结束后执行，可以通过此方法实现资源清理、记录日志信息等工作。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginHandlerInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HandlerInterceptor</span> </span>&#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br><br>    <span class=\"hljs-comment\">//登录成功 有用户的session</span><br>    Object loginUser = request.getSession().getAttribute(<span class=\"hljs-string\">&quot;loginUser&quot;</span>);<br>    <span class=\"hljs-comment\">//没有登录</span><br>    <span class=\"hljs-keyword\">if</span> (loginUser==<span class=\"hljs-keyword\">null</span>)&#123; <br>      request.setAttribute(<span class=\"hljs-string\">&quot;msg&quot;</span>,<span class=\"hljs-string\">&quot;没有权限，请先登录&quot;</span>);<br>      request.getRequestDispatcher(<span class=\"hljs-string\">&quot;/index.html&quot;</span>).forward(request,response);<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"注册拦截器\"><a href=\"#注册拦截器\" class=\"headerlink\" title=\"注册拦截器\"></a>注册拦截器</h4><p>创建一个实现了 WebMvcConfigurer 接口的配置类（使用了 <code>@Configuration</code> 注解的类），重写 <code>addInterceptors()</code> 方法，并在该方法中调用 <code>registry.addInterceptor()</code> 方法将自定义的拦截器注册到容器中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class=\"hljs-comment\">//@Configuration标注在类上，相当于把该类作为spring的xml配置文件中的&lt;beans&gt;，作用为：配置spring容器(应用上下文)</span><br><span class=\"hljs-meta\">@Configuration</span>  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyMvcConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">WebMvcConfigurer</span> </span>&#123;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> </span>&#123;<br>    registry.addInterceptor(<span class=\"hljs-keyword\">new</span> LoginHandlerInterceptor());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"指定拦截规则\"><a href=\"#指定拦截规则\" class=\"headerlink\" title=\"指定拦截规则\"></a>指定拦截规则</h4><p>在使用 registry.addInterceptor() 方法将拦截器注册到容器中后，我们便可以继续指定拦截器的拦截规则了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">registry.addInterceptor(<span class=\"hljs-keyword\">new</span> LoginHandlerInterceptor())<br>        .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>)<br>        .excludePathPatterns(<span class=\"hljs-string\">&quot;/index.html&quot;</span>,<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-string\">&quot;/user/login&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>在指定拦截器拦截规则时，调用了两个方法，这两个方法的说明如下：</p>\n<ul>\n<li>addPathPatterns：该方法用于指定拦截路径，例如拦截路径为“/**”，表示拦截所有请求，包括对静态资源的请求。</li>\n<li>excludePathPatterns：该方法用于排除拦截路径，即指定不需要被拦截器拦截的请求。</li>\n</ul>\n<h3 id=\"SpringBoot-JDBC访问数据库\"><a href=\"#SpringBoot-JDBC访问数据库\" class=\"headerlink\" title=\"SpringBoot JDBC访问数据库\"></a>SpringBoot JDBC访问数据库</h3><p>进行<a href=\"/article/37040.html\" title=\"JDBC配置\">JDBC配置</a>:</p>\n<ol>\n<li>在 pom.xml 中导入 JDBC 场景启动器：spring-boot-starter-data-jdbc</li>\n<li>JDBC 的场景启动器中并没有导入数据库驱动，我们需要根据自身的需求引入所需的数据库驱动。</li>\n<li>在导入了 JDBC 场景启动器和数据库驱动后，接下来我们就可以在配置文件（application.properties/yml）中配置数据源了</li>\n</ol>\n<h3 id=\"SpringBoot整合MyBatis\"><a href=\"#SpringBoot整合MyBatis\" class=\"headerlink\" title=\"SpringBoot整合MyBatis\"></a>SpringBoot整合MyBatis</h3><p>MyBatis 是一个半自动化的 ORM 框架，所谓半自动化是指 MyBatis 只支持将数据库查出的数据映射到 POJO 实体类上，而实体到数据库的映射则需要我们自己编写 SQL 语句实现，相较于Hibernate 这种完全自动化的框架，Mybatis 更加灵活，我们可以根据自身的需求编写 sql 语句来实现复杂的数据库操作。</p>\n<p>进行<a href=\"/article/37040.html\" title=\"MyBatis配置\">MyBatis配置</a>:</p>\n<ol>\n<li>在项目的 pom.xml 中引入 mybatis-spring-boot-starter 的依赖</li>\n<li>在 SpringBoot 的配置文件（application.properties/yml）中对 MyBatis 进行配置，例如指定 mapper.xml 的位置、实体类的位置、是否开启驼峰命名法等等</li>\n</ol>\n<h3 id=\"SpringSecurity\"><a href=\"#SpringSecurity\" class=\"headerlink\" title=\"SpringSecurity\"></a>SpringSecurity</h3><p>SpringSecurity 是 Spring 家族中的一个安全管理框架，实际上，在 SpringBoot 出现之前，SpringSecurity 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。</p>\n<p><strong>Apache Shiro</strong><br>一个功能强大且易于使用的Java安全框架，提供了认证、授权、加密、会话管理。<br><strong>Spring Security</strong><br>Spring家族的一员，是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring的IOC（控制反转）、DI（依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，为了减少企业系统安全控制编写大量重复代码的工作。</p>\n<a href=\"/article/37040.html\" title=\"SpringSecurity配置\">SpringSecurity配置</a>\n<p><strong>通过SpringSecurity 对不同用户角色进行授权</strong></p>\n<img src=\"/article/43108/image-20220220111203172.png\" class title=\"image-20220220111203172\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><br><span class=\"hljs-meta\">@EnableWebSecurity</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SecurityConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebSecurityConfigurerAdapter</span> </span>&#123;<br>  <span class=\"hljs-comment\">//链式编程</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">(HttpSecurity http)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">//首页所有人可以访问 ,功能也只有对应有权限的人才能反应</span><br><br>    <span class=\"hljs-comment\">//请求授权的规则</span><br>    http.authorizeRequests().antMatchers(<span class=\"hljs-string\">&quot;/&quot;</span>).permitAll()<br>      .antMatchers(<span class=\"hljs-string\">&quot;/level1/**&quot;</span>).hasRole(<span class=\"hljs-string\">&quot;vip1&quot;</span>)<br>      .antMatchers(<span class=\"hljs-string\">&quot;/level2/**&quot;</span>).hasRole(<span class=\"hljs-string\">&quot;vip2&quot;</span>)<br>      .antMatchers(<span class=\"hljs-string\">&quot;/level3/**&quot;</span>).hasRole(<span class=\"hljs-string\">&quot;vip3&quot;</span>);<br><br>    <span class=\"hljs-comment\">//没有权限默认到登录页面   需要开启登录的页面</span><br>    http.formLogin().loginPage(<span class=\"hljs-string\">&quot;/toLogin&quot;</span>);<br><br>    <span class=\"hljs-comment\">//防止网站攻击  get post</span><br>    <span class=\"hljs-comment\">//http.csrf().disable();  //关闭请求跨站攻击</span><br><br>    <span class=\"hljs-comment\">//注销 注销完成跳转到首页</span><br>    http.logout().logoutSuccessUrl(<span class=\"hljs-string\">&quot;/&quot;</span>);<br><br>    <span class=\"hljs-comment\">//开启记住我功能  cookie 自定义接收前端的参数</span><br>    http.rememberMe().rememberMeParameter(<span class=\"hljs-string\">&quot;remember&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-comment\">//认证</span><br>  <span class=\"hljs-comment\">//密码编码：passwordEncoder</span><br>  <span class=\"hljs-comment\">//springSecurity 5.0+ 新增了很多加密方法</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">(AuthenticationManagerBuilder auth)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    auth.inMemoryAuthentication().passwordEncoder(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder())<br>      .withUser(<span class=\"hljs-string\">&quot;bobo&quot;</span>).password(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"hljs-string\">&quot;123456&quot;</span>)).roles(<span class=\"hljs-string\">&quot;vip2&quot;</span>,<span class=\"hljs-string\">&quot;vip3&quot;</span>)<br>      .and()<br>      .withUser(<span class=\"hljs-string\">&quot;root&quot;</span>).password(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"hljs-string\">&quot;123456&quot;</span>)).roles(<span class=\"hljs-string\">&quot;vip1&quot;</span>,<span class=\"hljs-string\">&quot;vip2&quot;</span>,<span class=\"hljs-string\">&quot;vip3&quot;</span>)<br>      .and()<br>      .withUser(<span class=\"hljs-string\">&quot;guest&quot;</span>).password(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"hljs-string\">&quot;123456&quot;</span>)).roles(<span class=\"hljs-string\">&quot;vip1&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"shiro\"><a href=\"#shiro\" class=\"headerlink\" title=\"shiro\"></a>shiro</h3><p><a href=\"https://shiro.apache.org/tutorial.html\">官方文档</a></p>\n<p>Apache Shiro 是一个强大灵活的开源安全框架，可以完全处理身份验证、授权、加密和会话管理。</p>\n<p>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。</p>\n<img src=\"/article/43108/1.png\" class title=\"img\">\n<ul>\n<li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li>\n<li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li>\n<li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li>\n<li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li>\n<li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li>\n<li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li>\n<li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li>\n<li><strong>Testing</strong>：提供测试支持；</li>\n<li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li>\n<li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li>\n<li></li>\n</ul>\n<p><strong>从外部</strong></p>\n<img src=\"/article/43108/2.png\" class title=\"img\">\n<p>应用代码直接交互的对象是 Subject，也就是说 Shiro 的对外 API 核心就是 Subject</p>\n<ul>\n<li><p><strong>Subject</strong>：主体，代表了当前 “用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是 Subject，即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p>\n</li>\n<li><p><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p>\n</li>\n<li><p><strong>Realm</strong>：域，Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p>\n</li>\n</ul>\n<p>也就是说对于我们而言，最简单的一个 <code>Shiro</code> 应用：</p>\n<ol>\n<li>应用代码通过 <code>Subject</code> 来进行认证和授权，而 <code>Subject</code> 又委托给 <code>SecurityManager</code>；</li>\n<li>我们需要给 <code>Shiro</code> 的 <code>SecurityManager</code> 注入 <code>Realm</code>，从而让 <code>SecurityManager</code> 能得到合法的用户及其权限进行判断。</li>\n</ol>\n<p><strong>从以上也可以看出，Shiro 不提供维护用户 / 权限，而是通过 Realm 让开发人员自己注入。</strong></p>\n<p><strong>从内部</strong></p>\n<img src=\"/article/43108/3.png\" class title=\"img\">\n<ul>\n<li><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的 “用户”；</li>\n<li><strong>SecurityManager</strong>：相当于 SpringMVC 中的 DispatcherServlet 或者 Struts2 中的 FilterDispatcher；是 Shiro 的心脏；所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证和授权、及会话、缓存的管理。</li>\n<li><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得 Shiro 默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li>\n<li><strong>Authorizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li>\n<li><strong>Realm</strong>：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是 LDAP 实现，或者内存实现等等；由用户提供；注意：Shiro 不知道你的用户 / 权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的 Realm；</li>\n<li><strong>SessionManager</strong>：如果写过 Servlet 就应该知道 Session 的概念，Session 呢需要有人去管理它的生命周期，这个组件就是 SessionManager；而 Shiro 并不仅仅可以用在 Web 环境，也可以用在如普通的 JavaSE 环境、EJB 等环境；所以呢，Shiro 就抽象了一个自己的 Session 来管理主体与应用之间交互的数据；这样的话，比如我们在 Web 环境用，刚开始是一台 Web 服务器；接着又上了台 EJB 服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到 Memcached 服务器）；</li>\n<li><strong>SessionDAO</strong>：DAO 大家都用过，数据访问对象，用于会话的 CRUD，比如我们想把 Session 保存到数据库，那么可以实现自己的 SessionDAO，通过如 JDBC 写到数据库；比如想把 Session 放到 Memcached 中，可以实现自己的 Memcached SessionDAO；另外 SessionDAO 中可以使用 Cache 进行缓存，以提高性能；</li>\n<li><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li>\n<li><strong>Cryptography</strong>：密码模块，Shiro 提供了一些常见的加密组件用于如密码加密 / 解密的。</li>\n</ul>\n<h4 id=\"Shiro快速开始\"><a href=\"#Shiro快速开始\" class=\"headerlink\" title=\"Shiro快速开始\"></a>Shiro快速开始</h4><a href=\"/article/37040.html\" title=\"Shiro配置\">Shiro配置</a>\n<p><strong>导入shiro依赖包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.8.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- Shiro uses SLF4J for logging.  We&#x27;ll use the &#x27;simple&#x27; binding</span><br><span class=\"hljs-comment\">             in this example app.  See http://www.slf4j.org for more info. --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong><code>shiro.ini</code></strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[users]</span><br><span class=\"hljs-attr\">root</span> = secret, admin<br><span class=\"hljs-attr\">guest</span> = guest, guest<br><span class=\"hljs-attr\">presidentskroob</span> = <span class=\"hljs-number\">12345</span>, president<br><span class=\"hljs-attr\">darkhelmet</span> = ludicrousspeed, darklord, schwartz<br><span class=\"hljs-attr\">lonestarr</span> = vespa, goodguy, schwartz<br><br><span class=\"hljs-comment\"># -----------------------------------------------------------------------------</span><br><span class=\"hljs-comment\"># Roles with assigned permissions</span><br><span class=\"hljs-comment\"># roleName = perm1, perm2, ..., permN</span><br><span class=\"hljs-comment\"># -----------------------------------------------------------------------------</span><br><span class=\"hljs-section\">[roles]</span><br><span class=\"hljs-attr\">admin</span> = *<br><span class=\"hljs-attr\">schwartz</span> = lightsaber:*<br><span class=\"hljs-attr\">goodguy</span> = winnebago:drive:eagle5<br></code></pre></td></tr></table></figure>\n<p><code>Quickstart</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.apache.shiro.SecurityUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.*;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.ini.IniSecurityManagerFactory;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.mgt.SecurityManager;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.session.Session;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.subject.Subject;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.lang.util.Factory;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Simple Quickstart application showing how to use Shiro&#x27;s API.</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 0.9 RC2</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Quickstart</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">transient</span> Logger log = LoggerFactory.getLogger(Quickstart.class);<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    <br>    <br>    Factory&lt;SecurityManager&gt; factory = <span class=\"hljs-keyword\">new</span> IniSecurityManagerFactory(<span class=\"hljs-string\">&quot;classpath:shiro.ini&quot;</span>);<br>    SecurityManager securityManager = factory.getInstance();<br>    SecurityUtils.setSecurityManager(securityManager);<br><br>    <span class=\"hljs-comment\">// get the currently executing user:</span><br>    <span class=\"hljs-comment\">//获取当前的用户对象：Subject</span><br>    Subject currentUser = SecurityUtils.getSubject();<br><br>    <span class=\"hljs-comment\">//通过当前对象拿到Session</span><br>    Session session = currentUser.getSession();<br>    <br>    session.setAttribute(<span class=\"hljs-string\">&quot;someKey&quot;</span>, <span class=\"hljs-string\">&quot;aValue&quot;</span>);<br>    String value = (String) session.getAttribute(<span class=\"hljs-string\">&quot;someKey&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (value.equals(<span class=\"hljs-string\">&quot;aValue&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Retrieved the correct value! [&quot;</span> + value + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 测试当前用户是否被认证</span><br>    <span class=\"hljs-keyword\">if</span> (!currentUser.isAuthenticated()) &#123;<br>      <br>      <span class=\"hljs-comment\">//Token 令牌</span><br>      UsernamePasswordToken token = <span class=\"hljs-keyword\">new</span> UsernamePasswordToken(<span class=\"hljs-string\">&quot;lonestarr&quot;</span>, <span class=\"hljs-string\">&quot;vespa&quot;</span>);<br>      <span class=\"hljs-comment\">//设置记住我</span><br>      token.setRememberMe(<span class=\"hljs-keyword\">true</span>);<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">//执行登陆操作</span><br>        currentUser.login(token);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (UnknownAccountException uae) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;There is no user with username of &quot;</span> + token.getPrincipal());<br>      &#125; <span class=\"hljs-keyword\">catch</span> (IncorrectCredentialsException ice) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class=\"hljs-string\">&quot; was incorrect!&quot;</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (LockedAccountException lae) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class=\"hljs-string\">&quot; is locked.  &quot;</span> +<br>                 <span class=\"hljs-string\">&quot;Please contact your administrator to unlock it.&quot;</span>);<br>      &#125;<br>      <span class=\"hljs-comment\">// ... catch more exceptions here (maybe custom ones specific to your application?</span><br>      <span class=\"hljs-keyword\">catch</span> (AuthenticationException ae) &#123;<br>        <span class=\"hljs-comment\">//认证异常</span><br>        <span class=\"hljs-comment\">//unexpected condition?  error?</span><br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//say who they are:</span><br>    <span class=\"hljs-comment\">//print their identifying principal (in this case, a username):</span><br>    log.info(<span class=\"hljs-string\">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class=\"hljs-string\">&quot;] logged in successfully.&quot;</span>);<br><br>    <span class=\"hljs-comment\">//test a role:</span><br>    <span class=\"hljs-keyword\">if</span> (currentUser.hasRole(<span class=\"hljs-string\">&quot;schwartz&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;May the Schwartz be with you!&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Hello, mere mortal.&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//粗粒度</span><br>    <span class=\"hljs-comment\">//test a typed permission (not instance-level)</span><br>    <span class=\"hljs-keyword\">if</span> (currentUser.isPermitted(<span class=\"hljs-string\">&quot;lightsaber:wield&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//细粒度</span><br>    <span class=\"hljs-comment\">//a (very powerful) Instance Level permission:</span><br>    <span class=\"hljs-keyword\">if</span> (currentUser.isPermitted(<span class=\"hljs-string\">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +<br>               <span class=\"hljs-string\">&quot;Here are the keys - have fun!&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//all done - log out!</span><br>    currentUser.logout();<br><br>    System.exit(<span class=\"hljs-number\">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"SpringBoot整合shiro\"><a href=\"#SpringBoot整合shiro\" class=\"headerlink\" title=\"SpringBoot整合shiro\"></a>SpringBoot整合shiro</h4><p><code>pom.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>  <br>  <span class=\"hljs-comment\">&lt;!-- spring整合shiro的包 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>版本号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--web--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--thymeleaf--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-spring5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf.extras<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><code>Shiro 配置类 config</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.config; <br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration; <br><span class=\"hljs-comment\">//声明为配置类 </span><br><span class=\"hljs-meta\">@Configuration</span> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ShiroConfig</span> </span>&#123; <br>  <br>  <span class=\"hljs-comment\">//创建 ShiroFilterFactoryBean </span><br>  <span class=\"hljs-meta\">@Bean</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ShiroFilterFactoryBean <span class=\"hljs-title\">getShiroFilterFactoryBean</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Qualifier(&quot;securityManager&quot;)</span>DefaultWebSecurityMan ager securityManager)</span></span>&#123; <br>    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class=\"hljs-keyword\">new</span> ShiroFilterFactoryBean(); <br>    <span class=\"hljs-comment\">//设置安全管理器 </span><br>    shiroFilterFactoryBean.setSecurityManager(securityManager); 、<br>    <span class=\"hljs-comment\">/* 添加Shiro内置过滤器，常用的有如下过滤器： </span><br><span class=\"hljs-comment\">      anon： 无需认证就可以访问 </span><br><span class=\"hljs-comment\">      authc： 必须认证才可以访问 </span><br><span class=\"hljs-comment\">      user： 如果使用了记住我功能就可以直接访问 </span><br><span class=\"hljs-comment\">      perms: 拥有某个资源权限才可以访问 </span><br><span class=\"hljs-comment\">      role： 拥有某个角色权限才可以访问 </span><br><span class=\"hljs-comment\">    */</span><br>    Map&lt;String,String&gt; filterMap = <span class=\"hljs-keyword\">new</span> LinkedHashMap&lt;String, String&gt;();<br>    <span class=\"hljs-comment\">//&quot;跳转目标&quot;,&quot;权限&quot;</span><br>    filterMap.put(<span class=\"hljs-string\">&quot;/user/add&quot;</span>,<span class=\"hljs-string\">&quot;authc&quot;</span>); <br>    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);<br>    <span class=\"hljs-keyword\">return</span> shiroFilterFactoryBean; <br>  &#125;<br>  <br>  <span class=\"hljs-comment\">//创建 DefaultWebSecurityManager </span><br>  <span class=\"hljs-meta\">@Bean(name = &quot;securityManager&quot;)</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DefaultWebSecurityManager <span class=\"hljs-title\">getDefaultWebSecurityManager</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Qualifier(&quot;userRealm&quot;)</span>UserRealm userRealm)</span></span>&#123; <br>    DefaultWebSecurityManager securityManager = <span class=\"hljs-keyword\">new</span> DefaultWebSecurityManager(); <br>    <span class=\"hljs-comment\">//关联Realm </span><br>    securityManager.setRealm(userRealm); <br>    <span class=\"hljs-keyword\">return</span> securityManager; <br>  &#125;<br>  <br>  <span class=\"hljs-comment\">//创建 realm 对象 </span><br>  <span class=\"hljs-meta\">@Bean</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserRealm <span class=\"hljs-title\">userRealm</span><span class=\"hljs-params\">()</span></span>&#123; <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UserRealm(); <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>realm</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.config; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.AuthenticationException; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.AuthenticationInfo; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.AuthenticationToken; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authz.AuthorizationInfo; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.realm.AuthorizingRealm; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.subject.PrincipalCollection; <br><span class=\"hljs-comment\">//自定义Realm </span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AuthorizingRealm</span> </span>&#123; <br>  <span class=\"hljs-comment\">//执行授权逻辑 </span><br>  <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AuthorizationInfo <span class=\"hljs-title\">doGetAuthorizationInfo</span><span class=\"hljs-params\">(PrincipalCollection principals)</span> </span>&#123; <br>    System.out.println(<span class=\"hljs-string\">&quot;执行了=&gt;授权逻辑PrincipalCollection&quot;</span>); <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>; <br>  &#125;<br>  <span class=\"hljs-comment\">//执行认证逻辑 </span><br>  <span class=\"hljs-meta\">@Override</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AuthenticationInfo <span class=\"hljs-title\">doGetAuthenticationInfo</span><span class=\"hljs-params\">(AuthenticationToken token)</span> <span class=\"hljs-keyword\">throws</span> AuthenticationException </span>&#123; <br>    System.out.println(<span class=\"hljs-string\">&quot;执行了=&gt;认证逻辑AuthenticationToken&quot;</span>); <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Swagger\"><a href=\"#Swagger\" class=\"headerlink\" title=\"Swagger\"></a>Swagger</h3><p><a href=\"https://swagger.io\">Swagger官方网站</a></p>\n<p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>\n<p>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。</p>\n<p><strong>优势</strong></p>\n<ul>\n<li>支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了，对程序员来说非常方便，可以节约写文档的时间去学习新技术。</li>\n<li>提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试。参数和格式都定好了，直接在界面上输入参数对应的值即可在线测试接口。</li>\n</ul>\n<h4 id=\"SpringBoot集成Swagger\"><a href=\"#SpringBoot集成Swagger\" class=\"headerlink\" title=\"SpringBoot集成Swagger\"></a><strong>SpringBoot集成Swagger</strong></h4><a href=\"/article/37040.html\" title=\"Swagger配置\">Swagger配置</a>\n<p><strong>springboot版本使用2.5.6 swagger版本使用3.0.0</strong></p>\n<h4 id=\"Swagger-UI配置\"><a href=\"#Swagger-UI配置\" class=\"headerlink\" title=\"Swagger-UI配置\"></a>Swagger-UI配置</h4><p>访问测试 ：<a href=\"http://localhost:8080/swagger-ui/index.html\">http://localhost:8080/swagger-ui/index.html</a> ，可以看到swagger的界面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.swagger.config;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.service.ApiInfo;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.service.Contact;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.spi.DocumentationType;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> * EnableOpenApi 开启Swagger2</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableOpenApi</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwaggerConfig</span> </span>&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  配置Swagger 的 Docket的 Bean实例</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docket</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2)<br>      .apiInfo(apiInfo());<br>  &#125;<br><br>  <span class=\"hljs-comment\">//    //配置Swagger信息 apiInfo</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ApiInfo <span class=\"hljs-title\">apiInfo</span><span class=\"hljs-params\">()</span></span>&#123;<br>    Contact contact = <span class=\"hljs-keyword\">new</span> Contact(<span class=\"hljs-string\">&quot;Bobo&quot;</span>, <span class=\"hljs-string\">&quot;https://boyolo.github.io&quot;</span>, <span class=\"hljs-string\">&quot;beau_renbo@163.com&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ApiInfo(<br>      <span class=\"hljs-string\">&quot;BoBo Api Documentation&quot;</span>,<br>      <span class=\"hljs-string\">&quot;Boyolo Api Documentation&quot;</span>,<br>      <span class=\"hljs-string\">&quot;1.0&quot;</span>,<br>      <span class=\"hljs-string\">&quot;https://boyolo.github.io&quot;</span>,<br>      contact,<br>      <span class=\"hljs-string\">&quot;Apache 2.0&quot;</span>,<br>      <span class=\"hljs-string\">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>      <span class=\"hljs-keyword\">new</span> ArrayList());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/43108/image-20220221145938830.png\" class title=\"image-20220221145938830\">\n<h4 id=\"swagger配置扫描接口以及开关\"><a href=\"#swagger配置扫描接口以及开关\" class=\"headerlink\" title=\"swagger配置扫描接口以及开关\"></a>swagger配置扫描接口以及开关</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *  配置Swagger 的 Docket的 Bean实例</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docket</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2)<br>    .apiInfo(apiInfo())<br>    <span class=\"hljs-comment\">//是否启动swagger ，如果为false，则swagger不能再浏览器中访问</span><br>    .enable(<span class=\"hljs-keyword\">false</span>)<br>    .select()<br>    <span class=\"hljs-comment\">//RequestHandlerSelectors 配置要扫描接口的方式</span><br>    <span class=\"hljs-comment\">//basePackage 指定要扫描的包  RequestHandlerSelectors.basePackage(&quot;com.bobo.swagger.controller&quot;)</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.any()  扫描全部</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.none() 都不扫描</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.withClassAnnotation() 扫描类上的注解   参数是一个注解的反射对象</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.withMethodAnnotation()  扫描方法上的注解</span><br>    .apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))<br>    <span class=\"hljs-comment\">//过滤什么路径</span><br>    .paths(PathSelectors.ant(<span class=\"hljs-string\">&quot;bobo/**&quot;</span>))<br>    .build();<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>.select() 与 .build() 属于一套</p>\n<p>中间除了.apis() 与 .paths() 不能再添加其他方法</p>\n</blockquote>\n<p><strong>思考</strong></p>\n<p>如何做使Swagger在生产环境中使用，在发布的时候不使用？</p>\n<ul>\n<li>判断是不是生产环境   flag == false</li>\n<li>注入enable(flag)</li>\n</ul>\n<p><strong>配置swagger API文档的分组</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docketA</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"hljs-string\">&quot;A&quot;</span>);<br>&#125;<br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docketB</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"hljs-string\">&quot;B&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/43108/image-20220221153135200.png\" class title=\"image-20220221153135200\">\n<h3 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h3><p>分布式系统（<em>distributed system</em>）是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。</p>\n<h4 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h4><p>RPC是远程过程调用（Remote Procedure Call）的缩写形式，是一种进程间的通信方式，是一种技术思想，而不是规范。SAP系统RPC调用的原理其实很简单，有一些类似于三层构架的C/S系统，第三方的客户程序通过接口调用SAP内部的标准或自定义函数，获得函数返回的数据进行处理后显示或打印。</p>\n<p><strong>基本流程</strong></p>\n<img src=\"/article/43108/86E55D7D3EBC4093ABAFF624FF75F523.png\" class title=\"六、RPC基本原理_RPC基本原理\">\n<p>RPC两个核心模块：序列化、通讯</p>\n<h4 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h4><p><a href=\"https://dubbo.apache.org/zh/docs/\">官方文档</a></p>\n<p>Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。简单的说，dubbo就是个服务框架，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有dubbo这样的分布式服务框架的需求，并且本质上是个服务调用的东东，说白了就是个远程服务调用的分布式框架。</p>\n<img src=\"/article/43108/20151223153918914.jpeg\" class title=\"dubbo架构图\">\n<p>Provider: 暴露服务的服务提供方。；<br>Consumer: 调用远程服务的服务消费方；<br>Registry: 服务注册与发现的注册中心；<br>Monitor: 统计服务的调用次调和调用时间的监控中心；<br>Container: 服务运行容器。</p>\n<h4 id=\"zookeeper\"><a href=\"#zookeeper\" class=\"headerlink\" title=\"zookeeper\"></a>zookeeper</h4><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>\n<p><a href=\"https://zookeeper.apache.org/releases.html\">下载地址</a></p>\n<p>3.5版本以后要下载后缀为<strong>bin.tar.gz</strong>的文件</p>\n<p>更改默认配置文件名称 将conf目录下 <strong>zoo_sample.cfg</strong> 改为 zoo.cfg</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">&gt; /apache-zookeeper<span class=\"hljs-number\">-3.6</span><span class=\"hljs-number\">.3</span>-bin/bin/zkServer.sh start<br> .jenv/shims/java<br> ZooKeeper JMX enabled <span class=\"hljs-keyword\">by</span> <span class=\"hljs-literal\">default</span><br> apache-zookeeper<span class=\"hljs-number\">-3.6</span><span class=\"hljs-number\">.3</span>- bin/bin/../conf/zoo.cfg<br> Starting zookeeper ... STARTED<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">&gt; ./zkServer.sh stop <br> ZooKeeper JMX enabled <span class=\"hljs-keyword\">by</span> <span class=\"hljs-literal\">default</span><br> Using config: zookeeper<span class=\"hljs-number\">-3.4</span><span class=\"hljs-number\">.10</span>/bin/../conf/zoo.cfg<br> Stopping zookeeper ... STOPPED<br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p>The scabbard is content to be dull when it protects the keenness of the sword.</p>\n<p>刀鞘保护刀的锋利，它自己则满足于它的迟钝。</p>\n</blockquote>\n<h2 id=\"SpringBoot-Web开发\"><a href=\"#SpringBoot-Web开发\" class=\"headerlink\" title=\"SpringBoot Web开发\"></a>SpringBoot Web开发</h2><a href=\"/article/4780.html\" title=\"SpringMVC\">SpringMVC</a>SpringMVC 是 Spring 提供的一个基于 MVC 设计模式的轻量级 Web 开发框架，其本身就是 Spring 框架的一部分，可以与 Spring 无缝集成，性能方面具有先天的优越性，是当今业界最主流的 Web 开发框架之一。<br><br>SpringBoot 是在 Spring 的基础上创建一款开源框架，它提供了 spring-boot-starter-web（Web 场景启动器） 来为 Web 开发予以支持。spring-boot-starter-web 为我们提供了嵌入的 Servlet 容器以及 SpringMVC 的依赖，并为 SpringMVC 提供了大量自动配置，可以适用于大多数 Web 开发场景。<br><br><br><br>### 静态资源导入<br><br>在 Web 应用中会涉及到大量的静态资源，例如 JS、CSS 和 HTML 等。我们知道，Spring MVC 导入静态资源文件时，需要配置静态资源的映射；但在 SpringBoot 中则不再需要进行此项配置，因为 SpringBoot 已经默认完成了这一工作。<br><br>Spring Boot 默认为我们提供了 3 种静态资源映射规则：<br><br>1. WebJars 映射<br>2. 默认资源映射<br>3. 静态首页（欢迎页）映射<br><br><br><br>#### WebJars 映射<br><br>WebJars 可以将 Web 前端资源（JS，CSS 等）打成一个个的 Jar 包，然后将这些 Jar 包部署到 Maven 中央仓库中进行统一管理，当 Spring Boot 项目中需要引入 Web 前端资源时，只需要访问 <a href=\"https://www.webjars.org/\">WebJars 官网</a>，找到所需资源的 pom 依赖，将其导入到项目中即可。<br><br>所有通过 WebJars 引入的前端资源都存放在当前项目类路径（classpath）下的“<strong>/META-INF/resources/webjars/</strong>” 目录中。<br><br><br><br>#### 默认静态资源映射<br><br>当访问项目中的任意资源（即“/<strong>”）时，SpringBoot 会默认从以下路径中查找资源文件（优先级依次降低）：<br><br>1. classpath:/META-INF/resources/<br>2. classpath:/resources/<br>3. classpath:/static/<br>4. classpath:/public/<br><br>这些路径又被称为静态资源文件夹，它们的优先级顺序为：classpath:/META-INF/resources/ &gt; classpath:/resources/ &gt; classpath:/static/ &gt; classpath:/public/ 。<br><br>当我们请求某个静态资源（即以“.html”结尾的请求）时，SpringBoot 会先查找优先级高的文件夹，再查找优先级低的文件夹，直到找到指定的静态资源为止。<br><br><br><br>#### 静态首页（欢迎页）映射<br><br>静态资源文件夹下的所有 index.html 被称为静态首页或者欢迎页，它们会被被 `/</strong><code>映射，换句话说就是，当我们访问</code>/<code>或者</code>/index.html<code>时，都会跳转到静态首页（欢迎页）。\n\n\n\n### Thymeleaf\n\n[官方网站](https://www.thymeleaf.org)\n\n[官方文档](https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html)\n\nThymeleaf 是一款用于渲染 XML/XHTML/HTML5 内容的模板引擎。它与 JSP，Velocity，FreeMaker 等模板引擎类似，也可以轻易地与 SpringMVC 等 Web 框架集成。与其它模板引擎相比，Thymeleaf 最大的特点是，即使不启动 Web 应用，也可以直接在浏览器中打开并正确显示模板页面 。\n\n\n\nThymeleaf 支持 HTML 原型，其文件后缀为</code>.html`，因此它可以直接被浏览器打开，此时浏览器会忽略未定义的 Thymeleaf 标签属性，展示 thymeleaf 模板的静态页面效果；当通过 Web 应用程序访问时，Thymeleaf 会动态地替换掉静态内容，使页面动态显示。<br><br>#### 依赖<br><br>使用thymeleaf,Maven导入依赖<br><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-spring5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf.extras<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<img src=\"/article/43108/image-20220215235857183.png\" class title=\"image-20220215235857183\">\n<p>我们要将html放在我们的<code>templates</code>目录下</p>\n<h4 id=\"Thymeleaf-的特点\"><a href=\"#Thymeleaf-的特点\" class=\"headerlink\" title=\"Thymeleaf 的特点\"></a>Thymeleaf 的特点</h4><p>Thymeleaf 模板引擎具有以下特点：</p>\n<ul>\n<li>动静结合：Thymeleaf 既可以直接使用浏览器打开，查看页面的静态效果，也可以通过 Web 应用程序进行访问，查看动态页面效果。</li>\n<li>开箱即用：Thymeleaf 提供了 Spring 标准方言以及一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li>\n<li>多方言支持：它提供了 Thymeleaf 标准和 Spring 标准两种方言，可以直接套用模板实现 JSTL、 OGNL 表达式；必要时，开发人员也可以扩展和创建自定义的方言。</li>\n<li>与 SpringBoot 完美整合：SpringBoot 为 Thymeleaf 提供了的默认配置，并且还为 Thymeleaf 设置了视图解析器，因此 Thymeleaf 可以与 Spring Boot 完美整合。</li>\n</ul>\n<h4 id=\"标准表达式语法\"><a href=\"#标准表达式语法\" class=\"headerlink\" title=\"标准表达式语法\"></a>标准表达式语法</h4><p>Thymeleaf 模板引擎支持多种表达式：</p>\n<ul>\n<li><p>变量表达式：${…}</p>\n<ul>\n<li>获取对象的属性和方法</li>\n<li>使用内置的基本对象<ul>\n<li>#ctx ：上下文对象；</li>\n<li>#vars ：上下文变量；</li>\n<li>#locale：上下文的语言环境；</li>\n<li>#request：HttpServletRequest 对象（仅在 Web 应用中可用）；</li>\n<li>#response：HttpServletResponse 对象（仅在 Web 应用中可用）；</li>\n<li>#session：HttpSession 对象（仅在 Web 应用中可用）；</li>\n<li>#servletContext：ServletContext 对象（仅在 Web 应用中可用）。</li>\n</ul>\n</li>\n<li>使用内置的工具对象</li>\n</ul>\n</li>\n<li><p>选择变量表达式：*{…}</p>\n<ul>\n<li><p>选择变量表达式与变量表达式功能基本一致，只是在变量表达式的基础上增加了与 th:object 的配合使用。当使用 th:object 存储一个对象后，我们可以在其后代中使用选择变量表达式<code>*&#123;...&#125;</code>获取该对象中的属性，其中，<code>*</code> 即代表该对象。</p>\n</li>\n<li><p><code>`</code>html<br><div th:object=\"${session.user}\"></div></p>\n<pre><code>&lt;p th:text=&quot;*&#123;fisrtName&#125;&quot;&gt;firstname&lt;/p&gt;\n</code></pre><p></p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><br>- 链接表达式：@&#123;...&#125;<br><br>  - 不管是静态资源的引用，还是 form 表单的请求，凡是链接都可以用链接表达式 `@&#123;...&#125;`。 链接表达式的形式结构如下： 无参请求：@&#123;<span class=\"hljs-regexp\">/xxx&#125; 有参请求：@&#123;/xxx</span>(k1=v1,k2=v2)&#125; <br><br>- 国际化表达式：<span class=\"hljs-comment\">#&#123;...&#125;</span><br><br>- 片段引用表达式：~&#123;...&#125;<br><br>  - 推荐：~&#123;templatename::fragmentname&#125;<br>  - 支持：~&#123;templatename::<span class=\"hljs-comment\">#id&#125;</span><br>  - templatename：模版名，Thymeleaf 会根据模版名解析完整路径：/resources/templates/templatename.html，要注意文件的路径。<br>  - fragmentname：片段名，Thymeleaf 通过 <span class=\"hljs-symbol\">th:</span>fragment 声明定义代码块，即：<span class=\"hljs-symbol\">th:</span>fragment=<span class=\"hljs-string\">&quot;fragmentname&quot;</span><br>  - id：HTML 的 id 选择器，使用时要在前面加上 <span class=\"hljs-comment\"># 号，不支持 class 选择器。</span><br><br><span class=\"hljs-comment\">#### th 属性</span><br><br>|   属性    |                             描述                             |<br>| <span class=\"hljs-symbol\">:-------</span>: | <span class=\"hljs-symbol\">:----------------------------------------------------------</span>: |<br>|   <span class=\"hljs-symbol\">th:</span>id   |                     替换 HTML 的 id 属性                     |<br>|  <span class=\"hljs-symbol\">th:</span>text  |                    文本替换，转义特殊字符                    |<br>| <span class=\"hljs-symbol\">th:</span>utext  |                   文本替换，不转义特殊字符                   |<br>|  <span class=\"hljs-symbol\">th:</span>each  |              遍历，支持 Iterable、Map、数组等。              |<br>| <span class=\"hljs-symbol\">th:</span>object | 在父标签选择对象，子标签使用 *&#123;…&#125; 选择表达式选取值。 没有选择对象，那子标签使用选择表达式和 <span class=\"hljs-variable\">$&#123;</span>…&#125; 变量表达式是一样的效果。 同时即使选择了对象，子标签仍然可以使用变量表达式。 |<br>|  <span class=\"hljs-symbol\">th:</span><span class=\"hljs-keyword\">with</span>  |                       局部变量赋值运算                       |<br>|   <span class=\"hljs-symbol\">th:</span>if   |                根据条件判断是否需要展示此标签                |<br>| <span class=\"hljs-symbol\">th:</span><span class=\"hljs-keyword\">unless</span> |             和 <span class=\"hljs-symbol\">th:</span>if 判断相反，满足条件时不显示              |<br><br><br><br><span class=\"hljs-comment\">### SpringBoot定制SpringMVC</span><br><br>SpringBoot 抛弃了传统 xml 配置文件，通过配置类（标注 <span class=\"hljs-variable\">@Configuration</span> 的类，相当于一个 xml 配置文件）以 JavaBean 形式进行相关配置。<br><br>SpringBoot 对 SpringMVC 的自动配置可以满足我们的大部分需求，但是我们也可以通过自定义配置类（标注 <span class=\"hljs-variable\">@Configuration</span> 的类）并实现 WebMvcConfigurer 接口来定制 Spring MVC 配置，<br><br>在 Spring Boot 项目中，我们可以通过以下 <span class=\"hljs-number\">2</span> 中形式定制 Spring <span class=\"hljs-symbol\">MVC:</span><br><br>- 扩展 Spring MVC<br>- 全面接管 Spring MVC<br><br><span class=\"hljs-comment\">#### 扩展 SpringMVC </span><br><br>如果 SpringBoot 对 SpringMVC 的自动配置不能满足我们的需要，我们还可以通过自定义一个 WebMvcConfigurer 类型（**实现 WebMvcConfigurer 接口**）的配置类（**标注 <span class=\"hljs-variable\">@Configuration</span>，但不标注 <span class=\"hljs-variable\">@EnableWebMvc</span>** 注解的类），来扩展 SpringMVC。这样不但能够保留 SpringBoot 对 SpringMVC 的自动配置，享受 SpringBoot 自动配置带来的便利，还能额外增加自定义的 SpringMVC 配置。<br><br><span class=\"hljs-comment\">#### 全面接管 SpringMVC</span><br><br>在一些特殊情况下，我们可能需要抛弃 SpringBoot 对 SpringMVC 的全部自动配置，完全接管 SpringMVC。此时我们可以自定义一个 WebMvcConfigurer 类型（**实现 WebMvcConfigurer 接口**）的配置类，并在该类上**标注 <span class=\"hljs-variable\">@EnableWebMvc</span> 注解**，来实现完全接管 Spring MVC。<br><br><br><br><span class=\"hljs-comment\">### 国际化</span><br><br>国际化（Internationalization 简称 I18n，其中“I”和“n”分别为首末字符，<span class=\"hljs-number\">18</span> 则为中间的字符数）是指软件开发时应该具备支持多种语言和地区的功能。换句话说就是，开发的软件需要能同时应对不同国家和地区的用户访问，并根据用户地区和语言习惯，提供相应的、符合用具阅读习惯的页面和数据，例如，为中国用户提供汉语界面显示，为美国用户提供提供英语界面显示。<br><br>在 Spring 项目中实现国际化，通常需要以下 <span class=\"hljs-number\">3</span> 步：<br><br><span class=\"hljs-number\">1</span>. 编写国际化资源（配置）文件；<br><span class=\"hljs-number\">2</span>. 使用 ResourceBundleMessageSource 管理国际化资源文件；<br><span class=\"hljs-number\">3</span>. 在页面获取国际化内容。<br><span class=\"hljs-number\">4</span>. <br><br><span class=\"hljs-comment\">#### 编写国际化资源文件</span><br><br>在 Spring Boot 的类路径下创建国际化资源文件，文件名格式为：基本名_语言代码_国家或地区代码，例如 login_en_US.properties、login_zh_CN.properties。<br><br>在 src/main/resources 下创建一个 i18n 的目录，并在该目录中按照国际化资源文件命名格式分别创建以下三个文件，<br><br>- login.properties：无语言设置时生效<br>- login_en_US.properties ：英语时生效<br>- login_zh_CN.properties：中文时生效<br><br>以上国际化资源文件创建完成后，IDEA 会自动识别它们，并转换成如下的模式：<br><br>![image<span class=\"hljs-number\">-20220219143717888</span>](SpringBoot-Web开发/image<span class=\"hljs-number\">-20220219143717888</span>.png)<br><br>打开任意一个国际化资源文件，并切换为 Resource Bundle 模式，然后点击“+”号，创建所需的国际化属性<br><br><br><br><span class=\"hljs-comment\">#### 使用 ResourceBundleMessageSource 管理国际化资源文件</span><br><br>SpringBoot 已经对 ResourceBundleMessageSource 提供了默认的自动配置。<br><br>只需要在 SpringBoot 全局配置文件中，使用配置参数`spring.messages.basename`指定我们自定义的国际资源文件的基本名即可，代码如下（当指定多个资源文件时，用逗号分隔）。<br><br>```properties<br>spring.messages.basename=i18n.login<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"获取国际化内容\"><a href=\"#获取国际化内容\" class=\"headerlink\" title=\"获取国际化内容\"></a>获取国际化内容</h4><p>由于页面使用的是 Tymeleaf 模板引擎，因此我们可以通过表达式 #{…} 获取国际化内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">th:text</span>=<span class=\"hljs-string\">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-sm&quot;</span> <span class=\"hljs-attr\">th:href</span>=<span class=\"hljs-string\">&quot;@&#123;index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-sm&quot;</span> <span class=\"hljs-attr\">th:href</span>=<span class=\"hljs-string\">&quot;@&#123;index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"SpringBoot拦截器\"><a href=\"#SpringBoot拦截器\" class=\"headerlink\" title=\"SpringBoot拦截器\"></a>SpringBoot拦截器</h3><p>在 Spring Boot 项目中，使用拦截器功能通常需要以下 3 步：</p>\n<ol>\n<li>定义拦截器；</li>\n<li>注册拦截器；</li>\n<li>指定拦截规则（如果是拦截所有，静态资源也会被拦截）。</li>\n</ol>\n<h4 id=\"定义拦截器\"><a href=\"#定义拦截器\" class=\"headerlink\" title=\"定义拦截器\"></a>定义拦截器</h4><p>在 SpringBoot 中定义拦截器十分的简单，只需要创建一个拦截器类，并实现 <code>HandlerInterceptor</code> 接口即可。</p>\n<p>HandlerInterceptor 接口中定义以下 3 个方法，如下表。</p>\n<table>\n<thead>\n<tr>\n<th>返回值类型</th>\n<th>方法声明</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</td>\n<td>该方法在控制器处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</td>\n</tr>\n<tr>\n<td>void</td>\n<td>postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</td>\n<td>该方法在控制器处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步修改。</td>\n</tr>\n<tr>\n<td>void</td>\n<td>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</td>\n<td>该方法在视图渲染结束后执行，可以通过此方法实现资源清理、记录日志信息等工作。</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginHandlerInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HandlerInterceptor</span> </span>&#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br><br>    <span class=\"hljs-comment\">//登录成功 有用户的session</span><br>    Object loginUser = request.getSession().getAttribute(<span class=\"hljs-string\">&quot;loginUser&quot;</span>);<br>    <span class=\"hljs-comment\">//没有登录</span><br>    <span class=\"hljs-keyword\">if</span> (loginUser==<span class=\"hljs-keyword\">null</span>)&#123; <br>      request.setAttribute(<span class=\"hljs-string\">&quot;msg&quot;</span>,<span class=\"hljs-string\">&quot;没有权限，请先登录&quot;</span>);<br>      request.getRequestDispatcher(<span class=\"hljs-string\">&quot;/index.html&quot;</span>).forward(request,response);<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"注册拦截器\"><a href=\"#注册拦截器\" class=\"headerlink\" title=\"注册拦截器\"></a>注册拦截器</h4><p>创建一个实现了 WebMvcConfigurer 接口的配置类（使用了 <code>@Configuration</code> 注解的类），重写 <code>addInterceptors()</code> 方法，并在该方法中调用 <code>registry.addInterceptor()</code> 方法将自定义的拦截器注册到容器中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><span class=\"hljs-comment\">//@Configuration标注在类上，相当于把该类作为spring的xml配置文件中的&lt;beans&gt;，作用为：配置spring容器(应用上下文)</span><br><span class=\"hljs-meta\">@Configuration</span>  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyMvcConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">WebMvcConfigurer</span> </span>&#123;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> </span>&#123;<br>    registry.addInterceptor(<span class=\"hljs-keyword\">new</span> LoginHandlerInterceptor());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"指定拦截规则\"><a href=\"#指定拦截规则\" class=\"headerlink\" title=\"指定拦截规则\"></a>指定拦截规则</h4><p>在使用 registry.addInterceptor() 方法将拦截器注册到容器中后，我们便可以继续指定拦截器的拦截规则了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">registry.addInterceptor(<span class=\"hljs-keyword\">new</span> LoginHandlerInterceptor())<br>        .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>)<br>        .excludePathPatterns(<span class=\"hljs-string\">&quot;/index.html&quot;</span>,<span class=\"hljs-string\">&quot;/&quot;</span>,<span class=\"hljs-string\">&quot;/user/login&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>在指定拦截器拦截规则时，调用了两个方法，这两个方法的说明如下：</p>\n<ul>\n<li>addPathPatterns：该方法用于指定拦截路径，例如拦截路径为“/**”，表示拦截所有请求，包括对静态资源的请求。</li>\n<li>excludePathPatterns：该方法用于排除拦截路径，即指定不需要被拦截器拦截的请求。</li>\n</ul>\n<h3 id=\"SpringBoot-JDBC访问数据库\"><a href=\"#SpringBoot-JDBC访问数据库\" class=\"headerlink\" title=\"SpringBoot JDBC访问数据库\"></a>SpringBoot JDBC访问数据库</h3><p>进行<a href=\"/article/37040.html\" title=\"JDBC配置\">JDBC配置</a>:</p>\n<ol>\n<li>在 pom.xml 中导入 JDBC 场景启动器：spring-boot-starter-data-jdbc</li>\n<li>JDBC 的场景启动器中并没有导入数据库驱动，我们需要根据自身的需求引入所需的数据库驱动。</li>\n<li>在导入了 JDBC 场景启动器和数据库驱动后，接下来我们就可以在配置文件（application.properties/yml）中配置数据源了</li>\n</ol>\n<h3 id=\"SpringBoot整合MyBatis\"><a href=\"#SpringBoot整合MyBatis\" class=\"headerlink\" title=\"SpringBoot整合MyBatis\"></a>SpringBoot整合MyBatis</h3><p>MyBatis 是一个半自动化的 ORM 框架，所谓半自动化是指 MyBatis 只支持将数据库查出的数据映射到 POJO 实体类上，而实体到数据库的映射则需要我们自己编写 SQL 语句实现，相较于Hibernate 这种完全自动化的框架，Mybatis 更加灵活，我们可以根据自身的需求编写 sql 语句来实现复杂的数据库操作。</p>\n<p>进行<a href=\"/article/37040.html\" title=\"MyBatis配置\">MyBatis配置</a>:</p>\n<ol>\n<li>在项目的 pom.xml 中引入 mybatis-spring-boot-starter 的依赖</li>\n<li>在 SpringBoot 的配置文件（application.properties/yml）中对 MyBatis 进行配置，例如指定 mapper.xml 的位置、实体类的位置、是否开启驼峰命名法等等</li>\n</ol>\n<h3 id=\"SpringSecurity\"><a href=\"#SpringSecurity\" class=\"headerlink\" title=\"SpringSecurity\"></a>SpringSecurity</h3><p>SpringSecurity 是 Spring 家族中的一个安全管理框架，实际上，在 SpringBoot 出现之前，SpringSecurity 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。</p>\n<p><strong>Apache Shiro</strong><br>一个功能强大且易于使用的Java安全框架，提供了认证、授权、加密、会话管理。<br><strong>Spring Security</strong><br>Spring家族的一员，是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring的IOC（控制反转）、DI（依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，为了减少企业系统安全控制编写大量重复代码的工作。</p>\n<a href=\"/article/37040.html\" title=\"SpringSecurity配置\">SpringSecurity配置</a>\n<p><strong>通过SpringSecurity 对不同用户角色进行授权</strong></p>\n<img src=\"/article/43108/image-20220220111203172.png\" class title=\"image-20220220111203172\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><br><br><span class=\"hljs-meta\">@EnableWebSecurity</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SecurityConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WebSecurityConfigurerAdapter</span> </span>&#123;<br>  <span class=\"hljs-comment\">//链式编程</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">(HttpSecurity http)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <span class=\"hljs-comment\">//首页所有人可以访问 ,功能也只有对应有权限的人才能反应</span><br><br>    <span class=\"hljs-comment\">//请求授权的规则</span><br>    http.authorizeRequests().antMatchers(<span class=\"hljs-string\">&quot;/&quot;</span>).permitAll()<br>      .antMatchers(<span class=\"hljs-string\">&quot;/level1/**&quot;</span>).hasRole(<span class=\"hljs-string\">&quot;vip1&quot;</span>)<br>      .antMatchers(<span class=\"hljs-string\">&quot;/level2/**&quot;</span>).hasRole(<span class=\"hljs-string\">&quot;vip2&quot;</span>)<br>      .antMatchers(<span class=\"hljs-string\">&quot;/level3/**&quot;</span>).hasRole(<span class=\"hljs-string\">&quot;vip3&quot;</span>);<br><br>    <span class=\"hljs-comment\">//没有权限默认到登录页面   需要开启登录的页面</span><br>    http.formLogin().loginPage(<span class=\"hljs-string\">&quot;/toLogin&quot;</span>);<br><br>    <span class=\"hljs-comment\">//防止网站攻击  get post</span><br>    <span class=\"hljs-comment\">//http.csrf().disable();  //关闭请求跨站攻击</span><br><br>    <span class=\"hljs-comment\">//注销 注销完成跳转到首页</span><br>    http.logout().logoutSuccessUrl(<span class=\"hljs-string\">&quot;/&quot;</span>);<br><br>    <span class=\"hljs-comment\">//开启记住我功能  cookie 自定义接收前端的参数</span><br>    http.rememberMe().rememberMeParameter(<span class=\"hljs-string\">&quot;remember&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-comment\">//认证</span><br>  <span class=\"hljs-comment\">//密码编码：passwordEncoder</span><br>  <span class=\"hljs-comment\">//springSecurity 5.0+ 新增了很多加密方法</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">configure</span><span class=\"hljs-params\">(AuthenticationManagerBuilder auth)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    auth.inMemoryAuthentication().passwordEncoder(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder())<br>      .withUser(<span class=\"hljs-string\">&quot;bobo&quot;</span>).password(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"hljs-string\">&quot;123456&quot;</span>)).roles(<span class=\"hljs-string\">&quot;vip2&quot;</span>,<span class=\"hljs-string\">&quot;vip3&quot;</span>)<br>      .and()<br>      .withUser(<span class=\"hljs-string\">&quot;root&quot;</span>).password(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"hljs-string\">&quot;123456&quot;</span>)).roles(<span class=\"hljs-string\">&quot;vip1&quot;</span>,<span class=\"hljs-string\">&quot;vip2&quot;</span>,<span class=\"hljs-string\">&quot;vip3&quot;</span>)<br>      .and()<br>      .withUser(<span class=\"hljs-string\">&quot;guest&quot;</span>).password(<span class=\"hljs-keyword\">new</span> BCryptPasswordEncoder().encode(<span class=\"hljs-string\">&quot;123456&quot;</span>)).roles(<span class=\"hljs-string\">&quot;vip1&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"shiro\"><a href=\"#shiro\" class=\"headerlink\" title=\"shiro\"></a>shiro</h3><p><a href=\"https://shiro.apache.org/tutorial.html\">官方文档</a></p>\n<p>Apache Shiro 是一个强大灵活的开源安全框架，可以完全处理身份验证、授权、加密和会话管理。</p>\n<p>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。</p>\n<img src=\"/article/43108/1.png\" class title=\"img\">\n<ul>\n<li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li>\n<li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li>\n<li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li>\n<li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li>\n<li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li>\n<li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li>\n<li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li>\n<li><strong>Testing</strong>：提供测试支持；</li>\n<li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li>\n<li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li>\n<li></li>\n</ul>\n<p><strong>从外部</strong></p>\n<img src=\"/article/43108/2.png\" class title=\"img\">\n<p>应用代码直接交互的对象是 Subject，也就是说 Shiro 的对外 API 核心就是 Subject</p>\n<ul>\n<li><p><strong>Subject</strong>：主体，代表了当前 “用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是 Subject，即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p>\n</li>\n<li><p><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p>\n</li>\n<li><p><strong>Realm</strong>：域，Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p>\n</li>\n</ul>\n<p>也就是说对于我们而言，最简单的一个 <code>Shiro</code> 应用：</p>\n<ol>\n<li>应用代码通过 <code>Subject</code> 来进行认证和授权，而 <code>Subject</code> 又委托给 <code>SecurityManager</code>；</li>\n<li>我们需要给 <code>Shiro</code> 的 <code>SecurityManager</code> 注入 <code>Realm</code>，从而让 <code>SecurityManager</code> 能得到合法的用户及其权限进行判断。</li>\n</ol>\n<p><strong>从以上也可以看出，Shiro 不提供维护用户 / 权限，而是通过 Realm 让开发人员自己注入。</strong></p>\n<p><strong>从内部</strong></p>\n<img src=\"/article/43108/3.png\" class title=\"img\">\n<ul>\n<li><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的 “用户”；</li>\n<li><strong>SecurityManager</strong>：相当于 SpringMVC 中的 DispatcherServlet 或者 Struts2 中的 FilterDispatcher；是 Shiro 的心脏；所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证和授权、及会话、缓存的管理。</li>\n<li><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得 Shiro 默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li>\n<li><strong>Authorizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li>\n<li><strong>Realm</strong>：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是 LDAP 实现，或者内存实现等等；由用户提供；注意：Shiro 不知道你的用户 / 权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的 Realm；</li>\n<li><strong>SessionManager</strong>：如果写过 Servlet 就应该知道 Session 的概念，Session 呢需要有人去管理它的生命周期，这个组件就是 SessionManager；而 Shiro 并不仅仅可以用在 Web 环境，也可以用在如普通的 JavaSE 环境、EJB 等环境；所以呢，Shiro 就抽象了一个自己的 Session 来管理主体与应用之间交互的数据；这样的话，比如我们在 Web 环境用，刚开始是一台 Web 服务器；接着又上了台 EJB 服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到 Memcached 服务器）；</li>\n<li><strong>SessionDAO</strong>：DAO 大家都用过，数据访问对象，用于会话的 CRUD，比如我们想把 Session 保存到数据库，那么可以实现自己的 SessionDAO，通过如 JDBC 写到数据库；比如想把 Session 放到 Memcached 中，可以实现自己的 Memcached SessionDAO；另外 SessionDAO 中可以使用 Cache 进行缓存，以提高性能；</li>\n<li><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li>\n<li><strong>Cryptography</strong>：密码模块，Shiro 提供了一些常见的加密组件用于如密码加密 / 解密的。</li>\n</ul>\n<h4 id=\"Shiro快速开始\"><a href=\"#Shiro快速开始\" class=\"headerlink\" title=\"Shiro快速开始\"></a>Shiro快速开始</h4><a href=\"/article/37040.html\" title=\"Shiro配置\">Shiro配置</a>\n<p><strong>导入shiro依赖包</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.8.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- Shiro uses SLF4J for logging.  We&#x27;ll use the &#x27;simple&#x27; binding</span><br><span class=\"hljs-comment\">             in this example app.  See http://www.slf4j.org for more info. --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong><code>shiro.ini</code></strong></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[users]</span><br><span class=\"hljs-attr\">root</span> = secret, admin<br><span class=\"hljs-attr\">guest</span> = guest, guest<br><span class=\"hljs-attr\">presidentskroob</span> = <span class=\"hljs-number\">12345</span>, president<br><span class=\"hljs-attr\">darkhelmet</span> = ludicrousspeed, darklord, schwartz<br><span class=\"hljs-attr\">lonestarr</span> = vespa, goodguy, schwartz<br><br><span class=\"hljs-comment\"># -----------------------------------------------------------------------------</span><br><span class=\"hljs-comment\"># Roles with assigned permissions</span><br><span class=\"hljs-comment\"># roleName = perm1, perm2, ..., permN</span><br><span class=\"hljs-comment\"># -----------------------------------------------------------------------------</span><br><span class=\"hljs-section\">[roles]</span><br><span class=\"hljs-attr\">admin</span> = *<br><span class=\"hljs-attr\">schwartz</span> = lightsaber:*<br><span class=\"hljs-attr\">goodguy</span> = winnebago:drive:eagle5<br></code></pre></td></tr></table></figure>\n<p><code>Quickstart</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.apache.shiro.SecurityUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.*;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.ini.IniSecurityManagerFactory;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.mgt.SecurityManager;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.session.Session;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.subject.Subject;<br><span class=\"hljs-keyword\">import</span> org.apache.shiro.lang.util.Factory;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * Simple Quickstart application showing how to use Shiro&#x27;s API.</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 0.9 RC2</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Quickstart</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">transient</span> Logger log = LoggerFactory.getLogger(Quickstart.class);<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    <br>    <br>    Factory&lt;SecurityManager&gt; factory = <span class=\"hljs-keyword\">new</span> IniSecurityManagerFactory(<span class=\"hljs-string\">&quot;classpath:shiro.ini&quot;</span>);<br>    SecurityManager securityManager = factory.getInstance();<br>    SecurityUtils.setSecurityManager(securityManager);<br><br>    <span class=\"hljs-comment\">// get the currently executing user:</span><br>    <span class=\"hljs-comment\">//获取当前的用户对象：Subject</span><br>    Subject currentUser = SecurityUtils.getSubject();<br><br>    <span class=\"hljs-comment\">//通过当前对象拿到Session</span><br>    Session session = currentUser.getSession();<br>    <br>    session.setAttribute(<span class=\"hljs-string\">&quot;someKey&quot;</span>, <span class=\"hljs-string\">&quot;aValue&quot;</span>);<br>    String value = (String) session.getAttribute(<span class=\"hljs-string\">&quot;someKey&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (value.equals(<span class=\"hljs-string\">&quot;aValue&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Retrieved the correct value! [&quot;</span> + value + <span class=\"hljs-string\">&quot;]&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 测试当前用户是否被认证</span><br>    <span class=\"hljs-keyword\">if</span> (!currentUser.isAuthenticated()) &#123;<br>      <br>      <span class=\"hljs-comment\">//Token 令牌</span><br>      UsernamePasswordToken token = <span class=\"hljs-keyword\">new</span> UsernamePasswordToken(<span class=\"hljs-string\">&quot;lonestarr&quot;</span>, <span class=\"hljs-string\">&quot;vespa&quot;</span>);<br>      <span class=\"hljs-comment\">//设置记住我</span><br>      token.setRememberMe(<span class=\"hljs-keyword\">true</span>);<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">//执行登陆操作</span><br>        currentUser.login(token);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (UnknownAccountException uae) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;There is no user with username of &quot;</span> + token.getPrincipal());<br>      &#125; <span class=\"hljs-keyword\">catch</span> (IncorrectCredentialsException ice) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class=\"hljs-string\">&quot; was incorrect!&quot;</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (LockedAccountException lae) &#123;<br>        log.info(<span class=\"hljs-string\">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class=\"hljs-string\">&quot; is locked.  &quot;</span> +<br>                 <span class=\"hljs-string\">&quot;Please contact your administrator to unlock it.&quot;</span>);<br>      &#125;<br>      <span class=\"hljs-comment\">// ... catch more exceptions here (maybe custom ones specific to your application?</span><br>      <span class=\"hljs-keyword\">catch</span> (AuthenticationException ae) &#123;<br>        <span class=\"hljs-comment\">//认证异常</span><br>        <span class=\"hljs-comment\">//unexpected condition?  error?</span><br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//say who they are:</span><br>    <span class=\"hljs-comment\">//print their identifying principal (in this case, a username):</span><br>    log.info(<span class=\"hljs-string\">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class=\"hljs-string\">&quot;] logged in successfully.&quot;</span>);<br><br>    <span class=\"hljs-comment\">//test a role:</span><br>    <span class=\"hljs-keyword\">if</span> (currentUser.hasRole(<span class=\"hljs-string\">&quot;schwartz&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;May the Schwartz be with you!&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Hello, mere mortal.&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//粗粒度</span><br>    <span class=\"hljs-comment\">//test a typed permission (not instance-level)</span><br>    <span class=\"hljs-keyword\">if</span> (currentUser.isPermitted(<span class=\"hljs-string\">&quot;lightsaber:wield&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//细粒度</span><br>    <span class=\"hljs-comment\">//a (very powerful) Instance Level permission:</span><br>    <span class=\"hljs-keyword\">if</span> (currentUser.isPermitted(<span class=\"hljs-string\">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;<br>      log.info(<span class=\"hljs-string\">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +<br>               <span class=\"hljs-string\">&quot;Here are the keys - have fun!&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      log.info(<span class=\"hljs-string\">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//all done - log out!</span><br>    currentUser.logout();<br><br>    System.exit(<span class=\"hljs-number\">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"SpringBoot整合shiro\"><a href=\"#SpringBoot整合shiro\" class=\"headerlink\" title=\"SpringBoot整合shiro\"></a>SpringBoot整合shiro</h4><p><code>pom.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>  <br>  <span class=\"hljs-comment\">&lt;!-- spring整合shiro的包 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>shiro-spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>版本号<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--web--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!--thymeleaf--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-spring5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.thymeleaf.extras<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><code>Shiro 配置类 config</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.config; <br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration; <br><span class=\"hljs-comment\">//声明为配置类 </span><br><span class=\"hljs-meta\">@Configuration</span> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ShiroConfig</span> </span>&#123; <br>  <br>  <span class=\"hljs-comment\">//创建 ShiroFilterFactoryBean </span><br>  <span class=\"hljs-meta\">@Bean</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ShiroFilterFactoryBean <span class=\"hljs-title\">getShiroFilterFactoryBean</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Qualifier(&quot;securityManager&quot;)</span>DefaultWebSecurityMan ager securityManager)</span></span>&#123; <br>    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class=\"hljs-keyword\">new</span> ShiroFilterFactoryBean(); <br>    <span class=\"hljs-comment\">//设置安全管理器 </span><br>    shiroFilterFactoryBean.setSecurityManager(securityManager); 、<br>    <span class=\"hljs-comment\">/* 添加Shiro内置过滤器，常用的有如下过滤器： </span><br><span class=\"hljs-comment\">      anon： 无需认证就可以访问 </span><br><span class=\"hljs-comment\">      authc： 必须认证才可以访问 </span><br><span class=\"hljs-comment\">      user： 如果使用了记住我功能就可以直接访问 </span><br><span class=\"hljs-comment\">      perms: 拥有某个资源权限才可以访问 </span><br><span class=\"hljs-comment\">      role： 拥有某个角色权限才可以访问 </span><br><span class=\"hljs-comment\">    */</span><br>    Map&lt;String,String&gt; filterMap = <span class=\"hljs-keyword\">new</span> LinkedHashMap&lt;String, String&gt;();<br>    <span class=\"hljs-comment\">//&quot;跳转目标&quot;,&quot;权限&quot;</span><br>    filterMap.put(<span class=\"hljs-string\">&quot;/user/add&quot;</span>,<span class=\"hljs-string\">&quot;authc&quot;</span>); <br>    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);<br>    <span class=\"hljs-keyword\">return</span> shiroFilterFactoryBean; <br>  &#125;<br>  <br>  <span class=\"hljs-comment\">//创建 DefaultWebSecurityManager </span><br>  <span class=\"hljs-meta\">@Bean(name = &quot;securityManager&quot;)</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DefaultWebSecurityManager <span class=\"hljs-title\">getDefaultWebSecurityManager</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Qualifier(&quot;userRealm&quot;)</span>UserRealm userRealm)</span></span>&#123; <br>    DefaultWebSecurityManager securityManager = <span class=\"hljs-keyword\">new</span> DefaultWebSecurityManager(); <br>    <span class=\"hljs-comment\">//关联Realm </span><br>    securityManager.setRealm(userRealm); <br>    <span class=\"hljs-keyword\">return</span> securityManager; <br>  &#125;<br>  <br>  <span class=\"hljs-comment\">//创建 realm 对象 </span><br>  <span class=\"hljs-meta\">@Bean</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> UserRealm <span class=\"hljs-title\">userRealm</span><span class=\"hljs-params\">()</span></span>&#123; <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> UserRealm(); <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>realm</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.config; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.AuthenticationException; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.AuthenticationInfo; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authc.AuthenticationToken; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.authz.AuthorizationInfo; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.realm.AuthorizingRealm; <br><span class=\"hljs-keyword\">import</span> org.apache.shiro.subject.PrincipalCollection; <br><span class=\"hljs-comment\">//自定义Realm </span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserRealm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AuthorizingRealm</span> </span>&#123; <br>  <span class=\"hljs-comment\">//执行授权逻辑 </span><br>  <span class=\"hljs-meta\">@Override</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AuthorizationInfo <span class=\"hljs-title\">doGetAuthorizationInfo</span><span class=\"hljs-params\">(PrincipalCollection principals)</span> </span>&#123; <br>    System.out.println(<span class=\"hljs-string\">&quot;执行了=&gt;授权逻辑PrincipalCollection&quot;</span>); <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>; <br>  &#125;<br>  <span class=\"hljs-comment\">//执行认证逻辑 </span><br>  <span class=\"hljs-meta\">@Override</span> <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AuthenticationInfo <span class=\"hljs-title\">doGetAuthenticationInfo</span><span class=\"hljs-params\">(AuthenticationToken token)</span> <span class=\"hljs-keyword\">throws</span> AuthenticationException </span>&#123; <br>    System.out.println(<span class=\"hljs-string\">&quot;执行了=&gt;认证逻辑AuthenticationToken&quot;</span>); <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Swagger\"><a href=\"#Swagger\" class=\"headerlink\" title=\"Swagger\"></a>Swagger</h3><p><a href=\"https://swagger.io\">Swagger官方网站</a></p>\n<p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>\n<p>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。当通过 Swagger 进行正确定义，用户可以理解远程服务并使用最少实现逻辑与远程服务进行交互。与为底层编程所实现的接口类似，Swagger 消除了调用服务时可能会有的猜测。</p>\n<p><strong>优势</strong></p>\n<ul>\n<li>支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了，对程序员来说非常方便，可以节约写文档的时间去学习新技术。</li>\n<li>提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试。参数和格式都定好了，直接在界面上输入参数对应的值即可在线测试接口。</li>\n</ul>\n<h4 id=\"SpringBoot集成Swagger\"><a href=\"#SpringBoot集成Swagger\" class=\"headerlink\" title=\"SpringBoot集成Swagger\"></a><strong>SpringBoot集成Swagger</strong></h4><a href=\"/article/37040.html\" title=\"Swagger配置\">Swagger配置</a>\n<p><strong>springboot版本使用2.5.6 swagger版本使用3.0.0</strong></p>\n<h4 id=\"Swagger-UI配置\"><a href=\"#Swagger-UI配置\" class=\"headerlink\" title=\"Swagger-UI配置\"></a>Swagger-UI配置</h4><p>访问测试 ：<a href=\"http://localhost:8080/swagger-ui/index.html\">http://localhost:8080/swagger-ui/index.html</a> ，可以看到swagger的界面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.swagger.config;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.oas.annotations.EnableOpenApi;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.service.ApiInfo;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.service.Contact;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.spi.DocumentationType;<br><span class=\"hljs-keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> * EnableOpenApi 开启Swagger2</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableOpenApi</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SwaggerConfig</span> </span>&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  配置Swagger 的 Docket的 Bean实例</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docket</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2)<br>      .apiInfo(apiInfo());<br>  &#125;<br><br>  <span class=\"hljs-comment\">//    //配置Swagger信息 apiInfo</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ApiInfo <span class=\"hljs-title\">apiInfo</span><span class=\"hljs-params\">()</span></span>&#123;<br>    Contact contact = <span class=\"hljs-keyword\">new</span> Contact(<span class=\"hljs-string\">&quot;Bobo&quot;</span>, <span class=\"hljs-string\">&quot;https://boyolo.github.io&quot;</span>, <span class=\"hljs-string\">&quot;beau_renbo@163.com&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ApiInfo(<br>      <span class=\"hljs-string\">&quot;BoBo Api Documentation&quot;</span>,<br>      <span class=\"hljs-string\">&quot;Boyolo Api Documentation&quot;</span>,<br>      <span class=\"hljs-string\">&quot;1.0&quot;</span>,<br>      <span class=\"hljs-string\">&quot;https://boyolo.github.io&quot;</span>,<br>      contact,<br>      <span class=\"hljs-string\">&quot;Apache 2.0&quot;</span>,<br>      <span class=\"hljs-string\">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,<br>      <span class=\"hljs-keyword\">new</span> ArrayList());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/43108/image-20220221145938830.png\" class title=\"image-20220221145938830\">\n<h4 id=\"swagger配置扫描接口以及开关\"><a href=\"#swagger配置扫描接口以及开关\" class=\"headerlink\" title=\"swagger配置扫描接口以及开关\"></a>swagger配置扫描接口以及开关</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> *  配置Swagger 的 Docket的 Bean实例</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docket</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2)<br>    .apiInfo(apiInfo())<br>    <span class=\"hljs-comment\">//是否启动swagger ，如果为false，则swagger不能再浏览器中访问</span><br>    .enable(<span class=\"hljs-keyword\">false</span>)<br>    .select()<br>    <span class=\"hljs-comment\">//RequestHandlerSelectors 配置要扫描接口的方式</span><br>    <span class=\"hljs-comment\">//basePackage 指定要扫描的包  RequestHandlerSelectors.basePackage(&quot;com.bobo.swagger.controller&quot;)</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.any()  扫描全部</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.none() 都不扫描</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.withClassAnnotation() 扫描类上的注解   参数是一个注解的反射对象</span><br>    <span class=\"hljs-comment\">//RequestHandlerSelectors.withMethodAnnotation()  扫描方法上的注解</span><br>    .apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))<br>    <span class=\"hljs-comment\">//过滤什么路径</span><br>    .paths(PathSelectors.ant(<span class=\"hljs-string\">&quot;bobo/**&quot;</span>))<br>    .build();<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>.select() 与 .build() 属于一套</p>\n<p>中间除了.apis() 与 .paths() 不能再添加其他方法</p>\n</blockquote>\n<p><strong>思考</strong></p>\n<p>如何做使Swagger在生产环境中使用，在发布的时候不使用？</p>\n<ul>\n<li>判断是不是生产环境   flag == false</li>\n<li>注入enable(flag)</li>\n</ul>\n<p><strong>配置swagger API文档的分组</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docketA</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"hljs-string\">&quot;A&quot;</span>);<br>&#125;<br><span class=\"hljs-meta\">@Bean</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Docket <span class=\"hljs-title\">docketB</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class=\"hljs-string\">&quot;B&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/43108/image-20220221153135200.png\" class title=\"image-20220221153135200\">\n<h3 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h3><p>分布式系统（<em>distributed system</em>）是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。</p>\n<h4 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h4><p>RPC是远程过程调用（Remote Procedure Call）的缩写形式，是一种进程间的通信方式，是一种技术思想，而不是规范。SAP系统RPC调用的原理其实很简单，有一些类似于三层构架的C/S系统，第三方的客户程序通过接口调用SAP内部的标准或自定义函数，获得函数返回的数据进行处理后显示或打印。</p>\n<p><strong>基本流程</strong></p>\n<img src=\"/article/43108/86E55D7D3EBC4093ABAFF624FF75F523.png\" class title=\"六、RPC基本原理_RPC基本原理\">\n<p>RPC两个核心模块：序列化、通讯</p>\n<h4 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h4><p><a href=\"https://dubbo.apache.org/zh/docs/\">官方文档</a></p>\n<p>Dubbo是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。简单的说，dubbo就是个服务框架，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有dubbo这样的分布式服务框架的需求，并且本质上是个服务调用的东东，说白了就是个远程服务调用的分布式框架。</p>\n<img src=\"/article/43108/20151223153918914.jpeg\" class title=\"dubbo架构图\">\n<p>Provider: 暴露服务的服务提供方。；<br>Consumer: 调用远程服务的服务消费方；<br>Registry: 服务注册与发现的注册中心；<br>Monitor: 统计服务的调用次调和调用时间的监控中心；<br>Container: 服务运行容器。</p>\n<h4 id=\"zookeeper\"><a href=\"#zookeeper\" class=\"headerlink\" title=\"zookeeper\"></a>zookeeper</h4><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>\n<p><a href=\"https://zookeeper.apache.org/releases.html\">下载地址</a></p>\n<p>3.5版本以后要下载后缀为<strong>bin.tar.gz</strong>的文件</p>\n<p>更改默认配置文件名称 将conf目录下 <strong>zoo_sample.cfg</strong> 改为 zoo.cfg</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">&gt; /apache-zookeeper<span class=\"hljs-number\">-3.6</span><span class=\"hljs-number\">.3</span>-bin/bin/zkServer.sh start<br> .jenv/shims/java<br> ZooKeeper JMX enabled <span class=\"hljs-keyword\">by</span> <span class=\"hljs-literal\">default</span><br> apache-zookeeper<span class=\"hljs-number\">-3.6</span><span class=\"hljs-number\">.3</span>- bin/bin/../conf/zoo.cfg<br> Starting zookeeper ... STARTED<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\">&gt; ./zkServer.sh stop <br> ZooKeeper JMX enabled <span class=\"hljs-keyword\">by</span> <span class=\"hljs-literal\">default</span><br> Using config: zookeeper<span class=\"hljs-number\">-3.4</span><span class=\"hljs-number\">.10</span>/bin/../conf/zoo.cfg<br> Stopping zookeeper ... STOPPED<br></code></pre></td></tr></table></figure>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"SpringBootWeb开发","path":"api/categories/SpringBootWeb开发.json"},{"name":"SpringBootWeb开发","path":"api/categories/SpringBootWeb开发.json"}],"tags":[{"name":"SpringBootWeb开发","path":"api/tags/SpringBootWeb开发.json"}]}