{"title":"Java多线程","slug":"Java多线程","date":"2021-12-19T02:51:49.000Z","updated":"2021-12-22T11:58:15.731Z","comments":true,"path":"api/articles/Java多线程.json","realPath":null,"excerpt":null,"covers":["/article/58846/1629488-20190622115300479-2129397443.png","/article/58846/java-thread.jpg","/article/58846/2.png","/article/58846/937.png","/article/58846/1200.png"],"cover":"/images/theme/coverphoto/java.jpg","content":"<blockquote>\n<p>  I cannot tell why this heart languishes in silence.</p>\n<p>我说不出这心为什么那样默默地颓丧着。   </p>\n<p> It is for small needs it never asks, or knows or remembers.  </p>\n<p>是为了它那不曾要求，不曾知道，不曾记得的小小的需要。</p>\n</blockquote>\n<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p><strong>进程（Process）</strong> 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。 在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p>\n<p><strong>线程（thread）</strong> 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n<img src=\"/article/58846/1629488-20190622115300479-2129397443.png\" class title=\"进程\">\n<h2 id=\"一个线程的生命周期\"><a href=\"#一个线程的生命周期\" class=\"headerlink\" title=\"一个线程的生命周期\"></a>一个线程的生命周期</h2><p>线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p>\n<img src=\"/article/58846/java-thread.jpg\" class title=\"java-thread\">\n<p><strong>线程五大状态</strong></p>\n<ul>\n<li><p>新建状态:</p>\n<p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p>\n</li>\n<li><p>就绪状态:</p>\n<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</li>\n<li><p>运行状态:</p>\n<p>如果就绪状态的线程获取 CPU 资源，就可以执行 <strong>run()</strong>，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li><p>阻塞状态:</p>\n<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： </p>\n<ul>\n<li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li>\n<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li>\n<li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</li>\n</ul>\n</li>\n<li><p>死亡状态: </p>\n<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态，<strong>无法再起启动</strong>。</p>\n</li>\n</ul>\n<img src=\"/article/58846/2.png\" class title=\"img\">\n<h2 id=\"Java线程\"><a href=\"#Java线程\" class=\"headerlink\" title=\"Java线程\"></a>Java线程</h2><ul>\n<li>线程就是独立的执行路径；</li>\n<li>在程序运行时，即使没有自己创建线程，后台也会有很多个线程；</li>\n<li><code>main()</code>称之为主线程，为系统的入口，用于执行整个程序；</li>\n<li>在一个进程中，如果开辟了多个线程，线程的运行是由调度器安排调度，调度器与操作系统是紧密相关的，先后顺序是不能人为干预的；</li>\n<li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制；</li>\n<li>线程会带来额外的开销；</li>\n<li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</li>\n</ul>\n<h3 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h3><p>Java 提供了三种创建线程的方法：</p>\n<ul>\n<li>通过实现 Runnable 接口；</li>\n<li>通过继承 Thread 类本身；</li>\n<li>通过 Callable 和 Future 创建线程。</li>\n</ul>\n<p><strong>通过继承Thread来创建线程</strong></p>\n<p>创建一个线程的第一种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p>\n<p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.demo01;<br><span class=\"hljs-comment\">//创建线程方式一：继承Thread类，重写run()方法，调用star开启线程</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestThread1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Thread</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">200</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在看代码---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//创建一个线程对象</span><br>        TestThread1 testThread1 = <span class=\"hljs-keyword\">new</span> TestThread1();<br>        <span class=\"hljs-comment\">//调用start方法,开启线程</span><br>        testThread1.start();<br>        <span class=\"hljs-comment\">//main线程</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在学习多线程---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">截取部分输出结果：</span><br><span class=\"hljs-comment\">我在学习多线程---49</span><br><span class=\"hljs-comment\">我在看代码---71</span><br><span class=\"hljs-comment\">我在看代码---72</span><br><span class=\"hljs-comment\">我在学习多线程---50</span><br><span class=\"hljs-comment\">我在看代码---73</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>序号</strong></th>\n<th style=\"text-align:center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:center\"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:center\"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:center\"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:center\"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:center\"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:center\"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:center\"><strong>public void interrupt()</strong> 中断线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:center\"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td>\n</tr>\n</tbody>\n</table>\n<p>上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>序号</strong></th>\n<th style=\"text-align:center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:center\"><strong>public static void yield()</strong> 暂停当前正在执行的线程对象，并执行其他线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:center\"><strong>public static void sleep(long millisec)</strong> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:center\"><strong>public static boolean holdsLock(Object x)</strong> 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:center\"><strong>public static Thread currentThread()</strong> 返回对当前正在执行的线程对象的引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:center\"><strong>public static void dumpStack()</strong> 将当前线程的堆栈跟踪打印至标准错误流。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>线程停止：</strong>（stop）</p>\n<ul>\n<li>不推荐JDK提供的stop()\\destory()方法；</li>\n<li>建议使用表示为进行终止变量。</li>\n</ul>\n<p><strong>线程休眠：</strong>(sleep)</p>\n<ul>\n<li>sleep（时间）指定当前线程阻塞的毫秒数；</li>\n<li>sleep存在异常 InterruptedException；</li>\n<li>sleep时间达到后线程进入就绪状态；</li>\n<li>色了可以模拟网络延时，倒计时等；</li>\n<li>每一个对象都有一个锁，sleep不会释放锁。</li>\n</ul>\n<p><strong>线程礼让：</strong>(yield)</p>\n<ul>\n<li>让当前正在执行的线程暂停，但不阻塞；</li>\n<li>让线程从运行状态转为就绪状态；</li>\n<li>让CPU重新调度。礼让不一定成功。</li>\n</ul>\n<p><strong>线程强制执行：</strong>(join)</p>\n<ul>\n<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n</ul>\n<p><strong>线程优先级：</strong> </p>\n<ul>\n<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度那个线程来执行；</li>\n<li>线程优先级用数字表示，范围1～10；</li>\n<li>使用<code>getPriority()</code> <code>setPriority(int xxx)</code>改变或获取优先级；</li>\n<li><strong>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看cpu的调度。</strong></li>\n</ul>\n<p><strong>守护（daemon）线程</strong></p>\n<ul>\n<li>线程分为<strong>用户线程</strong>和<strong>守护线程；</strong></li>\n<li>虚拟机必须确保用户线程（比如main）执行完毕；</li>\n<li>虚拟机不用等待守护线程（比如gcc）执行完毕。</li>\n</ul>\n<p><strong>通过实现 Runnable 接口来创建线程</strong></p>\n<p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p>\n<p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：<code>public void run()</code></p>\n<p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.demo01;<br><span class=\"hljs-comment\">//创建线程方式二 实现runnable接口 重写run方法，执行线程需要丢入runnable接口实现类，调用start方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestThread3</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">200</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在看代码---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//创建runnable接口的实现对象</span><br>        TestThread3 testThread3 = <span class=\"hljs-keyword\">new</span> TestThread3();<br>        <span class=\"hljs-comment\">//创建线程对象，通过线程对象来开启线程</span><br>        Thread thread = <span class=\"hljs-keyword\">new</span> Thread(testThread3);<br>        thread.start();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在学习多线程---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">截取部分输出结果：</span><br><span class=\"hljs-comment\">我在看代码---122</span><br><span class=\"hljs-comment\">我在学习多线程---189</span><br><span class=\"hljs-comment\">我在看代码---123</span><br><span class=\"hljs-comment\">我在学习多线程---190</span><br><span class=\"hljs-comment\">我在看代码---124</span><br><span class=\"hljs-comment\">我在学习多线程---191</span><br><span class=\"hljs-comment\">我在看代码---125</span><br><span class=\"hljs-comment\">我在看代码---126</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>通过 Callable 和 Future 创建线程</strong></p>\n<ul>\n<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>\n<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>\n<li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>\n<li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CallableThreadTest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Callable</span>&lt;<span class=\"hljs-title\">Integer</span>&gt; </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span>  </span><br><span class=\"hljs-function\">    </span>&#123;  <br>        CallableThreadTest ctt = <span class=\"hljs-keyword\">new</span> CallableThreadTest();  <br>        FutureTask&lt;Integer&gt; ft = <span class=\"hljs-keyword\">new</span> FutureTask&lt;&gt;(ctt);  <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; <span class=\"hljs-number\">100</span>;i++)  <br>        &#123;  <br>            System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot; 的循环变量i的值&quot;</span>+i);  <br>            <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">20</span>)  <br>            &#123;  <br>                <span class=\"hljs-keyword\">new</span> Thread(ft,<span class=\"hljs-string\">&quot;有返回值的线程&quot;</span>).start();  <br>            &#125;  <br>        &#125;  <br>        <span class=\"hljs-keyword\">try</span>  <br>        &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;子线程的返回值：&quot;</span>+ft.get());  <br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e)  <br>        &#123;  <br>            e.printStackTrace();  <br>        &#125; <span class=\"hljs-keyword\">catch</span> (ExecutionException e)  <br>        &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>  <br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span>  <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">call</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception  </span><br><span class=\"hljs-function\">    </span>&#123;  <br>        <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;  <br>        <span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">100</span>;i++)  <br>        &#123;  <br>            System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot; &quot;</span>+i);  <br>        &#125;  <br>        <span class=\"hljs-keyword\">return</span> i;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><a href=\"/article/21345.html\" title=\"点击跳转静态代理\">点击跳转静态代理</a>\n<p>静态代理即线程底部实现原理</p>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><p>多个线程操作同一个资源</p>\n<p><strong>锁机制</strong></p>\n<p>由于同一进程的多个线程共享同一快存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问的正确性，在访问时加入锁机制(synchronized)，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：</p>\n<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>\n<li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题。</li>\n</ul>\n<p>synchronized有两种用法，synchronized方法与synchronized块。</p>\n<p><strong>synchronized方法</strong></p>\n<p>synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，知道该方法返回才释放锁，后面被阻塞的进程才能获得这个锁，继续执行。</p>\n<p>有一个<strong>缺陷：</strong>若将一个大的方法声明为synchronized将会影响效率</p>\n<ul>\n<li>方法里面需要修改的内容才需要锁，锁的太多，浪费资源</li>\n</ul>\n<p><strong>synchronized同步块</strong></p>\n<p><code>synchronized(obj)&#123;&#125;</code></p>\n<p>obj称为<strong>同步监视器</strong></p>\n<ul>\n<li>obj可以是任何对象，但是推荐使用共享资源作为同步监视器；</li>\n<li>同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是 this，就是这个对象本身</li>\n<li>同步监视器的执行过程<ol>\n<li>第一个线程访问，锁定同步监视器，执行其中代码；</li>\n<li>第二个线程访问，发现同步监视器被锁定，无法访问；</li>\n<li>第一个线程访问完毕，解锁同步监视器；</li>\n<li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>\n<p>死锁的规范定义：</p>\n<blockquote>\n<p> 集合中的每一个进程都在等待只能由本集合中的其他进程才能引发的事件，那么该组进程是死锁的。</p>\n</blockquote>\n<p>死锁的发生必须具备以下四个必要条件:</p>\n<p><strong>1）互斥条件：</strong>指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。</p>\n<p><strong>2）请求和保持条件：</strong>指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。</p>\n<p><strong>3）不剥夺条件：</strong>指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</p>\n<p><strong>4）环路等待条件：</strong>指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>从JDK 5.0之后，在java.util.concurrent.locks包下提供了另外一种方式来实现同步访问，那就是Lock，通过显示定义同步锁对象来实现同步，同步锁使用Lock对象充当。</p>\n<p>java.util.concurrent.locks.Lock 接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应该先获得Lock对象。</p>\n<p>ReentrantLock 类实现了Lock，拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Lock lock = ...;<br>lock.lock();<br><span class=\"hljs-keyword\">try</span>&#123;<br>    <span class=\"hljs-comment\">//处理任务</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(Exception ex)&#123;<br>     <br>&#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>    lock.unlock();   <span class=\"hljs-comment\">//释放锁</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>synchronized与Lock对比：</p>\n<ul>\n<li>Lock是显式锁（手动开启和关闭锁），synchronized是隐式锁，除了作用域自动释放；</li>\n<li>Lock只有代码块锁，synchronized有代码块锁和方法锁；</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并且具有更好的扩展性（提供更多的子类）；</li>\n<li>优先使用顺序：<ul>\n<li>Lock &gt; 同步代码块（已经进入了方法题，分配了相应资源）&gt; 同步方法（在方法体之外）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线程间通信\"><a href=\"#线程间通信\" class=\"headerlink\" title=\"线程间通信\"></a>线程间通信</h2><p>Java提供了几个方法解决线程之间的通信问题</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wait()</td>\n<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody>\n</table>\n<p>均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常IIIegalMonitorStateException</p>\n<h2 id=\"线程实例\"><a href=\"#线程实例\" class=\"headerlink\" title=\"线程实例\"></a>线程实例</h2><a href=\"/article/19877.html\" title=\"生产者消费者问题\">生产者消费者问题</a>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>在一个应用程序中，我们需要多次使用线程，也就意味着，我们需要多次创建并销毁线程。而创建并销毁线程的过程势必会消耗内存。而在Java中，内存资源是及其宝贵的，所以，我们就提出了线程池的概念。</p>\n<img src=\"/article/58846/937.png\" class title=\"img\">\n<p><strong>线程池</strong></p>\n<p>Java中开辟出了一种管理线程的概念，这个概念叫做线程池，从概念以及应用场景中，我们可以看出，线程池的好处，就是可以方便的管理线程，也可以减少内存的消耗。</p>\n<p><strong>线程池的优势</strong></p>\n<ol>\n<li>降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗；</li>\n<li>提高系统响应速度，当有任务到达时，通过复用已存在的线程，无需等待新线程的创建便能立即执行；</li>\n<li>方便线程并发数的管控。因为线程若是无限制的创建，可能会导致内存占用过多而产生OOM，并且会造成cpu过度切换（cpu切换线程是有时间成本的（需要保持当前执行线程的现场，并恢复要执行线程的现场））。</li>\n<li>提供更强大的功能，延时定时线程池。</li>\n</ol>\n<p><strong>线程池的主要参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ThreadPoolExecutor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> corePoolSize, <span class=\"hljs-keyword\">int</span> maximumPoolSize, <span class=\"hljs-keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,<br>         Executors.defaultThreadFactory(), defaultHandler);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>1、corePoolSize（线程池基本大小）：当向线程池提交一个任务时，若线程池已创建的线程数小于corePoolSize，即便此时存在空闲线程，也会通过创建一个新线程来执行该任务，直到已创建的线程数大于或等于corePoolSize时，（除了利用提交新任务来创建和启动线程（按需构造），也可以通过 prestartCoreThread() 或 prestartAllCoreThreads() 方法来提前启动线程池中的基本线程。）</p>\n<p>2、maximumPoolSize（线程池最大大小）：线程池所允许的最大线程个数。当队列满了，且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。另外，对于无界队列，可忽略该参数。</p>\n<p>3、keepAliveTime（线程存活保持时间）当线程池中线程数大于核心线程数时，线程的空闲时间如果超过线程存活时间，那么这个线程就会被销毁，直到线程池中的线程数小于等于核心线程数。</p>\n<p>4、workQueue（任务队列）：用于传输和保存等待执行任务的阻塞队列。</p>\n<p>5、threadFactory（线程工厂）：用于创建新线程。threadFactory创建的线程也是采用new Thread()方式，threadFactory创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的编号，n为线程池内的线程编号）。</p>\n<p>5、handler（线程饱和策略）：当线程池和队列都满了，再加入线程会执行此策略。</p>\n</blockquote>\n<p>假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。</p>\n<p>如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。</p>\n<p>一个线程池包括以下四个基本组成部分：</p>\n<pre><code>1. 线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；\n1. 工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；\n1. 任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；\n1. 任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。\n</code></pre><p>线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。</p>\n<p>线程池不仅调整T1,T3产生的时间段，而且它还显著减少了创建线程的数目，看一个例子：</p>\n<blockquote>\n<p>假设一个服务器一天要处理50000个请求，并且每个请求需要一个单独的线程完成。在线程池中，线程数一般是固定的，所以产生线程总数不会超过线程池中线程的数目，而如果服务器不利用线程池来处理这些请求则线程总数为50000。一般线程池大小是远小于50000。所以利用线程池的服务器程序不会为了创建50000而在处理请求时浪费时间，从而提高效率。</p>\n</blockquote>\n<p><strong>比较重要的几个类</strong></p>\n<table>\n<thead>\n<tr>\n<th>ExecutorService</th>\n<th>真正的线程池接口。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ScheduledExecutorService</td>\n<td>能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。</td>\n</tr>\n<tr>\n<td>ThreadPoolExecutor</td>\n<td>ExecutorService的默认实现。</td>\n</tr>\n<tr>\n<td>ScheduledThreadPoolExecutor</td>\n<td>继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>java中提供的线程池</strong></p>\n<img src=\"/article/58846/1200.png\" class title=\"img\">\n<p>1、newCachedThreadPool：用来创建一个可以无限扩大的线程池，适用于负载较轻的场景，执行短期异步任务。（可以使得任务快速得到执行，因为任务时间执行短，可以很快结束，也不会造成cpu过度切换）</p>\n<p>2、newFixedThreadPool：创建一个固定大小的线程池，因为采用无界的阻塞队列，所以实际线程数量永远不会变化，适用于负载较重的场景，对当前线程数量进行限制。（保证线程数可控，不会造成线程过多，导致系统负载更为严重）</p>\n<p>3、newSingleThreadExecutor：创建一个单线程的线程池，适用于需要保证顺序执行各个任务。</p>\n<p>4、newScheduledThreadPool：适用于执行延时或者周期性任务。</p>\n<p><strong>execute()和submit()方法</strong></p>\n<p>1、execute()，执行一个任务，没有返回值。</p>\n<p>2、submit()，提交一个线程任务，有返回值。</p>\n<p>submit(Callable<T> task)能获取到它的返回值，通过future.get()获取（阻塞直到任务执行完）。一般使用FutureTask+Callable配合使用（IntentService中有体现）。</T></p>\n<p>submit(Runnable task, T result)能通过传入的载体result间接获得线程的返回值。<br>submit(Runnable task)则是没有返回值的，就算获取它的返回值也是null。</p>\n<p>Future.get方法会使取结果的线程进入阻塞状态，知道线程执行完成之后，唤醒取结果的线程，然后返回结果。</p>\n","more":"<blockquote>\n<p>  I cannot tell why this heart languishes in silence.</p>\n<p>我说不出这心为什么那样默默地颓丧着。   </p>\n<p> It is for small needs it never asks, or knows or remembers.  </p>\n<p>是为了它那不曾要求，不曾知道，不曾记得的小小的需要。</p>\n</blockquote>\n<h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><p><strong>进程（Process）</strong> 是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。 在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p>\n<p><strong>线程（thread）</strong> 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p>\n<img src=\"/article/58846/1629488-20190622115300479-2129397443.png\" class title=\"进程\">\n<h2 id=\"一个线程的生命周期\"><a href=\"#一个线程的生命周期\" class=\"headerlink\" title=\"一个线程的生命周期\"></a>一个线程的生命周期</h2><p>线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p>\n<img src=\"/article/58846/java-thread.jpg\" class title=\"java-thread\">\n<p><strong>线程五大状态</strong></p>\n<ul>\n<li><p>新建状态:</p>\n<p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p>\n</li>\n<li><p>就绪状态:</p>\n<p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p>\n</li>\n<li><p>运行状态:</p>\n<p>如果就绪状态的线程获取 CPU 资源，就可以执行 <strong>run()</strong>，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p>\n</li>\n<li><p>阻塞状态:</p>\n<p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种： </p>\n<ul>\n<li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li>\n<li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li>\n<li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</li>\n</ul>\n</li>\n<li><p>死亡状态: </p>\n<p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态，<strong>无法再起启动</strong>。</p>\n</li>\n</ul>\n<img src=\"/article/58846/2.png\" class title=\"img\">\n<h2 id=\"Java线程\"><a href=\"#Java线程\" class=\"headerlink\" title=\"Java线程\"></a>Java线程</h2><ul>\n<li>线程就是独立的执行路径；</li>\n<li>在程序运行时，即使没有自己创建线程，后台也会有很多个线程；</li>\n<li><code>main()</code>称之为主线程，为系统的入口，用于执行整个程序；</li>\n<li>在一个进程中，如果开辟了多个线程，线程的运行是由调度器安排调度，调度器与操作系统是紧密相关的，先后顺序是不能人为干预的；</li>\n<li>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制；</li>\n<li>线程会带来额外的开销；</li>\n<li>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</li>\n</ul>\n<h3 id=\"创建线程\"><a href=\"#创建线程\" class=\"headerlink\" title=\"创建线程\"></a>创建线程</h3><p>Java 提供了三种创建线程的方法：</p>\n<ul>\n<li>通过实现 Runnable 接口；</li>\n<li>通过继承 Thread 类本身；</li>\n<li>通过 Callable 和 Future 创建线程。</li>\n</ul>\n<p><strong>通过继承Thread来创建线程</strong></p>\n<p>创建一个线程的第一种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p>\n<p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p>\n<p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.demo01;<br><span class=\"hljs-comment\">//创建线程方式一：继承Thread类，重写run()方法，调用star开启线程</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestThread1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Thread</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">200</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在看代码---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//创建一个线程对象</span><br>        TestThread1 testThread1 = <span class=\"hljs-keyword\">new</span> TestThread1();<br>        <span class=\"hljs-comment\">//调用start方法,开启线程</span><br>        testThread1.start();<br>        <span class=\"hljs-comment\">//main线程</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在学习多线程---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">截取部分输出结果：</span><br><span class=\"hljs-comment\">我在学习多线程---49</span><br><span class=\"hljs-comment\">我在看代码---71</span><br><span class=\"hljs-comment\">我在看代码---72</span><br><span class=\"hljs-comment\">我在学习多线程---50</span><br><span class=\"hljs-comment\">我在看代码---73</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>序号</strong></th>\n<th style=\"text-align:center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:center\"><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:center\"><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:center\"><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:center\"><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:center\"><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:center\"><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:center\"><strong>public void interrupt()</strong> 中断线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:center\"><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td>\n</tr>\n</tbody>\n</table>\n<p>上述方法是被 Thread 对象调用的，下面表格的方法是 Thread 类的静态方法。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>序号</strong></th>\n<th style=\"text-align:center\"><strong>方法描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:center\"><strong>public static void yield()</strong> 暂停当前正在执行的线程对象，并执行其他线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:center\"><strong>public static void sleep(long millisec)</strong> 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:center\"><strong>public static boolean holdsLock(Object x)</strong> 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:center\"><strong>public static Thread currentThread()</strong> 返回对当前正在执行的线程对象的引用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:center\"><strong>public static void dumpStack()</strong> 将当前线程的堆栈跟踪打印至标准错误流。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>线程停止：</strong>（stop）</p>\n<ul>\n<li>不推荐JDK提供的stop()\\destory()方法；</li>\n<li>建议使用表示为进行终止变量。</li>\n</ul>\n<p><strong>线程休眠：</strong>(sleep)</p>\n<ul>\n<li>sleep（时间）指定当前线程阻塞的毫秒数；</li>\n<li>sleep存在异常 InterruptedException；</li>\n<li>sleep时间达到后线程进入就绪状态；</li>\n<li>色了可以模拟网络延时，倒计时等；</li>\n<li>每一个对象都有一个锁，sleep不会释放锁。</li>\n</ul>\n<p><strong>线程礼让：</strong>(yield)</p>\n<ul>\n<li>让当前正在执行的线程暂停，但不阻塞；</li>\n<li>让线程从运行状态转为就绪状态；</li>\n<li>让CPU重新调度。礼让不一定成功。</li>\n</ul>\n<p><strong>线程强制执行：</strong>(join)</p>\n<ul>\n<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞</li>\n</ul>\n<p><strong>线程优先级：</strong> </p>\n<ul>\n<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度那个线程来执行；</li>\n<li>线程优先级用数字表示，范围1～10；</li>\n<li>使用<code>getPriority()</code> <code>setPriority(int xxx)</code>改变或获取优先级；</li>\n<li><strong>优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看cpu的调度。</strong></li>\n</ul>\n<p><strong>守护（daemon）线程</strong></p>\n<ul>\n<li>线程分为<strong>用户线程</strong>和<strong>守护线程；</strong></li>\n<li>虚拟机必须确保用户线程（比如main）执行完毕；</li>\n<li>虚拟机不用等待守护线程（比如gcc）执行完毕。</li>\n</ul>\n<p><strong>通过实现 Runnable 接口来创建线程</strong></p>\n<p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p>\n<p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：<code>public void run()</code></p>\n<p>在创建一个实现 Runnable 接口的类之后，你可以在类中实例化一个线程对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.demo01;<br><span class=\"hljs-comment\">//创建线程方式二 实现runnable接口 重写run方法，执行线程需要丢入runnable接口实现类，调用start方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestThread3</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Runnable</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">200</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在看代码---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//创建runnable接口的实现对象</span><br>        TestThread3 testThread3 = <span class=\"hljs-keyword\">new</span> TestThread3();<br>        <span class=\"hljs-comment\">//创建线程对象，通过线程对象来开启线程</span><br>        Thread thread = <span class=\"hljs-keyword\">new</span> Thread(testThread3);<br>        thread.start();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;我在学习多线程---&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">截取部分输出结果：</span><br><span class=\"hljs-comment\">我在看代码---122</span><br><span class=\"hljs-comment\">我在学习多线程---189</span><br><span class=\"hljs-comment\">我在看代码---123</span><br><span class=\"hljs-comment\">我在学习多线程---190</span><br><span class=\"hljs-comment\">我在看代码---124</span><br><span class=\"hljs-comment\">我在学习多线程---191</span><br><span class=\"hljs-comment\">我在看代码---125</span><br><span class=\"hljs-comment\">我在看代码---126</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>通过 Callable 和 Future 创建线程</strong></p>\n<ul>\n<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>\n<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>\n<li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>\n<li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CallableThreadTest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Callable</span>&lt;<span class=\"hljs-title\">Integer</span>&gt; </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span>  </span><br><span class=\"hljs-function\">    </span>&#123;  <br>        CallableThreadTest ctt = <span class=\"hljs-keyword\">new</span> CallableThreadTest();  <br>        FutureTask&lt;Integer&gt; ft = <span class=\"hljs-keyword\">new</span> FutureTask&lt;&gt;(ctt);  <br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; <span class=\"hljs-number\">100</span>;i++)  <br>        &#123;  <br>            System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot; 的循环变量i的值&quot;</span>+i);  <br>            <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">20</span>)  <br>            &#123;  <br>                <span class=\"hljs-keyword\">new</span> Thread(ft,<span class=\"hljs-string\">&quot;有返回值的线程&quot;</span>).start();  <br>            &#125;  <br>        &#125;  <br>        <span class=\"hljs-keyword\">try</span>  <br>        &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;子线程的返回值：&quot;</span>+ft.get());  <br>        &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e)  <br>        &#123;  <br>            e.printStackTrace();  <br>        &#125; <span class=\"hljs-keyword\">catch</span> (ExecutionException e)  <br>        &#123;  <br>            e.printStackTrace();  <br>        &#125;  <br>  <br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span>  <br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">call</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception  </span><br><span class=\"hljs-function\">    </span>&#123;  <br>        <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;  <br>        <span class=\"hljs-keyword\">for</span>(;i&lt;<span class=\"hljs-number\">100</span>;i++)  <br>        &#123;  <br>            System.out.println(Thread.currentThread().getName()+<span class=\"hljs-string\">&quot; &quot;</span>+i);  <br>        &#125;  <br>        <span class=\"hljs-keyword\">return</span> i;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><a href=\"/article/21345.html\" title=\"点击跳转静态代理\">点击跳转静态代理</a>\n<p>静态代理即线程底部实现原理</p>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><p>多个线程操作同一个资源</p>\n<p><strong>锁机制</strong></p>\n<p>由于同一进程的多个线程共享同一快存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问的正确性，在访问时加入锁机制(synchronized)，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：</p>\n<ul>\n<li>一个线程持有锁会导致其他所有需要此锁的线程挂起；</li>\n<li>在多线程竞争下，加锁、释放锁会导致比较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题。</li>\n</ul>\n<p>synchronized有两种用法，synchronized方法与synchronized块。</p>\n<p><strong>synchronized方法</strong></p>\n<p>synchronized方法控制对“对象”的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，知道该方法返回才释放锁，后面被阻塞的进程才能获得这个锁，继续执行。</p>\n<p>有一个<strong>缺陷：</strong>若将一个大的方法声明为synchronized将会影响效率</p>\n<ul>\n<li>方法里面需要修改的内容才需要锁，锁的太多，浪费资源</li>\n</ul>\n<p><strong>synchronized同步块</strong></p>\n<p><code>synchronized(obj)&#123;&#125;</code></p>\n<p>obj称为<strong>同步监视器</strong></p>\n<ul>\n<li>obj可以是任何对象，但是推荐使用共享资源作为同步监视器；</li>\n<li>同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是 this，就是这个对象本身</li>\n<li>同步监视器的执行过程<ol>\n<li>第一个线程访问，锁定同步监视器，执行其中代码；</li>\n<li>第二个线程访问，发现同步监视器被锁定，无法访问；</li>\n<li>第一个线程访问完毕，解锁同步监视器；</li>\n<li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>\n<p>死锁的规范定义：</p>\n<blockquote>\n<p> 集合中的每一个进程都在等待只能由本集合中的其他进程才能引发的事件，那么该组进程是死锁的。</p>\n</blockquote>\n<p>死锁的发生必须具备以下四个必要条件:</p>\n<p><strong>1）互斥条件：</strong>指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。</p>\n<p><strong>2）请求和保持条件：</strong>指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。</p>\n<p><strong>3）不剥夺条件：</strong>指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</p>\n<p><strong>4）环路等待条件：</strong>指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</p>\n<h3 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h3><p>从JDK 5.0之后，在java.util.concurrent.locks包下提供了另外一种方式来实现同步访问，那就是Lock，通过显示定义同步锁对象来实现同步，同步锁使用Lock对象充当。</p>\n<p>java.util.concurrent.locks.Lock 接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应该先获得Lock对象。</p>\n<p>ReentrantLock 类实现了Lock，拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Lock lock = ...;<br>lock.lock();<br><span class=\"hljs-keyword\">try</span>&#123;<br>    <span class=\"hljs-comment\">//处理任务</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(Exception ex)&#123;<br>     <br>&#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>    lock.unlock();   <span class=\"hljs-comment\">//释放锁</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>synchronized与Lock对比：</p>\n<ul>\n<li>Lock是显式锁（手动开启和关闭锁），synchronized是隐式锁，除了作用域自动释放；</li>\n<li>Lock只有代码块锁，synchronized有代码块锁和方法锁；</li>\n<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好，并且具有更好的扩展性（提供更多的子类）；</li>\n<li>优先使用顺序：<ul>\n<li>Lock &gt; 同步代码块（已经进入了方法题，分配了相应资源）&gt; 同步方法（在方法体之外）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"线程间通信\"><a href=\"#线程间通信\" class=\"headerlink\" title=\"线程间通信\"></a>线程间通信</h2><p>Java提供了几个方法解决线程之间的通信问题</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wait()</td>\n<td>表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待的毫秒数</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody>\n</table>\n<p>均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常IIIegalMonitorStateException</p>\n<h2 id=\"线程实例\"><a href=\"#线程实例\" class=\"headerlink\" title=\"线程实例\"></a>线程实例</h2><a href=\"/article/19877.html\" title=\"生产者消费者问题\">生产者消费者问题</a>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p>在一个应用程序中，我们需要多次使用线程，也就意味着，我们需要多次创建并销毁线程。而创建并销毁线程的过程势必会消耗内存。而在Java中，内存资源是及其宝贵的，所以，我们就提出了线程池的概念。</p>\n<img src=\"/article/58846/937.png\" class title=\"img\">\n<p><strong>线程池</strong></p>\n<p>Java中开辟出了一种管理线程的概念，这个概念叫做线程池，从概念以及应用场景中，我们可以看出，线程池的好处，就是可以方便的管理线程，也可以减少内存的消耗。</p>\n<p><strong>线程池的优势</strong></p>\n<ol>\n<li>降低系统资源消耗，通过重用已存在的线程，降低线程创建和销毁造成的消耗；</li>\n<li>提高系统响应速度，当有任务到达时，通过复用已存在的线程，无需等待新线程的创建便能立即执行；</li>\n<li>方便线程并发数的管控。因为线程若是无限制的创建，可能会导致内存占用过多而产生OOM，并且会造成cpu过度切换（cpu切换线程是有时间成本的（需要保持当前执行线程的现场，并恢复要执行线程的现场））。</li>\n<li>提供更强大的功能，延时定时线程池。</li>\n</ol>\n<p><strong>线程池的主要参数</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ThreadPoolExecutor</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> corePoolSize, <span class=\"hljs-keyword\">int</span> maximumPoolSize, <span class=\"hljs-keyword\">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,<br>         Executors.defaultThreadFactory(), defaultHandler);<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>1、corePoolSize（线程池基本大小）：当向线程池提交一个任务时，若线程池已创建的线程数小于corePoolSize，即便此时存在空闲线程，也会通过创建一个新线程来执行该任务，直到已创建的线程数大于或等于corePoolSize时，（除了利用提交新任务来创建和启动线程（按需构造），也可以通过 prestartCoreThread() 或 prestartAllCoreThreads() 方法来提前启动线程池中的基本线程。）</p>\n<p>2、maximumPoolSize（线程池最大大小）：线程池所允许的最大线程个数。当队列满了，且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。另外，对于无界队列，可忽略该参数。</p>\n<p>3、keepAliveTime（线程存活保持时间）当线程池中线程数大于核心线程数时，线程的空闲时间如果超过线程存活时间，那么这个线程就会被销毁，直到线程池中的线程数小于等于核心线程数。</p>\n<p>4、workQueue（任务队列）：用于传输和保存等待执行任务的阻塞队列。</p>\n<p>5、threadFactory（线程工厂）：用于创建新线程。threadFactory创建的线程也是采用new Thread()方式，threadFactory创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的编号，n为线程池内的线程编号）。</p>\n<p>5、handler（线程饱和策略）：当线程池和队列都满了，再加入线程会执行此策略。</p>\n</blockquote>\n<p>假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。</p>\n<p>如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。</p>\n<p>一个线程池包括以下四个基本组成部分：</p>\n<pre><code>1. 线程池管理器（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；\n1. 工作线程（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；\n1. 任务接口（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；\n1. 任务队列（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。\n</code></pre><p>线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。</p>\n<p>线程池不仅调整T1,T3产生的时间段，而且它还显著减少了创建线程的数目，看一个例子：</p>\n<blockquote>\n<p>假设一个服务器一天要处理50000个请求，并且每个请求需要一个单独的线程完成。在线程池中，线程数一般是固定的，所以产生线程总数不会超过线程池中线程的数目，而如果服务器不利用线程池来处理这些请求则线程总数为50000。一般线程池大小是远小于50000。所以利用线程池的服务器程序不会为了创建50000而在处理请求时浪费时间，从而提高效率。</p>\n</blockquote>\n<p><strong>比较重要的几个类</strong></p>\n<table>\n<thead>\n<tr>\n<th>ExecutorService</th>\n<th>真正的线程池接口。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ScheduledExecutorService</td>\n<td>能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。</td>\n</tr>\n<tr>\n<td>ThreadPoolExecutor</td>\n<td>ExecutorService的默认实现。</td>\n</tr>\n<tr>\n<td>ScheduledThreadPoolExecutor</td>\n<td>继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>java中提供的线程池</strong></p>\n<img src=\"/article/58846/1200.png\" class title=\"img\">\n<p>1、newCachedThreadPool：用来创建一个可以无限扩大的线程池，适用于负载较轻的场景，执行短期异步任务。（可以使得任务快速得到执行，因为任务时间执行短，可以很快结束，也不会造成cpu过度切换）</p>\n<p>2、newFixedThreadPool：创建一个固定大小的线程池，因为采用无界的阻塞队列，所以实际线程数量永远不会变化，适用于负载较重的场景，对当前线程数量进行限制。（保证线程数可控，不会造成线程过多，导致系统负载更为严重）</p>\n<p>3、newSingleThreadExecutor：创建一个单线程的线程池，适用于需要保证顺序执行各个任务。</p>\n<p>4、newScheduledThreadPool：适用于执行延时或者周期性任务。</p>\n<p><strong>execute()和submit()方法</strong></p>\n<p>1、execute()，执行一个任务，没有返回值。</p>\n<p>2、submit()，提交一个线程任务，有返回值。</p>\n<p>submit(Callable<T> task)能获取到它的返回值，通过future.get()获取（阻塞直到任务执行完）。一般使用FutureTask+Callable配合使用（IntentService中有体现）。</T></p>\n<p>submit(Runnable task, T result)能通过传入的载体result间接获得线程的返回值。<br>submit(Runnable task)则是没有返回值的，就算获取它的返回值也是null。</p>\n<p>Future.get方法会使取结果的线程进入阻塞状态，知道线程执行完成之后，唤醒取结果的线程，然后返回结果。</p>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"多线程","path":"api/categories/多线程.json"}],"tags":[{"name":"Java,多线程","path":"api/tags/Java,多线程.json"}]}