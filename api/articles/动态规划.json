{"title":"动态规划","slug":"动态规划","date":"2022-05-31T01:55:14.000Z","updated":"2022-07-31T12:22:04.019Z","comments":true,"path":"api/articles/动态规划.json","realPath":null,"excerpt":null,"covers":["/article/55046/%E5%9B%9E%E6%BA%AF%E6%B1%82%E8%A7%A3%E8%BF%87%E7%A8%8B.jpg","/article/55046/0-1%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%8A%B6%E6%80%81%E5%9B%BE1.jpg","/article/55046/0-1%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%8A%B6%E6%80%81%E5%9B%BE2.jpg","/article/55046/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%8D%87%E7%BA%A7%E7%89%88%E5%9B%9E%E6%BA%AF%E9%80%92%E5%BD%92%E6%A0%91.jpg","/article/55046/%E6%A3%8B%E5%AD%90%E5%AE%9E%E4%BE%8B.jpg","/article/55046/%E6%A3%8B%E5%AD%90%E5%AE%9E%E4%BE%8B%E5%A4%9A%E9%98%B6%E6%AE%B5%E5%86%B3%E7%AD%96%E6%9C%80%E4%BC%98%E8%A7%A3%E6%A8%A1%E5%9E%8B.jpg","/article/55046/%E7%9F%A9%E9%98%B5%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%981.jpg","/article/55046/%E7%9F%A9%E9%98%B5%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%982.jpg","/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E4%B8%8E%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6.jpg","/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E6%A0%91.jpg","/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E8%BF%87%E7%A8%8B.jpg","/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E7%8A%B6%E6%80%81%E8%A1%A8.jpg"],"cover":"/images/theme/coverphoto/动态规划.jpg","content":"<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>动态规划比较适合用来求解最优问题</p>\n<p>动态规划解决问题的思路:</p>\n<p>把问题分解为多个阶段，每个阶段对应一个决策。记录每一个阶段可达的状态集合（去掉重复的），然后通过当前阶段的状态集合，来推导下一个阶段的状态集合，动态地往前推进。</p>\n<h3 id=\"0-1-背包问题\"><a href=\"#0-1-背包问题\" class=\"headerlink\" title=\"0-1 背包问题\"></a>0-1 背包问题</h3><blockquote>\n<p>对于一组不同重量、不可分割的物品，需要选择一些装入背包，在满足背包最大重量限制的前提下，背包中物品总重量的最大值是多少呢？</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 回溯算法实现。注意：我把输入的变量都定义成了成员变量。</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxW = Integer.MIN_VALUE; <span class=\"hljs-comment\">// 结果放到maxW中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] weight = &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">3</span>&#125;;  <span class=\"hljs-comment\">// 物品重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// 物品个数</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> w = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// 背包承受的最大重量</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> cw)</span> </span>&#123; <span class=\"hljs-comment\">// 调用f(0, 0)</span><br>  <span class=\"hljs-keyword\">if</span> (cw == w || i == n) &#123; <span class=\"hljs-comment\">// cw==w表示装满了，i==n表示物品都考察完了</span><br>    <span class=\"hljs-keyword\">if</span> (cw &gt; maxW) maxW = cw;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  f(i+<span class=\"hljs-number\">1</span>, cw); <span class=\"hljs-comment\">// 选择不装第i个物品</span><br>  <span class=\"hljs-keyword\">if</span> (cw + weight[i] &lt;= w) &#123;<br>    f(i+<span class=\"hljs-number\">1</span>,cw + weight[i]); <span class=\"hljs-comment\">// 选择装第i个物品</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E5%9B%9E%E6%BA%AF%E6%B1%82%E8%A7%A3%E8%BF%87%E7%A8%8B.jpg\" class title=\"回溯求解过程\">\n<p>递归树中的每个节点表示一种状态，用（i, cw）来表示。其中，i （从0开始）表示将要决策第几个物品是否装入背包，cw 表示当前背包中物品的总重量。比如，（2，2）表示我们将要决策第 2 个物品是否装入背包，在决策前，背包中物品的总重量是 2。</p>\n<p>有些子问题的求解是重复的，记录已经计算好的 f(i, cw)，当再次计算到重复的 f(i, cw) 的时候，可以直接从备忘录中取出来用，就不用再递归计算了，这样就可以避免冗余计算。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxW = Integer.MIN_VALUE; <span class=\"hljs-comment\">// 结果放到maxW中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] weight = &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">3</span>&#125;;  <span class=\"hljs-comment\">// 物品重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// 物品个数</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> w = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// 背包承受的最大重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span>[][] mem = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[<span class=\"hljs-number\">5</span>][<span class=\"hljs-number\">10</span>]; <span class=\"hljs-comment\">// 备忘录，默认值false</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> cw)</span> </span>&#123; <span class=\"hljs-comment\">// 调用f(0, 0)</span><br>  <span class=\"hljs-keyword\">if</span> (cw == w || i == n) &#123; <span class=\"hljs-comment\">// cw==w表示装满了，i==n表示物品都考察完了</span><br>    <span class=\"hljs-keyword\">if</span> (cw &gt; maxW) maxW = cw;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (mem[i][cw]) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 重复状态</span><br>  mem[i][cw] = <span class=\"hljs-keyword\">true</span>; <span class=\"hljs-comment\">// 记录(i, cw)这个状态</span><br>  f(i+<span class=\"hljs-number\">1</span>, cw); <span class=\"hljs-comment\">// 选择不装第i个物品</span><br>  <span class=\"hljs-keyword\">if</span> (cw + weight[i] &lt;= w) &#123;<br>    f(i+<span class=\"hljs-number\">1</span>,cw + weight[i]); <span class=\"hljs-comment\">// 选择装第i个物品</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>动态规划</strong></p>\n<p>把整个求解过程分为 n 个阶段，每个阶段会决策一个物品是否放到背包中。每个物品决策（放入或者不放入背包）完之后，背包中的物品的重量会有多种情况，也就是说，会达到多种不同的状态，对应到递归树中，就是有很多不同的节点。</p>\n<p>把每一层重复的状态（节点）合并，只记录不同的状态，然后基于上一层的状态集合，来推导下一层的状态集合。可以通过合并每一层重复的状态，这样就保证每一层不同状态的个数都不会超过 w 个（w 表示背包的承载重量），就成功避免了每层状态个数的指数级增长。</p>\n<p>用一个二维数组 states[n][w+1]，来记录每层可以达到的不同状态。</p>\n<blockquote>\n<p>第 0 个（下标从 0 开始编号）物品的重量是 2，要么装入背包，要么不装入背包，决策完之后，会对应背包的两种状态，背包中物品的总重量是 0 或者 2。用 states[0][0]=true 和 states[0][2]=true 来表示这两种状态。</p>\n<p>第 1 个物品的重量也是 2，基于之前的背包状态，在这个物品决策完之后，不同的状态有 3 个，背包中物品总重量分别是 0(0+0)，2(0+2 or 2+0)，4(2+2)。用 states[1][0]=true，states[1][2]=true，states[1][4]=true 来表示这三种状态。</p>\n<p>以此类推，直到考察完所有的物品后，整个 states 状态数组就都计算好了。图中 0 表示 false，1 表示 true。只需要在最后一层，找一个值为 true 的最接近 w（这里是 9）的值，就是背包中物品总重量的最大值。</p>\n<img src=\"/article/55046/0-1%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%8A%B6%E6%80%81%E5%9B%BE1.jpg\" class title=\"0-1背包动态规划状态图1\">\n<img src=\"/article/55046/0-1%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%8A%B6%E6%80%81%E5%9B%BE2.jpg\" class title=\"0-1背包动态规划状态图2\">\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//weight:物品重量，n:物品个数，w:背包可承载重量</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">knapsack</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] weight, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">boolean</span>[][] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[n][w+<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 默认值false</span><br>  states[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">true</span>;  <span class=\"hljs-comment\">// 第一行的数据要特殊处理，可以利用哨兵优化</span><br>  <span class=\"hljs-keyword\">if</span> (weight[<span class=\"hljs-number\">0</span>] &lt;= w) &#123;<br>    states[<span class=\"hljs-number\">0</span>][weight[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-keyword\">true</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 动态规划状态转移</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w; ++j) &#123;<span class=\"hljs-comment\">// 不把第i个物品放入背包</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j] == <span class=\"hljs-keyword\">true</span>) states[i][j] = states[i-<span class=\"hljs-number\">1</span>][j];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w-weight[i]; ++j) &#123;<span class=\"hljs-comment\">//把第i个物品放入背包</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j]==<span class=\"hljs-keyword\">true</span>) states[i][j+weight[i]] = <span class=\"hljs-keyword\">true</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = w; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123; <span class=\"hljs-comment\">// 输出结果</span><br>    <span class=\"hljs-keyword\">if</span> (states[n-<span class=\"hljs-number\">1</span>][i] == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">return</span> i;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>时间复杂度:耗时最多的部分就是代码中的两层 for 循环，所以时间复杂度是 <strong>O(n*w)</strong>。n 表示物品个数，w 表示背包可以承载的总重量。</p>\n<p><strong>动态规划优化</strong></p>\n<p>需要额外申请一个 n 乘以 w+1 的二维数组，对空间的消耗比较多。需要一个大小为 w+1 的一维数组就可以解决这个问题。动态规划状态转移的过程，都可以基于这个一维数组来操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">knapsack2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] items, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">boolean</span>[] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[w+<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 默认值false</span><br>  states[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">true</span>;  <span class=\"hljs-comment\">// 第一行的数据要特殊处理，可以利用哨兵优化</span><br>  <span class=\"hljs-keyword\">if</span> (items[<span class=\"hljs-number\">0</span>] &lt;= w) &#123;<br>    states[items[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-keyword\">true</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 动态规划</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = w-items[i]; j &gt;= <span class=\"hljs-number\">0</span>; --j) &#123;<span class=\"hljs-comment\">//把第i个物品放入背包</span><br>      <span class=\"hljs-keyword\">if</span> (states[j]==<span class=\"hljs-keyword\">true</span>) states[j+items[i]] = <span class=\"hljs-keyword\">true</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = w; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123; <span class=\"hljs-comment\">// 输出结果</span><br>    <span class=\"hljs-keyword\">if</span> (states[i] == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">return</span> i;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"0-1-背包问题升级版\"><a href=\"#0-1-背包问题升级版\" class=\"headerlink\" title=\"0-1 背包问题升级版\"></a>0-1 背包问题升级版</h3><p>引入物品价值这一变量</p>\n<blockquote>\n<p>对于一组不同重量、不同价值、不可分割的物品，选择将某些物品装入背包，在满足背包最大重量限制的前提下，背包中可装入物品的总价值最大是多少呢？</p>\n</blockquote>\n<blockquote>\n<p><strong>回溯算法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxV = Integer.MIN_VALUE; <span class=\"hljs-comment\">// 结果放到maxV中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] items = &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">3</span>&#125;;  <span class=\"hljs-comment\">// 物品的重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] value = &#123;<span class=\"hljs-number\">3</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">8</span>，<span class=\"hljs-number\">9</span>，<span class=\"hljs-number\">6</span>&#125;; <span class=\"hljs-comment\">// 物品的价值</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// 物品个数</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> w = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// 背包承受的最大重量</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> cw, <span class=\"hljs-keyword\">int</span> cv)</span> </span>&#123; <span class=\"hljs-comment\">// 调用f(0, 0, 0)</span><br>  <span class=\"hljs-keyword\">if</span> (cw == w || i == n) &#123; <span class=\"hljs-comment\">// cw==w表示装满了，i==n表示物品都考察完了</span><br>    <span class=\"hljs-keyword\">if</span> (cv &gt; maxV) maxV = cv;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  f(i+<span class=\"hljs-number\">1</span>, cw, cv); <span class=\"hljs-comment\">// 选择不装第i个物品</span><br>  <span class=\"hljs-keyword\">if</span> (cw + weight[i] &lt;= w) &#123;<br>    f(i+<span class=\"hljs-number\">1</span>,cw+weight[i], cv+value[i]); <span class=\"hljs-comment\">// 选择装第i个物品</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%8D%87%E7%BA%A7%E7%89%88%E5%9B%9E%E6%BA%AF%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"背包问题升级版回溯递归树\">\n<p>在递归树中，每个节点表示一个状态。现在需要 3 个变量（i, cw, cv）来表示一个状态。其中，i 表示即将要决策第 i 个物品是否装入背包，cw 表示当前背包中物品的总重量，cv 表示当前背包中物品的总价值。</p>\n<p>在递归树中，有几个节点的 i 和 cw 是完全相同的，比如 f(2,2,4) 和 f(2,2,3)。在背包中物品总重量一样的情况下，f(2,2,4) 这种状态对应的物品总价值更大，可以舍弃 f(2,2,3) 这种状态，只需要沿着 f(2,2,4) 这条决策路线继续往下决策就可以。</p>\n<p><strong>对于 (i, cw) 相同的不同状态，只需要保留 cv 值最大的那个，继续递归处理，其他状态不予考虑。</strong></p>\n</blockquote>\n<p><strong>动态规划</strong></p>\n<p>把整个求解过程分为 n 个阶段，每个阶段会决策一个物品是否放到背包中。每个阶段决策完之后，背包中的物品的总重量以及总价值，会有多种情况，也就是会达到多种不同的状态。</p>\n<p>用一个二维数组 states[n][w+1]，来记录每层可以达到的不同状态。不过这里数组存储的值不再是 boolean 类型的了，而是当前状态对应的最大总价值。我们把每一层中 (i, cw) 重复的状态（节点）合并，只记录 cv 值最大的那个状态，然后基于这些状态来推导下一层的状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">knapsack3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] weight, <span class=\"hljs-keyword\">int</span>[] value, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][w+<span class=\"hljs-number\">1</span>];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 初始化states</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; w+<span class=\"hljs-number\">1</span>; ++j) &#123;<br>      states[i][j] = -<span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  states[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">if</span> (weight[<span class=\"hljs-number\">0</span>] &lt;= w) &#123;<br>    states[<span class=\"hljs-number\">0</span>][weight[<span class=\"hljs-number\">0</span>]] = value[<span class=\"hljs-number\">0</span>];<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">//动态规划，状态转移</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w; ++j) &#123; <span class=\"hljs-comment\">// 不选择第i个物品</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j] &gt;= <span class=\"hljs-number\">0</span>) states[i][j] = states[i-<span class=\"hljs-number\">1</span>][j];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w-weight[i]; ++j) &#123; <span class=\"hljs-comment\">// 选择第i个物品</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j] &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">int</span> v = states[i-<span class=\"hljs-number\">1</span>][j] + value[i];<br>        <span class=\"hljs-keyword\">if</span> (v &gt; states[i][j+weight[i]]) &#123;<br>          states[i][j+weight[i]] = v;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 找出最大值</span><br>  <span class=\"hljs-keyword\">int</span> maxvalue = -<span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w; ++j) &#123;<br>    <span class=\"hljs-keyword\">if</span> (states[n-<span class=\"hljs-number\">1</span>][j] &gt; maxvalue) maxvalue = states[n-<span class=\"hljs-number\">1</span>][j];<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxvalue;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态规划：一个模型三个特征\"><a href=\"#动态规划：一个模型三个特征\" class=\"headerlink\" title=\"动态规划：一个模型三个特征\"></a>动态规划：一个模型三个特征</h3><ol>\n<li><p>多阶段决策最优解模型</p>\n<p>一般是用动态规划来解决最优问题。而解决问题的过程，需要经历多个决策阶段。每个决策阶段都对应着一组状态。然后寻找一组决策序列，经过这组决策序列，能够产生最终期望求解的最优值。</p>\n</li>\n<li><p>最优子结构特征</p>\n<p>最优子结构指的是，问题的最优解包含子问题的最优解。</p>\n<p>可以通过子问题的最优解，推导出问题的最优解。后面阶段的状态可以通过前面阶段的状态推导出来。</p>\n</li>\n<li><p>无后效性特征</p>\n<ol>\n<li>在推导后面阶段的状态的时候，只关心前面阶段的状态值，不关心这个状态是怎么一步一步推导出来的</li>\n<li>某阶段状态一旦确定，就不受之后阶段的决策影响</li>\n</ol>\n</li>\n<li><p>重复子问题</p>\n<p>不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态</p>\n</li>\n</ol>\n<h4 id=\"“一个模型三个特征”实例剖析\"><a href=\"#“一个模型三个特征”实例剖析\" class=\"headerlink\" title=\"“一个模型三个特征”实例剖析\"></a>“一个模型三个特征”实例剖析</h4><blockquote>\n<p>假设有一个 n 乘以 n 的矩阵 w[n][n]。矩阵存储的都是正整数。棋子起始位置在左上角，终止位置在右下角。将棋子从左上角移动到右下角。每次只能向右或者向下移动一位。从左上角到右下角，会有很多不同的路径可以走。把每条路径经过的数字加起来看作路径的长度。那从左上角移动到右下角的最短路径长度是多少呢？</p>\n<img src=\"/article/55046/%E6%A3%8B%E5%AD%90%E5%AE%9E%E4%BE%8B.jpg\" class title=\"棋子实例\">\n</blockquote>\n<ol>\n<li><p>一个模型</p>\n<p>从 (0, 0) 走到 (n-1, n-1)，总共要走 2*(n-1) 步，也就对应着 2*(n-1) 个阶段。每个阶段都有向右走或者向下走两种决策，并且每个阶段都会对应一个状态集合。</p>\n<p>把状态定义为 min_dist(i, j)，其中 i 表示行，j 表示列。min_dist 表达式的值表示从 (0, 0) 到达 (i, j) 的最短路径长度。所以，这个问题是一个多阶段决策最优解问题，符合动态规划的模型。</p>\n<img src=\"/article/55046/%E6%A3%8B%E5%AD%90%E5%AE%9E%E4%BE%8B%E5%A4%9A%E9%98%B6%E6%AE%B5%E5%86%B3%E7%AD%96%E6%9C%80%E4%BC%98%E8%A7%A3%E6%A8%A1%E5%9E%8B.jpg\" class title=\"棋子实例多阶段决策最优解模型\">\n</li>\n<li><p>三个特征</p>\n<p>如果我们走到 (i, j) 这个位置，我们只能通过 (i-1, j)，(i, j-1) 这两个位置移动，也就是说，想要计算 (i, j) 位置对应的状态，只需要关心 (i-1, j)，(i, j-1) 两个位置对应的状态，并不关心棋子是通过什么样的路线到达这两个位置的。所以，前面阶段的状态确定之后，不会被后面阶段的决策所改变，所以，这个问题符合“无后效性”这一特征。</p>\n<p>定义状态的时候，从起始位置 (0, 0) 到 (i, j) 的最小路径，记作 min_dist(i, j)。只有可能从 (i, j-1) 或者 (i-1, j) 两个位置到达 (i, j)。也就是说，到达 (i, j) 的最短路径要么经过 (i, j-1)，要么经过 (i-1, j)，而且到达 (i, j) 的最短路径肯定包含到达这两个位置的最短路径之一。换句话说就是，min_dist(i, j) 可以通过 min_dist(i, j-1) 和 min_dist(i-1, j) 两个状态推导出来。这就说明，这个问题符合“最优子结构”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">min_dist(i, j) = w[i][j] + min(min_dist(i, j-<span class=\"hljs-number\">1</span>), min_dist(i-<span class=\"hljs-number\">1</span>, j))<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"动态规划解题思路\"><a href=\"#动态规划解题思路\" class=\"headerlink\" title=\"动态规划解题思路\"></a>动态规划解题思路</h3><h4 id=\"状态转移表法\"><a href=\"#状态转移表法\" class=\"headerlink\" title=\"状态转移表法\"></a>状态转移表法</h4><p>状态表一般都是二维的，所以你可以把它想象成二维数组。其中，每个状态包含三个变量，行、列、数组值。根据决策的先后过程，从前往后，根据递推关系，分阶段填充状态表中的每个状态。最后，将这个递推填表的过程，翻译成代码，就是动态规划代码了。</p>\n<blockquote>\n<p>矩阵最短路径问题</p>\n<p>画出一个二维状态表，表中的行、列表示棋子所在的位置，表中的数值表示从起点到这个位置的最短路径。</p>\n<img src=\"/article/55046/%E7%9F%A9%E9%98%B5%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%981.jpg\" class title=\"矩阵最短路径问题1\">\n<img src=\"/article/55046/%E7%9F%A9%E9%98%B5%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%982.jpg\" class title=\"矩阵最短路径问题2\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">minDistDP</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[][] matrix, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][n];<br>  <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; ++j) &#123; <span class=\"hljs-comment\">// 初始化states的第一行数据</span><br>    sum += matrix[<span class=\"hljs-number\">0</span>][j];<br>    states[<span class=\"hljs-number\">0</span>][j] = sum;<br>  &#125;<br>  sum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 初始化states的第一列数据</span><br>    sum += matrix[i][<span class=\"hljs-number\">0</span>];<br>    states[i][<span class=\"hljs-number\">0</span>] = sum;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; ++j) &#123;<br>      states[i][j] = <br>            matrix[i][j] + Math.min(states[i][j-<span class=\"hljs-number\">1</span>], states[i-<span class=\"hljs-number\">1</span>][j]);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> states[n-<span class=\"hljs-number\">1</span>][n-<span class=\"hljs-number\">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"状态转移方程法\"><a href=\"#状态转移方程法\" class=\"headerlink\" title=\"状态转移方程法\"></a>状态转移方程法</h4><p>状态转移方程法有点类似递归的解题思路。需要分析，某个问题如何通过子问题来递归求解，也就是所谓的最优子结构。根据最优子结构，写出递归公式，也就是所谓的状态转移方程。</p>\n<blockquote>\n<p>矩阵最短路径问题</p>\n<p>状态转移方程:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">min_dist(i, j) = w[i][j] + min(min_dist(i, j-1), min_dist(i-1, j))<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>状态转移方程是解决动态规划的关键</strong></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[][] matrix = <br>         &#123;&#123;<span class=\"hljs-number\">1</span>，<span class=\"hljs-number\">3</span>，<span class=\"hljs-number\">5</span>，<span class=\"hljs-number\">9</span>&#125;, &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">1</span>，<span class=\"hljs-number\">3</span>，<span class=\"hljs-number\">4</span>&#125;，&#123;<span class=\"hljs-number\">5</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">7</span>&#125;，&#123;<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">8</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">3</span>&#125;&#125;;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">4</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[][] mem = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">minDist</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j)</span> </span>&#123; <span class=\"hljs-comment\">// 调用minDist(n-1, n-1);</span><br>  <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> &amp;&amp; j == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>];<br>  <span class=\"hljs-keyword\">if</span> (mem[i][j] &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> mem[i][j];<br>  <span class=\"hljs-keyword\">int</span> minLeft = Integer.MAX_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (j-<span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>    minLeft = minDist(i, j-<span class=\"hljs-number\">1</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">int</span> minUp = Integer.MAX_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (i-<span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>    minUp = minDist(i-<span class=\"hljs-number\">1</span>, j);<br>  &#125;<br>  <br>  <span class=\"hljs-keyword\">int</span> currMinDist = matrix[i][j] + Math.min(minLeft, minUp);<br>  mem[i][j] = currMinDist;<br>  <span class=\"hljs-keyword\">return</span> currMinDist;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"动态规划实战\"><a href=\"#动态规划实战\" class=\"headerlink\" title=\"动态规划实战\"></a>动态规划实战</h3><blockquote>\n<p>如何实现搜索引擎中的拼写纠错功能？</p>\n<p>在搜索框中，一不小心输错单词时，搜索引擎会非常智能地检测出拼写错误，并且用对应的正确单词来进行搜索</p>\n</blockquote>\n<h4 id=\"量化两个字符串的相似度\"><a href=\"#量化两个字符串的相似度\" class=\"headerlink\" title=\"量化两个字符串的相似度\"></a>量化两个字符串的相似度</h4><p><strong>编辑距离（Edit Distance）</strong></p>\n<p>编辑距离指的就是，将一个字符串转化成另一个字符串，需要的最少编辑操作次数（比如增加一个字符、删除一个字符、替换一个字符）。编辑距离越大，说明两个字符串的相似程度越小；相反，编辑距离就越小，说明两个字符串的相似程度越大。对于两个完全相同的字符串来说，编辑距离就是 0。</p>\n<p>编辑距离有多种不同的计算方式，比较著名的有莱文斯坦距离（Levenshtein distance）和最长公共子串长度（Longest common substring length）。</p>\n<p>其中，莱文斯坦距离允许增加、删除、替换字符这三个编辑操作，莱文斯坦距离的大小，表示两个字符串差异的大小；最长公共子串长度只允许增加、删除字符这两个编辑操作，最长公共子串的大小，表示两个字符串相似程度的大小。</p>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E4%B8%8E%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6.jpg\" class title=\"莱文斯坦距离与最长公共子串长度\">\n<h4 id=\"计算莱文斯坦距离\"><a href=\"#计算莱文斯坦距离\" class=\"headerlink\" title=\"计算莱文斯坦距离\"></a><strong>计算莱文斯坦距离</strong></h4><blockquote>\n<p><strong>回溯</strong></p>\n<p>回溯是一个递归处理的过程。如果 a[i]与 b[j]匹配，递归考察 a[i+1]和 b[j+1]。如果 a[i]与 b[j]不匹配：</p>\n<ol>\n<li>可以删除 a[i]，然后递归考察 a[i+1]和 b[j]；</li>\n<li>可以删除 b[j]，然后递归考察 a[i]和 b[j+1]；</li>\n<li>可以在 a[i]前面添加一个跟 b[j]相同的字符，然后递归考察 a[i]和 b[j+1];</li>\n<li>可以在 b[j]前面添加一个跟 a[i]相同的字符，然后递归考察 a[i+1]和 b[j]；</li>\n<li>可以将 a[i]替换成 b[j]，或者将 b[j]替换成 a[i]，然后递归考察 a[i+1]和 b[j+1]。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] a = <span class=\"hljs-string\">&quot;mitcmu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] b = <span class=\"hljs-string\">&quot;mtacnu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> minDist = Integer.MAX_VALUE; <span class=\"hljs-comment\">// 存储结果</span><br><span class=\"hljs-comment\">// 调用方式 lwstBT(0, 0, 0);</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">lwstBT</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j, <span class=\"hljs-keyword\">int</span> edist)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (i == n || j == m) &#123;<br>    <span class=\"hljs-keyword\">if</span> (i &lt; n) edist += (n-i);<br>    <span class=\"hljs-keyword\">if</span> (j &lt; m) edist += (m - j);<br>    <span class=\"hljs-keyword\">if</span> (edist &lt; minDist) minDist = edist;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) &#123; <span class=\"hljs-comment\">// 两个字符匹配</span><br>    lwstBT(i+<span class=\"hljs-number\">1</span>, j+<span class=\"hljs-number\">1</span>, edist);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 两个字符不匹配</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除a[i]或者b[j]前添加一个字符</span><br>    lwstBT(i, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除b[j]或者a[i]前添加一个字符</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 将a[i]和b[j]替换为相同字符</span><br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] a = <span class=\"hljs-string\">&quot;mitcmu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] b = <span class=\"hljs-string\">&quot;mtacnu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> minDist = Integer.MAX_VALUE; <span class=\"hljs-comment\">// 存储结果</span><br><span class=\"hljs-comment\">// 调用方式 lwstBT(0, 0, 0);</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">lwstBT</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j, <span class=\"hljs-keyword\">int</span> edist)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (i == n || j == m) &#123;<br>    <span class=\"hljs-keyword\">if</span> (i &lt; n) edist += (n-i);<br>    <span class=\"hljs-keyword\">if</span> (j &lt; m) edist += (m - j);<br>    <span class=\"hljs-keyword\">if</span> (edist &lt; minDist) minDist = edist;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) &#123; <span class=\"hljs-comment\">// 两个字符匹配</span><br>    lwstBT(i+<span class=\"hljs-number\">1</span>, j+<span class=\"hljs-number\">1</span>, edist);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 两个字符不匹配</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除a[i]或者b[j]前添加一个字符</span><br>    lwstBT(i, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除b[j]或者a[i]前添加一个字符</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 将a[i]和b[j]替换为相同字符</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"莱文斯坦距离回溯算法递归树\">\n<p>在递归树中，每个节点代表一个状态，状态包含三个变量 (i, j, edist)，其中，edist 表示处理到 a[i]和 b[j]时，已经执行的编辑操作的次数。</p>\n<p>在递归树中，(i, j) 两个变量重复的节点很多。对于 (i, j) 相同的节点，只需要保留 edist 最小的，继续递归处理就可以了，剩下的节点都可以舍弃。所以，状态就从 (i, j, edist) 变成了 (i, j, min_edist)，其中 min_edist 表示处理到 a[i]和 b[j]，已经执行的最少编辑次数。</p>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E8%BF%87%E7%A8%8B.jpg\" class title=\"莱文斯坦距离状态转移的过程\">\n</blockquote>\n<p><strong>动态规划</strong></p>\n<p><strong>状态转移方程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">如果：a[i]!=b[j]，那么：min_edist(i, j)就等于：<br>min(min_edist(i-1,j)+1, min_edist(i,j-1)+1, min_edist(i-1,j-1)+1)<br><br>如果：a[i]==b[j]，那么：min_edist(i, j)就等于：<br>min(min_edist(i-1,j)+1, min_edist(i,j-1)+1，min_edist(i-1,j-1))<br><br>其中，min表示求三数中的最小值。     <br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E7%8A%B6%E6%80%81%E8%A1%A8.jpg\" class title=\"莱文斯坦距离状态表\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">lwstDP</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span>[] b, <span class=\"hljs-keyword\">int</span> m)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] minDist = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][m];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; ++j) &#123; <span class=\"hljs-comment\">// 初始化第0行:a[0..0]与b[0..j]的编辑距离</span><br>    <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[j]) minDist[<span class=\"hljs-number\">0</span>][j] = j;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j != <span class=\"hljs-number\">0</span>) minDist[<span class=\"hljs-number\">0</span>][j] = minDist[<span class=\"hljs-number\">0</span>][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> minDist[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 初始化第0列:a[0..i]与b[0..0]的编辑距离</span><br>    <span class=\"hljs-keyword\">if</span> (a[i] == b[<span class=\"hljs-number\">0</span>]) minDist[i][<span class=\"hljs-number\">0</span>] = i;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i != <span class=\"hljs-number\">0</span>) minDist[i][<span class=\"hljs-number\">0</span>] = minDist[i-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> minDist[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 按行填表</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; m; ++j) &#123;<br>      <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) minDist[i][j] = min(<br>          minDist[i-<span class=\"hljs-number\">1</span>][j]+<span class=\"hljs-number\">1</span>, minDist[i][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>, minDist[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]);<br>      <span class=\"hljs-keyword\">else</span> minDist[i][j] = min(<br>          minDist[i-<span class=\"hljs-number\">1</span>][j]+<span class=\"hljs-number\">1</span>, minDist[i][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>, minDist[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> minDist[n-<span class=\"hljs-number\">1</span>][m-<span class=\"hljs-number\">1</span>];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y, <span class=\"hljs-keyword\">int</span> z)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> minv = Integer.MAX_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (x &lt; minv) minv = x;<br>  <span class=\"hljs-keyword\">if</span> (y &lt; minv) minv = y;<br>  <span class=\"hljs-keyword\">if</span> (z &lt; minv) minv = z;<br>  <span class=\"hljs-keyword\">return</span> minv;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"计算最长公共子串长度\"><a href=\"#计算最长公共子串长度\" class=\"headerlink\" title=\"计算最长公共子串长度\"></a>计算最长公共子串长度</h4><p><strong>动态规划</strong></p>\n<p><strong>状态转移方程</strong></p>\n<p>每个状态包括三个变量 (i, j, max_lcs)，max_lcs 表示 a[0…i]和 b[0…j]的最长公共子串长度。</p>\n<ol>\n<li>如果 a[i]与 b[j]互相匹配，将最大公共子串长度加一，并且继续考察 a[i+1]和 b[j+1]。</li>\n<li>如果 a[i]与 b[j]不匹配，最长公共子串长度不变<ol>\n<li>删除 a[i]，或者在 b[j]前面加上一个字符 a[i]，然后继续考察 a[i+1]和 b[j]；</li>\n<li>删除 b[j]，或者在 a[i]前面加上一个字符 b[j]，然后继续考察 a[i]和 b[j+1]。</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">如果：a[i]==b[j]，那么：max_lcs(i, j)就等于：<br>max(max_lcs(i-1,j-1)+1, max_lcs(i-1, j), max_lcs(i, j-1))；<br><br>如果：a[i]!=b[j]，那么：max_lcs(i, j)就等于：<br>max(max_lcs(i-1,j-1), max_lcs(i-1, j), max_lcs(i, j-1))；<br><br>其中max表示求三数中的最大值。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">lcs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span>[] b, <span class=\"hljs-keyword\">int</span> m)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] maxlcs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][m];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; ++j) &#123;<span class=\"hljs-comment\">//初始化第0行：a[0..0]与b[0..j]的maxlcs</span><br>    <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[j]) maxlcs[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j != <span class=\"hljs-number\">0</span>) maxlcs[<span class=\"hljs-number\">0</span>][j] = maxlcs[<span class=\"hljs-number\">0</span>][j-<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">else</span> maxlcs[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">0</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123;<span class=\"hljs-comment\">//初始化第0列：a[0..i]与b[0..0]的maxlcs</span><br>    <span class=\"hljs-keyword\">if</span> (a[i] == b[<span class=\"hljs-number\">0</span>]) maxlcs[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i != <span class=\"hljs-number\">0</span>) maxlcs[i][<span class=\"hljs-number\">0</span>] = maxlcs[i-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">else</span> maxlcs[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 填表</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; m; ++j) &#123;<br>      <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) maxlcs[i][j] = max(<br>          maxlcs[i-<span class=\"hljs-number\">1</span>][j], maxlcs[i][j-<span class=\"hljs-number\">1</span>], maxlcs[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>);<br>      <span class=\"hljs-keyword\">else</span> maxlcs[i][j] = max(<br>          maxlcs[i-<span class=\"hljs-number\">1</span>][j], maxlcs[i][j-<span class=\"hljs-number\">1</span>], maxlcs[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxlcs[n-<span class=\"hljs-number\">1</span>][m-<span class=\"hljs-number\">1</span>];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y, <span class=\"hljs-keyword\">int</span> z)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> maxv = Integer.MIN_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (x &gt; maxv) maxv = x;<br>  <span class=\"hljs-keyword\">if</span> (y &gt; maxv) maxv = y;<br>  <span class=\"hljs-keyword\">if</span> (z &gt; maxv) maxv = z;<br>  <span class=\"hljs-keyword\">return</span> maxv;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"背包问题总结\"><a href=\"#背包问题总结\" class=\"headerlink\" title=\"背包问题总结\"></a>背包问题总结</h2><h3 id=\"01背包\"><a href=\"#01背包\" class=\"headerlink\" title=\"01背包\"></a>01背包</h3><blockquote>\n<p><strong>dp[i][j]的含义：从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少?</strong></p>\n</blockquote>\n<p><strong>不放物品i</strong>：由dp[i - 1][j]推出，即背包容量为j，里面不放物品i的最大价值，此时dp[i][j]就是dp[i - 1][j]。(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)</p>\n<p><strong>放物品i</strong>：由dp[i - 1][j - weight[i]]推出，dp[i - 1][j - weight[i]] 为背包容量为j - weight[i]的时候不放物品i的最大价值，那么dp[i - 1][j - weight[i]] + value[i] （物品i的价值），就是背包放物品i得到的最大价值</p>\n<p> <strong>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</strong></p>\n<hr>\n<blockquote>\n<p><strong>dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]</strong></p>\n</blockquote>\n<p>dp[j]可以通过dp[j - weight[i]]推导出来，dp[j - weight[i]]表示容量为j - weight[i]的背包所背的最大价值。</p>\n<p>dp[j - weight[i]] + value[i] 表示 容量为 j - 物品i重量 的背包 加上 物品i的价值。（也就是容量为j的背包，放入物品i了之后的价值即：dp[j]）</p>\n<p>此时dp[j]有两个选择，一个是取自己dp[j] 相当于 二维dp数组中的dp[i-1][j]，即不放物品i，一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的，毕竟是求最大价值，</p>\n<p><strong>dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</strong></p>\n<hr>\n<blockquote>\n<ol>\n<li><p>当动态规划数组为二维数组时–先遍历物品 再遍历背包无所谓</p>\n</li>\n<li><p>当动态规划数组为一维数组时–先遍历物品再遍历背包，并且逆序遍历背包</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"完全背包\"><a href=\"#完全背包\" class=\"headerlink\" title=\"完全背包\"></a>完全背包</h3><p>对于完全背包，不论动态规划数组为一维还是二维，对物品遍历与背包遍历的顺序都是无所谓的</p>\n<h3 id=\"背包问题排列组合问题\"><a href=\"#背包问题排列组合问题\" class=\"headerlink\" title=\"背包问题排列组合问题\"></a>背包问题排列组合问题</h3><p>之前的遍历顺序不受凑成总和的元素的元素的顺序影响，而排列组合问题不同,求的是凑成总和的方法种类</p>\n<p><strong>如果求组合数就是外层for循环遍历物品，内层for遍历背包</strong>。</p>\n<p><strong>如果求排列数就是外层for遍历背包，内层for循环遍历物品</strong>。</p>\n","more":"<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>动态规划比较适合用来求解最优问题</p>\n<p>动态规划解决问题的思路:</p>\n<p>把问题分解为多个阶段，每个阶段对应一个决策。记录每一个阶段可达的状态集合（去掉重复的），然后通过当前阶段的状态集合，来推导下一个阶段的状态集合，动态地往前推进。</p>\n<h3 id=\"0-1-背包问题\"><a href=\"#0-1-背包问题\" class=\"headerlink\" title=\"0-1 背包问题\"></a>0-1 背包问题</h3><blockquote>\n<p>对于一组不同重量、不可分割的物品，需要选择一些装入背包，在满足背包最大重量限制的前提下，背包中物品总重量的最大值是多少呢？</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 回溯算法实现。注意：我把输入的变量都定义成了成员变量。</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxW = Integer.MIN_VALUE; <span class=\"hljs-comment\">// 结果放到maxW中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] weight = &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">3</span>&#125;;  <span class=\"hljs-comment\">// 物品重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// 物品个数</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> w = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// 背包承受的最大重量</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> cw)</span> </span>&#123; <span class=\"hljs-comment\">// 调用f(0, 0)</span><br>  <span class=\"hljs-keyword\">if</span> (cw == w || i == n) &#123; <span class=\"hljs-comment\">// cw==w表示装满了，i==n表示物品都考察完了</span><br>    <span class=\"hljs-keyword\">if</span> (cw &gt; maxW) maxW = cw;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  f(i+<span class=\"hljs-number\">1</span>, cw); <span class=\"hljs-comment\">// 选择不装第i个物品</span><br>  <span class=\"hljs-keyword\">if</span> (cw + weight[i] &lt;= w) &#123;<br>    f(i+<span class=\"hljs-number\">1</span>,cw + weight[i]); <span class=\"hljs-comment\">// 选择装第i个物品</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E5%9B%9E%E6%BA%AF%E6%B1%82%E8%A7%A3%E8%BF%87%E7%A8%8B.jpg\" class title=\"回溯求解过程\">\n<p>递归树中的每个节点表示一种状态，用（i, cw）来表示。其中，i （从0开始）表示将要决策第几个物品是否装入背包，cw 表示当前背包中物品的总重量。比如，（2，2）表示我们将要决策第 2 个物品是否装入背包，在决策前，背包中物品的总重量是 2。</p>\n<p>有些子问题的求解是重复的，记录已经计算好的 f(i, cw)，当再次计算到重复的 f(i, cw) 的时候，可以直接从备忘录中取出来用，就不用再递归计算了，这样就可以避免冗余计算。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxW = Integer.MIN_VALUE; <span class=\"hljs-comment\">// 结果放到maxW中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] weight = &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">3</span>&#125;;  <span class=\"hljs-comment\">// 物品重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// 物品个数</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> w = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// 背包承受的最大重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span>[][] mem = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[<span class=\"hljs-number\">5</span>][<span class=\"hljs-number\">10</span>]; <span class=\"hljs-comment\">// 备忘录，默认值false</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> cw)</span> </span>&#123; <span class=\"hljs-comment\">// 调用f(0, 0)</span><br>  <span class=\"hljs-keyword\">if</span> (cw == w || i == n) &#123; <span class=\"hljs-comment\">// cw==w表示装满了，i==n表示物品都考察完了</span><br>    <span class=\"hljs-keyword\">if</span> (cw &gt; maxW) maxW = cw;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (mem[i][cw]) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 重复状态</span><br>  mem[i][cw] = <span class=\"hljs-keyword\">true</span>; <span class=\"hljs-comment\">// 记录(i, cw)这个状态</span><br>  f(i+<span class=\"hljs-number\">1</span>, cw); <span class=\"hljs-comment\">// 选择不装第i个物品</span><br>  <span class=\"hljs-keyword\">if</span> (cw + weight[i] &lt;= w) &#123;<br>    f(i+<span class=\"hljs-number\">1</span>,cw + weight[i]); <span class=\"hljs-comment\">// 选择装第i个物品</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>动态规划</strong></p>\n<p>把整个求解过程分为 n 个阶段，每个阶段会决策一个物品是否放到背包中。每个物品决策（放入或者不放入背包）完之后，背包中的物品的重量会有多种情况，也就是说，会达到多种不同的状态，对应到递归树中，就是有很多不同的节点。</p>\n<p>把每一层重复的状态（节点）合并，只记录不同的状态，然后基于上一层的状态集合，来推导下一层的状态集合。可以通过合并每一层重复的状态，这样就保证每一层不同状态的个数都不会超过 w 个（w 表示背包的承载重量），就成功避免了每层状态个数的指数级增长。</p>\n<p>用一个二维数组 states[n][w+1]，来记录每层可以达到的不同状态。</p>\n<blockquote>\n<p>第 0 个（下标从 0 开始编号）物品的重量是 2，要么装入背包，要么不装入背包，决策完之后，会对应背包的两种状态，背包中物品的总重量是 0 或者 2。用 states[0][0]=true 和 states[0][2]=true 来表示这两种状态。</p>\n<p>第 1 个物品的重量也是 2，基于之前的背包状态，在这个物品决策完之后，不同的状态有 3 个，背包中物品总重量分别是 0(0+0)，2(0+2 or 2+0)，4(2+2)。用 states[1][0]=true，states[1][2]=true，states[1][4]=true 来表示这三种状态。</p>\n<p>以此类推，直到考察完所有的物品后，整个 states 状态数组就都计算好了。图中 0 表示 false，1 表示 true。只需要在最后一层，找一个值为 true 的最接近 w（这里是 9）的值，就是背包中物品总重量的最大值。</p>\n<img src=\"/article/55046/0-1%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%8A%B6%E6%80%81%E5%9B%BE1.jpg\" class title=\"0-1背包动态规划状态图1\">\n<img src=\"/article/55046/0-1%E8%83%8C%E5%8C%85%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%8A%B6%E6%80%81%E5%9B%BE2.jpg\" class title=\"0-1背包动态规划状态图2\">\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//weight:物品重量，n:物品个数，w:背包可承载重量</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">knapsack</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] weight, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">boolean</span>[][] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[n][w+<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 默认值false</span><br>  states[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">true</span>;  <span class=\"hljs-comment\">// 第一行的数据要特殊处理，可以利用哨兵优化</span><br>  <span class=\"hljs-keyword\">if</span> (weight[<span class=\"hljs-number\">0</span>] &lt;= w) &#123;<br>    states[<span class=\"hljs-number\">0</span>][weight[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-keyword\">true</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 动态规划状态转移</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w; ++j) &#123;<span class=\"hljs-comment\">// 不把第i个物品放入背包</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j] == <span class=\"hljs-keyword\">true</span>) states[i][j] = states[i-<span class=\"hljs-number\">1</span>][j];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w-weight[i]; ++j) &#123;<span class=\"hljs-comment\">//把第i个物品放入背包</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j]==<span class=\"hljs-keyword\">true</span>) states[i][j+weight[i]] = <span class=\"hljs-keyword\">true</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = w; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123; <span class=\"hljs-comment\">// 输出结果</span><br>    <span class=\"hljs-keyword\">if</span> (states[n-<span class=\"hljs-number\">1</span>][i] == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">return</span> i;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>时间复杂度:耗时最多的部分就是代码中的两层 for 循环，所以时间复杂度是 <strong>O(n*w)</strong>。n 表示物品个数，w 表示背包可以承载的总重量。</p>\n<p><strong>动态规划优化</strong></p>\n<p>需要额外申请一个 n 乘以 w+1 的二维数组，对空间的消耗比较多。需要一个大小为 w+1 的一维数组就可以解决这个问题。动态规划状态转移的过程，都可以基于这个一维数组来操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">knapsack2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] items, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">boolean</span>[] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[w+<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 默认值false</span><br>  states[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">true</span>;  <span class=\"hljs-comment\">// 第一行的数据要特殊处理，可以利用哨兵优化</span><br>  <span class=\"hljs-keyword\">if</span> (items[<span class=\"hljs-number\">0</span>] &lt;= w) &#123;<br>    states[items[<span class=\"hljs-number\">0</span>]] = <span class=\"hljs-keyword\">true</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 动态规划</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = w-items[i]; j &gt;= <span class=\"hljs-number\">0</span>; --j) &#123;<span class=\"hljs-comment\">//把第i个物品放入背包</span><br>      <span class=\"hljs-keyword\">if</span> (states[j]==<span class=\"hljs-keyword\">true</span>) states[j+items[i]] = <span class=\"hljs-keyword\">true</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = w; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123; <span class=\"hljs-comment\">// 输出结果</span><br>    <span class=\"hljs-keyword\">if</span> (states[i] == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">return</span> i;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"0-1-背包问题升级版\"><a href=\"#0-1-背包问题升级版\" class=\"headerlink\" title=\"0-1 背包问题升级版\"></a>0-1 背包问题升级版</h3><p>引入物品价值这一变量</p>\n<blockquote>\n<p>对于一组不同重量、不同价值、不可分割的物品，选择将某些物品装入背包，在满足背包最大重量限制的前提下，背包中可装入物品的总价值最大是多少呢？</p>\n</blockquote>\n<blockquote>\n<p><strong>回溯算法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxV = Integer.MIN_VALUE; <span class=\"hljs-comment\">// 结果放到maxV中</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] items = &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">3</span>&#125;;  <span class=\"hljs-comment\">// 物品的重量</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] value = &#123;<span class=\"hljs-number\">3</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">8</span>，<span class=\"hljs-number\">9</span>，<span class=\"hljs-number\">6</span>&#125;; <span class=\"hljs-comment\">// 物品的价值</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// 物品个数</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> w = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// 背包承受的最大重量</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> cw, <span class=\"hljs-keyword\">int</span> cv)</span> </span>&#123; <span class=\"hljs-comment\">// 调用f(0, 0, 0)</span><br>  <span class=\"hljs-keyword\">if</span> (cw == w || i == n) &#123; <span class=\"hljs-comment\">// cw==w表示装满了，i==n表示物品都考察完了</span><br>    <span class=\"hljs-keyword\">if</span> (cv &gt; maxV) maxV = cv;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  f(i+<span class=\"hljs-number\">1</span>, cw, cv); <span class=\"hljs-comment\">// 选择不装第i个物品</span><br>  <span class=\"hljs-keyword\">if</span> (cw + weight[i] &lt;= w) &#123;<br>    f(i+<span class=\"hljs-number\">1</span>,cw+weight[i], cv+value[i]); <span class=\"hljs-comment\">// 选择装第i个物品</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E5%8D%87%E7%BA%A7%E7%89%88%E5%9B%9E%E6%BA%AF%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"背包问题升级版回溯递归树\">\n<p>在递归树中，每个节点表示一个状态。现在需要 3 个变量（i, cw, cv）来表示一个状态。其中，i 表示即将要决策第 i 个物品是否装入背包，cw 表示当前背包中物品的总重量，cv 表示当前背包中物品的总价值。</p>\n<p>在递归树中，有几个节点的 i 和 cw 是完全相同的，比如 f(2,2,4) 和 f(2,2,3)。在背包中物品总重量一样的情况下，f(2,2,4) 这种状态对应的物品总价值更大，可以舍弃 f(2,2,3) 这种状态，只需要沿着 f(2,2,4) 这条决策路线继续往下决策就可以。</p>\n<p><strong>对于 (i, cw) 相同的不同状态，只需要保留 cv 值最大的那个，继续递归处理，其他状态不予考虑。</strong></p>\n</blockquote>\n<p><strong>动态规划</strong></p>\n<p>把整个求解过程分为 n 个阶段，每个阶段会决策一个物品是否放到背包中。每个阶段决策完之后，背包中的物品的总重量以及总价值，会有多种情况，也就是会达到多种不同的状态。</p>\n<p>用一个二维数组 states[n][w+1]，来记录每层可以达到的不同状态。不过这里数组存储的值不再是 boolean 类型的了，而是当前状态对应的最大总价值。我们把每一层中 (i, cw) 重复的状态（节点）合并，只记录 cv 值最大的那个状态，然后基于这些状态来推导下一层的状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">knapsack3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] weight, <span class=\"hljs-keyword\">int</span>[] value, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][w+<span class=\"hljs-number\">1</span>];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 初始化states</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; w+<span class=\"hljs-number\">1</span>; ++j) &#123;<br>      states[i][j] = -<span class=\"hljs-number\">1</span>;<br>    &#125;<br>  &#125;<br>  states[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">if</span> (weight[<span class=\"hljs-number\">0</span>] &lt;= w) &#123;<br>    states[<span class=\"hljs-number\">0</span>][weight[<span class=\"hljs-number\">0</span>]] = value[<span class=\"hljs-number\">0</span>];<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">//动态规划，状态转移</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w; ++j) &#123; <span class=\"hljs-comment\">// 不选择第i个物品</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j] &gt;= <span class=\"hljs-number\">0</span>) states[i][j] = states[i-<span class=\"hljs-number\">1</span>][j];<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w-weight[i]; ++j) &#123; <span class=\"hljs-comment\">// 选择第i个物品</span><br>      <span class=\"hljs-keyword\">if</span> (states[i-<span class=\"hljs-number\">1</span>][j] &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">int</span> v = states[i-<span class=\"hljs-number\">1</span>][j] + value[i];<br>        <span class=\"hljs-keyword\">if</span> (v &gt; states[i][j+weight[i]]) &#123;<br>          states[i][j+weight[i]] = v;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 找出最大值</span><br>  <span class=\"hljs-keyword\">int</span> maxvalue = -<span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= w; ++j) &#123;<br>    <span class=\"hljs-keyword\">if</span> (states[n-<span class=\"hljs-number\">1</span>][j] &gt; maxvalue) maxvalue = states[n-<span class=\"hljs-number\">1</span>][j];<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxvalue;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态规划：一个模型三个特征\"><a href=\"#动态规划：一个模型三个特征\" class=\"headerlink\" title=\"动态规划：一个模型三个特征\"></a>动态规划：一个模型三个特征</h3><ol>\n<li><p>多阶段决策最优解模型</p>\n<p>一般是用动态规划来解决最优问题。而解决问题的过程，需要经历多个决策阶段。每个决策阶段都对应着一组状态。然后寻找一组决策序列，经过这组决策序列，能够产生最终期望求解的最优值。</p>\n</li>\n<li><p>最优子结构特征</p>\n<p>最优子结构指的是，问题的最优解包含子问题的最优解。</p>\n<p>可以通过子问题的最优解，推导出问题的最优解。后面阶段的状态可以通过前面阶段的状态推导出来。</p>\n</li>\n<li><p>无后效性特征</p>\n<ol>\n<li>在推导后面阶段的状态的时候，只关心前面阶段的状态值，不关心这个状态是怎么一步一步推导出来的</li>\n<li>某阶段状态一旦确定，就不受之后阶段的决策影响</li>\n</ol>\n</li>\n<li><p>重复子问题</p>\n<p>不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态</p>\n</li>\n</ol>\n<h4 id=\"“一个模型三个特征”实例剖析\"><a href=\"#“一个模型三个特征”实例剖析\" class=\"headerlink\" title=\"“一个模型三个特征”实例剖析\"></a>“一个模型三个特征”实例剖析</h4><blockquote>\n<p>假设有一个 n 乘以 n 的矩阵 w[n][n]。矩阵存储的都是正整数。棋子起始位置在左上角，终止位置在右下角。将棋子从左上角移动到右下角。每次只能向右或者向下移动一位。从左上角到右下角，会有很多不同的路径可以走。把每条路径经过的数字加起来看作路径的长度。那从左上角移动到右下角的最短路径长度是多少呢？</p>\n<img src=\"/article/55046/%E6%A3%8B%E5%AD%90%E5%AE%9E%E4%BE%8B.jpg\" class title=\"棋子实例\">\n</blockquote>\n<ol>\n<li><p>一个模型</p>\n<p>从 (0, 0) 走到 (n-1, n-1)，总共要走 2*(n-1) 步，也就对应着 2*(n-1) 个阶段。每个阶段都有向右走或者向下走两种决策，并且每个阶段都会对应一个状态集合。</p>\n<p>把状态定义为 min_dist(i, j)，其中 i 表示行，j 表示列。min_dist 表达式的值表示从 (0, 0) 到达 (i, j) 的最短路径长度。所以，这个问题是一个多阶段决策最优解问题，符合动态规划的模型。</p>\n<img src=\"/article/55046/%E6%A3%8B%E5%AD%90%E5%AE%9E%E4%BE%8B%E5%A4%9A%E9%98%B6%E6%AE%B5%E5%86%B3%E7%AD%96%E6%9C%80%E4%BC%98%E8%A7%A3%E6%A8%A1%E5%9E%8B.jpg\" class title=\"棋子实例多阶段决策最优解模型\">\n</li>\n<li><p>三个特征</p>\n<p>如果我们走到 (i, j) 这个位置，我们只能通过 (i-1, j)，(i, j-1) 这两个位置移动，也就是说，想要计算 (i, j) 位置对应的状态，只需要关心 (i-1, j)，(i, j-1) 两个位置对应的状态，并不关心棋子是通过什么样的路线到达这两个位置的。所以，前面阶段的状态确定之后，不会被后面阶段的决策所改变，所以，这个问题符合“无后效性”这一特征。</p>\n<p>定义状态的时候，从起始位置 (0, 0) 到 (i, j) 的最小路径，记作 min_dist(i, j)。只有可能从 (i, j-1) 或者 (i-1, j) 两个位置到达 (i, j)。也就是说，到达 (i, j) 的最短路径要么经过 (i, j-1)，要么经过 (i-1, j)，而且到达 (i, j) 的最短路径肯定包含到达这两个位置的最短路径之一。换句话说就是，min_dist(i, j) 可以通过 min_dist(i, j-1) 和 min_dist(i-1, j) 两个状态推导出来。这就说明，这个问题符合“最优子结构”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">min_dist(i, j) = w[i][j] + min(min_dist(i, j-<span class=\"hljs-number\">1</span>), min_dist(i-<span class=\"hljs-number\">1</span>, j))<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"动态规划解题思路\"><a href=\"#动态规划解题思路\" class=\"headerlink\" title=\"动态规划解题思路\"></a>动态规划解题思路</h3><h4 id=\"状态转移表法\"><a href=\"#状态转移表法\" class=\"headerlink\" title=\"状态转移表法\"></a>状态转移表法</h4><p>状态表一般都是二维的，所以你可以把它想象成二维数组。其中，每个状态包含三个变量，行、列、数组值。根据决策的先后过程，从前往后，根据递推关系，分阶段填充状态表中的每个状态。最后，将这个递推填表的过程，翻译成代码，就是动态规划代码了。</p>\n<blockquote>\n<p>矩阵最短路径问题</p>\n<p>画出一个二维状态表，表中的行、列表示棋子所在的位置，表中的数值表示从起点到这个位置的最短路径。</p>\n<img src=\"/article/55046/%E7%9F%A9%E9%98%B5%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%981.jpg\" class title=\"矩阵最短路径问题1\">\n<img src=\"/article/55046/%E7%9F%A9%E9%98%B5%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%982.jpg\" class title=\"矩阵最短路径问题2\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">minDistDP</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[][] matrix, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] states = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][n];<br>  <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; ++j) &#123; <span class=\"hljs-comment\">// 初始化states的第一行数据</span><br>    sum += matrix[<span class=\"hljs-number\">0</span>][j];<br>    states[<span class=\"hljs-number\">0</span>][j] = sum;<br>  &#125;<br>  sum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 初始化states的第一列数据</span><br>    sum += matrix[i][<span class=\"hljs-number\">0</span>];<br>    states[i][<span class=\"hljs-number\">0</span>] = sum;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; n; ++j) &#123;<br>      states[i][j] = <br>            matrix[i][j] + Math.min(states[i][j-<span class=\"hljs-number\">1</span>], states[i-<span class=\"hljs-number\">1</span>][j]);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> states[n-<span class=\"hljs-number\">1</span>][n-<span class=\"hljs-number\">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"状态转移方程法\"><a href=\"#状态转移方程法\" class=\"headerlink\" title=\"状态转移方程法\"></a>状态转移方程法</h4><p>状态转移方程法有点类似递归的解题思路。需要分析，某个问题如何通过子问题来递归求解，也就是所谓的最优子结构。根据最优子结构，写出递归公式，也就是所谓的状态转移方程。</p>\n<blockquote>\n<p>矩阵最短路径问题</p>\n<p>状态转移方程:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">min_dist(i, j) = w[i][j] + min(min_dist(i, j-1), min_dist(i-1, j))<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>状态转移方程是解决动态规划的关键</strong></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[][] matrix = <br>         &#123;&#123;<span class=\"hljs-number\">1</span>，<span class=\"hljs-number\">3</span>，<span class=\"hljs-number\">5</span>，<span class=\"hljs-number\">9</span>&#125;, &#123;<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">1</span>，<span class=\"hljs-number\">3</span>，<span class=\"hljs-number\">4</span>&#125;，&#123;<span class=\"hljs-number\">5</span>，<span class=\"hljs-number\">2</span>，<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">7</span>&#125;，&#123;<span class=\"hljs-number\">6</span>，<span class=\"hljs-number\">8</span>，<span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">3</span>&#125;&#125;;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">4</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[][] mem = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">4</span>];<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">minDist</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j)</span> </span>&#123; <span class=\"hljs-comment\">// 调用minDist(n-1, n-1);</span><br>  <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> &amp;&amp; j == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>];<br>  <span class=\"hljs-keyword\">if</span> (mem[i][j] &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> mem[i][j];<br>  <span class=\"hljs-keyword\">int</span> minLeft = Integer.MAX_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (j-<span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>    minLeft = minDist(i, j-<span class=\"hljs-number\">1</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">int</span> minUp = Integer.MAX_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (i-<span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>    minUp = minDist(i-<span class=\"hljs-number\">1</span>, j);<br>  &#125;<br>  <br>  <span class=\"hljs-keyword\">int</span> currMinDist = matrix[i][j] + Math.min(minLeft, minUp);<br>  mem[i][j] = currMinDist;<br>  <span class=\"hljs-keyword\">return</span> currMinDist;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"动态规划实战\"><a href=\"#动态规划实战\" class=\"headerlink\" title=\"动态规划实战\"></a>动态规划实战</h3><blockquote>\n<p>如何实现搜索引擎中的拼写纠错功能？</p>\n<p>在搜索框中，一不小心输错单词时，搜索引擎会非常智能地检测出拼写错误，并且用对应的正确单词来进行搜索</p>\n</blockquote>\n<h4 id=\"量化两个字符串的相似度\"><a href=\"#量化两个字符串的相似度\" class=\"headerlink\" title=\"量化两个字符串的相似度\"></a>量化两个字符串的相似度</h4><p><strong>编辑距离（Edit Distance）</strong></p>\n<p>编辑距离指的就是，将一个字符串转化成另一个字符串，需要的最少编辑操作次数（比如增加一个字符、删除一个字符、替换一个字符）。编辑距离越大，说明两个字符串的相似程度越小；相反，编辑距离就越小，说明两个字符串的相似程度越大。对于两个完全相同的字符串来说，编辑距离就是 0。</p>\n<p>编辑距离有多种不同的计算方式，比较著名的有莱文斯坦距离（Levenshtein distance）和最长公共子串长度（Longest common substring length）。</p>\n<p>其中，莱文斯坦距离允许增加、删除、替换字符这三个编辑操作，莱文斯坦距离的大小，表示两个字符串差异的大小；最长公共子串长度只允许增加、删除字符这两个编辑操作，最长公共子串的大小，表示两个字符串相似程度的大小。</p>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E4%B8%8E%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6.jpg\" class title=\"莱文斯坦距离与最长公共子串长度\">\n<h4 id=\"计算莱文斯坦距离\"><a href=\"#计算莱文斯坦距离\" class=\"headerlink\" title=\"计算莱文斯坦距离\"></a><strong>计算莱文斯坦距离</strong></h4><blockquote>\n<p><strong>回溯</strong></p>\n<p>回溯是一个递归处理的过程。如果 a[i]与 b[j]匹配，递归考察 a[i+1]和 b[j+1]。如果 a[i]与 b[j]不匹配：</p>\n<ol>\n<li>可以删除 a[i]，然后递归考察 a[i+1]和 b[j]；</li>\n<li>可以删除 b[j]，然后递归考察 a[i]和 b[j+1]；</li>\n<li>可以在 a[i]前面添加一个跟 b[j]相同的字符，然后递归考察 a[i]和 b[j+1];</li>\n<li>可以在 b[j]前面添加一个跟 a[i]相同的字符，然后递归考察 a[i+1]和 b[j]；</li>\n<li>可以将 a[i]替换成 b[j]，或者将 b[j]替换成 a[i]，然后递归考察 a[i+1]和 b[j+1]。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] a = <span class=\"hljs-string\">&quot;mitcmu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] b = <span class=\"hljs-string\">&quot;mtacnu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> minDist = Integer.MAX_VALUE; <span class=\"hljs-comment\">// 存储结果</span><br><span class=\"hljs-comment\">// 调用方式 lwstBT(0, 0, 0);</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">lwstBT</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j, <span class=\"hljs-keyword\">int</span> edist)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (i == n || j == m) &#123;<br>    <span class=\"hljs-keyword\">if</span> (i &lt; n) edist += (n-i);<br>    <span class=\"hljs-keyword\">if</span> (j &lt; m) edist += (m - j);<br>    <span class=\"hljs-keyword\">if</span> (edist &lt; minDist) minDist = edist;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) &#123; <span class=\"hljs-comment\">// 两个字符匹配</span><br>    lwstBT(i+<span class=\"hljs-number\">1</span>, j+<span class=\"hljs-number\">1</span>, edist);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 两个字符不匹配</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除a[i]或者b[j]前添加一个字符</span><br>    lwstBT(i, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除b[j]或者a[i]前添加一个字符</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 将a[i]和b[j]替换为相同字符</span><br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] a = <span class=\"hljs-string\">&quot;mitcmu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">char</span>[] b = <span class=\"hljs-string\">&quot;mtacnu&quot;</span>.toCharArray();<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">6</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> minDist = Integer.MAX_VALUE; <span class=\"hljs-comment\">// 存储结果</span><br><span class=\"hljs-comment\">// 调用方式 lwstBT(0, 0, 0);</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">lwstBT</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j, <span class=\"hljs-keyword\">int</span> edist)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (i == n || j == m) &#123;<br>    <span class=\"hljs-keyword\">if</span> (i &lt; n) edist += (n-i);<br>    <span class=\"hljs-keyword\">if</span> (j &lt; m) edist += (m - j);<br>    <span class=\"hljs-keyword\">if</span> (edist &lt; minDist) minDist = edist;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) &#123; <span class=\"hljs-comment\">// 两个字符匹配</span><br>    lwstBT(i+<span class=\"hljs-number\">1</span>, j+<span class=\"hljs-number\">1</span>, edist);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 两个字符不匹配</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除a[i]或者b[j]前添加一个字符</span><br>    lwstBT(i, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除b[j]或者a[i]前添加一个字符</span><br>    lwstBT(i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>, edist + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 将a[i]和b[j]替换为相同字符</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"莱文斯坦距离回溯算法递归树\">\n<p>在递归树中，每个节点代表一个状态，状态包含三个变量 (i, j, edist)，其中，edist 表示处理到 a[i]和 b[j]时，已经执行的编辑操作的次数。</p>\n<p>在递归树中，(i, j) 两个变量重复的节点很多。对于 (i, j) 相同的节点，只需要保留 edist 最小的，继续递归处理就可以了，剩下的节点都可以舍弃。所以，状态就从 (i, j, edist) 变成了 (i, j, min_edist)，其中 min_edist 表示处理到 a[i]和 b[j]，已经执行的最少编辑次数。</p>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9A%84%E8%BF%87%E7%A8%8B.jpg\" class title=\"莱文斯坦距离状态转移的过程\">\n</blockquote>\n<p><strong>动态规划</strong></p>\n<p><strong>状态转移方程</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">如果：a[i]!=b[j]，那么：min_edist(i, j)就等于：<br>min(min_edist(i-1,j)+1, min_edist(i,j-1)+1, min_edist(i-1,j-1)+1)<br><br>如果：a[i]==b[j]，那么：min_edist(i, j)就等于：<br>min(min_edist(i-1,j)+1, min_edist(i,j-1)+1，min_edist(i-1,j-1))<br><br>其中，min表示求三数中的最小值。     <br></code></pre></td></tr></table></figure>\n<img src=\"/article/55046/%E8%8E%B1%E6%96%87%E6%96%AF%E5%9D%A6%E8%B7%9D%E7%A6%BB%E7%8A%B6%E6%80%81%E8%A1%A8.jpg\" class title=\"莱文斯坦距离状态表\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">lwstDP</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span>[] b, <span class=\"hljs-keyword\">int</span> m)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] minDist = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][m];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; ++j) &#123; <span class=\"hljs-comment\">// 初始化第0行:a[0..0]与b[0..j]的编辑距离</span><br>    <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[j]) minDist[<span class=\"hljs-number\">0</span>][j] = j;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j != <span class=\"hljs-number\">0</span>) minDist[<span class=\"hljs-number\">0</span>][j] = minDist[<span class=\"hljs-number\">0</span>][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> minDist[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 初始化第0列:a[0..i]与b[0..0]的编辑距离</span><br>    <span class=\"hljs-keyword\">if</span> (a[i] == b[<span class=\"hljs-number\">0</span>]) minDist[i][<span class=\"hljs-number\">0</span>] = i;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i != <span class=\"hljs-number\">0</span>) minDist[i][<span class=\"hljs-number\">0</span>] = minDist[i-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> minDist[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 按行填表</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; m; ++j) &#123;<br>      <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) minDist[i][j] = min(<br>          minDist[i-<span class=\"hljs-number\">1</span>][j]+<span class=\"hljs-number\">1</span>, minDist[i][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>, minDist[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]);<br>      <span class=\"hljs-keyword\">else</span> minDist[i][j] = min(<br>          minDist[i-<span class=\"hljs-number\">1</span>][j]+<span class=\"hljs-number\">1</span>, minDist[i][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>, minDist[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> minDist[n-<span class=\"hljs-number\">1</span>][m-<span class=\"hljs-number\">1</span>];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y, <span class=\"hljs-keyword\">int</span> z)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> minv = Integer.MAX_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (x &lt; minv) minv = x;<br>  <span class=\"hljs-keyword\">if</span> (y &lt; minv) minv = y;<br>  <span class=\"hljs-keyword\">if</span> (z &lt; minv) minv = z;<br>  <span class=\"hljs-keyword\">return</span> minv;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"计算最长公共子串长度\"><a href=\"#计算最长公共子串长度\" class=\"headerlink\" title=\"计算最长公共子串长度\"></a>计算最长公共子串长度</h4><p><strong>动态规划</strong></p>\n<p><strong>状态转移方程</strong></p>\n<p>每个状态包括三个变量 (i, j, max_lcs)，max_lcs 表示 a[0…i]和 b[0…j]的最长公共子串长度。</p>\n<ol>\n<li>如果 a[i]与 b[j]互相匹配，将最大公共子串长度加一，并且继续考察 a[i+1]和 b[j+1]。</li>\n<li>如果 a[i]与 b[j]不匹配，最长公共子串长度不变<ol>\n<li>删除 a[i]，或者在 b[j]前面加上一个字符 a[i]，然后继续考察 a[i+1]和 b[j]；</li>\n<li>删除 b[j]，或者在 a[i]前面加上一个字符 b[j]，然后继续考察 a[i]和 b[j+1]。</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">如果：a[i]==b[j]，那么：max_lcs(i, j)就等于：<br>max(max_lcs(i-1,j-1)+1, max_lcs(i-1, j), max_lcs(i, j-1))；<br><br>如果：a[i]!=b[j]，那么：max_lcs(i, j)就等于：<br>max(max_lcs(i-1,j-1), max_lcs(i-1, j), max_lcs(i, j-1))；<br><br>其中max表示求三数中的最大值。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">lcs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">char</span>[] b, <span class=\"hljs-keyword\">int</span> m)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[][] maxlcs = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][m];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; ++j) &#123;<span class=\"hljs-comment\">//初始化第0行：a[0..0]与b[0..j]的maxlcs</span><br>    <span class=\"hljs-keyword\">if</span> (a[<span class=\"hljs-number\">0</span>] == b[j]) maxlcs[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j != <span class=\"hljs-number\">0</span>) maxlcs[<span class=\"hljs-number\">0</span>][j] = maxlcs[<span class=\"hljs-number\">0</span>][j-<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">else</span> maxlcs[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">0</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123;<span class=\"hljs-comment\">//初始化第0列：a[0..i]与b[0..0]的maxlcs</span><br>    <span class=\"hljs-keyword\">if</span> (a[i] == b[<span class=\"hljs-number\">0</span>]) maxlcs[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i != <span class=\"hljs-number\">0</span>) maxlcs[i][<span class=\"hljs-number\">0</span>] = maxlcs[i-<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">else</span> maxlcs[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; ++i) &#123; <span class=\"hljs-comment\">// 填表</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; m; ++j) &#123;<br>      <span class=\"hljs-keyword\">if</span> (a[i] == b[j]) maxlcs[i][j] = max(<br>          maxlcs[i-<span class=\"hljs-number\">1</span>][j], maxlcs[i][j-<span class=\"hljs-number\">1</span>], maxlcs[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]+<span class=\"hljs-number\">1</span>);<br>      <span class=\"hljs-keyword\">else</span> maxlcs[i][j] = max(<br>          maxlcs[i-<span class=\"hljs-number\">1</span>][j], maxlcs[i][j-<span class=\"hljs-number\">1</span>], maxlcs[i-<span class=\"hljs-number\">1</span>][j-<span class=\"hljs-number\">1</span>]);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> maxlcs[n-<span class=\"hljs-number\">1</span>][m-<span class=\"hljs-number\">1</span>];<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y, <span class=\"hljs-keyword\">int</span> z)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> maxv = Integer.MIN_VALUE;<br>  <span class=\"hljs-keyword\">if</span> (x &gt; maxv) maxv = x;<br>  <span class=\"hljs-keyword\">if</span> (y &gt; maxv) maxv = y;<br>  <span class=\"hljs-keyword\">if</span> (z &gt; maxv) maxv = z;<br>  <span class=\"hljs-keyword\">return</span> maxv;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"背包问题总结\"><a href=\"#背包问题总结\" class=\"headerlink\" title=\"背包问题总结\"></a>背包问题总结</h2><h3 id=\"01背包\"><a href=\"#01背包\" class=\"headerlink\" title=\"01背包\"></a>01背包</h3><blockquote>\n<p><strong>dp[i][j]的含义：从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少?</strong></p>\n</blockquote>\n<p><strong>不放物品i</strong>：由dp[i - 1][j]推出，即背包容量为j，里面不放物品i的最大价值，此时dp[i][j]就是dp[i - 1][j]。(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)</p>\n<p><strong>放物品i</strong>：由dp[i - 1][j - weight[i]]推出，dp[i - 1][j - weight[i]] 为背包容量为j - weight[i]的时候不放物品i的最大价值，那么dp[i - 1][j - weight[i]] + value[i] （物品i的价值），就是背包放物品i得到的最大价值</p>\n<p> <strong>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</strong></p>\n<hr>\n<blockquote>\n<p><strong>dp[j]表示：容量为j的背包，所背的物品价值可以最大为dp[j]</strong></p>\n</blockquote>\n<p>dp[j]可以通过dp[j - weight[i]]推导出来，dp[j - weight[i]]表示容量为j - weight[i]的背包所背的最大价值。</p>\n<p>dp[j - weight[i]] + value[i] 表示 容量为 j - 物品i重量 的背包 加上 物品i的价值。（也就是容量为j的背包，放入物品i了之后的价值即：dp[j]）</p>\n<p>此时dp[j]有两个选择，一个是取自己dp[j] 相当于 二维dp数组中的dp[i-1][j]，即不放物品i，一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的，毕竟是求最大价值，</p>\n<p><strong>dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);</strong></p>\n<hr>\n<blockquote>\n<ol>\n<li><p>当动态规划数组为二维数组时–先遍历物品 再遍历背包无所谓</p>\n</li>\n<li><p>当动态规划数组为一维数组时–先遍历物品再遍历背包，并且逆序遍历背包</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"完全背包\"><a href=\"#完全背包\" class=\"headerlink\" title=\"完全背包\"></a>完全背包</h3><p>对于完全背包，不论动态规划数组为一维还是二维，对物品遍历与背包遍历的顺序都是无所谓的</p>\n<h3 id=\"背包问题排列组合问题\"><a href=\"#背包问题排列组合问题\" class=\"headerlink\" title=\"背包问题排列组合问题\"></a>背包问题排列组合问题</h3><p>之前的遍历顺序不受凑成总和的元素的元素的顺序影响，而排列组合问题不同,求的是凑成总和的方法种类</p>\n<p><strong>如果求组合数就是外层for循环遍历物品，内层for遍历背包</strong>。</p>\n<p><strong>如果求排列数就是外层for遍历背包，内层for循环遍历物品</strong>。</p>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"动态规划","path":"api/categories/动态规划.json"}],"tags":[{"name":"数据结构与算法,动态规划","path":"api/tags/数据结构与算法,动态规划.json"}]}