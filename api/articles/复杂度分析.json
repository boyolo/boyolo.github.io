{"title":"复杂度分析","slug":"复杂度分析","date":"2022-04-30T00:56:03.000Z","updated":"2022-05-02T06:00:26.595Z","comments":true,"path":"api/articles/复杂度分析.json","realPath":null,"excerpt":null,"covers":["/article/undefined/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F.png","/article/undefined/%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%87%8F%E7%BA%A7.jpg","/article/undefined/%E5%B9%B3%E5%9D%87%E6%83%85%E5%86%B5.jpg","/article/undefined/%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg","/article/undefined/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.jpg"],"cover":"/images/theme/coverphoto/复杂度分析.jpg","content":"<p><a href=\"https://time.geekbang.org/column/intro/100017301?tab=catalog\">参考学习自·数据结构与算法之美</a></p>\n<p><strong>事后统计法</strong></p>\n<p>这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。</p>\n<p>局限性:</p>\n<ol>\n<li>测试结果非常依赖测试环境</li>\n<li>测试结果受数据规模的影响很大</li>\n</ol>\n<p>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。</p>\n<h2 id=\"大-O-复杂度表示法\"><a href=\"#大-O-复杂度表示法\" class=\"headerlink\" title=\"大 O 复杂度表示法\"></a>大 O 复杂度表示法</h2><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">cal</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt;= n; ++i) &#123;<br>    sum = sum + i;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。</p>\n<p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n<em>unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)</em>unit_time。</p>\n<p><strong>所有代码的执行时间 T(n) 与每行代码的执行次数成正比</strong></p>\n</blockquote>\n<p><strong>所有代码的执行时间 T(n) 与每行代码的执行次数 f(n) 成正比</strong></p>\n<p><strong>大 O 时间复杂度表示法</strong></p>\n<img src=\"/article/undefined/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F.png\" class title=\"复杂度分析公式\">\n<ol>\n<li>T(n) 表示代码执行的时间；</li>\n<li>n 表示数据规模的大小；</li>\n<li>f(n) 表示每行代码执行的次数总和。</li>\n<li>公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比</li>\n</ol>\n<p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>\n<h2 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h2><h3 id=\"如何分析一段代码的时间复杂度？\"><a href=\"#如何分析一段代码的时间复杂度？\" class=\"headerlink\" title=\"如何分析一段代码的时间复杂度？\"></a>如何分析一段代码的时间复杂度？</h3><ol>\n<li><p>只关注循环执行次数最多的一段代码</p>\n<p>大 O 这种复杂度表示方法只是表示一种变化趋势。我们通常会<strong>忽略</strong>掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，在分析一个算法、一段代码的时间复杂度的时候，也<strong>只关注循环执行次数最多</strong>的那一段代码就可以了。</p>\n</li>\n<li><p>加法法则：总复杂度等于量级最大的那段代码的复杂度</p>\n<p><strong>总的时间复杂度就等于量级最大的那段代码的时间复杂度</strong></p>\n<p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))，那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))</p>\n</li>\n<li><p>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p>\n<p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))，那么 T(n)=T1(n)<em>T2(n)=O(f(n))</em>O(g(n))=O(f(n)*g(n))</p>\n</li>\n</ol>\n<h3 id=\"几种常见时间复杂度实例分析\"><a href=\"#几种常见时间复杂度实例分析\" class=\"headerlink\" title=\"几种常见时间复杂度实例分析\"></a>几种常见时间复杂度实例分析</h3><img src=\"/article/undefined/%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%87%8F%E7%BA%A7.jpg\" class title=\"复杂度量级\">\n<p>多项式量级和非多项式量级，其中，非多项式量级只有两个：O(2<sup>n</sup>) 和 O(n!)</p>\n<p><strong>越高阶复杂度的算法，执行效率越低</strong></p>\n<p>时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题</p>\n<p>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。</p>\n<ol>\n<li><p>O(1)</p>\n<p>O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码</p>\n<p>只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)</p>\n</li>\n<li><p>O(logn)、O(nlogn)</p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">i=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (i &lt;= n)  &#123;<br>  i = i * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>变量 i 的值从 1 开始取，每循环一次就乘以 2，当大于 n 时，循环结束</p>\n<p><img src=\"/article/变量 i 的取值就是一个等比数列.jpg\"><span class=\"image-caption\">变量 i 的取值就是一个等比数列</span></p>\n<p>通过 2<sup>x</sup>=n 求解 x，x=log<sub>2</sub>n</p>\n<p>所以，这段代码的时间复杂度就是 O(log<sub>2</sub>n)</p>\n</blockquote>\n<p><strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong></p>\n<blockquote>\n<p>log<sub>3</sub>n 就等于 log<sub>3</sub>2 <em> log<sub>2</sub>n，所以 O(log<sub>3</sub>n) = O(C </em> log<sub>2</sub>n)，其中 C=log<sub>3</sub>2 是一个常量。可以直接忽略</p>\n<p>O(log<sub>2</sub>n) 就可以直接表示为 O(logn)</p>\n</blockquote>\n<p>因此，在对数阶时间复杂度的表示方法里，我们<strong>忽略对数的“底”，统一表示为 O(logn)。</strong></p>\n</li>\n<li><p>O(m+n)、O(m*n)</p>\n<p><strong>代码的复杂度由两个数据的规模来决定</strong></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">cal</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> sum_1 = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt; m; ++i) &#123;<br>    sum_1 = sum_1 + i;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">int</span> sum_2 = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; j &lt; n; ++j) &#123;<br>    sum_2 = sum_2 + j;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">return</span> sum_1 + sum_2;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)</p>\n</li>\n</ol>\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。</p>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];<br>  <span class=\"hljs-keyword\">for</span> (i; i &lt;n; ++i) &#123;<br>    a[i] = i * i;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> (i = n<span class=\"hljs-number\">-1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>    print out a[i]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第 2 行代码中，申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。</p>\n<p>第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>\n</blockquote>\n<p>常见的空间复杂度就是 O(1)、O(n)、O(n2 )</p>\n<h2 id=\"浅析最好、最坏、平均、均摊时间复杂度\"><a href=\"#浅析最好、最坏、平均、均摊时间复杂度\" class=\"headerlink\" title=\"浅析最好、最坏、平均、均摊时间复杂度\"></a>浅析最好、最坏、平均、均摊时间复杂度</h2><h3 id=\"最好、最坏情况时间复杂度\"><a href=\"#最好、最坏情况时间复杂度\" class=\"headerlink\" title=\"最好、最坏情况时间复杂度\"></a>最好、最坏情况时间复杂度</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// n表示数组array的长度</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> pos = -<span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt; n; ++i) &#123;<br>    <span class=\"hljs-keyword\">if</span> (array[i] == x) &#123;<br>       pos = i;<br>       <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> pos;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>要查找的变量 x 可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。所以，不同的情况下，这段代码的时间复杂度是不一样的。</p>\n</blockquote>\n<p><strong>最好情况时间复杂度</strong>就是，在最理想的情况下，执行这段代码的时间复杂度。</p>\n<p><strong>最坏情况时间复杂度</strong>就是，在最糟糕的情况下，执行这段代码的时间复杂度。</p>\n<h3 id=\"平均情况时间复杂度\"><a href=\"#平均情况时间复杂度\" class=\"headerlink\" title=\"平均情况时间复杂度\"></a>平均情况时间复杂度</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// n表示数组array的长度</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> pos = -<span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt; n; ++i) &#123;<br>    <span class=\"hljs-keyword\">if</span> (array[i] == x) &#123;<br>       pos = i;<br>       <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> pos;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<img src=\"/article/undefined/%E5%B9%B3%E5%9D%87%E6%83%85%E5%86%B5.jpg\" class title=\"平均情况\">\n<p>时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，这个公式简化之后，得到的平均时间复杂度就是 O(n)</p>\n</blockquote>\n<p><strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong></p>\n<blockquote>\n<p>要查找的变量 x，要么在数组里，要么就不在数组里。</p>\n<p>假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。</p>\n<img src=\"/article/undefined/%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg\" class title=\"加权平均时间复杂度\">\n<p>这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以平均时间复杂度的全称应该叫加权平均时间复杂度或者<strong>期望时间复杂度</strong>。</p>\n<p>引入概率之后，前面那段代码的加权平均值为 (3n+1)/4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。</p>\n</blockquote>\n<h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// array表示一个长度为n的数组</span><br><span class=\"hljs-comment\">// 代码中的array.length就等于n</span><br><span class=\"hljs-keyword\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];<br><span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (count == array.length) &#123;<br>    <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; ++i) &#123;<br>      sum = sum + array[i];<br>    &#125;<br>    array[<span class=\"hljs-number\">0</span>] = sum;<br>    count = <span class=\"hljs-number\">1</span>;<br>  &#125;<br><br>  array[count] = val;<br>  ++count;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这段代码实现了一个往数组中插入数据的功能</p>\n<p>当数组满了之后，也就是代码中的 count == array.length 时，用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>\n<p><strong>最好情况时间复杂度:</strong>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。</p>\n<p><strong>最坏情况时间复杂度:</strong>最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p>\n<p><strong>平均情况时间复杂度：</strong>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p>\n<img src=\"/article/undefined/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.jpg\" class title=\"数组中插入数据\">\n</blockquote>\n<p><strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字，叫<strong>均摊时间复杂度</strong></p>\n<blockquote>\n<p>每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。</p>\n</blockquote>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，<strong>在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度</strong>。</p>\n<p><strong>均摊时间复杂度就是一种特殊的平均时间复杂度</strong></p>\n","more":"<p><a href=\"https://time.geekbang.org/column/intro/100017301?tab=catalog\">参考学习自·数据结构与算法之美</a></p>\n<p><strong>事后统计法</strong></p>\n<p>这种方法主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。</p>\n<p>局限性:</p>\n<ol>\n<li>测试结果非常依赖测试环境</li>\n<li>测试结果受数据规模的影响很大</li>\n</ol>\n<p>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法。</p>\n<h2 id=\"大-O-复杂度表示法\"><a href=\"#大-O-复杂度表示法\" class=\"headerlink\" title=\"大 O 复杂度表示法\"></a>大 O 复杂度表示法</h2><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">cal</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt;= n; ++i) &#123;<br>    sum = sum + i;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>从 CPU 的角度来看，这段代码的每一行都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行代码对应的 CPU 执行的个数、执行的时间都不一样，但是，我们这里只是粗略估计，所以可以假设每行代码执行的时间都一样，为 unit_time。</p>\n<p>第 2、3 行代码分别需要 1 个 unit_time 的执行时间，第 4、5 行都运行了 n 遍，所以需要 2n<em>unit_time 的执行时间，所以这段代码总的执行时间就是 (2n+2)</em>unit_time。</p>\n<p><strong>所有代码的执行时间 T(n) 与每行代码的执行次数成正比</strong></p>\n</blockquote>\n<p><strong>所有代码的执行时间 T(n) 与每行代码的执行次数 f(n) 成正比</strong></p>\n<p><strong>大 O 时间复杂度表示法</strong></p>\n<img src=\"/article/undefined/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F.png\" class title=\"复杂度分析公式\">\n<ol>\n<li>T(n) 表示代码执行的时间；</li>\n<li>n 表示数据规模的大小；</li>\n<li>f(n) 表示每行代码执行的次数总和。</li>\n<li>公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比</li>\n</ol>\n<p>大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示代码执行时间随数据规模增长的变化趋势，所以，也叫作<strong>渐进时间复杂度</strong>（asymptotic time complexity），简称<strong>时间复杂度</strong>。</p>\n<h2 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h2><h3 id=\"如何分析一段代码的时间复杂度？\"><a href=\"#如何分析一段代码的时间复杂度？\" class=\"headerlink\" title=\"如何分析一段代码的时间复杂度？\"></a>如何分析一段代码的时间复杂度？</h3><ol>\n<li><p>只关注循环执行次数最多的一段代码</p>\n<p>大 O 这种复杂度表示方法只是表示一种变化趋势。我们通常会<strong>忽略</strong>掉公式中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了。所以，在分析一个算法、一段代码的时间复杂度的时候，也<strong>只关注循环执行次数最多</strong>的那一段代码就可以了。</p>\n</li>\n<li><p>加法法则：总复杂度等于量级最大的那段代码的复杂度</p>\n<p><strong>总的时间复杂度就等于量级最大的那段代码的时间复杂度</strong></p>\n<p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))，那么 T(n)=T1(n)+T2(n)=max(O(f(n)), O(g(n))) =O(max(f(n), g(n)))</p>\n</li>\n<li><p>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p>\n<p>如果 T1(n)=O(f(n))，T2(n)=O(g(n))，那么 T(n)=T1(n)<em>T2(n)=O(f(n))</em>O(g(n))=O(f(n)*g(n))</p>\n</li>\n</ol>\n<h3 id=\"几种常见时间复杂度实例分析\"><a href=\"#几种常见时间复杂度实例分析\" class=\"headerlink\" title=\"几种常见时间复杂度实例分析\"></a>几种常见时间复杂度实例分析</h3><img src=\"/article/undefined/%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%87%8F%E7%BA%A7.jpg\" class title=\"复杂度量级\">\n<p>多项式量级和非多项式量级，其中，非多项式量级只有两个：O(2<sup>n</sup>) 和 O(n!)</p>\n<p><strong>越高阶复杂度的算法，执行效率越低</strong></p>\n<p>时间复杂度为非多项式量级的算法问题叫作 NP（Non-Deterministic Polynomial，非确定多项式）问题</p>\n<p>当数据规模 n 越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。</p>\n<ol>\n<li><p>O(1)</p>\n<p>O(1) 只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码</p>\n<p>只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度我们都记作 O(1)</p>\n</li>\n<li><p>O(logn)、O(nlogn)</p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">i=<span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (i &lt;= n)  &#123;<br>  i = i * <span class=\"hljs-number\">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>变量 i 的值从 1 开始取，每循环一次就乘以 2，当大于 n 时，循环结束</p>\n<p><img src=\"/article/变量 i 的取值就是一个等比数列.jpg\"><span class=\"image-caption\">变量 i 的取值就是一个等比数列</span></p>\n<p>通过 2<sup>x</sup>=n 求解 x，x=log<sub>2</sub>n</p>\n<p>所以，这段代码的时间复杂度就是 O(log<sub>2</sub>n)</p>\n</blockquote>\n<p><strong>在采用大 O 标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))</strong></p>\n<blockquote>\n<p>log<sub>3</sub>n 就等于 log<sub>3</sub>2 <em> log<sub>2</sub>n，所以 O(log<sub>3</sub>n) = O(C </em> log<sub>2</sub>n)，其中 C=log<sub>3</sub>2 是一个常量。可以直接忽略</p>\n<p>O(log<sub>2</sub>n) 就可以直接表示为 O(logn)</p>\n</blockquote>\n<p>因此，在对数阶时间复杂度的表示方法里，我们<strong>忽略对数的“底”，统一表示为 O(logn)。</strong></p>\n</li>\n<li><p>O(m+n)、O(m*n)</p>\n<p><strong>代码的复杂度由两个数据的规模来决定</strong></p>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">cal</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> m, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> sum_1 = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt; m; ++i) &#123;<br>    sum_1 = sum_1 + i;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">int</span> sum_2 = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; j &lt; n; ++j) &#123;<br>    sum_2 = sum_2 + j;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">return</span> sum_1 + sum_2;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以我们在表示复杂度的时候，就不能简单地利用加法法则，省略掉其中一个。所以，上面代码的时间复杂度就是 O(m+n)</p>\n</li>\n</ol>\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><p>空间复杂度全称就是<strong>渐进空间复杂度</strong>（asymptotic space complexity），表示算法的存储空间与数据规模之间的增长关系。</p>\n<blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];<br>  <span class=\"hljs-keyword\">for</span> (i; i &lt;n; ++i) &#123;<br>    a[i] = i * i;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> (i = n<span class=\"hljs-number\">-1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>    print out a[i]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第 2 行代码中，申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以我们可以忽略。</p>\n<p>第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 O(n)。</p>\n</blockquote>\n<p>常见的空间复杂度就是 O(1)、O(n)、O(n2 )</p>\n<h2 id=\"浅析最好、最坏、平均、均摊时间复杂度\"><a href=\"#浅析最好、最坏、平均、均摊时间复杂度\" class=\"headerlink\" title=\"浅析最好、最坏、平均、均摊时间复杂度\"></a>浅析最好、最坏、平均、均摊时间复杂度</h2><h3 id=\"最好、最坏情况时间复杂度\"><a href=\"#最好、最坏情况时间复杂度\" class=\"headerlink\" title=\"最好、最坏情况时间复杂度\"></a>最好、最坏情况时间复杂度</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// n表示数组array的长度</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> pos = -<span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt; n; ++i) &#123;<br>    <span class=\"hljs-keyword\">if</span> (array[i] == x) &#123;<br>       pos = i;<br>       <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> pos;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>要查找的变量 x 可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量 x，那就不需要继续遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)。但如果数组中不存在变量 x，那我们就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)。所以，不同的情况下，这段代码的时间复杂度是不一样的。</p>\n</blockquote>\n<p><strong>最好情况时间复杂度</strong>就是，在最理想的情况下，执行这段代码的时间复杂度。</p>\n<p><strong>最坏情况时间复杂度</strong>就是，在最糟糕的情况下，执行这段代码的时间复杂度。</p>\n<h3 id=\"平均情况时间复杂度\"><a href=\"#平均情况时间复杂度\" class=\"headerlink\" title=\"平均情况时间复杂度\"></a>平均情况时间复杂度</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// n表示数组array的长度</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> x)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-keyword\">int</span> pos = -<span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">for</span> (; i &lt; n; ++i) &#123;<br>    <span class=\"hljs-keyword\">if</span> (array[i] == x) &#123;<br>       pos = i;<br>       <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> pos;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>要查找的变量 x 在数组中的位置，有 n+1 种情况：在数组的 0～n-1 位置中和不在数组中。我们把每种情况下，查找需要遍历的元素个数累加起来，然后再除以 n+1，就可以得到需要遍历的元素个数的平均值，即：</p>\n<img src=\"/article/undefined/%E5%B9%B3%E5%9D%87%E6%83%85%E5%86%B5.jpg\" class title=\"平均情况\">\n<p>时间复杂度的大 O 标记法中，可以省略掉系数、低阶、常量，所以，这个公式简化之后，得到的平均时间复杂度就是 O(n)</p>\n</blockquote>\n<p><strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong></p>\n<blockquote>\n<p>要查找的变量 x，要么在数组里，要么就不在数组里。</p>\n<p>假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0～n-1 这 n 个位置的概率也是一样的，为 1/n。所以，根据概率乘法法则，要查找的数据出现在 0～n-1 中任意位置的概率就是 1/(2n)。</p>\n<img src=\"/article/undefined/%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg\" class title=\"加权平均时间复杂度\">\n<p>这个值就是概率论中的<strong>加权平均值</strong>，也叫作<strong>期望值</strong>，所以平均时间复杂度的全称应该叫加权平均时间复杂度或者<strong>期望时间复杂度</strong>。</p>\n<p>引入概率之后，前面那段代码的加权平均值为 (3n+1)/4。用大 O 表示法来表示，去掉系数和常量，这段代码的加权平均时间复杂度仍然是 O(n)。</p>\n</blockquote>\n<h3 id=\"均摊时间复杂度\"><a href=\"#均摊时间复杂度\" class=\"headerlink\" title=\"均摊时间复杂度\"></a>均摊时间复杂度</h3><blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// array表示一个长度为n的数组</span><br><span class=\"hljs-comment\">// 代码中的array.length就等于n</span><br><span class=\"hljs-keyword\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];<br><span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (count == array.length) &#123;<br>    <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; ++i) &#123;<br>      sum = sum + array[i];<br>    &#125;<br>    array[<span class=\"hljs-number\">0</span>] = sum;<br>    count = <span class=\"hljs-number\">1</span>;<br>  &#125;<br><br>  array[count] = val;<br>  ++count;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这段代码实现了一个往数组中插入数据的功能</p>\n<p>当数组满了之后，也就是代码中的 count == array.length 时，用 for 循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再将新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。</p>\n<p><strong>最好情况时间复杂度:</strong>最理想的情况下，数组中有空闲空间，我们只需要将数据插入到数组下标为 count 的位置就可以了，所以最好情况时间复杂度为 O(1)。</p>\n<p><strong>最坏情况时间复杂度:</strong>最坏的情况下，数组中没有空闲空间了，我们需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p>\n<p><strong>平均情况时间复杂度：</strong>假设数组的长度是 n，根据数据插入的位置的不同，我们可以分为 n 种情况，每种情况的时间复杂度是 O(1)。除此之外，还有一种“额外”的情况，就是在数组没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率一样，都是 1/(n+1)。所以，根据加权平均的计算方法，我们求得的平均时间复杂度就是：</p>\n<img src=\"/article/undefined/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE.jpg\" class title=\"数组中插入数据\">\n</blockquote>\n<p><strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度我们起了一个名字，叫<strong>均摊时间复杂度</strong></p>\n<blockquote>\n<p>每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的那次操作均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。</p>\n</blockquote>\n<p>对一个数据结构进行一组连续操作中，大部分情况下时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，就可以将这一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，<strong>在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好情况时间复杂度</strong>。</p>\n<p><strong>均摊时间复杂度就是一种特殊的平均时间复杂度</strong></p>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"复杂度分析","path":"api/categories/复杂度分析.json"}],"tags":[{"name":"数据结构与算法,复杂度分析","path":"api/tags/数据结构与算法,复杂度分析.json"}]}