{"title":"MVC三层架构","slug":"MVC三层架构","date":"2022-01-04T03:04:37.000Z","updated":"2022-01-04T08:03:55.774Z","comments":true,"path":"api/articles/MVC三层架构.json","realPath":null,"excerpt":null,"covers":["/article/30326/webp-20220104132315604","/article/30326/webp","/article/30326/webp-20220104140153015","/article/30326/webp-20220104140331755"],"cover":"/images/theme/coverphoto/MVC三层架构.jpg","content":"<blockquote>\n<p>God says to man, “I heal you therefore I hurt, love you therefore punish.”</p>\n<p>神对人说：“我医治你所以伤害你，爱你所以惩罚你。”</p>\n</blockquote>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><p><strong>MVC模式</strong>是软件工程中常见的一种软件架构模式，该模式把软件系统（项目）分为三个基本部分：<strong>模型（Model）、视图（View）和控制器（Controller）。</strong></p>\n<p>具体来讲，MVC模式可以将项目划分为模型（M）、视图（V）和控制器（C）三个部分，并赋予各个部分不同的功能，方便开发人员进行分组。</p>\n<p><strong>（1）视图（View）：</strong>负责界面的显示，以及与用户的交互功能，例如表单、网页等。</p>\n<p><strong>（2）控制器（Controller）：</strong>可以理解为一个分发器，用来决定对于视图发来的请求，需要用哪一个模型来处理，以及处理完后需要跳回到哪一个视图。即用来连接视图和模型。</p>\n<p>实际开发中，通常用控制器对客户端的请求数据进行封装（如将form表单发来的若干个表单字段值，封装到一个实体对象中），然后调用某一个模型来处理此请求，最后再转发请求（或重定向）到视图（或另一个控制器）。</p>\n<p><strong>（3）模型（Model）：</strong>模型持有所有的数据、状态和程序逻辑。模型接受视图数据的请求，并返回最终的处理结果。 </p>\n<img src=\"/article/30326/webp-20220104132315604\" class title=\"img\">\n<h2 id=\"三层架构\"><a href=\"#三层架构\" class=\"headerlink\" title=\"三层架构\"></a>三层架构</h2><p>首先来说，三层架构与MVC的目标一致：都是为了解耦和、提高代码复用。</p>\n<p><strong>MVC是一种设计模式，而三层架构是一种软件架构。</strong></p>\n<p>三层架构分为：</p>\n<p>表现层（UI）(web层)、业务逻辑层（BLL）(service层)、数据访问层（DAL）(dao层)，再加上实体类库（Model）</p>\n<ol>\n<li><p>实体类库（Model），在Java中，往往将其称为Entity实体类。数据库中用于存放数据，而我们通常选择会用一个专门的类来抽象出数据表的结构，类的属性就一对一的对应这表的属性。</p>\n<p>一般来说，Model实体类库层需要被DAL层，BIL层和UI层引用。</p>\n</li>\n<li><p>数据访问层（DAL），主要是存放对数据类的访问，即对数据库的添加、删除、修改、更新等基本操作</p>\n<p>DAL就是根据业务需求，构造SQL语句，构造参数，调用帮助类，获取结果，DAL层被BIL层调用</p>\n</li>\n<li><p>业务逻辑层（BLL）</p>\n<p>BLL层好比是桥梁，将UI表示层与DAL数据访问层之间联系起来。所要负责的，就是处理涉及业务逻辑相关的问题，比如在调用访问数据库之前，先处理数据、判断数据。</p>\n</li>\n</ol>\n<img src=\"/article/30326/webp\" class title=\"img\">\n<h2 id=\"MVC与三层架构的关系\"><a href=\"#MVC与三层架构的关系\" class=\"headerlink\" title=\"MVC与三层架构的关系\"></a>MVC与三层架构的关系</h2><img src=\"/article/30326/webp-20220104140153015\" class title=\"img\">\n<h2 id=\"SSM与三层架构的关系\"><a href=\"#SSM与三层架构的关系\" class=\"headerlink\" title=\"SSM与三层架构的关系\"></a>SSM与三层架构的关系</h2><p>SSM，即 SpringMVC、Spring 与 MyBatis 三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。</p>\n<ol>\n<li><p>SpringMVC：作为 View 层的实现者，完成用户的请求接收功能。SpringMVC 的 Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。</p>\n</li>\n<li><p>MyBatis：作为 Dao 层的实现者，完成对数据库的增、删、改、查功能。</p>\n</li>\n<li><p>Spring：以整个应用大管家的身份出现。整个应用中所有 Bean 的生命周期行为，均由Spring 来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由 Spring 进行管理。</p>\n</li>\n</ol>\n<img src=\"/article/30326/webp-20220104140331755\" class title=\"img\">\n","more":"<blockquote>\n<p>God says to man, “I heal you therefore I hurt, love you therefore punish.”</p>\n<p>神对人说：“我医治你所以伤害你，爱你所以惩罚你。”</p>\n</blockquote>\n<h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><p><strong>MVC模式</strong>是软件工程中常见的一种软件架构模式，该模式把软件系统（项目）分为三个基本部分：<strong>模型（Model）、视图（View）和控制器（Controller）。</strong></p>\n<p>具体来讲，MVC模式可以将项目划分为模型（M）、视图（V）和控制器（C）三个部分，并赋予各个部分不同的功能，方便开发人员进行分组。</p>\n<p><strong>（1）视图（View）：</strong>负责界面的显示，以及与用户的交互功能，例如表单、网页等。</p>\n<p><strong>（2）控制器（Controller）：</strong>可以理解为一个分发器，用来决定对于视图发来的请求，需要用哪一个模型来处理，以及处理完后需要跳回到哪一个视图。即用来连接视图和模型。</p>\n<p>实际开发中，通常用控制器对客户端的请求数据进行封装（如将form表单发来的若干个表单字段值，封装到一个实体对象中），然后调用某一个模型来处理此请求，最后再转发请求（或重定向）到视图（或另一个控制器）。</p>\n<p><strong>（3）模型（Model）：</strong>模型持有所有的数据、状态和程序逻辑。模型接受视图数据的请求，并返回最终的处理结果。 </p>\n<img src=\"/article/30326/webp-20220104132315604\" class title=\"img\">\n<h2 id=\"三层架构\"><a href=\"#三层架构\" class=\"headerlink\" title=\"三层架构\"></a>三层架构</h2><p>首先来说，三层架构与MVC的目标一致：都是为了解耦和、提高代码复用。</p>\n<p><strong>MVC是一种设计模式，而三层架构是一种软件架构。</strong></p>\n<p>三层架构分为：</p>\n<p>表现层（UI）(web层)、业务逻辑层（BLL）(service层)、数据访问层（DAL）(dao层)，再加上实体类库（Model）</p>\n<ol>\n<li><p>实体类库（Model），在Java中，往往将其称为Entity实体类。数据库中用于存放数据，而我们通常选择会用一个专门的类来抽象出数据表的结构，类的属性就一对一的对应这表的属性。</p>\n<p>一般来说，Model实体类库层需要被DAL层，BIL层和UI层引用。</p>\n</li>\n<li><p>数据访问层（DAL），主要是存放对数据类的访问，即对数据库的添加、删除、修改、更新等基本操作</p>\n<p>DAL就是根据业务需求，构造SQL语句，构造参数，调用帮助类，获取结果，DAL层被BIL层调用</p>\n</li>\n<li><p>业务逻辑层（BLL）</p>\n<p>BLL层好比是桥梁，将UI表示层与DAL数据访问层之间联系起来。所要负责的，就是处理涉及业务逻辑相关的问题，比如在调用访问数据库之前，先处理数据、判断数据。</p>\n</li>\n</ol>\n<img src=\"/article/30326/webp\" class title=\"img\">\n<h2 id=\"MVC与三层架构的关系\"><a href=\"#MVC与三层架构的关系\" class=\"headerlink\" title=\"MVC与三层架构的关系\"></a>MVC与三层架构的关系</h2><img src=\"/article/30326/webp-20220104140153015\" class title=\"img\">\n<h2 id=\"SSM与三层架构的关系\"><a href=\"#SSM与三层架构的关系\" class=\"headerlink\" title=\"SSM与三层架构的关系\"></a>SSM与三层架构的关系</h2><p>SSM，即 SpringMVC、Spring 与 MyBatis 三个框架。它们在三层架构中所处的位置是不同的，即它们在三层架构中的功能各不相同，各司其职。</p>\n<ol>\n<li><p>SpringMVC：作为 View 层的实现者，完成用户的请求接收功能。SpringMVC 的 Controller作为整个应用的控制器，完成用户请求的转发及对用户的响应。</p>\n</li>\n<li><p>MyBatis：作为 Dao 层的实现者，完成对数据库的增、删、改、查功能。</p>\n</li>\n<li><p>Spring：以整个应用大管家的身份出现。整个应用中所有 Bean 的生命周期行为，均由Spring 来管理。即整个应用中所有对象的创建、初始化、销毁，及对象间关联关系的维护，均由 Spring 进行管理。</p>\n</li>\n</ol>\n<img src=\"/article/30326/webp-20220104140331755\" class title=\"img\">\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"MVC三层架构","path":"api/categories/MVC三层架构.json"},{"name":"MVC三层架构","path":"api/categories/MVC三层架构.json"}],"tags":[{"name":"Java,JavaWeb, MVC三层架构","path":"api/tags/Java,JavaWeb, MVC三层架构.json"}]}