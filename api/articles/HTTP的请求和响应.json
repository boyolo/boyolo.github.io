{"title":"HTTP的请求和响应","slug":"HTTP的请求和响应","date":"2021-12-31T09:08:05.000Z","updated":"2022-01-01T09:28:19.095Z","comments":true,"path":"api/articles/HTTP的请求和响应.json","realPath":null,"excerpt":null,"covers":null,"cover":"/images/theme/coverphoto/Http请求与响应.jpg","content":"<blockquote>\n<p>The perfect decks itself in beauty for the love of the Imperfect.</p>\n<p>“完全”为了对“不全”的爱，把自己装饰得美丽。　　</p>\n</blockquote>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p><a href=\"https://cloud.tencent.com/developer/doc/1117\">参考手册</a></p>\n<p>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在<a href=\"https://baike.baidu.com/item/TCP/33012\">TCP</a>之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以<a href=\"https://baike.baidu.com/item/ASCII/309296\">ASCII</a>形式给出；而消息内容则具有一个类似<a href=\"https://baike.baidu.com/item/MIME/2900607\">MIME</a>的格式。这个简单模型是早期<a href=\"https://baike.baidu.com/item/Web/150564\">Web</a>成功的有功之臣，因为它使开发和部署非常地直截了当。</p>\n<p><code>HTTP</code>是基于<strong>TCP/IP</strong>协议的，可以使用<code>http</code>进行内容的传输，比如图片，视频，音频，文档等等。</p>\n<p>客户端和服务端需要进行通信的话，通常会使用<code>request response cycle</code>的形式。</p>\n<p>客户端需要发送<strong>request请求</strong>，这样服务端才知道要通信；之后，服务端对请求进行<strong>response响应</strong>。</p>\n<ol>\n<li>HTTP是无连接的：在发出请求后，客户端和服务端断开连接，然后当响应准备就绪的时候，服务端再次重新建立连接并发送响应。</li>\n<li>HTTP可以提供任何类型的数据，只要客户端和服务端两边的电脑能够读取理解它。</li>\n<li>HTTP是无状态的：客户端和服务器只是在<strong>当前请求期间</strong>了解彼此。如果它关闭了，并且两台电脑想要再次连接，它们需要重新提供信息。</li>\n</ol>\n<h2 id=\"request请求\"><a href=\"#request请求\" class=\"headerlink\" title=\"request请求\"></a>request请求</h2><p><strong>HTTP请求信息由部分组成</strong></p>\n<ol>\n<li><p>请求方法（GET/POST）、<em>URI</em>、协议<em>/</em>版本</p>\n</li>\n<li><p>请求头<em>(Request Header)</em></p>\n</li>\n<li><p>请求正文</p>\n</li>\n</ol>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">/5bU_dTmfKgQFm2e88IuM_a/union.gif</span> <span class=\"hljs-meta\">HTTP/1.1</span><br>-------------------------------------------------<br><span class=\"hljs-attribute\">Cookie</span><span class=\"hljs-punctuation\">: </span>XXXxXxxxxxxxxxxxxxxxx<br><span class=\"hljs-attribute\">Accept</span><span class=\"hljs-punctuation\">: </span>image/webp,image/png,image/svg+xml,image/*;q=0.8,video/*;q=0.8,*/*;q=0.5<br><span class=\"hljs-attribute\">Accept-Encoding</span><span class=\"hljs-punctuation\">: </span>gzip, deflate, br<br><span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>sp1.baidu.com<br><span class=\"hljs-attribute\">User-Agent</span><span class=\"hljs-punctuation\">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15<br><span class=\"hljs-attribute\">Accept-Language</span><span class=\"hljs-punctuation\">: </span>zh-CN,zh-Hans;q=0.9<br><span class=\"hljs-attribute\">Referer</span><span class=\"hljs-punctuation\">: </span>https://www.baidu.com/s?wd=baidu&amp;tn=84053098_3_dg&amp;ie=utf-8<br><span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>keep-alive<br></code></pre></td></tr></table></figure>\n<p><strong>请求方法、URI、协议版本</strong></p>\n<p>根据<em>HTTP</em>标准，HTTP请求可以使用多种请求方法。例如：<em>HTTP1.1</em>目前支持7种请求方</p>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>请求获取由Request-URI所标识的资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>在Request-URI所标识的资源后附加新的数据</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>请求获取由Request-URI所标识的资源的响应消息报头</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>请求查询服务器的性能，或查询与资源相关的选项和需求</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>请求服务器存储一个资源，并用Request-URI作为其标识</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除由Request-URI所标识的资源</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>请求服务器回送收到的请求信息，主要用语测试或诊断</td>\n</tr>\n</tbody>\n</table>\n<p><strong>请求头(Request Header)</strong></p>\n<p>请求头包含许多有关的客户端环境和请求正文的有用信息。</p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cookie</td>\n<td>这是最重要的请求头信息之一</td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>浏览器可接受的MIME类型</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>浏览器可接受的字符集</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中</td>\n</tr>\n<tr>\n<td>From</td>\n<td>请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回304“Not Modified”应答</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝</td>\n</tr>\n</tbody>\n</table>\n<p><strong>请求正文</strong></p>\n<p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息</p>\n<h2 id=\"Response响应\"><a href=\"#Response响应\" class=\"headerlink\" title=\"Response响应\"></a>Response响应</h2><p><em>HTTP</em>应答与<em>HTTP</em>请求相似，<em>HTTP</em>响应也由<em>3</em>个部分构成，分别是：</p>\n<ol>\n<li><p>状态行</p>\n</li>\n<li><p>响应头(Response Header)</p>\n</li>\n<li><p>响应正文</p>\n</li>\n</ol>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-meta\">HTTP/1.1</span> <span class=\"hljs-number\">200</span> OK<br>------------------------------------------------------<br><span class=\"hljs-attribute\">Content-Type</span><span class=\"hljs-punctuation\">: </span>image/gif<br><span class=\"hljs-attribute\">Set-Cookie</span><span class=\"hljs-punctuation\">: </span>BDORZ=FFFB88E999055A3F8A630C64834BD6D0; max-age=86400; domain=.baidu.com; path=/<br><span class=\"hljs-attribute\">Last-Modified</span><span class=\"hljs-punctuation\">: </span>Wed, 07 Nov 2012 16:00:00 GMT<br><span class=\"hljs-attribute\">Cache-Control</span><span class=\"hljs-punctuation\">: </span>max-age=315360000<br><span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>Keep-Alive<br><span class=\"hljs-attribute\">Date</span><span class=\"hljs-punctuation\">: </span>Fri, 31 Dec 2021 11:14:09 GMT<br><span class=\"hljs-attribute\">Accept-Ranges</span><span class=\"hljs-punctuation\">: </span>bytes<br><span class=\"hljs-attribute\">Content-Length</span><span class=\"hljs-punctuation\">: </span>0<br><span class=\"hljs-attribute\">Expires</span><span class=\"hljs-punctuation\">: </span>Mon, 29 Dec 2031 11:14:09 GMT<br><span class=\"hljs-attribute\">ETag</span><span class=\"hljs-punctuation\">: </span>&quot;0-0509a8580&quot;<br><span class=\"hljs-attribute\">Server</span><span class=\"hljs-punctuation\">: </span>Apache 2.0<br></code></pre></td></tr></table></figure>\n<p><strong>状态行</strong></p>\n<p>由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>\n<ul>\n<li>状态代码：状态代码由<em>3</em>位数字组成，表示请求是否被理解或被满足。</li>\n<li>状态描述：状态描述给出了关于状态代码的简短的文字描述。</li>\n<li>状态代码的第一个数字定义了响应的类别，后面两位没有具体的分类。<ul>\n<li>第一个数字有五种可能的取值：<ul>\n<li><em>- 1xx:</em>  指示信息—表示请求已接收，继续处理。</li>\n<li><em>- 2xx:</em>  成功—表示请求已经被成功接收、理解、接受。</li>\n<li><em>- 3xx:</em>  重定向—要完成请求必须进行更进一步的操作。</li>\n<li><em>- 4xx:</em>  客户端错误—请求有语法错误或请求无法实现。</li>\n<li><em>- 5xx:</em> 服务器端错误—服务器未能实现合法的请求。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态代码</th>\n<th>状态描述</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>OK</td>\n<td>客户端请求成功</td>\n</tr>\n<tr>\n<td>400</td>\n<td>Bad Request</td>\n<td>由于客户端请求有语法错误，不能被服务器所理解</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthonzed</td>\n<td>请求未经授权。这个状态代码必须和<em>WWW-Authenticate</em>报头域一起使用</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</td>\n</tr>\n<tr>\n<td>404</td>\n<td>Not Found</td>\n<td>请求的资源不存在，例如，输入了错误的<em>URL</em>。</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Internal Server Error</td>\n<td>服务器发生不可预期的错误，导致无法完成客户端的请求。</td>\n</tr>\n<tr>\n<td>503</td>\n<td>Service Unavailable</td>\n<td>服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</td>\n</tr>\n</tbody>\n</table>\n<p><strong>响应头</strong></p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content-Type</td>\n<td><em>Content-Type</em>实体报头域用语指明发送给接收者的实体正文的媒体类型</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>浏览器会在当前页面所在域名设置cookie字符串</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td><em>Last-Modified</em>实体报头域用于指示资源最后的修改日期及时间</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>通用头字段用于指定在两个，请求和响应的缓存机制的指令。缓存指令是单向的，这意味着请求中的给定指令并不意味着将在响应中给出相同的指令</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>通用 HTTP 报头包含在该消息起源的日期和时间。</td>\n</tr>\n<tr>\n<td>Accept-Ranges</td>\n<td>响应的 HTTP 标头是由服务器使用以通告其支持部分请求的标志物。此字段的值表示可用于定义范围的单位。</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>实体报头指示该实体主体的大小，以字节为单位的十进制数，发送到接收方</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>标头包含的日期/时间之后，响应被视为失效。</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>HTTP 响应报头为资源的特定版本的标识符。它允许缓存更高效，并节省带宽，因为如果内容没有改变，Web 服务器不需要发送完整的响应。另一方面，如果内容发生了变化，etags 有助于防止资源的同时更新互相覆盖（“空中冲突”）。 如果给定 URL 处的资源发生更改，则<code>Etag</code>必须生成新值。因此，Etags 与指纹相似，也可能用于某些服务器的跟踪目的。它们的比较可以快速确定资源的两个表示是否相同，但它们也可能被设置为无限期地由跟踪服务器持续存在。</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>头包含有关用作原始服务器处理请求的软件信息。</td>\n</tr>\n</tbody>\n</table>\n","more":"<blockquote>\n<p>The perfect decks itself in beauty for the love of the Imperfect.</p>\n<p>“完全”为了对“不全”的爱，把自己装饰得美丽。　　</p>\n</blockquote>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p><a href=\"https://cloud.tencent.com/developer/doc/1117\">参考手册</a></p>\n<p>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在<a href=\"https://baike.baidu.com/item/TCP/33012\">TCP</a>之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以<a href=\"https://baike.baidu.com/item/ASCII/309296\">ASCII</a>形式给出；而消息内容则具有一个类似<a href=\"https://baike.baidu.com/item/MIME/2900607\">MIME</a>的格式。这个简单模型是早期<a href=\"https://baike.baidu.com/item/Web/150564\">Web</a>成功的有功之臣，因为它使开发和部署非常地直截了当。</p>\n<p><code>HTTP</code>是基于<strong>TCP/IP</strong>协议的，可以使用<code>http</code>进行内容的传输，比如图片，视频，音频，文档等等。</p>\n<p>客户端和服务端需要进行通信的话，通常会使用<code>request response cycle</code>的形式。</p>\n<p>客户端需要发送<strong>request请求</strong>，这样服务端才知道要通信；之后，服务端对请求进行<strong>response响应</strong>。</p>\n<ol>\n<li>HTTP是无连接的：在发出请求后，客户端和服务端断开连接，然后当响应准备就绪的时候，服务端再次重新建立连接并发送响应。</li>\n<li>HTTP可以提供任何类型的数据，只要客户端和服务端两边的电脑能够读取理解它。</li>\n<li>HTTP是无状态的：客户端和服务器只是在<strong>当前请求期间</strong>了解彼此。如果它关闭了，并且两台电脑想要再次连接，它们需要重新提供信息。</li>\n</ol>\n<h2 id=\"request请求\"><a href=\"#request请求\" class=\"headerlink\" title=\"request请求\"></a>request请求</h2><p><strong>HTTP请求信息由部分组成</strong></p>\n<ol>\n<li><p>请求方法（GET/POST）、<em>URI</em>、协议<em>/</em>版本</p>\n</li>\n<li><p>请求头<em>(Request Header)</em></p>\n</li>\n<li><p>请求正文</p>\n</li>\n</ol>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">/5bU_dTmfKgQFm2e88IuM_a/union.gif</span> <span class=\"hljs-meta\">HTTP/1.1</span><br>-------------------------------------------------<br><span class=\"hljs-attribute\">Cookie</span><span class=\"hljs-punctuation\">: </span>XXXxXxxxxxxxxxxxxxxxx<br><span class=\"hljs-attribute\">Accept</span><span class=\"hljs-punctuation\">: </span>image/webp,image/png,image/svg+xml,image/*;q=0.8,video/*;q=0.8,*/*;q=0.5<br><span class=\"hljs-attribute\">Accept-Encoding</span><span class=\"hljs-punctuation\">: </span>gzip, deflate, br<br><span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>sp1.baidu.com<br><span class=\"hljs-attribute\">User-Agent</span><span class=\"hljs-punctuation\">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15<br><span class=\"hljs-attribute\">Accept-Language</span><span class=\"hljs-punctuation\">: </span>zh-CN,zh-Hans;q=0.9<br><span class=\"hljs-attribute\">Referer</span><span class=\"hljs-punctuation\">: </span>https://www.baidu.com/s?wd=baidu&amp;tn=84053098_3_dg&amp;ie=utf-8<br><span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>keep-alive<br></code></pre></td></tr></table></figure>\n<p><strong>请求方法、URI、协议版本</strong></p>\n<p>根据<em>HTTP</em>标准，HTTP请求可以使用多种请求方法。例如：<em>HTTP1.1</em>目前支持7种请求方</p>\n<table>\n<thead>\n<tr>\n<th>请求方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>请求获取由Request-URI所标识的资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>在Request-URI所标识的资源后附加新的数据</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>请求获取由Request-URI所标识的资源的响应消息报头</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>请求查询服务器的性能，或查询与资源相关的选项和需求</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>请求服务器存储一个资源，并用Request-URI作为其标识</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>请求服务器删除由Request-URI所标识的资源</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>请求服务器回送收到的请求信息，主要用语测试或诊断</td>\n</tr>\n</tbody>\n</table>\n<p><strong>请求头(Request Header)</strong></p>\n<p>请求头包含许多有关的客户端环境和请求正文的有用信息。</p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Cookie</td>\n<td>这是最重要的请求头信息之一</td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>浏览器可接受的MIME类型</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小</td>\n</tr>\n<tr>\n<td>Referer</td>\n<td>包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</td>\n</tr>\n<tr>\n<td>Accept-Charset</td>\n<td>浏览器可接受的字符集</td>\n</tr>\n<tr>\n<td>Authorization</td>\n<td>授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中</td>\n</tr>\n<tr>\n<td>From</td>\n<td>请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它</td>\n</tr>\n<tr>\n<td>If-Modified-Since</td>\n<td>只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回304“Not Modified”应答</td>\n</tr>\n<tr>\n<td>Pragma</td>\n<td>指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝</td>\n</tr>\n</tbody>\n</table>\n<p><strong>请求正文</strong></p>\n<p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息</p>\n<h2 id=\"Response响应\"><a href=\"#Response响应\" class=\"headerlink\" title=\"Response响应\"></a>Response响应</h2><p><em>HTTP</em>应答与<em>HTTP</em>请求相似，<em>HTTP</em>响应也由<em>3</em>个部分构成，分别是：</p>\n<ol>\n<li><p>状态行</p>\n</li>\n<li><p>响应头(Response Header)</p>\n</li>\n<li><p>响应正文</p>\n</li>\n</ol>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-meta\">HTTP/1.1</span> <span class=\"hljs-number\">200</span> OK<br>------------------------------------------------------<br><span class=\"hljs-attribute\">Content-Type</span><span class=\"hljs-punctuation\">: </span>image/gif<br><span class=\"hljs-attribute\">Set-Cookie</span><span class=\"hljs-punctuation\">: </span>BDORZ=FFFB88E999055A3F8A630C64834BD6D0; max-age=86400; domain=.baidu.com; path=/<br><span class=\"hljs-attribute\">Last-Modified</span><span class=\"hljs-punctuation\">: </span>Wed, 07 Nov 2012 16:00:00 GMT<br><span class=\"hljs-attribute\">Cache-Control</span><span class=\"hljs-punctuation\">: </span>max-age=315360000<br><span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>Keep-Alive<br><span class=\"hljs-attribute\">Date</span><span class=\"hljs-punctuation\">: </span>Fri, 31 Dec 2021 11:14:09 GMT<br><span class=\"hljs-attribute\">Accept-Ranges</span><span class=\"hljs-punctuation\">: </span>bytes<br><span class=\"hljs-attribute\">Content-Length</span><span class=\"hljs-punctuation\">: </span>0<br><span class=\"hljs-attribute\">Expires</span><span class=\"hljs-punctuation\">: </span>Mon, 29 Dec 2031 11:14:09 GMT<br><span class=\"hljs-attribute\">ETag</span><span class=\"hljs-punctuation\">: </span>&quot;0-0509a8580&quot;<br><span class=\"hljs-attribute\">Server</span><span class=\"hljs-punctuation\">: </span>Apache 2.0<br></code></pre></td></tr></table></figure>\n<p><strong>状态行</strong></p>\n<p>由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p>\n<ul>\n<li>状态代码：状态代码由<em>3</em>位数字组成，表示请求是否被理解或被满足。</li>\n<li>状态描述：状态描述给出了关于状态代码的简短的文字描述。</li>\n<li>状态代码的第一个数字定义了响应的类别，后面两位没有具体的分类。<ul>\n<li>第一个数字有五种可能的取值：<ul>\n<li><em>- 1xx:</em>  指示信息—表示请求已接收，继续处理。</li>\n<li><em>- 2xx:</em>  成功—表示请求已经被成功接收、理解、接受。</li>\n<li><em>- 3xx:</em>  重定向—要完成请求必须进行更进一步的操作。</li>\n<li><em>- 4xx:</em>  客户端错误—请求有语法错误或请求无法实现。</li>\n<li><em>- 5xx:</em> 服务器端错误—服务器未能实现合法的请求。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态代码</th>\n<th>状态描述</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>OK</td>\n<td>客户端请求成功</td>\n</tr>\n<tr>\n<td>400</td>\n<td>Bad Request</td>\n<td>由于客户端请求有语法错误，不能被服务器所理解</td>\n</tr>\n<tr>\n<td>401</td>\n<td>Unauthonzed</td>\n<td>请求未经授权。这个状态代码必须和<em>WWW-Authenticate</em>报头域一起使用</td>\n</tr>\n<tr>\n<td>403</td>\n<td>Forbidden</td>\n<td>服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因</td>\n</tr>\n<tr>\n<td>404</td>\n<td>Not Found</td>\n<td>请求的资源不存在，例如，输入了错误的<em>URL</em>。</td>\n</tr>\n<tr>\n<td>500</td>\n<td>Internal Server Error</td>\n<td>服务器发生不可预期的错误，导致无法完成客户端的请求。</td>\n</tr>\n<tr>\n<td>503</td>\n<td>Service Unavailable</td>\n<td>服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</td>\n</tr>\n</tbody>\n</table>\n<p><strong>响应头</strong></p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content-Type</td>\n<td><em>Content-Type</em>实体报头域用语指明发送给接收者的实体正文的媒体类型</td>\n</tr>\n<tr>\n<td>Set-Cookie</td>\n<td>浏览器会在当前页面所在域名设置cookie字符串</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td><em>Last-Modified</em>实体报头域用于指示资源最后的修改日期及时间</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>通用头字段用于指定在两个，请求和响应的缓存机制的指令。缓存指令是单向的，这意味着请求中的给定指令并不意味着将在响应中给出相同的指令</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>表示是否需要持久连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>通用 HTTP 报头包含在该消息起源的日期和时间。</td>\n</tr>\n<tr>\n<td>Accept-Ranges</td>\n<td>响应的 HTTP 标头是由服务器使用以通告其支持部分请求的标志物。此字段的值表示可用于定义范围的单位。</td>\n</tr>\n<tr>\n<td>Content-Length</td>\n<td>实体报头指示该实体主体的大小，以字节为单位的十进制数，发送到接收方</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>标头包含的日期/时间之后，响应被视为失效。</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>HTTP 响应报头为资源的特定版本的标识符。它允许缓存更高效，并节省带宽，因为如果内容没有改变，Web 服务器不需要发送完整的响应。另一方面，如果内容发生了变化，etags 有助于防止资源的同时更新互相覆盖（“空中冲突”）。 如果给定 URL 处的资源发生更改，则<code>Etag</code>必须生成新值。因此，Etags 与指纹相似，也可能用于某些服务器的跟踪目的。它们的比较可以快速确定资源的两个表示是否相同，但它们也可能被设置为无限期地由跟踪服务器持续存在。</td>\n</tr>\n<tr>\n<td>Server</td>\n<td>头包含有关用作原始服务器处理请求的软件信息。</td>\n</tr>\n</tbody>\n</table>\n","categories":[{"name":"网络编程","path":"api/categories/网络编程.json"},{"name":"JavaWeb","path":"api/categories/JavaWeb.json"},{"name":"HTTP的请求和响应","path":"api/categories/HTTP的请求和响应.json"},{"name":"HTTP的请求和响应","path":"api/categories/HTTP的请求和响应.json"}],"tags":[{"name":"HTTP的请求和响应","path":"api/tags/HTTP的请求和响应.json"}]}