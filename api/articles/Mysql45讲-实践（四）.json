{"title":"Mysql45讲-实践（四）","slug":"Mysql45讲-实践（四）","date":"2022-05-09T02:34:05.000Z","updated":"2022-05-14T02:56:25.847Z","comments":true,"path":"api/articles/Mysql45讲-实践（四）.json","realPath":null,"excerpt":null,"covers":["/article/undefined/%E5%94%AF%E4%B8%80%E9%94%AE%E5%86%B2%E7%AA%81%E5%8A%A0%E9%94%81.png","/article/undefined/%E4%B8%A4%E4%B8%AA%E5%94%AF%E4%B8%80%E9%94%AE%E5%90%8C%E6%97%B6%E5%86%B2%E7%AA%81.png","/article/undefined/%E7%89%A9%E7%90%86%E6%8B%B7%E8%B4%9D%E8%A1%A8.jpg","/article/undefined/%E5%A4%8D%E7%8E%B0%E8%84%8F%E8%AF%BB.png"],"cover":"/images/theme/coverphoto/Mysql.jpg","content":"<h2 id=\"自增主键为什么不是连续的？\"><a href=\"#自增主键为什么不是连续的？\" class=\"headerlink\" title=\"自增主键为什么不是连续的？\"></a>自增主键为什么不是连续的？</h2><p>自增主键，由于自增主键可以让主键索引尽量地保持递增顺序插入，避免了页分裂，因此索引更紧凑。</p>\n<p><strong>自增主键不能保证连续递增</strong></p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `t` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `c` int(11) DEFAULT NULL,<br>  `d` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `c` (`c`)<br>) ENGINE=InnoDB;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"自增值保存在哪儿？\"><a href=\"#自增值保存在哪儿？\" class=\"headerlink\" title=\"自增值保存在哪儿？\"></a>自增值保存在哪儿？</h3><blockquote>\n<p>在这个空表 t 里面执行 insert into t values(null, 1, 1); 插入一行数据，再执行 show create table 命令，就可以看到如下图所示的结果：</p>\n<p><img src=\"/article/自动生成的 AUTO_INCREMENT 值.png\"><span class=\"image-caption\">自动生成的 AUTO_INCREMENT 值</span></p>\n<p>表定义里面出现了一个 AUTO_INCREMENT=2，表示下一次插入数据时，如果需要自动生成自增值，会生成 id=2。</p>\n<p>其实，这个输出结果容易引起这样的误解：自增值是保存在表结构定义里的。</p>\n</blockquote>\n<p><strong>表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值。</strong></p>\n<p>不同的引擎对于自增值的保存策略不同：</p>\n<ol>\n<li><p>MyISAM 引擎的自增值保存在数据文件中。</p>\n</li>\n<li><p>InnoDB 引擎的自增值，其实是保存在了内存里，并且到了 MySQL 8.0 版本后，才有了“自增值持久化”的能力，也就是才实现了“如果发生重启，表的自增值可以恢复为 MySQL 重启前的值”，具体情况是：</p>\n<ol>\n<li><p>在 MySQL 5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+1 作为这个表当前的自增值。</p>\n<p>﻿举例来说，如果一个表当前数据行里最大的 id 是 10，AUTO_INCREMENT=11。这时候，我们删除 id=10 的行，AUTO_INCREMENT 还是 11。但如果马上重启实例，重启后这个表的 AUTO_INCREMENT 就会变成 10。</p>\n<p>   ﻿也就是说，MySQL 重启可能会修改一个表的 AUTO_INCREMENT 的值。</p>\n</li>\n<li><p>在 MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"自增值修改机制\"><a href=\"#自增值修改机制\" class=\"headerlink\" title=\"自增值修改机制\"></a>自增值修改机制</h3><p>在 MySQL 里面，如果字段 id 被定义为 AUTO_INCREMENT，在插入一行数据的时候，自增值的行为如下：</p>\n<ol>\n<li><p>如果插入数据时 id 字段指定为 0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段；</p>\n</li>\n<li><p>如果插入数据时 id 字段指定了具体的值，就直接使用语句里指定的值。</p>\n<p>根据要插入的值和当前自增值的大小关系，自增值的变更结果也会有所不同。</p>\n<p>假设，某次要插入的值是 X，当前的自增值是 Y。</p>\n<ol>\n<li>如果 X&lt;Y，那么这个表的自增值不变；</li>\n<li>如果 X≥Y，就需要把当前自增值修改为新的自增值。</li>\n</ol>\n</li>\n</ol>\n<p><strong>新的自增值生成算法</strong>是：从 <code>auto_increment_offset</code> 开始，以 <code>auto_increment_increment</code> 为步长，持续叠加，直到找到第一个大于 X 的值，作为新的自增值。</p>\n<p>其中，<code>auto_increment_offset</code> 和 <code>auto_increment_increment</code> 是两个系统参数，分别用来表示自增的初始值和步长，默认值都是 1。</p>\n<h3 id=\"自增值的修改时机\"><a href=\"#自增值的修改时机\" class=\"headerlink\" title=\"自增值的修改时机\"></a>自增值的修改时机</h3><p><strong>导致自增主键 id 不连续的原因</strong></p>\n<ol>\n<li>唯一键冲突</li>\n<li>事务回滚</li>\n<li>批量插入数据</li>\n</ol>\n<p><strong>自增值为什么不能回退：为了提升性能</strong></p>\n<blockquote>\n<p>假设有两个并行执行的事务，在申请自增值的时候，为了避免两个事务申请到相同的自增 id，肯定要加锁，然后顺序申请。</p>\n<ol>\n<li>假设事务 A 申请到了 id=2， 事务 B 申请到 id=3，那么这时候表 t 的自增值是 4，之后继续执行。</li>\n<li>事务 B 正确提交了，但事务 A 出现了唯一键冲突。</li>\n<li>如果允许事务 A 把自增 id 回退，也就是把表 t 的当前自增值改回 2，那么就会出现这样的情况：表里面已经有 id=3 的行，而当前的自增 id 值是 2。</li>\n<li>接下来，继续执行的其他事务就会申请到 id=2，然后再申请到 id=3。这时，就会出现插入语句报错“主键冲突”。</li>\n</ol>\n<p>解决这个主键冲突，有两种方法：</p>\n<ol>\n<li>每次申请 id 之前，先判断表里面是否已经存在这个 id。如果存在，就跳过这个 id。但是，这个方法的成本很高。因为，本来申请 id 是一个很快的操作，现在还要再去主键索引树上判断 id 是否存在。</li>\n<li>把自增 id 的锁范围扩大，必须等到一个事务执行完成并提交，下一个事务才能再申请自增 id。这个方法的问题，就是锁的粒度太大，系统并发能力大大下降。</li>\n</ol>\n<p>这两个方法都会导致性能问题</p>\n</blockquote>\n<h3 id=\"自增锁的优化\"><a href=\"#自增锁的优化\" class=\"headerlink\" title=\"自增锁的优化\"></a>自增锁的优化</h3><p>自增 id 锁并不是一个事务锁，而是每次申请完就马上释放，以便允许别的事务再申请。</p>\n<ol>\n<li><p>MySQL 5.0 版本</p>\n<p>自增锁的范围是语句级别。也就是说，如果一个语句申请了一个表自增锁，这个锁会等语句执行结束以后才释放。</p>\n</li>\n<li><p>MySQL 5.1.22 版本</p>\n<p>新增参数 <code>innodb_autoinc_lock_mode</code>，默认值是 1</p>\n<ol>\n<li>这个参数的值被设置为 0 时，表示采用之前 MySQL 5.0 版本的策略，即语句执行结束后才释放锁；</li>\n<li>这个参数的值被设置为 1 时：<ol>\n<li>普通 <code>insert</code> 语句，自增锁在申请之后就马上释放；</li>\n<li>类似 <code>insert … select</code> 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；</li>\n</ol>\n</li>\n<li>这个参数的值被设置为 2 时，所有的申请自增主键的动作都是申请后就释放锁。</li>\n</ol>\n</li>\n</ol>\n<p>在生产上，尤其是有 <code>insert … select</code> 这种批量插入数据(<code>insert … select</code>、<code>replace … select</code> 和 <code>load data</code> 语句)的场景时，从并发插入数据性能的角度考虑，我建议你这样设置：<code>innodb_autoinc_lock_mode=2</code> ，并且 <code>binlog_format=row</code>. 这样做，既能提升并发性，又不会出现数据一致性问题。</p>\n<p>对于批量插入数据的语句，MySQL 有一个批量申请自增 id 的策略：</p>\n<ol>\n<li>语句执行过程中，第一次申请自增 id，会分配 1 个；</li>\n<li>1 个用完以后，这个语句第二次申请自增 id，会分配 2 个；</li>\n<li>2 个用完以后，还是这个语句，第三次申请自增 id，会分配 4 个；</li>\n<li>依此类推，同一个语句去申请自增 id，每次申请到的自增 id 个数都是上一次的两倍。</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：在 binlog_format=statement 时，语句 A 先获取 id=1，然后语句 B 获取 id=2；接着语句 B 提交，写 binlog，然后语句 A 再写 binlog。这时候，如果 binlog 重放，是不是会发生语句 B 的 id 为 1，而语句 A 的 id 为 2 的不一致情况呢？</strong></p>\n<p>自增 id 的生成顺序，和 binlog 的写入顺序可能是不同的</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create table t(id int auto_increment primary key);<br>insert into t values(null);<br></code></pre></td></tr></table></figure>\n<p><img src=\"/article/insert 语句的 binlog.jpg\"><span class=\"image-caption\">insert 语句的 binlog</span></p>\n<p>可以看到，在 insert 语句之前，还有一句 SET INSERT_ID=1。这条命令的意思是，这个线程里下一次需要用到自增值的时候，不论当前表的自增值是多少，固定用 1 这个值。</p>\n<p>这个 SET INSERT_ID 语句是固定跟在 insert 语句之前的,主库上语句 A 的 id 是 1，语句 B 的 id 是 2，但是写入 binlog 的顺序先 B 后 A，那么 binlog 就变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SET INSERT_ID=2;<br>语句B；<br>SET INSERT_ID=1;<br>语句A；<br></code></pre></td></tr></table></figure>\n<p>在备库上语句 B 用到的 INSERT_ID 依然是 2，跟主库相同</p>\n</blockquote>\n<p><strong>因此，即使两个 INSERT 语句在主备库的执行顺序不同，自增主键字段的值也不会不一致。</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"insert语句的锁为什么这么多？\"><a href=\"#insert语句的锁为什么这么多？\" class=\"headerlink\" title=\"insert语句的锁为什么这么多？\"></a>insert语句的锁为什么这么多？</h2><h3 id=\"insert-…-select-语句\"><a href=\"#insert-…-select-语句\" class=\"headerlink\" title=\"insert … select 语句\"></a>insert … select 语句</h3><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `t` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `c` int(11) DEFAULT NULL,<br>  `d` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `c` (`c`)<br>) ENGINE=InnoDB;<br><br>insert into t values(null, 1,1);<br>insert into t values(null, 2,2);<br>insert into t values(null, 3,3);<br>insert into t values(null, 4,4);<br><br>create table t2 like t<br></code></pre></td></tr></table></figure>\n<p>在可重复读隔离级别下，binlog_format=statement 时执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t2(c,d) select c,d from t;<br></code></pre></td></tr></table></figure>\n<p>需要对表 t 的所有行和间隙加锁。</p>\n<p>执行序列：</p>\n<p><img src=\"/article/并发 insert 场景.png\"><span class=\"image-caption\">并发 insert 场景</span></p>\n<p>实际的执行效果是，如果 session B 先执行，由于这个语句对表 t 主键索引加了 (-∞,1]这个 next-key lock，会在语句执行完成后，才允许 session A 的 insert 语句执行。</p>\n<p>但如果没有锁的话，就可能出现 session B 的 insert 语句先执行，但是后写入 binlog 的情况。于是，在 binlog_format=statement 的情况下，binlog 里面就记录了这样的语句序列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t values(-1,-1,-1);<br>insert into t2(c,d) select c,d from t;<br></code></pre></td></tr></table></figure>\n<p>这个语句到了备库执行，就会把 id=-1 这一行也写到表 t2 中，出现主备不一致。</p>\n</blockquote>\n<p>执行 <code>insert … select</code> 的时候，对目标表也不是锁全表，而是只锁住需要访问的资源。</p>\n<h3 id=\"insert-循环写入\"><a href=\"#insert-循环写入\" class=\"headerlink\" title=\"insert 循环写入\"></a>insert 循环写入</h3><blockquote>\n<p>要往表 t2 中插入一行数据，这一行的 c 值是表 t 中 c 值的最大值加 1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t2(c,d)  (select c+1, d from t force index(c) order by c desc limit 1);<br></code></pre></td></tr></table></figure>\n<p>这个语句的加锁范围，就是表 t 索引 c 上的 (3,4]和 (4,supremum]这两个 next-key lock，以及主键索引上 id=4 这一行。</p>\n<p>执行流程:从表 t 中按照索引 c 倒序，扫描第一行，拿到结果写入到表 t2 中。</p>\n<p>整条语句的扫描行数是 1。</p>\n</blockquote>\n<blockquote>\n<p>把这样的一行数据插入到表 t 中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t(c,d)  (select c+1, d from t force index(c) order by c desc limit 1);<br></code></pre></td></tr></table></figure>\n<p>慢查询日志:</p>\n<p><img src=\"/article/慢查询日志 -- 将数据插入表 t.png\"><span class=\"image-caption\">慢查询日志 -- 将数据插入表 t</span></p>\n<p>Rows_examined 的值是 5</p>\n<p>explain 结果:</p>\n<p><img src=\"/article/explain 结果.png\"><span class=\"image-caption\">explain 结果.png</span></p>\n<p>从 Extra 字段可以看到“Using temporary”字样，表示这个语句用到了临时表。执行过程中，需要把表 t 的内容读出来，写入临时表。</p>\n<p>在执行这个语句前后查看 Innodb_rows_read 的结果:</p>\n<p><img src=\"/article/查看 Innodb_rows_read 变化.png\"><span class=\"image-caption\">查看 Innodb_rows_read 变化</span></p>\n<p>这个语句执行前后，Innodb_rows_read 的值增加了 4。因为默认临时表是使用 Memory 引擎的，所以这 4 行查的都是表 t，也就是说对表 t 做了全表扫描。</p>\n<p>执行过程:</p>\n<ol>\n<li>创建临时表，表里有两个字段 c 和 d。</li>\n<li>按照索引 c 扫描表 t，依次取 c=4、3、2、1，然后回表，读到 c 和 d 的值写入临时表。这时，Rows_examined=4。</li>\n<li>由于语义里面有 limit 1，所以只取了临时表的第一行，再插入到表 t 中。这时，Rows_examined 的值加 1，变成了 5。</li>\n</ol>\n<p>这个语句会导致在表 t 上做全表扫描，并且会给索引 c 上的所有间隙都加上共享的 next-key lock。所以，这个语句执行期间，其他事务不能在这个表上插入数据。</p>\n<p><strong>这个语句的执行为什么需要临时表?</strong></p>\n<p>原因是这类一边遍历数据，一边更新数据的情况，如果读出来的数据直接写回原表，就可能在遍历过程中，读到刚刚插入的记录，新插入的记录如果参与计算逻辑，就跟语义不符。</p>\n</blockquote>\n<h3 id=\"insert-唯一键冲突\"><a href=\"#insert-唯一键冲突\" class=\"headerlink\" title=\"insert 唯一键冲突\"></a>insert 唯一键冲突</h3><blockquote>\n<img src=\"/article/undefined/%E5%94%AF%E4%B8%80%E9%94%AE%E5%86%B2%E7%AA%81%E5%8A%A0%E9%94%81.png\" class title=\"唯一键冲突加锁\">\n<p>在可重复读（repeatable read）隔离级别下执行</p>\n<p>session B 要执行的 insert 语句进入了锁等待状态。</p>\n<p>session A 执行的 insert 语句，发生唯一键冲突的时候，并不只是简单地报错返回，还在冲突的索引上加了锁。</p>\n<p>这时候，session A 持有索引 c 上的 (5,10]共享 next-key lock（读锁）。</p>\n</blockquote>\n<h3 id=\"insert-into-…-on-duplicate-key-update\"><a href=\"#insert-into-…-on-duplicate-key-update\" class=\"headerlink\" title=\"insert into … on duplicate key update\"></a>insert into … on duplicate key update</h3><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t values(11,10,10) on duplicate key update d=100; <br></code></pre></td></tr></table></figure>\n<p>会给索引 c 上 (5,10] 加一个排他的 next-key lock（写锁）</p>\n</blockquote>\n<p><code>insert into … on duplicate key update</code> 这个语义的逻辑是，插入一行数据，如果碰到唯一键约束，就执行后面的更新语句。</p>\n<p>注意，如果有多个列违反了唯一性约束，就会按照索引的顺序，修改跟第一个索引冲突的行。</p>\n<blockquote>\n<p>现在表 t 里面已经有了 (1,1,1) 和 (2,2,2) 这两行</p>\n<img src=\"/article/undefined/%E4%B8%A4%E4%B8%AA%E5%94%AF%E4%B8%80%E9%94%AE%E5%90%8C%E6%97%B6%E5%86%B2%E7%AA%81.png\" class title=\"两个唯一键同时冲突\">\n<p>主键 id 是先判断的，MySQL 认为这个语句跟 id=2 这一行冲突，所以修改的是 id=2 的行。</p>\n<p>需要注意的是，执行这条语句的 affected rows 返回的是 2，很容易造成误解。实际上，真正更新的只有一行，只是在代码实现上，insert 和 update 都认为自己成功了，update 计数加了 1， insert 计数也加了 1。</p>\n</blockquote>\n<h2 id=\"怎么最快地复制一张表？\"><a href=\"#怎么最快地复制一张表？\" class=\"headerlink\" title=\"怎么最快地复制一张表？\"></a>怎么最快地复制一张表？</h2><ol>\n<li>如果可以控制对源表的扫描行数和加锁范围很小的话，简单地使用 <code>insert … select</code>语句即可实现。</li>\n<li>为了避免对源表加读锁，更稳妥的方案是先将数据写到外部文本文件，然后再写回目标表。</li>\n</ol>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create database db1;<br>use db1;<br><br>create table t(id int primary key, a int, b int, index(a))engine=innodb;<br>delimiter ;;<br>  create procedure idata()<br>  begin<br>    declare i int;<br>    set i=1;<br>    while(i&lt;=1000)do<br>      insert into t values(i,i,i);<br>      set i=i+1;<br>    end while;<br>  end;;<br>delimiter ;<br>call idata();<br><br>create database db2;<br>create table db2.t like db1.t<br></code></pre></td></tr></table></figure>\n<p>先创建一个表 db1.t，并插入 1000 行数据，同时创建一个相同结构的表 db2.t</p>\n</blockquote>\n<h3 id=\"mysqldump-方法\"><a href=\"#mysqldump-方法\" class=\"headerlink\" title=\"mysqldump 方法\"></a>mysqldump 方法</h3><p>使用 mysqldump 命令将数据导出成一组 INSERT 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysqldump -h<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.982ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewbox=\"0 -791.3 3867.4 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">host -P</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-50\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"576\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"1062\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1531\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"2115\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-50\" x=\"3115\" y=\"0\"/>\n</g>\n</svg>port -u$user --add-locks=0 --no-create-info --single-transaction  --set-gtid-purged=OFF db1 t --where=&quot;a&gt;900&quot; --result-file=/client_tmp/t.sql<br></code></pre></td></tr></table></figure>\n<ol>\n<li><code>–single-transaction</code> 的作用是，在导出数据的时候不需要对表 db1.t 加表锁，而是使用 <code>START TRANSACTION WITH CONSISTENT SNAPSHOT</code>(立即开启一个事务，否则事务是再执行到第一个sql语句的时候创建的) 的方法；</li>\n<li><code>–add-locks</code> 设置为 0，表示在输出的文件结果里，不增加” <code>LOCK TABLES t WRITE;</code>“ ；</li>\n<li><code>–no-create-info</code> 的意思是，不需要导出表结构；</li>\n<li><code>–set-gtid-purged=off</code> 表示的是，不输出跟 GTID 相关的信息；</li>\n<li><code>–result-file</code> 指定了输出文件的路径，其中 client 表示生成的文件是在客户端机器上的。</li>\n</ol>\n<blockquote>\n<p>通过这条 mysqldump 命令生成的 t.sql 文件中就包含了如图所示的 INSERT 语句</p>\n<p><img src=\"/article/mysqldump 输出文件的部分结果.png\"><span class=\"image-caption\">mysqldump 输出文件的部分结果</span></p>\n<p>一条 INSERT 语句里面会包含多个 value 对，这是为了后续用这个文件来写入数据的时候，执行速度可以更快。</p>\n<p>如果希望生成的文件中一条 INSERT 语句只插入一行数据的话，可以在执行 mysqldump 命令时，加上参数<code>–skip-extended-insert</code>。</p>\n</blockquote>\n<p>然后，可以通过下面这条命令，将这些 INSERT 语句放到 db2 库里去执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysql -h127.0.0.1 -P13000  -uroot db2 -e &quot;source /client_tmp/t.sql&quot;<br></code></pre></td></tr></table></figure>\n<p>source 并不是一条 SQL 语句，而是一个客户端命令</p>\n<p>mysql 客户端执行这个命令的流程是这样的：</p>\n<ol>\n<li>打开文件，默认以分号为结尾读取一条条的 SQL 语句；</li>\n<li>将 SQL 语句发送到服务端执行。</li>\n</ol>\n<p>也就是说，服务端执行的并不是这个“<code>source t.sql</code>“语句，而是 <code>INSERT</code> 语句。所以，不论是在慢查询日志（slow log），还是在 binlog，记录的都是这些要被真正执行的 INSERT 语句。</p>\n<h3 id=\"导出-CSV-文件\"><a href=\"#导出-CSV-文件\" class=\"headerlink\" title=\"导出 CSV 文件\"></a>导出 CSV 文件</h3><p>直接将结果导出成.csv 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from db1.t where a&gt;900 into outfile &#x27;/server_tmp/t.csv&#x27;;<br></code></pre></td></tr></table></figure>\n<p>需要注意如下几点:</p>\n<ol>\n<li>这条语句会将结果保存在服务端。如果你执行命令的客户端和 MySQL 服务端不在同一个机器上，客户端机器的临时目录下是不会生成 t.csv 文件的。</li>\n<li><code>into outfile</code> 指定了文件的生成位置（/server_tmp/），这个位置必须受参数 <code>secure_file_priv</code> 的限制。参数 <code>secure_file_priv</code> 的可选值和作用分别是：<ol>\n<li>如果设置为 empty，表示不限制文件生成的位置，这是不安全的设置；</li>\n<li>如果设置为一个表示路径的字符串，就要求生成的文件只能放在这个指定的目录，或者它的子目录；</li>\n<li>如果设置为 NULL，就表示禁止在这个 MySQL 实例上执行 <code>select … into outfile</code> 操作。</li>\n</ol>\n</li>\n<li>这条命令不会帮你覆盖文件，因此你需要确保 /server_tmp/t.csv 这个文件不存在，否则执行语句时就会因为有同名文件的存在而报错。</li>\n<li>这条命令生成的文本文件中，原则上一个数据行对应文本文件的一行。但是，如果字段中包含换行符，在生成的文本中也会有换行符。不过类似换行符、制表符这类符号，前面都会跟上“\\”这个转义符，这样就可以跟字段之间、数据行之间的分隔符区分开。</li>\n</ol>\n<p>得到.csv 导出文件后，就可以用下面的 load data 命令将数据导入到目标表 db2.t 中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">load data infile &#x27;/server_tmp/t.csv&#x27; into table db2.t;<br></code></pre></td></tr></table></figure>\n<p>这条语句的执行流程如下所示:</p>\n<ol>\n<li>打开文件 /server_tmp/t.csv，以制表符 (\\t) 作为字段间的分隔符，以换行符（\\n）作为记录之间的分隔符，进行数据读取；</li>\n<li>启动事务</li>\n<li>判断每一行的字段数与表 db2.t 是否相同：<ol>\n<li>若不相同，则直接报错，事务回滚；</li>\n<li>若相同，则构造成一行，调用 InnoDB 引擎接口，写入到表中。</li>\n</ol>\n</li>\n<li>重复步骤 3，直到 /server_tmp/t.csv 整个文件读入完成，提交事务。</li>\n</ol>\n<blockquote>\n<p><strong>问题：如果 binlog_format=statement，这个 load 语句记录到 binlog 里以后，怎么在备库重放呢？</strong></p>\n<p>由于 /server_tmp/t.csv 文件只保存在主库所在的主机上，如果只是把这条语句原文写到 binlog 中，在备库执行的时候，备库的本地机器上没有这个文件，就会导致主备同步停止。</p>\n<p>所以，这条语句执行的完整流程，其实是下面这样的：</p>\n<ol>\n<li>主库执行完成后，将 /server_tmp/t.csv 文件的内容直接写到 binlog 文件中。</li>\n<li>往 binlog 文件中写入语句 load data local infile ‘/tmp/SQL_LOAD_MB-1-0’ INTO TABLE `db2`.`t`。</li>\n<li>把这个 binlog 日志传到备库。</li>\n<li>备库的 apply 线程在执行这个事务日志时：<ol>\n<li>先将 binlog 中 t.csv 文件的内容读出来，写入到本地临时目录 /tmp/SQL_LOAD_MB-1-0 中；</li>\n<li>再执行 load data 语句，往备库的 db2.t 表中插入跟主库相同的数据。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/article/load data 的同步流程.jpg\"><span class=\"image-caption\">load data 的同步流程</span></p>\n<p>注意，这里备库执行的 load data 语句里面，多了一个“local”。它的意思是“将执行这条命令的客户端所在机器的本地文件 /tmp/SQL_LOAD_MB-1-0 的内容，加载到目标表 db2.t 中”。</p>\n</blockquote>\n<p>load data 命令有两种用法：</p>\n<ol>\n<li>不加“local”，是读取服务端的文件，这个文件必须在 secure_file_priv 指定的目录或子目录下；</li>\n<li>加上“local”，读取的是客户端的文件，只要 mysql 客户端有访问这个文件的权限即可。这时候，MySQL 客户端会先把本地文件传给服务端，然后执行上述的 load data 流程</li>\n</ol>\n<p><code>select …into outfile</code> 方法<strong>不会生成表结构文件</strong>, 所以我们导数据时还需要单独的命令得到表结构定义。</p>\n<p>mysqldump 提供了一个<code>–tab</code> 参数，可以同时导出表结构定义文件和 csv 数据文件。这条命令的使用方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysqldump -h<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.982ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewbox=\"0 -791.3 3867.4 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">host -P</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-50\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"576\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"1062\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1531\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"2115\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-50\" x=\"3115\" y=\"0\"/>\n</g>\n</svg>port -u<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"105.481ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 45415.1 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">user ---single-transaction  --set-gtid-purged=OFF db1 t --where=\"a&gt;900\" --tab=</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-46\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-22\" d=\"M34 634Q34 659 50 676T93 694Q121 694 144 668T168 579Q168 525 146 476T101 403T73 379Q69 379 60 388T50 401Q50 404 62 417T88 448T116 500T131 572Q131 584 130 584T125 581T112 576T94 573Q69 573 52 590T34 634ZM238 634Q238 659 254 676T297 694Q325 694 348 668T372 579Q372 525 350 476T305 403T277 379Q273 379 264 388T254 401Q254 404 266 417T292 448T320 500T335 572Q335 584 334 584T329 581T316 576T298 573Q273 573 256 590T238 634Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"572\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1042\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"1508\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"2182\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"3182\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"4183\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"5184\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"5653\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"5999\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"6599\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"7080\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"7378\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"8067\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"9068\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"9429\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"9881\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"10410\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"11011\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"11480\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"12010\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"12443\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"12805\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"13150\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"13636\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"14459\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"15459\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"16238\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"16707\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"17174\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"17758\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"18758\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"19239\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"19600\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"19946\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"20691\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"21692\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"22196\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"22768\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"23220\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"23700\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"24167\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"24968\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"26024\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-46\" x=\"26788\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-46\" x=\"27537\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"28287\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"28810\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"29240\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"29740\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"30324\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"31325\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"32103\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"32820\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"33396\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"33863\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"34314\" y=\"0\"/>\n<g transform=\"translate(35058,0)\">\n <use xlink:href=\"#E1-MJMAIN-3D\"/>\n <use xlink:href=\"#E1-MJMAIN-22\" x=\"778\" y=\"0\"/>\n</g>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"36615\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3E\" x=\"37423\" y=\"0\"/>\n<g transform=\"translate(38479,0)\">\n <use xlink:href=\"#E1-MJMAIN-39\"/>\n <use xlink:href=\"#E1-MJMAIN-30\" x=\"500\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-30\" x=\"1001\" y=\"0\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-22\" x=\"40258\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"41036\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"42037\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"43038\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"43399\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"43929\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"44636\" y=\"0\"/>\n</g>\n</svg>secure_file_priv<br></code></pre></td></tr></table></figure>\n<p>这条命令会在 <code>$secure_file_priv</code> 定义的目录下，创建一个 t.sql 文件保存建表语句，同时创建一个 t.txt 文件保存 CSV 数据。</p>\n<h3 id=\"物理拷贝方法\"><a href=\"#物理拷贝方法\" class=\"headerlink\" title=\"物理拷贝方法\"></a>物理拷贝方法</h3><blockquote>\n<p><strong>问题：直接把 db1.t 表的.frm 文件和.ibd 文件拷贝到 db2 目录下，是否可行呢？</strong></p>\n<p>一个 InnoDB 表，除了包含这两个物理文件外，还需要在数据字典中注册。直接拷贝这两个文件的话，因为数据字典中没有 db2.t 这个表，系统是不会识别和接受它们的。</p>\n</blockquote>\n<p>在 MySQL 5.6 版本引入了可传输表空间(transportable tablespace) 的方法，可以通过导出 + 导入表空间的方式，实现物理拷贝表的功能。</p>\n<blockquote>\n<p>假设我们现在的目标是在 db1 库下，复制一个跟表 t 相同的表 r，具体的执行步骤如下：</p>\n<ol>\n<li>执行 <code>create table r like t</code>，创建一个相同表结构的空表；</li>\n<li>执行 <code>alter table r discard tablespace</code>，这时候 r.ibd 文件会被删除；</li>\n<li>执行 <code>flush table t for export</code>，这时候 db1 目录下会生成一个 t.cfg 文件；</li>\n<li>在 db1 目录下执行 <code>cp t.cfg r.cfg; cp t.ibd r.ibd；</code>这两个命令（这里需要注意的是，拷贝得到的两个文件，MySQL 进程要有读写权限）；</li>\n<li>执行 <code>unlock tables</code>，这时候 t.cfg 文件会被删除；</li>\n<li>执行 <code>alter table r import tablespace</code>，将这个 r.ibd 文件作为表 r 的新的表空间，由于这个文件的数据内容和 t.ibd 是相同的，所以表 r 中就有了和表 t 相同的数据。</li>\n</ol>\n<img src=\"/article/undefined/%E7%89%A9%E7%90%86%E6%8B%B7%E8%B4%9D%E8%A1%A8.jpg\" class title=\"物理拷贝表\">\n<p><strong>注意点：</strong></p>\n<ol>\n<li>在第 3 步执行完 <code>flsuh table</code> 命令之后，db1.t 整个表处于只读状态，直到执行 <code>unlock tables</code> 命令后才释放读锁；</li>\n<li>在执行 <code>import tablespace</code> 的时候，为了让文件里的表空间 id 和数据字典中的一致，会修改 r.ibd 的表空间 id。而这个表空间 id 存在于每一个数据页中。因此，如果是一个很大的文件（比如 TB 级别），每个数据页都需要修改，所以你会看到这个 import 语句的执行是需要一些时间的。当然，如果是相比于逻辑导入的方法，import 语句的耗时是非常短的。</li>\n</ol>\n</blockquote>\n<h3 id=\"三种方法的优缺点\"><a href=\"#三种方法的优缺点\" class=\"headerlink\" title=\"三种方法的优缺点\"></a>三种方法的优缺点</h3><ol>\n<li>物理拷贝的方式速度最快，尤其对于大表拷贝来说是最快的方法。如果出现误删表的情况，用备份恢复出误删之前的临时库，然后再把临时库中的表拷贝到生产库上，是恢复数据最快的方法。但是，这种方法的使用也有一定的局限性：<ol>\n<li>必须是全表拷贝，不能只拷贝部分数据；</li>\n<li>需要到服务器上拷贝数据，在用户无法登录数据库主机的场景下无法使用；</li>\n<li>由于是通过拷贝物理文件实现的，源表和目标表都是使用 InnoDB 引擎时才能使用。</li>\n</ol>\n</li>\n<li>用 mysqldump 生成包含 INSERT 语句文件的方法，可以在 where 参数增加过滤条件，来实现只导出部分数据。这个方式的不足之一是，不能使用 join 这种比较复杂的 where 条件写法。</li>\n<li>用 <code>select … into outfile</code> 的方法是最灵活的，支持所有的 SQL 写法。但，这个方法的缺点之一就是，每次只能导出一张表的数据，而且表结构也需要另外的语句单独备份。</li>\n</ol>\n<h2 id=\"grant之后要跟着flush-privileges吗？\"><a href=\"#grant之后要跟着flush-privileges吗？\" class=\"headerlink\" title=\"grant之后要跟着flush privileges吗？\"></a>grant之后要跟着flush privileges吗？</h2><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create user &#x27;ua&#x27;@&#x27;%&#x27; identified by &#x27;pa&#x27;;<br></code></pre></td></tr></table></figure>\n<p>这条语句的逻辑是创建一个用户’ua’@’%’，密码是 pa。注意，在 MySQL 里面，用户名 (user)+ 地址 (host) 才表示一个用户。</p>\n<p>这条命令做了两个动作：</p>\n<ol>\n<li>磁盘上，往 mysql.user 表里插入一行，由于没有指定权限，所以这行数据上所有表示权限的字段的值都是 N；</li>\n<li>内存里，往数组 acl_users 里插入一个 acl_user 对象，这个对象的 access 字段值为 0。</li>\n</ol>\n<p>用户 ua 在 user 表中的状态</p>\n<p><img src=\"/article/mysql.user 数据行.png\"><span class=\"image-caption\">mysql.user 数据行</span></p>\n</blockquote>\n<h3 id=\"全局权限\"><a href=\"#全局权限\" class=\"headerlink\" title=\"全局权限\"></a>全局权限</h3><p>全局权限，作用于整个 MySQL 实例，这些权限信息保存在 mysql 库的 user 表里。</p>\n<blockquote>\n<p>如果要给用户 ua 赋一个最高权限的话，语句是这么写的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">grant all privileges on *.* to &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br></code></pre></td></tr></table></figure>\n<p>这个 grant 命令做了两个动作：</p>\n<ol>\n<li>磁盘上，将 mysql.user 表里，用户’ua’@’%’这一行的所有表示权限的字段的值都修改为‘Y’；</li>\n<li>内存里，从数组 acl_users 中找到这个用户对应的对象，将 access 值（权限位）修改为二进制的“全 1”。</li>\n</ol>\n<p>在这个 grant 命令执行完成后，如果有新的客户端使用用户名 ua 登录成功，MySQL 会为新连接维护一个线程对象，然后从 acl_users 数组里查到这个用户的权限，并将权限值拷贝到这个线程对象中。之后在这个连接中执行的语句，所有关于全局权限的判断，都直接使用线程对象内部保存的权限位</p>\n</blockquote>\n<p>基于上面的分析我们可以知道：</p>\n<ol>\n<li>grant 命令对于全局权限，同时更新了磁盘和内存。命令完成后即时生效，接下来新创建的连接会使用新的权限。</li>\n<li>对于一个已经存在的连接，它的全局权限不受 grant 命令的影响。</li>\n</ol>\n<blockquote>\n<p>如果要回收上面的 grant 语句赋予的权限，可以使用下面这条命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">revoke all privileges on *.* from &#x27;ua&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure>\n<p>这条 revoke 命令的用法与 grant 类似，做了如下两个动作：</p>\n<ol>\n<li>磁盘上，将 mysql.user 表里，用户’ua’@’%’这一行的所有表示权限的字段的值都修改为“N”；</li>\n<li>内存里，从数组 acl_users 中找到这个用户对应的对象，将 access 的值修改为 0。</li>\n</ol>\n</blockquote>\n<h3 id=\"db-权限\"><a href=\"#db-权限\" class=\"headerlink\" title=\"db 权限\"></a>db 权限</h3><p>除了全局权限，MySQL 也支持库级别的权限定义。</p>\n<blockquote>\n<p>如果要让用户 ua 拥有库 db1 的所有权限，可以执行下面这条命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">grant all privileges on db1.* to &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br></code></pre></td></tr></table></figure>\n<p>基于库的权限记录保存在 mysql.db 表中，在内存里则保存在数组 acl_dbs 中。这条 grant 命令做了如下两个动作：</p>\n<ol>\n<li>磁盘上，往 mysql.db 表中插入了一行记录，所有权限位字段设置为“Y”；</li>\n<li>内存里，增加一个对象到数组 acl_dbs 中，这个对象的权限位为“全 1”。</li>\n</ol>\n<p>这个时刻用户 ua 在 db 表中的状态:</p>\n<p><img src=\"/article/mysql.db 数据行.png\"><span class=\"image-caption\">mysql.db 数据行</span></p>\n<p>每次需要判断一个用户对一个数据库读写权限的时候，都需要遍历一次 acl_dbs 数组，根据 user、host 和 db 找到匹配的对象，然后根据对象的权限位来判断。</p>\n</blockquote>\n<p>grant 修改 db 权限的时候，是同时对磁盘和内存生效的</p>\n<p>对于全局权限，因为全局权限存储在线程对象中，所以修改用户的全局权限后，不会影响到已经存在的连接； </p>\n<p>对于数据库权限，因为acl_dbs是一个全局数组，修改用户的数据库权限，acl_dbs也会立马随之修改，线程对象可以立刻读到，所以会直接影响到已经存在的连接。</p>\n<h3 id=\"表权限和列权限\"><a href=\"#表权限和列权限\" class=\"headerlink\" title=\"表权限和列权限\"></a>表权限和列权限</h3><p>除了 db 级别的权限外，MySQL 支持更细粒度的表权限和列权限。</p>\n<p>其中，表权限定义存放在表 mysql.tables_priv 中，列权限定义存放在表 mysql.columns_priv 中。</p>\n<p>这两类权限，组合起来存放在内存的 hash 结构 column_priv_hash 中。</p>\n<blockquote>\n<p>这两类权限的赋权命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create table db1.t1(id int, a int);<br><br>grant all privileges on db1.t1 to &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br>GRANT SELECT(id), INSERT (id,a) ON mydb.mytbl TO &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br></code></pre></td></tr></table></figure>\n<p>跟 db 权限类似，这两个权限每次 grant 的时候都会修改数据表，也会同步修改内存中的 hash 结构。因此，<strong>对这两类权限的操作，也会马上影响到已经存在的连接。</strong></p>\n</blockquote>\n<h3 id=\"flush-privileges-命令\"><a href=\"#flush-privileges-命令\" class=\"headerlink\" title=\"flush privileges 命令\"></a>flush privileges 命令</h3><p><code>flush privileges</code> 命令会清空 acl_users 数组，然后从 mysql.user 表中读取数据重新加载，重新构造一个 acl_users 数组。也就是说，以数据表中的数据为准，会将全局权限内存数组重新加载一遍。</p>\n<p>对于 db 权限、表权限和列权限，MySQL 也做了这样的处理</p>\n<p>也就是说，如果内存的权限数据和磁盘数据表相同的话，不需要执行 flush privileges。而如果我们都是用 grant/revoke 语句来执行的话，内存和数据表本来就是保持同步更新的。<strong>因此，正常情况下，grant 命令之后，没有必要跟着执行 flush privileges 命令。</strong></p>\n<h3 id=\"flush-privileges-使用场景\"><a href=\"#flush-privileges-使用场景\" class=\"headerlink\" title=\"flush privileges 使用场景\"></a>flush privileges 使用场景</h3><p>当数据表中的权限数据跟内存中的权限数据不一致的时候，flush privileges 语句可以用来重建内存数据，达到一致状态。</p>\n<blockquote>\n<p>直接用 DML 语句操作系统权限表</p>\n<p><img src=\"/article/使用 flush privileges.png\"><span class=\"image-caption\">使用 flush privileges</span></p>\n<p>T3 时刻虽然已经用 delete 语句删除了用户 ua，但是在 T4 时刻，仍然可以用 ua 连接成功。原因就是，这时候内存中 acl_users 数组中还有这个用户，因此系统判断时认为用户还正常存在。</p>\n<p>在 T5 时刻执行过 flush 命令后，内存更新，T6 时刻再要用 ua 来登录的话，就会报错“无法访问”了</p>\n</blockquote>\n<h2 id=\"要不要使用分区表？\"><a href=\"#要不要使用分区表？\" class=\"headerlink\" title=\"要不要使用分区表？\"></a>要不要使用分区表？</h2><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `t` (<br>  `ftime` datetime NOT NULL,<br>  `c` int(11) DEFAULT NULL,<br>  KEY (`ftime`)<br>) ENGINE=InnoDB DEFAULT CHARSET=latin1<br>PARTITION BY RANGE (YEAR(ftime))<br>(PARTITION p_2017 VALUES LESS THAN (2017) ENGINE = InnoDB,<br> PARTITION p_2018 VALUES LESS THAN (2018) ENGINE = InnoDB,<br> PARTITION p_2019 VALUES LESS THAN (2019) ENGINE = InnoDB,<br>PARTITION p_others VALUES LESS THAN MAXVALUE ENGINE = InnoDB);<br>insert into t values(&#x27;2017-4-1&#x27;,1),(&#x27;2018-4-1&#x27;,1);<br></code></pre></td></tr></table></figure>\n<p><img src=\"/article/表 t 的磁盘文件.png\"><span class=\"image-caption\">表 t 的磁盘文件</span></p>\n<p>在表 t 中初始化插入了两行记录，按照定义的分区规则，这两行记录分别落在 p_2018 和 p_2019 这两个分区上。</p>\n<p>这个表包含了一个.frm 文件和 4 个.ibd 文件，每个分区对应一个.ibd 文件。也就是说：</p>\n<ol>\n<li>对于引擎层来说，这是 4 个表；</li>\n<li>对于 Server 层来说，这是 1 个表。</li>\n</ol>\n</blockquote>\n<ol>\n<li>MySQL 在第一次打开分区表的时候，需要访问所有的分区；</li>\n<li>在 server 层，认为这是同一张表，因此所有分区共用同一个 MDL 锁；</li>\n<li>在引擎层，认为这是不同的表，因此 MDL 锁之后的执行过程，会根据分区表规则，只访问必要的分区。</li>\n</ol>\n<ol>\n<li>分区并不是越细越好。实际上，单表或者单分区的数据一千万行，只要没有特别大的索引，对于现在的硬件能力来说都已经是小表了。</li>\n<li>分区也不要提前预留太多，在使用之前预先创建即可。</li>\n<li>对于没有数据的历史分区，要及时的 drop 掉。</li>\n</ol>\n<h2 id=\"自增id用完怎么办？\"><a href=\"#自增id用完怎么办？\" class=\"headerlink\" title=\"自增id用完怎么办？\"></a>自增id用完怎么办？</h2><p>MySQL 里有很多自增的 id，每个自增 id 都是定义了初始值，然后不停地往上加步长。虽然自然数是没有上限的，但是在计算机里，只要定义了表示这个数的字节长度，那它就有上限。比如，无符号整型 (unsigned int) 是 4 个字节，上限就是 2<sup>32</sup>-1。</p>\n<h3 id=\"表定义自增值-id\"><a href=\"#表定义自增值-id\" class=\"headerlink\" title=\"表定义自增值 id\"></a>表定义自增值 id</h3><p>表定义的自增值达到上限后的逻辑是：再申请下一个 id 时，得到的值保持不变。</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create table t(id int unsigned auto_increment primary key) auto_increment=4294967295;<br>insert into t values(null);<br>//成功插入一行 4294967295<br>show create table t;<br>/* CREATE TABLE `t` (<br>  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=4294967295;<br>*/<br><br>insert into t values(null);<br>//Duplicate entry &#x27;4294967295&#x27; for key &#x27;PRIMARY&#x27;<br></code></pre></td></tr></table></figure>\n<p>第一个 insert 语句插入数据成功后，这个表的 AUTO_INCREMENT 没有改变（还是 4294967295），就导致了第二个 insert 语句又拿到相同的自增 id 值，再试图执行插入语句，报主键冲突错误。</p>\n</blockquote>\n<h3 id=\"InnoDB-系统自增-row-id\"><a href=\"#InnoDB-系统自增-row-id\" class=\"headerlink\" title=\"InnoDB 系统自增 row_id\"></a>InnoDB 系统自增 row_id</h3><p>如果创建的 InnoDB 表没有指定主键，那么 InnoDB 会给你创建一个不可见的，长度为 6 个字节的 <strong>row_id</strong>。</p>\n<p>InnoDB 维护了一个全局的 ‘dict_sys.row_id’ 值，所有无主键的 InnoDB 表，每插入一行数据，都将当前的 ‘dict_sys.row_id’ 值作为要插入数据的 row_id，然后把 ‘dict_sys.row_id’ 的值加 1。</p>\n<p>实际上，在代码实现时 row_id 是一个长度为 8 字节的无符号长整型 (bigint unsigned)。但是，InnoDB 在设计时，给 row_id 留的只是 6 个字节的长度，这样写到数据表中时只放了最后 6 个字节，所以 row_id 能写到数据表中的值，就有两个特征：</p>\n<ol>\n<li><p>row_id 写入表中的值范围，是从 0 到 2<sup>48</sup>-1；</p>\n</li>\n<li><p>当 ‘dict_sys.row_id=2<sup>48</sup>‘时，如果再有插入数据的行为要来申请 row_id，拿到以后再取最后 6 个字节的话就是 0。(写入表的 row_id 是从 0 开始到 2<sup>48</sup>-1。达到上限后，下一个值就是 0，然后继续循环。)</p>\n<p>在 InnoDB 逻辑里，申请到 row_id=N 后，就将这行数据写入表中；如果表中已经存在 row_id=N 的行，新写入的行就会覆盖原有的行。</p>\n</li>\n</ol>\n<h3 id=\"Xid\"><a href=\"#Xid\" class=\"headerlink\" title=\"Xid\"></a>Xid</h3><p>MySQL 内部维护了一个全局变量 ‘global_query_id’，每次执行语句的时候将它赋值给 ‘Query_id’，然后给这个变量加 1。如果当前语句是这个事务执行的第一条语句，那么 MySQL 还会同时把 ‘Query_id’ 赋值给这个事务的 <strong>Xid</strong>。</p>\n<p>而 <strong>‘global_query_id’ 是一个纯内存变量</strong>，重启之后就清零了。所以在同一个数据库实例中，不同事务的 Xid 也是有可能相同的。但是 MySQL 重启之后会重新生成新的 binlog 文件，这就保证了，<strong>同一个 binlog 文件里，Xid 一定是惟一的</strong>。</p>\n<p>虽然 MySQL 重启不会导致同一个 binlog 里面出现两个相同的 Xid，但是如果 ‘global_query_id’ 达到上限后，就会继续从 0 开始计数。从理论上讲，还是就会出现同一个 binlog 里面出现相同 Xid 的场景。</p>\n<h3 id=\"Innodb-trx-id\"><a href=\"#Innodb-trx-id\" class=\"headerlink\" title=\"Innodb trx_id\"></a>Innodb trx_id</h3><p><strong>Xid 是由 server 层维护的</strong>。InnoDB 内部使用 Xid，就是为了能够在 InnoDB 事务和 server 之间做关联。但是，<strong>InnoDB 自己的 trx_id，是另外维护的</strong>。</p>\n<p>InnoDB 内部维护了一个 ‘max_trx_id’ 全局变量，每次需要申请一个新的 trx_id 时，就获得 ‘max_trx_id’ 的当前值，然后并将 ‘max_trx_id’ 加 1。</p>\n<p>InnoDB 数据可见性的<strong>核心思想</strong>是：每一行数据都记录了更新它的 trx_id，当一个事务读到一行数据的时候，判断这个数据是否可见的方法，就是通过事务的一致性视图与这行数据的 trx_id 做对比。</p>\n<p>对于正在执行的事务，可以从 <code>information_schema.innodb_trx</code> 表中看到事务的 trx_id。</p>\n<blockquote>\n<p><img src=\"/article/事务的 trx_id.png\"><span class=\"image-caption\">事务的 trx_id</span></p>\n<p>session B 里，从 innodb_trx 表里查出的这两个字段，第二个字段 <code>trx_mysql_thread_id</code> 就是线程 id。显示线程 id，是为了说明这两次查询看到的事务对应的线程 id 都是 5，也就是 session A 所在的线程。</p>\n<p>实际上，在 T1 时刻，session A 还没有涉及到更新，是一个只读事务。而对于只读事务，InnoDB 并不会分配 trx_id。也就是说：</p>\n<ol>\n<li>在 T1 时刻，trx_id 的值其实就是 0。而这个很大的数，只是显示用的。</li>\n<li>直到 session A 在 T3 时刻执行 insert 语句的时候，InnoDB 才真正分配了 trx_id。所以，T4 时刻，session B 查到的这个 trx_id 的值就是 1289。</li>\n</ol>\n</blockquote>\n<p>除了修改类语句外，如果在 select 语句后面加上 for update，这个事务也不是只读事务。</p>\n<ol>\n<li>update 和 delete 语句除了事务本身，还涉及到标记删除旧数据，也就是要把数据放到 purge 队列里等待后续物理删除，这个操作也会把 max_trx_id+1， 因此在一个事务中至少加 2；</li>\n<li>InnoDB 的后台操作，比如表的索引信息统计这类操作，也是会启动内部事务的，因此你可能看到，trx_id 值并不是按照加 1 递增的。</li>\n</ol>\n<blockquote>\n<p>T2 时刻查到的这个很大的数字是怎么来的呢？</p>\n</blockquote>\n<p>这个数字是每次查询的时候由系统临时计算出来的。它的算法是：把当前事务的 trx 变量的指针地址转成整数，再加上 2<sup>48</sup>。使用这个算法，就可以保证以下两点：</p>\n<ol>\n<li>因为同一个只读事务在执行期间，它的指针地址是不会变的，所以不论是在 innodb_trx 还是在 innodb_locks 表里，同一个只读事务查出来的 trx_id 就会是一样的。</li>\n<li>如果有并行的多个只读事务，每个事务的 trx 变量的指针地址肯定不同。这样，不同的并发只读事务，查出来的 trx_id 就是不同的。</li>\n<li>在显示值里面加上 2<sup>48</sup>，目的是要保证只读事务显示的 trx_id 值比较大，正常情况下就会区别于读写事务的 id。但是，trx_id 跟 row_id 的逻辑类似，定义长度也是 8 个字节。因此，在理论上还是可能出现一个读写事务与一个只读事务显示的 trx_id 相同的情况。不过这个概率很低，并且也没有什么实质危害，可以不管它。</li>\n</ol>\n<p>只读事务不分配 trx_id，有什么好处呢？</p>\n<ol>\n<li>一个好处是，这样做可以减小事务视图里面活跃事务数组的大小。因为当前正在运行的只读事务，是不影响数据的可见性判断的。所以，在创建事务的一致性视图时，InnoDB 就只需要拷贝读写事务的 trx_id。</li>\n<li>另一个好处是，可以减少 trx_id 的申请次数。在 InnoDB 里，即使你只是执行一个普通的 select 语句，在执行过程中，也是要对应一个只读事务的。所以只读事务优化后，普通的查询语句不需要申请 trx_id，就大大减少了并发事务申请 trx_id 的锁冲突。</li>\n</ol>\n<p>max_trx_id 会持久化存储，重启也不会重置为 0，那么从理论上讲，只要一个 MySQL 服务跑得足够久，就可能出现 max_trx_id 达到 2<sup>48</sup>-1 的上限，然后从 0 开始的情况。</p>\n<p>当达到这个状态后，MySQL 就会持续出现一个脏读的 bug</p>\n<blockquote>\n<p>脏读的 bug 复现</p>\n<p>首先需要把当前的 max_trx_id 先修改成 248-1。注意：这个 case 里使用的是可重复读隔离级别。</p>\n<img src=\"/article/undefined/%E5%A4%8D%E7%8E%B0%E8%84%8F%E8%AF%BB.png\" class title=\"复现脏读\">\n<p>由于已经把系统的 max_trx_id 设置成了 2<sup>48</sup>-1，所以在 session A 启动的事务 TA 的低水位就是 2<sup>48</sup>-1。</p>\n<p>在 T2 时刻，session B 执行第一条 update 语句的事务 id 就是 2<sup>48</sup>-1，而第二条 update 语句的事务 id 就是 0 了，这条 update 语句执行后生成的数据版本上的 trx_id 就是 0。</p>\n<p>在 T3 时刻，session A 执行 select 语句的时候，判断可见性发现，c=3 这个数据版本的 trx_id，小于事务 TA 的低水位，因此认为这个数据可见。</p>\n<p>但，这个是脏读。</p>\n<p>由于低水位值会持续增加，而事务 id 从 0 开始计数，就导致了系统在这个时刻之后，所有的查询都会出现脏读的。</p>\n<p>并且，MySQL 重启时 max_trx_id 也不会清 0，也就是说重启 MySQL，这个 bug 仍然存在。</p>\n</blockquote>\n<h3 id=\"thread-id\"><a href=\"#thread-id\" class=\"headerlink\" title=\"thread_id\"></a>thread_id</h3><p><strong>线程 id（thread_id）</strong>才是 MySQL 中最常见的一种自增 id。</p>\n<p>thread_id 的逻辑：系统保存了一个全局变量 ‘thread_id_counter’，每新建一个连接，就将 thread_id_counter 赋值给这个新连接的线程变量。</p>\n<p>thread_id_counter 定义的大小是 4 个字节，因此达到 2<sup>32</sup>-1 后，它就会重置为 0，然后继续增加。</p>\n<p><strong>但是，不会在 show processlist 里看到两个相同的 thread_id。</strong>因为 MySQL 设计了一个唯一数组的逻辑，给新线程分配 thread_id 的时候，逻辑代码是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">do &#123;<br>  new_id= thread_id_counter++;<br>&#125; while (!thread_ids.insert_unique(new_id).second);<br></code></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<ol>\n<li>表的自增 id 达到上限后，再申请时它的值就不会改变，进而导致继续插入数据时报主键冲突的错误。</li>\n<li>row_id 达到上限后，则会归 0 再重新递增，如果出现相同的 row_id，后写的数据会覆盖之前的数据。</li>\n<li>Xid 只需要不在同一个 binlog 文件中出现重复值即可。虽然理论上会出现重复值，但是概率极小，可以忽略不计。</li>\n<li>InnoDB 的 max_trx_id 递增值每次 MySQL 重启都会被保存起来，脏读的例子就是一个必现的 bug。</li>\n<li>thread_id 是最常见的，而且也是处理得最好的一个自增 id 逻辑。</li>\n</ol>\n","more":"<h2 id=\"自增主键为什么不是连续的？\"><a href=\"#自增主键为什么不是连续的？\" class=\"headerlink\" title=\"自增主键为什么不是连续的？\"></a>自增主键为什么不是连续的？</h2><p>自增主键，由于自增主键可以让主键索引尽量地保持递增顺序插入，避免了页分裂，因此索引更紧凑。</p>\n<p><strong>自增主键不能保证连续递增</strong></p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `t` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `c` int(11) DEFAULT NULL,<br>  `d` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `c` (`c`)<br>) ENGINE=InnoDB;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"自增值保存在哪儿？\"><a href=\"#自增值保存在哪儿？\" class=\"headerlink\" title=\"自增值保存在哪儿？\"></a>自增值保存在哪儿？</h3><blockquote>\n<p>在这个空表 t 里面执行 insert into t values(null, 1, 1); 插入一行数据，再执行 show create table 命令，就可以看到如下图所示的结果：</p>\n<p><img src=\"/article/自动生成的 AUTO_INCREMENT 值.png\"><span class=\"image-caption\">自动生成的 AUTO_INCREMENT 值</span></p>\n<p>表定义里面出现了一个 AUTO_INCREMENT=2，表示下一次插入数据时，如果需要自动生成自增值，会生成 id=2。</p>\n<p>其实，这个输出结果容易引起这样的误解：自增值是保存在表结构定义里的。</p>\n</blockquote>\n<p><strong>表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值。</strong></p>\n<p>不同的引擎对于自增值的保存策略不同：</p>\n<ol>\n<li><p>MyISAM 引擎的自增值保存在数据文件中。</p>\n</li>\n<li><p>InnoDB 引擎的自增值，其实是保存在了内存里，并且到了 MySQL 8.0 版本后，才有了“自增值持久化”的能力，也就是才实现了“如果发生重启，表的自增值可以恢复为 MySQL 重启前的值”，具体情况是：</p>\n<ol>\n<li><p>在 MySQL 5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+1 作为这个表当前的自增值。</p>\n<p>﻿举例来说，如果一个表当前数据行里最大的 id 是 10，AUTO_INCREMENT=11。这时候，我们删除 id=10 的行，AUTO_INCREMENT 还是 11。但如果马上重启实例，重启后这个表的 AUTO_INCREMENT 就会变成 10。</p>\n<p>   ﻿也就是说，MySQL 重启可能会修改一个表的 AUTO_INCREMENT 的值。</p>\n</li>\n<li><p>在 MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"自增值修改机制\"><a href=\"#自增值修改机制\" class=\"headerlink\" title=\"自增值修改机制\"></a>自增值修改机制</h3><p>在 MySQL 里面，如果字段 id 被定义为 AUTO_INCREMENT，在插入一行数据的时候，自增值的行为如下：</p>\n<ol>\n<li><p>如果插入数据时 id 字段指定为 0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段；</p>\n</li>\n<li><p>如果插入数据时 id 字段指定了具体的值，就直接使用语句里指定的值。</p>\n<p>根据要插入的值和当前自增值的大小关系，自增值的变更结果也会有所不同。</p>\n<p>假设，某次要插入的值是 X，当前的自增值是 Y。</p>\n<ol>\n<li>如果 X&lt;Y，那么这个表的自增值不变；</li>\n<li>如果 X≥Y，就需要把当前自增值修改为新的自增值。</li>\n</ol>\n</li>\n</ol>\n<p><strong>新的自增值生成算法</strong>是：从 <code>auto_increment_offset</code> 开始，以 <code>auto_increment_increment</code> 为步长，持续叠加，直到找到第一个大于 X 的值，作为新的自增值。</p>\n<p>其中，<code>auto_increment_offset</code> 和 <code>auto_increment_increment</code> 是两个系统参数，分别用来表示自增的初始值和步长，默认值都是 1。</p>\n<h3 id=\"自增值的修改时机\"><a href=\"#自增值的修改时机\" class=\"headerlink\" title=\"自增值的修改时机\"></a>自增值的修改时机</h3><p><strong>导致自增主键 id 不连续的原因</strong></p>\n<ol>\n<li>唯一键冲突</li>\n<li>事务回滚</li>\n<li>批量插入数据</li>\n</ol>\n<p><strong>自增值为什么不能回退：为了提升性能</strong></p>\n<blockquote>\n<p>假设有两个并行执行的事务，在申请自增值的时候，为了避免两个事务申请到相同的自增 id，肯定要加锁，然后顺序申请。</p>\n<ol>\n<li>假设事务 A 申请到了 id=2， 事务 B 申请到 id=3，那么这时候表 t 的自增值是 4，之后继续执行。</li>\n<li>事务 B 正确提交了，但事务 A 出现了唯一键冲突。</li>\n<li>如果允许事务 A 把自增 id 回退，也就是把表 t 的当前自增值改回 2，那么就会出现这样的情况：表里面已经有 id=3 的行，而当前的自增 id 值是 2。</li>\n<li>接下来，继续执行的其他事务就会申请到 id=2，然后再申请到 id=3。这时，就会出现插入语句报错“主键冲突”。</li>\n</ol>\n<p>解决这个主键冲突，有两种方法：</p>\n<ol>\n<li>每次申请 id 之前，先判断表里面是否已经存在这个 id。如果存在，就跳过这个 id。但是，这个方法的成本很高。因为，本来申请 id 是一个很快的操作，现在还要再去主键索引树上判断 id 是否存在。</li>\n<li>把自增 id 的锁范围扩大，必须等到一个事务执行完成并提交，下一个事务才能再申请自增 id。这个方法的问题，就是锁的粒度太大，系统并发能力大大下降。</li>\n</ol>\n<p>这两个方法都会导致性能问题</p>\n</blockquote>\n<h3 id=\"自增锁的优化\"><a href=\"#自增锁的优化\" class=\"headerlink\" title=\"自增锁的优化\"></a>自增锁的优化</h3><p>自增 id 锁并不是一个事务锁，而是每次申请完就马上释放，以便允许别的事务再申请。</p>\n<ol>\n<li><p>MySQL 5.0 版本</p>\n<p>自增锁的范围是语句级别。也就是说，如果一个语句申请了一个表自增锁，这个锁会等语句执行结束以后才释放。</p>\n</li>\n<li><p>MySQL 5.1.22 版本</p>\n<p>新增参数 <code>innodb_autoinc_lock_mode</code>，默认值是 1</p>\n<ol>\n<li>这个参数的值被设置为 0 时，表示采用之前 MySQL 5.0 版本的策略，即语句执行结束后才释放锁；</li>\n<li>这个参数的值被设置为 1 时：<ol>\n<li>普通 <code>insert</code> 语句，自增锁在申请之后就马上释放；</li>\n<li>类似 <code>insert … select</code> 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放；</li>\n</ol>\n</li>\n<li>这个参数的值被设置为 2 时，所有的申请自增主键的动作都是申请后就释放锁。</li>\n</ol>\n</li>\n</ol>\n<p>在生产上，尤其是有 <code>insert … select</code> 这种批量插入数据(<code>insert … select</code>、<code>replace … select</code> 和 <code>load data</code> 语句)的场景时，从并发插入数据性能的角度考虑，我建议你这样设置：<code>innodb_autoinc_lock_mode=2</code> ，并且 <code>binlog_format=row</code>. 这样做，既能提升并发性，又不会出现数据一致性问题。</p>\n<p>对于批量插入数据的语句，MySQL 有一个批量申请自增 id 的策略：</p>\n<ol>\n<li>语句执行过程中，第一次申请自增 id，会分配 1 个；</li>\n<li>1 个用完以后，这个语句第二次申请自增 id，会分配 2 个；</li>\n<li>2 个用完以后，还是这个语句，第三次申请自增 id，会分配 4 个；</li>\n<li>依此类推，同一个语句去申请自增 id，每次申请到的自增 id 个数都是上一次的两倍。</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：在 binlog_format=statement 时，语句 A 先获取 id=1，然后语句 B 获取 id=2；接着语句 B 提交，写 binlog，然后语句 A 再写 binlog。这时候，如果 binlog 重放，是不是会发生语句 B 的 id 为 1，而语句 A 的 id 为 2 的不一致情况呢？</strong></p>\n<p>自增 id 的生成顺序，和 binlog 的写入顺序可能是不同的</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create table t(id int auto_increment primary key);<br>insert into t values(null);<br></code></pre></td></tr></table></figure>\n<p><img src=\"/article/insert 语句的 binlog.jpg\"><span class=\"image-caption\">insert 语句的 binlog</span></p>\n<p>可以看到，在 insert 语句之前，还有一句 SET INSERT_ID=1。这条命令的意思是，这个线程里下一次需要用到自增值的时候，不论当前表的自增值是多少，固定用 1 这个值。</p>\n<p>这个 SET INSERT_ID 语句是固定跟在 insert 语句之前的,主库上语句 A 的 id 是 1，语句 B 的 id 是 2，但是写入 binlog 的顺序先 B 后 A，那么 binlog 就变成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">SET INSERT_ID=2;<br>语句B；<br>SET INSERT_ID=1;<br>语句A；<br></code></pre></td></tr></table></figure>\n<p>在备库上语句 B 用到的 INSERT_ID 依然是 2，跟主库相同</p>\n</blockquote>\n<p><strong>因此，即使两个 INSERT 语句在主备库的执行顺序不同，自增主键字段的值也不会不一致。</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"insert语句的锁为什么这么多？\"><a href=\"#insert语句的锁为什么这么多？\" class=\"headerlink\" title=\"insert语句的锁为什么这么多？\"></a>insert语句的锁为什么这么多？</h2><h3 id=\"insert-…-select-语句\"><a href=\"#insert-…-select-语句\" class=\"headerlink\" title=\"insert … select 语句\"></a>insert … select 语句</h3><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `t` (<br>  `id` int(11) NOT NULL AUTO_INCREMENT,<br>  `c` int(11) DEFAULT NULL,<br>  `d` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  UNIQUE KEY `c` (`c`)<br>) ENGINE=InnoDB;<br><br>insert into t values(null, 1,1);<br>insert into t values(null, 2,2);<br>insert into t values(null, 3,3);<br>insert into t values(null, 4,4);<br><br>create table t2 like t<br></code></pre></td></tr></table></figure>\n<p>在可重复读隔离级别下，binlog_format=statement 时执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t2(c,d) select c,d from t;<br></code></pre></td></tr></table></figure>\n<p>需要对表 t 的所有行和间隙加锁。</p>\n<p>执行序列：</p>\n<p><img src=\"/article/并发 insert 场景.png\"><span class=\"image-caption\">并发 insert 场景</span></p>\n<p>实际的执行效果是，如果 session B 先执行，由于这个语句对表 t 主键索引加了 (-∞,1]这个 next-key lock，会在语句执行完成后，才允许 session A 的 insert 语句执行。</p>\n<p>但如果没有锁的话，就可能出现 session B 的 insert 语句先执行，但是后写入 binlog 的情况。于是，在 binlog_format=statement 的情况下，binlog 里面就记录了这样的语句序列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t values(-1,-1,-1);<br>insert into t2(c,d) select c,d from t;<br></code></pre></td></tr></table></figure>\n<p>这个语句到了备库执行，就会把 id=-1 这一行也写到表 t2 中，出现主备不一致。</p>\n</blockquote>\n<p>执行 <code>insert … select</code> 的时候，对目标表也不是锁全表，而是只锁住需要访问的资源。</p>\n<h3 id=\"insert-循环写入\"><a href=\"#insert-循环写入\" class=\"headerlink\" title=\"insert 循环写入\"></a>insert 循环写入</h3><blockquote>\n<p>要往表 t2 中插入一行数据，这一行的 c 值是表 t 中 c 值的最大值加 1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t2(c,d)  (select c+1, d from t force index(c) order by c desc limit 1);<br></code></pre></td></tr></table></figure>\n<p>这个语句的加锁范围，就是表 t 索引 c 上的 (3,4]和 (4,supremum]这两个 next-key lock，以及主键索引上 id=4 这一行。</p>\n<p>执行流程:从表 t 中按照索引 c 倒序，扫描第一行，拿到结果写入到表 t2 中。</p>\n<p>整条语句的扫描行数是 1。</p>\n</blockquote>\n<blockquote>\n<p>把这样的一行数据插入到表 t 中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t(c,d)  (select c+1, d from t force index(c) order by c desc limit 1);<br></code></pre></td></tr></table></figure>\n<p>慢查询日志:</p>\n<p><img src=\"/article/慢查询日志 -- 将数据插入表 t.png\"><span class=\"image-caption\">慢查询日志 -- 将数据插入表 t</span></p>\n<p>Rows_examined 的值是 5</p>\n<p>explain 结果:</p>\n<p><img src=\"/article/explain 结果.png\"><span class=\"image-caption\">explain 结果.png</span></p>\n<p>从 Extra 字段可以看到“Using temporary”字样，表示这个语句用到了临时表。执行过程中，需要把表 t 的内容读出来，写入临时表。</p>\n<p>在执行这个语句前后查看 Innodb_rows_read 的结果:</p>\n<p><img src=\"/article/查看 Innodb_rows_read 变化.png\"><span class=\"image-caption\">查看 Innodb_rows_read 变化</span></p>\n<p>这个语句执行前后，Innodb_rows_read 的值增加了 4。因为默认临时表是使用 Memory 引擎的，所以这 4 行查的都是表 t，也就是说对表 t 做了全表扫描。</p>\n<p>执行过程:</p>\n<ol>\n<li>创建临时表，表里有两个字段 c 和 d。</li>\n<li>按照索引 c 扫描表 t，依次取 c=4、3、2、1，然后回表，读到 c 和 d 的值写入临时表。这时，Rows_examined=4。</li>\n<li>由于语义里面有 limit 1，所以只取了临时表的第一行，再插入到表 t 中。这时，Rows_examined 的值加 1，变成了 5。</li>\n</ol>\n<p>这个语句会导致在表 t 上做全表扫描，并且会给索引 c 上的所有间隙都加上共享的 next-key lock。所以，这个语句执行期间，其他事务不能在这个表上插入数据。</p>\n<p><strong>这个语句的执行为什么需要临时表?</strong></p>\n<p>原因是这类一边遍历数据，一边更新数据的情况，如果读出来的数据直接写回原表，就可能在遍历过程中，读到刚刚插入的记录，新插入的记录如果参与计算逻辑，就跟语义不符。</p>\n</blockquote>\n<h3 id=\"insert-唯一键冲突\"><a href=\"#insert-唯一键冲突\" class=\"headerlink\" title=\"insert 唯一键冲突\"></a>insert 唯一键冲突</h3><blockquote>\n<img src=\"/article/undefined/%E5%94%AF%E4%B8%80%E9%94%AE%E5%86%B2%E7%AA%81%E5%8A%A0%E9%94%81.png\" class title=\"唯一键冲突加锁\">\n<p>在可重复读（repeatable read）隔离级别下执行</p>\n<p>session B 要执行的 insert 语句进入了锁等待状态。</p>\n<p>session A 执行的 insert 语句，发生唯一键冲突的时候，并不只是简单地报错返回，还在冲突的索引上加了锁。</p>\n<p>这时候，session A 持有索引 c 上的 (5,10]共享 next-key lock（读锁）。</p>\n</blockquote>\n<h3 id=\"insert-into-…-on-duplicate-key-update\"><a href=\"#insert-into-…-on-duplicate-key-update\" class=\"headerlink\" title=\"insert into … on duplicate key update\"></a>insert into … on duplicate key update</h3><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">insert into t values(11,10,10) on duplicate key update d=100; <br></code></pre></td></tr></table></figure>\n<p>会给索引 c 上 (5,10] 加一个排他的 next-key lock（写锁）</p>\n</blockquote>\n<p><code>insert into … on duplicate key update</code> 这个语义的逻辑是，插入一行数据，如果碰到唯一键约束，就执行后面的更新语句。</p>\n<p>注意，如果有多个列违反了唯一性约束，就会按照索引的顺序，修改跟第一个索引冲突的行。</p>\n<blockquote>\n<p>现在表 t 里面已经有了 (1,1,1) 和 (2,2,2) 这两行</p>\n<img src=\"/article/undefined/%E4%B8%A4%E4%B8%AA%E5%94%AF%E4%B8%80%E9%94%AE%E5%90%8C%E6%97%B6%E5%86%B2%E7%AA%81.png\" class title=\"两个唯一键同时冲突\">\n<p>主键 id 是先判断的，MySQL 认为这个语句跟 id=2 这一行冲突，所以修改的是 id=2 的行。</p>\n<p>需要注意的是，执行这条语句的 affected rows 返回的是 2，很容易造成误解。实际上，真正更新的只有一行，只是在代码实现上，insert 和 update 都认为自己成功了，update 计数加了 1， insert 计数也加了 1。</p>\n</blockquote>\n<h2 id=\"怎么最快地复制一张表？\"><a href=\"#怎么最快地复制一张表？\" class=\"headerlink\" title=\"怎么最快地复制一张表？\"></a>怎么最快地复制一张表？</h2><ol>\n<li>如果可以控制对源表的扫描行数和加锁范围很小的话，简单地使用 <code>insert … select</code>语句即可实现。</li>\n<li>为了避免对源表加读锁，更稳妥的方案是先将数据写到外部文本文件，然后再写回目标表。</li>\n</ol>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create database db1;<br>use db1;<br><br>create table t(id int primary key, a int, b int, index(a))engine=innodb;<br>delimiter ;;<br>  create procedure idata()<br>  begin<br>    declare i int;<br>    set i=1;<br>    while(i&lt;=1000)do<br>      insert into t values(i,i,i);<br>      set i=i+1;<br>    end while;<br>  end;;<br>delimiter ;<br>call idata();<br><br>create database db2;<br>create table db2.t like db1.t<br></code></pre></td></tr></table></figure>\n<p>先创建一个表 db1.t，并插入 1000 行数据，同时创建一个相同结构的表 db2.t</p>\n</blockquote>\n<h3 id=\"mysqldump-方法\"><a href=\"#mysqldump-方法\" class=\"headerlink\" title=\"mysqldump 方法\"></a>mysqldump 方法</h3><p>使用 mysqldump 命令将数据导出成一组 INSERT 语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysqldump -h<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.982ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewbox=\"0 -791.3 3867.4 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">host -P</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-50\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"576\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"1062\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1531\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"2115\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-50\" x=\"3115\" y=\"0\"/>\n</g>\n</svg>port -u$user --add-locks=0 --no-create-info --single-transaction  --set-gtid-purged=OFF db1 t --where=&quot;a&gt;900&quot; --result-file=/client_tmp/t.sql<br></code></pre></td></tr></table></figure>\n<ol>\n<li><code>–single-transaction</code> 的作用是，在导出数据的时候不需要对表 db1.t 加表锁，而是使用 <code>START TRANSACTION WITH CONSISTENT SNAPSHOT</code>(立即开启一个事务，否则事务是再执行到第一个sql语句的时候创建的) 的方法；</li>\n<li><code>–add-locks</code> 设置为 0，表示在输出的文件结果里，不增加” <code>LOCK TABLES t WRITE;</code>“ ；</li>\n<li><code>–no-create-info</code> 的意思是，不需要导出表结构；</li>\n<li><code>–set-gtid-purged=off</code> 表示的是，不输出跟 GTID 相关的信息；</li>\n<li><code>–result-file</code> 指定了输出文件的路径，其中 client 表示生成的文件是在客户端机器上的。</li>\n</ol>\n<blockquote>\n<p>通过这条 mysqldump 命令生成的 t.sql 文件中就包含了如图所示的 INSERT 语句</p>\n<p><img src=\"/article/mysqldump 输出文件的部分结果.png\"><span class=\"image-caption\">mysqldump 输出文件的部分结果</span></p>\n<p>一条 INSERT 语句里面会包含多个 value 对，这是为了后续用这个文件来写入数据的时候，执行速度可以更快。</p>\n<p>如果希望生成的文件中一条 INSERT 语句只插入一行数据的话，可以在执行 mysqldump 命令时，加上参数<code>–skip-extended-insert</code>。</p>\n</blockquote>\n<p>然后，可以通过下面这条命令，将这些 INSERT 语句放到 db2 库里去执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysql -h127.0.0.1 -P13000  -uroot db2 -e &quot;source /client_tmp/t.sql&quot;<br></code></pre></td></tr></table></figure>\n<p>source 并不是一条 SQL 语句，而是一个客户端命令</p>\n<p>mysql 客户端执行这个命令的流程是这样的：</p>\n<ol>\n<li>打开文件，默认以分号为结尾读取一条条的 SQL 语句；</li>\n<li>将 SQL 语句发送到服务端执行。</li>\n</ol>\n<p>也就是说，服务端执行的并不是这个“<code>source t.sql</code>“语句，而是 <code>INSERT</code> 语句。所以，不论是在慢查询日志（slow log），还是在 binlog，记录的都是这些要被真正执行的 INSERT 语句。</p>\n<h3 id=\"导出-CSV-文件\"><a href=\"#导出-CSV-文件\" class=\"headerlink\" title=\"导出 CSV 文件\"></a>导出 CSV 文件</h3><p>直接将结果导出成.csv 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">select * from db1.t where a&gt;900 into outfile &#x27;/server_tmp/t.csv&#x27;;<br></code></pre></td></tr></table></figure>\n<p>需要注意如下几点:</p>\n<ol>\n<li>这条语句会将结果保存在服务端。如果你执行命令的客户端和 MySQL 服务端不在同一个机器上，客户端机器的临时目录下是不会生成 t.csv 文件的。</li>\n<li><code>into outfile</code> 指定了文件的生成位置（/server_tmp/），这个位置必须受参数 <code>secure_file_priv</code> 的限制。参数 <code>secure_file_priv</code> 的可选值和作用分别是：<ol>\n<li>如果设置为 empty，表示不限制文件生成的位置，这是不安全的设置；</li>\n<li>如果设置为一个表示路径的字符串，就要求生成的文件只能放在这个指定的目录，或者它的子目录；</li>\n<li>如果设置为 NULL，就表示禁止在这个 MySQL 实例上执行 <code>select … into outfile</code> 操作。</li>\n</ol>\n</li>\n<li>这条命令不会帮你覆盖文件，因此你需要确保 /server_tmp/t.csv 这个文件不存在，否则执行语句时就会因为有同名文件的存在而报错。</li>\n<li>这条命令生成的文本文件中，原则上一个数据行对应文本文件的一行。但是，如果字段中包含换行符，在生成的文本中也会有换行符。不过类似换行符、制表符这类符号，前面都会跟上“\\”这个转义符，这样就可以跟字段之间、数据行之间的分隔符区分开。</li>\n</ol>\n<p>得到.csv 导出文件后，就可以用下面的 load data 命令将数据导入到目标表 db2.t 中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">load data infile &#x27;/server_tmp/t.csv&#x27; into table db2.t;<br></code></pre></td></tr></table></figure>\n<p>这条语句的执行流程如下所示:</p>\n<ol>\n<li>打开文件 /server_tmp/t.csv，以制表符 (\\t) 作为字段间的分隔符，以换行符（\\n）作为记录之间的分隔符，进行数据读取；</li>\n<li>启动事务</li>\n<li>判断每一行的字段数与表 db2.t 是否相同：<ol>\n<li>若不相同，则直接报错，事务回滚；</li>\n<li>若相同，则构造成一行，调用 InnoDB 引擎接口，写入到表中。</li>\n</ol>\n</li>\n<li>重复步骤 3，直到 /server_tmp/t.csv 整个文件读入完成，提交事务。</li>\n</ol>\n<blockquote>\n<p><strong>问题：如果 binlog_format=statement，这个 load 语句记录到 binlog 里以后，怎么在备库重放呢？</strong></p>\n<p>由于 /server_tmp/t.csv 文件只保存在主库所在的主机上，如果只是把这条语句原文写到 binlog 中，在备库执行的时候，备库的本地机器上没有这个文件，就会导致主备同步停止。</p>\n<p>所以，这条语句执行的完整流程，其实是下面这样的：</p>\n<ol>\n<li>主库执行完成后，将 /server_tmp/t.csv 文件的内容直接写到 binlog 文件中。</li>\n<li>往 binlog 文件中写入语句 load data local infile ‘/tmp/SQL_LOAD_MB-1-0’ INTO TABLE `db2`.`t`。</li>\n<li>把这个 binlog 日志传到备库。</li>\n<li>备库的 apply 线程在执行这个事务日志时：<ol>\n<li>先将 binlog 中 t.csv 文件的内容读出来，写入到本地临时目录 /tmp/SQL_LOAD_MB-1-0 中；</li>\n<li>再执行 load data 语句，往备库的 db2.t 表中插入跟主库相同的数据。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/article/load data 的同步流程.jpg\"><span class=\"image-caption\">load data 的同步流程</span></p>\n<p>注意，这里备库执行的 load data 语句里面，多了一个“local”。它的意思是“将执行这条命令的客户端所在机器的本地文件 /tmp/SQL_LOAD_MB-1-0 的内容，加载到目标表 db2.t 中”。</p>\n</blockquote>\n<p>load data 命令有两种用法：</p>\n<ol>\n<li>不加“local”，是读取服务端的文件，这个文件必须在 secure_file_priv 指定的目录或子目录下；</li>\n<li>加上“local”，读取的是客户端的文件，只要 mysql 客户端有访问这个文件的权限即可。这时候，MySQL 客户端会先把本地文件传给服务端，然后执行上述的 load data 流程</li>\n</ol>\n<p><code>select …into outfile</code> 方法<strong>不会生成表结构文件</strong>, 所以我们导数据时还需要单独的命令得到表结构定义。</p>\n<p>mysqldump 提供了一个<code>–tab</code> 参数，可以同时导出表结构定义文件和 csv 数据文件。这条命令的使用方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">mysqldump -h<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.982ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewbox=\"0 -791.3 3867.4 1008.6\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">host -P</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-50\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"576\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"1062\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1531\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"2115\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-50\" x=\"3115\" y=\"0\"/>\n</g>\n</svg>port -u<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"105.481ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewbox=\"0 -791.3 45415.1 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">user ---single-transaction  --set-gtid-purged=OFF db1 t --where=\"a&gt;900\" --tab=</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-75\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-73\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-72\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-61\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-63\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-64\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-70\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-46\" d=\"M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-62\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-77\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-68\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-22\" d=\"M34 634Q34 659 50 676T93 694Q121 694 144 668T168 579Q168 525 146 476T101 403T73 379Q69 379 60 388T50 401Q50 404 62 417T88 448T116 500T131 572Q131 584 130 584T125 581T112 576T94 573Q69 573 52 590T34 634ZM238 634Q238 659 254 676T297 694Q325 694 348 668T372 579Q372 525 350 476T305 403T277 379Q273 379 264 388T254 401Q254 404 266 417T292 448T320 500T335 572Q335 584 334 584T329 581T316 576T298 573Q273 573 256 590T238 634Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"572\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1042\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"1508\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"2182\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"3182\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"4183\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"5184\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"5653\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"5999\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"6599\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"7080\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"7378\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"8067\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"9068\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"9429\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"9881\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"10410\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"11011\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"11480\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-63\" x=\"12010\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"12443\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"12805\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"13150\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"13636\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"14459\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"15459\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-73\" x=\"16238\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"16707\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"17174\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"17758\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"18758\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"19239\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"19600\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"19946\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"20691\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-70\" x=\"21692\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-75\" x=\"22196\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"22768\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"23220\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"23700\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"24167\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"24968\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"26024\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-46\" x=\"26788\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-46\" x=\"27537\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-64\" x=\"28287\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"28810\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"29240\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"29740\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"30324\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"31325\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-77\" x=\"32103\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-68\" x=\"32820\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"33396\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-72\" x=\"33863\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"34314\" y=\"0\"/>\n<g transform=\"translate(35058,0)\">\n <use xlink:href=\"#E1-MJMAIN-3D\"/>\n <use xlink:href=\"#E1-MJMAIN-22\" x=\"778\" y=\"0\"/>\n</g>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"36615\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3E\" x=\"37423\" y=\"0\"/>\n<g transform=\"translate(38479,0)\">\n <use xlink:href=\"#E1-MJMAIN-39\"/>\n <use xlink:href=\"#E1-MJMAIN-30\" x=\"500\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-30\" x=\"1001\" y=\"0\"/>\n</g>\n <use xlink:href=\"#E1-MJMAIN-22\" x=\"40258\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"41036\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"42037\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"43038\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-61\" x=\"43399\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-62\" x=\"43929\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-3D\" x=\"44636\" y=\"0\"/>\n</g>\n</svg>secure_file_priv<br></code></pre></td></tr></table></figure>\n<p>这条命令会在 <code>$secure_file_priv</code> 定义的目录下，创建一个 t.sql 文件保存建表语句，同时创建一个 t.txt 文件保存 CSV 数据。</p>\n<h3 id=\"物理拷贝方法\"><a href=\"#物理拷贝方法\" class=\"headerlink\" title=\"物理拷贝方法\"></a>物理拷贝方法</h3><blockquote>\n<p><strong>问题：直接把 db1.t 表的.frm 文件和.ibd 文件拷贝到 db2 目录下，是否可行呢？</strong></p>\n<p>一个 InnoDB 表，除了包含这两个物理文件外，还需要在数据字典中注册。直接拷贝这两个文件的话，因为数据字典中没有 db2.t 这个表，系统是不会识别和接受它们的。</p>\n</blockquote>\n<p>在 MySQL 5.6 版本引入了可传输表空间(transportable tablespace) 的方法，可以通过导出 + 导入表空间的方式，实现物理拷贝表的功能。</p>\n<blockquote>\n<p>假设我们现在的目标是在 db1 库下，复制一个跟表 t 相同的表 r，具体的执行步骤如下：</p>\n<ol>\n<li>执行 <code>create table r like t</code>，创建一个相同表结构的空表；</li>\n<li>执行 <code>alter table r discard tablespace</code>，这时候 r.ibd 文件会被删除；</li>\n<li>执行 <code>flush table t for export</code>，这时候 db1 目录下会生成一个 t.cfg 文件；</li>\n<li>在 db1 目录下执行 <code>cp t.cfg r.cfg; cp t.ibd r.ibd；</code>这两个命令（这里需要注意的是，拷贝得到的两个文件，MySQL 进程要有读写权限）；</li>\n<li>执行 <code>unlock tables</code>，这时候 t.cfg 文件会被删除；</li>\n<li>执行 <code>alter table r import tablespace</code>，将这个 r.ibd 文件作为表 r 的新的表空间，由于这个文件的数据内容和 t.ibd 是相同的，所以表 r 中就有了和表 t 相同的数据。</li>\n</ol>\n<img src=\"/article/undefined/%E7%89%A9%E7%90%86%E6%8B%B7%E8%B4%9D%E8%A1%A8.jpg\" class title=\"物理拷贝表\">\n<p><strong>注意点：</strong></p>\n<ol>\n<li>在第 3 步执行完 <code>flsuh table</code> 命令之后，db1.t 整个表处于只读状态，直到执行 <code>unlock tables</code> 命令后才释放读锁；</li>\n<li>在执行 <code>import tablespace</code> 的时候，为了让文件里的表空间 id 和数据字典中的一致，会修改 r.ibd 的表空间 id。而这个表空间 id 存在于每一个数据页中。因此，如果是一个很大的文件（比如 TB 级别），每个数据页都需要修改，所以你会看到这个 import 语句的执行是需要一些时间的。当然，如果是相比于逻辑导入的方法，import 语句的耗时是非常短的。</li>\n</ol>\n</blockquote>\n<h3 id=\"三种方法的优缺点\"><a href=\"#三种方法的优缺点\" class=\"headerlink\" title=\"三种方法的优缺点\"></a>三种方法的优缺点</h3><ol>\n<li>物理拷贝的方式速度最快，尤其对于大表拷贝来说是最快的方法。如果出现误删表的情况，用备份恢复出误删之前的临时库，然后再把临时库中的表拷贝到生产库上，是恢复数据最快的方法。但是，这种方法的使用也有一定的局限性：<ol>\n<li>必须是全表拷贝，不能只拷贝部分数据；</li>\n<li>需要到服务器上拷贝数据，在用户无法登录数据库主机的场景下无法使用；</li>\n<li>由于是通过拷贝物理文件实现的，源表和目标表都是使用 InnoDB 引擎时才能使用。</li>\n</ol>\n</li>\n<li>用 mysqldump 生成包含 INSERT 语句文件的方法，可以在 where 参数增加过滤条件，来实现只导出部分数据。这个方式的不足之一是，不能使用 join 这种比较复杂的 where 条件写法。</li>\n<li>用 <code>select … into outfile</code> 的方法是最灵活的，支持所有的 SQL 写法。但，这个方法的缺点之一就是，每次只能导出一张表的数据，而且表结构也需要另外的语句单独备份。</li>\n</ol>\n<h2 id=\"grant之后要跟着flush-privileges吗？\"><a href=\"#grant之后要跟着flush-privileges吗？\" class=\"headerlink\" title=\"grant之后要跟着flush privileges吗？\"></a>grant之后要跟着flush privileges吗？</h2><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create user &#x27;ua&#x27;@&#x27;%&#x27; identified by &#x27;pa&#x27;;<br></code></pre></td></tr></table></figure>\n<p>这条语句的逻辑是创建一个用户’ua’@’%’，密码是 pa。注意，在 MySQL 里面，用户名 (user)+ 地址 (host) 才表示一个用户。</p>\n<p>这条命令做了两个动作：</p>\n<ol>\n<li>磁盘上，往 mysql.user 表里插入一行，由于没有指定权限，所以这行数据上所有表示权限的字段的值都是 N；</li>\n<li>内存里，往数组 acl_users 里插入一个 acl_user 对象，这个对象的 access 字段值为 0。</li>\n</ol>\n<p>用户 ua 在 user 表中的状态</p>\n<p><img src=\"/article/mysql.user 数据行.png\"><span class=\"image-caption\">mysql.user 数据行</span></p>\n</blockquote>\n<h3 id=\"全局权限\"><a href=\"#全局权限\" class=\"headerlink\" title=\"全局权限\"></a>全局权限</h3><p>全局权限，作用于整个 MySQL 实例，这些权限信息保存在 mysql 库的 user 表里。</p>\n<blockquote>\n<p>如果要给用户 ua 赋一个最高权限的话，语句是这么写的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">grant all privileges on *.* to &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br></code></pre></td></tr></table></figure>\n<p>这个 grant 命令做了两个动作：</p>\n<ol>\n<li>磁盘上，将 mysql.user 表里，用户’ua’@’%’这一行的所有表示权限的字段的值都修改为‘Y’；</li>\n<li>内存里，从数组 acl_users 中找到这个用户对应的对象，将 access 值（权限位）修改为二进制的“全 1”。</li>\n</ol>\n<p>在这个 grant 命令执行完成后，如果有新的客户端使用用户名 ua 登录成功，MySQL 会为新连接维护一个线程对象，然后从 acl_users 数组里查到这个用户的权限，并将权限值拷贝到这个线程对象中。之后在这个连接中执行的语句，所有关于全局权限的判断，都直接使用线程对象内部保存的权限位</p>\n</blockquote>\n<p>基于上面的分析我们可以知道：</p>\n<ol>\n<li>grant 命令对于全局权限，同时更新了磁盘和内存。命令完成后即时生效，接下来新创建的连接会使用新的权限。</li>\n<li>对于一个已经存在的连接，它的全局权限不受 grant 命令的影响。</li>\n</ol>\n<blockquote>\n<p>如果要回收上面的 grant 语句赋予的权限，可以使用下面这条命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">revoke all privileges on *.* from &#x27;ua&#x27;@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure>\n<p>这条 revoke 命令的用法与 grant 类似，做了如下两个动作：</p>\n<ol>\n<li>磁盘上，将 mysql.user 表里，用户’ua’@’%’这一行的所有表示权限的字段的值都修改为“N”；</li>\n<li>内存里，从数组 acl_users 中找到这个用户对应的对象，将 access 的值修改为 0。</li>\n</ol>\n</blockquote>\n<h3 id=\"db-权限\"><a href=\"#db-权限\" class=\"headerlink\" title=\"db 权限\"></a>db 权限</h3><p>除了全局权限，MySQL 也支持库级别的权限定义。</p>\n<blockquote>\n<p>如果要让用户 ua 拥有库 db1 的所有权限，可以执行下面这条命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">grant all privileges on db1.* to &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br></code></pre></td></tr></table></figure>\n<p>基于库的权限记录保存在 mysql.db 表中，在内存里则保存在数组 acl_dbs 中。这条 grant 命令做了如下两个动作：</p>\n<ol>\n<li>磁盘上，往 mysql.db 表中插入了一行记录，所有权限位字段设置为“Y”；</li>\n<li>内存里，增加一个对象到数组 acl_dbs 中，这个对象的权限位为“全 1”。</li>\n</ol>\n<p>这个时刻用户 ua 在 db 表中的状态:</p>\n<p><img src=\"/article/mysql.db 数据行.png\"><span class=\"image-caption\">mysql.db 数据行</span></p>\n<p>每次需要判断一个用户对一个数据库读写权限的时候，都需要遍历一次 acl_dbs 数组，根据 user、host 和 db 找到匹配的对象，然后根据对象的权限位来判断。</p>\n</blockquote>\n<p>grant 修改 db 权限的时候，是同时对磁盘和内存生效的</p>\n<p>对于全局权限，因为全局权限存储在线程对象中，所以修改用户的全局权限后，不会影响到已经存在的连接； </p>\n<p>对于数据库权限，因为acl_dbs是一个全局数组，修改用户的数据库权限，acl_dbs也会立马随之修改，线程对象可以立刻读到，所以会直接影响到已经存在的连接。</p>\n<h3 id=\"表权限和列权限\"><a href=\"#表权限和列权限\" class=\"headerlink\" title=\"表权限和列权限\"></a>表权限和列权限</h3><p>除了 db 级别的权限外，MySQL 支持更细粒度的表权限和列权限。</p>\n<p>其中，表权限定义存放在表 mysql.tables_priv 中，列权限定义存放在表 mysql.columns_priv 中。</p>\n<p>这两类权限，组合起来存放在内存的 hash 结构 column_priv_hash 中。</p>\n<blockquote>\n<p>这两类权限的赋权命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create table db1.t1(id int, a int);<br><br>grant all privileges on db1.t1 to &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br>GRANT SELECT(id), INSERT (id,a) ON mydb.mytbl TO &#x27;ua&#x27;@&#x27;%&#x27; with grant option;<br></code></pre></td></tr></table></figure>\n<p>跟 db 权限类似，这两个权限每次 grant 的时候都会修改数据表，也会同步修改内存中的 hash 结构。因此，<strong>对这两类权限的操作，也会马上影响到已经存在的连接。</strong></p>\n</blockquote>\n<h3 id=\"flush-privileges-命令\"><a href=\"#flush-privileges-命令\" class=\"headerlink\" title=\"flush privileges 命令\"></a>flush privileges 命令</h3><p><code>flush privileges</code> 命令会清空 acl_users 数组，然后从 mysql.user 表中读取数据重新加载，重新构造一个 acl_users 数组。也就是说，以数据表中的数据为准，会将全局权限内存数组重新加载一遍。</p>\n<p>对于 db 权限、表权限和列权限，MySQL 也做了这样的处理</p>\n<p>也就是说，如果内存的权限数据和磁盘数据表相同的话，不需要执行 flush privileges。而如果我们都是用 grant/revoke 语句来执行的话，内存和数据表本来就是保持同步更新的。<strong>因此，正常情况下，grant 命令之后，没有必要跟着执行 flush privileges 命令。</strong></p>\n<h3 id=\"flush-privileges-使用场景\"><a href=\"#flush-privileges-使用场景\" class=\"headerlink\" title=\"flush privileges 使用场景\"></a>flush privileges 使用场景</h3><p>当数据表中的权限数据跟内存中的权限数据不一致的时候，flush privileges 语句可以用来重建内存数据，达到一致状态。</p>\n<blockquote>\n<p>直接用 DML 语句操作系统权限表</p>\n<p><img src=\"/article/使用 flush privileges.png\"><span class=\"image-caption\">使用 flush privileges</span></p>\n<p>T3 时刻虽然已经用 delete 语句删除了用户 ua，但是在 T4 时刻，仍然可以用 ua 连接成功。原因就是，这时候内存中 acl_users 数组中还有这个用户，因此系统判断时认为用户还正常存在。</p>\n<p>在 T5 时刻执行过 flush 命令后，内存更新，T6 时刻再要用 ua 来登录的话，就会报错“无法访问”了</p>\n</blockquote>\n<h2 id=\"要不要使用分区表？\"><a href=\"#要不要使用分区表？\" class=\"headerlink\" title=\"要不要使用分区表？\"></a>要不要使用分区表？</h2><blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `t` (<br>  `ftime` datetime NOT NULL,<br>  `c` int(11) DEFAULT NULL,<br>  KEY (`ftime`)<br>) ENGINE=InnoDB DEFAULT CHARSET=latin1<br>PARTITION BY RANGE (YEAR(ftime))<br>(PARTITION p_2017 VALUES LESS THAN (2017) ENGINE = InnoDB,<br> PARTITION p_2018 VALUES LESS THAN (2018) ENGINE = InnoDB,<br> PARTITION p_2019 VALUES LESS THAN (2019) ENGINE = InnoDB,<br>PARTITION p_others VALUES LESS THAN MAXVALUE ENGINE = InnoDB);<br>insert into t values(&#x27;2017-4-1&#x27;,1),(&#x27;2018-4-1&#x27;,1);<br></code></pre></td></tr></table></figure>\n<p><img src=\"/article/表 t 的磁盘文件.png\"><span class=\"image-caption\">表 t 的磁盘文件</span></p>\n<p>在表 t 中初始化插入了两行记录，按照定义的分区规则，这两行记录分别落在 p_2018 和 p_2019 这两个分区上。</p>\n<p>这个表包含了一个.frm 文件和 4 个.ibd 文件，每个分区对应一个.ibd 文件。也就是说：</p>\n<ol>\n<li>对于引擎层来说，这是 4 个表；</li>\n<li>对于 Server 层来说，这是 1 个表。</li>\n</ol>\n</blockquote>\n<ol>\n<li>MySQL 在第一次打开分区表的时候，需要访问所有的分区；</li>\n<li>在 server 层，认为这是同一张表，因此所有分区共用同一个 MDL 锁；</li>\n<li>在引擎层，认为这是不同的表，因此 MDL 锁之后的执行过程，会根据分区表规则，只访问必要的分区。</li>\n</ol>\n<ol>\n<li>分区并不是越细越好。实际上，单表或者单分区的数据一千万行，只要没有特别大的索引，对于现在的硬件能力来说都已经是小表了。</li>\n<li>分区也不要提前预留太多，在使用之前预先创建即可。</li>\n<li>对于没有数据的历史分区，要及时的 drop 掉。</li>\n</ol>\n<h2 id=\"自增id用完怎么办？\"><a href=\"#自增id用完怎么办？\" class=\"headerlink\" title=\"自增id用完怎么办？\"></a>自增id用完怎么办？</h2><p>MySQL 里有很多自增的 id，每个自增 id 都是定义了初始值，然后不停地往上加步长。虽然自然数是没有上限的，但是在计算机里，只要定义了表示这个数的字节长度，那它就有上限。比如，无符号整型 (unsigned int) 是 4 个字节，上限就是 2<sup>32</sup>-1。</p>\n<h3 id=\"表定义自增值-id\"><a href=\"#表定义自增值-id\" class=\"headerlink\" title=\"表定义自增值 id\"></a>表定义自增值 id</h3><p>表定义的自增值达到上限后的逻辑是：再申请下一个 id 时，得到的值保持不变。</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">create table t(id int unsigned auto_increment primary key) auto_increment=4294967295;<br>insert into t values(null);<br>//成功插入一行 4294967295<br>show create table t;<br>/* CREATE TABLE `t` (<br>  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB AUTO_INCREMENT=4294967295;<br>*/<br><br>insert into t values(null);<br>//Duplicate entry &#x27;4294967295&#x27; for key &#x27;PRIMARY&#x27;<br></code></pre></td></tr></table></figure>\n<p>第一个 insert 语句插入数据成功后，这个表的 AUTO_INCREMENT 没有改变（还是 4294967295），就导致了第二个 insert 语句又拿到相同的自增 id 值，再试图执行插入语句，报主键冲突错误。</p>\n</blockquote>\n<h3 id=\"InnoDB-系统自增-row-id\"><a href=\"#InnoDB-系统自增-row-id\" class=\"headerlink\" title=\"InnoDB 系统自增 row_id\"></a>InnoDB 系统自增 row_id</h3><p>如果创建的 InnoDB 表没有指定主键，那么 InnoDB 会给你创建一个不可见的，长度为 6 个字节的 <strong>row_id</strong>。</p>\n<p>InnoDB 维护了一个全局的 ‘dict_sys.row_id’ 值，所有无主键的 InnoDB 表，每插入一行数据，都将当前的 ‘dict_sys.row_id’ 值作为要插入数据的 row_id，然后把 ‘dict_sys.row_id’ 的值加 1。</p>\n<p>实际上，在代码实现时 row_id 是一个长度为 8 字节的无符号长整型 (bigint unsigned)。但是，InnoDB 在设计时，给 row_id 留的只是 6 个字节的长度，这样写到数据表中时只放了最后 6 个字节，所以 row_id 能写到数据表中的值，就有两个特征：</p>\n<ol>\n<li><p>row_id 写入表中的值范围，是从 0 到 2<sup>48</sup>-1；</p>\n</li>\n<li><p>当 ‘dict_sys.row_id=2<sup>48</sup>‘时，如果再有插入数据的行为要来申请 row_id，拿到以后再取最后 6 个字节的话就是 0。(写入表的 row_id 是从 0 开始到 2<sup>48</sup>-1。达到上限后，下一个值就是 0，然后继续循环。)</p>\n<p>在 InnoDB 逻辑里，申请到 row_id=N 后，就将这行数据写入表中；如果表中已经存在 row_id=N 的行，新写入的行就会覆盖原有的行。</p>\n</li>\n</ol>\n<h3 id=\"Xid\"><a href=\"#Xid\" class=\"headerlink\" title=\"Xid\"></a>Xid</h3><p>MySQL 内部维护了一个全局变量 ‘global_query_id’，每次执行语句的时候将它赋值给 ‘Query_id’，然后给这个变量加 1。如果当前语句是这个事务执行的第一条语句，那么 MySQL 还会同时把 ‘Query_id’ 赋值给这个事务的 <strong>Xid</strong>。</p>\n<p>而 <strong>‘global_query_id’ 是一个纯内存变量</strong>，重启之后就清零了。所以在同一个数据库实例中，不同事务的 Xid 也是有可能相同的。但是 MySQL 重启之后会重新生成新的 binlog 文件，这就保证了，<strong>同一个 binlog 文件里，Xid 一定是惟一的</strong>。</p>\n<p>虽然 MySQL 重启不会导致同一个 binlog 里面出现两个相同的 Xid，但是如果 ‘global_query_id’ 达到上限后，就会继续从 0 开始计数。从理论上讲，还是就会出现同一个 binlog 里面出现相同 Xid 的场景。</p>\n<h3 id=\"Innodb-trx-id\"><a href=\"#Innodb-trx-id\" class=\"headerlink\" title=\"Innodb trx_id\"></a>Innodb trx_id</h3><p><strong>Xid 是由 server 层维护的</strong>。InnoDB 内部使用 Xid，就是为了能够在 InnoDB 事务和 server 之间做关联。但是，<strong>InnoDB 自己的 trx_id，是另外维护的</strong>。</p>\n<p>InnoDB 内部维护了一个 ‘max_trx_id’ 全局变量，每次需要申请一个新的 trx_id 时，就获得 ‘max_trx_id’ 的当前值，然后并将 ‘max_trx_id’ 加 1。</p>\n<p>InnoDB 数据可见性的<strong>核心思想</strong>是：每一行数据都记录了更新它的 trx_id，当一个事务读到一行数据的时候，判断这个数据是否可见的方法，就是通过事务的一致性视图与这行数据的 trx_id 做对比。</p>\n<p>对于正在执行的事务，可以从 <code>information_schema.innodb_trx</code> 表中看到事务的 trx_id。</p>\n<blockquote>\n<p><img src=\"/article/事务的 trx_id.png\"><span class=\"image-caption\">事务的 trx_id</span></p>\n<p>session B 里，从 innodb_trx 表里查出的这两个字段，第二个字段 <code>trx_mysql_thread_id</code> 就是线程 id。显示线程 id，是为了说明这两次查询看到的事务对应的线程 id 都是 5，也就是 session A 所在的线程。</p>\n<p>实际上，在 T1 时刻，session A 还没有涉及到更新，是一个只读事务。而对于只读事务，InnoDB 并不会分配 trx_id。也就是说：</p>\n<ol>\n<li>在 T1 时刻，trx_id 的值其实就是 0。而这个很大的数，只是显示用的。</li>\n<li>直到 session A 在 T3 时刻执行 insert 语句的时候，InnoDB 才真正分配了 trx_id。所以，T4 时刻，session B 查到的这个 trx_id 的值就是 1289。</li>\n</ol>\n</blockquote>\n<p>除了修改类语句外，如果在 select 语句后面加上 for update，这个事务也不是只读事务。</p>\n<ol>\n<li>update 和 delete 语句除了事务本身，还涉及到标记删除旧数据，也就是要把数据放到 purge 队列里等待后续物理删除，这个操作也会把 max_trx_id+1， 因此在一个事务中至少加 2；</li>\n<li>InnoDB 的后台操作，比如表的索引信息统计这类操作，也是会启动内部事务的，因此你可能看到，trx_id 值并不是按照加 1 递增的。</li>\n</ol>\n<blockquote>\n<p>T2 时刻查到的这个很大的数字是怎么来的呢？</p>\n</blockquote>\n<p>这个数字是每次查询的时候由系统临时计算出来的。它的算法是：把当前事务的 trx 变量的指针地址转成整数，再加上 2<sup>48</sup>。使用这个算法，就可以保证以下两点：</p>\n<ol>\n<li>因为同一个只读事务在执行期间，它的指针地址是不会变的，所以不论是在 innodb_trx 还是在 innodb_locks 表里，同一个只读事务查出来的 trx_id 就会是一样的。</li>\n<li>如果有并行的多个只读事务，每个事务的 trx 变量的指针地址肯定不同。这样，不同的并发只读事务，查出来的 trx_id 就是不同的。</li>\n<li>在显示值里面加上 2<sup>48</sup>，目的是要保证只读事务显示的 trx_id 值比较大，正常情况下就会区别于读写事务的 id。但是，trx_id 跟 row_id 的逻辑类似，定义长度也是 8 个字节。因此，在理论上还是可能出现一个读写事务与一个只读事务显示的 trx_id 相同的情况。不过这个概率很低，并且也没有什么实质危害，可以不管它。</li>\n</ol>\n<p>只读事务不分配 trx_id，有什么好处呢？</p>\n<ol>\n<li>一个好处是，这样做可以减小事务视图里面活跃事务数组的大小。因为当前正在运行的只读事务，是不影响数据的可见性判断的。所以，在创建事务的一致性视图时，InnoDB 就只需要拷贝读写事务的 trx_id。</li>\n<li>另一个好处是，可以减少 trx_id 的申请次数。在 InnoDB 里，即使你只是执行一个普通的 select 语句，在执行过程中，也是要对应一个只读事务的。所以只读事务优化后，普通的查询语句不需要申请 trx_id，就大大减少了并发事务申请 trx_id 的锁冲突。</li>\n</ol>\n<p>max_trx_id 会持久化存储，重启也不会重置为 0，那么从理论上讲，只要一个 MySQL 服务跑得足够久，就可能出现 max_trx_id 达到 2<sup>48</sup>-1 的上限，然后从 0 开始的情况。</p>\n<p>当达到这个状态后，MySQL 就会持续出现一个脏读的 bug</p>\n<blockquote>\n<p>脏读的 bug 复现</p>\n<p>首先需要把当前的 max_trx_id 先修改成 248-1。注意：这个 case 里使用的是可重复读隔离级别。</p>\n<img src=\"/article/undefined/%E5%A4%8D%E7%8E%B0%E8%84%8F%E8%AF%BB.png\" class title=\"复现脏读\">\n<p>由于已经把系统的 max_trx_id 设置成了 2<sup>48</sup>-1，所以在 session A 启动的事务 TA 的低水位就是 2<sup>48</sup>-1。</p>\n<p>在 T2 时刻，session B 执行第一条 update 语句的事务 id 就是 2<sup>48</sup>-1，而第二条 update 语句的事务 id 就是 0 了，这条 update 语句执行后生成的数据版本上的 trx_id 就是 0。</p>\n<p>在 T3 时刻，session A 执行 select 语句的时候，判断可见性发现，c=3 这个数据版本的 trx_id，小于事务 TA 的低水位，因此认为这个数据可见。</p>\n<p>但，这个是脏读。</p>\n<p>由于低水位值会持续增加，而事务 id 从 0 开始计数，就导致了系统在这个时刻之后，所有的查询都会出现脏读的。</p>\n<p>并且，MySQL 重启时 max_trx_id 也不会清 0，也就是说重启 MySQL，这个 bug 仍然存在。</p>\n</blockquote>\n<h3 id=\"thread-id\"><a href=\"#thread-id\" class=\"headerlink\" title=\"thread_id\"></a>thread_id</h3><p><strong>线程 id（thread_id）</strong>才是 MySQL 中最常见的一种自增 id。</p>\n<p>thread_id 的逻辑：系统保存了一个全局变量 ‘thread_id_counter’，每新建一个连接，就将 thread_id_counter 赋值给这个新连接的线程变量。</p>\n<p>thread_id_counter 定义的大小是 4 个字节，因此达到 2<sup>32</sup>-1 后，它就会重置为 0，然后继续增加。</p>\n<p><strong>但是，不会在 show processlist 里看到两个相同的 thread_id。</strong>因为 MySQL 设计了一个唯一数组的逻辑，给新线程分配 thread_id 的时候，逻辑代码是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">do &#123;<br>  new_id= thread_id_counter++;<br>&#125; while (!thread_ids.insert_unique(new_id).second);<br></code></pre></td></tr></table></figure>\n<p><strong>总结：</strong></p>\n<ol>\n<li>表的自增 id 达到上限后，再申请时它的值就不会改变，进而导致继续插入数据时报主键冲突的错误。</li>\n<li>row_id 达到上限后，则会归 0 再重新递增，如果出现相同的 row_id，后写的数据会覆盖之前的数据。</li>\n<li>Xid 只需要不在同一个 binlog 文件中出现重复值即可。虽然理论上会出现重复值，但是概率极小，可以忽略不计。</li>\n<li>InnoDB 的 max_trx_id 递增值每次 MySQL 重启都会被保存起来，脏读的例子就是一个必现的 bug。</li>\n<li>thread_id 是最常见的，而且也是处理得最好的一个自增 id 逻辑。</li>\n</ol>\n","categories":[{"name":"Mysql","path":"api/categories/Mysql.json"},{"name":"面试","path":"api/categories/面试.json"}],"tags":[{"name":"实习,Mysql","path":"api/tags/实习,Mysql.json"}]}