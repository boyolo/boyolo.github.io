{"title":"谈谈循环不变量","slug":"谈谈循环不变量","date":"2021-12-15T04:54:04.000Z","updated":"2021-12-16T14:50:22.440Z","comments":true,"path":"api/articles/谈谈循环不变量.json","realPath":null,"excerpt":null,"covers":null,"cover":"/images/theme/coverphoto/java.jpg","content":"<h2 id=\"循环不变量（loop-invariant）\"><a href=\"#循环不变量（loop-invariant）\" class=\"headerlink\" title=\"循环不变量（loop invariant）\"></a>循环不变量（loop invariant）</h2><p>在使用循环的算法里，可以通过循环不变量证明其正确性。</p>\n<p>所谓循环不变量是指一种在整个循环过程中保持不变的性质，它必须在以下3种情况下均保持不变，且该性质在循环终止后能证明算法的正确性。</p>\n<ol>\n<li>初始化（循环初始化后，循环条件测试前）</li>\n<li>迭代（第 n 次迭代后，第 n+1 次迭代前）</li>\n<li>结束（循环终止即循环条件判断为 false 时）</li>\n</ol>\n<h3 id=\"二分法理解循环不变量\"><a href=\"#二分法理解循环不变量\" class=\"headerlink\" title=\"二分法理解循环不变量\"></a>二分法理解循环不变量</h3><p>题目：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。<br>请必须使用时间复杂度为 O(log n) 的算法。<br><br>示例 1:<br>输入: nums = [1,3,5,6], target = 5<br>输出: 2<br><br>示例 2:<br>输入: nums = [1,3,5,6], target = 2<br>输出: 1<br><br>示例 3:<br>输入: nums = [1,3,5,6], target = 7<br>输出: 4<br><br>示例 4:<br>输入: nums = [1,3,5,6], target = 0<br>输出: 0<br><br>示例 5:<br>输入: nums = [1], target = 0<br>输出: 0<br><br>提示:<br>1 &lt;= nums.length &lt;= 104<br>-104 &lt;= nums[i] &lt;= 104<br>nums 为无重复元素的升序排列数组<br>-104 &lt;= target &lt;= 104<br><br>Related Topics<br>数组<br>二分查找<br></code></pre></td></tr></table></figure>\n<p>我自己的理解：使用二分法一直盯着right，保持循环不变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>      \t<span class=\"hljs-comment\">//定义target在左闭右闭合的区间范围里。</span><br>        <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right = nums.length - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">//由于target在一个闭合区间里，那么left=right的时候式子也成立，当left&gt;right的时候式子不成立，则可以推出，while()循环条件是</span><br>        <span class=\"hljs-comment\">//left&lt;=right（取补集）。注意这里很容易错，一定要注意推到。</span><br>        <span class=\"hljs-comment\">//就是循环不变式满足：如果在循环的每一步，这个式子都是正确的，那么循环结束后，这个式子也正确。</span><br>        <span class=\"hljs-comment\">//此问题中初始化时定义区间为[0,nums.length - 1],那么根据循环不变量原理则在循环的整个过程中这种模式是不变的</span><br>        <span class=\"hljs-comment\">//都是闭区间的模式。我们可以根据此检验代码的正确性。</span><br>        <span class=\"hljs-comment\">//因为left，right是闭合区间，所以left和right是可以取到的</span><br>        <span class=\"hljs-keyword\">while</span>(left &lt;= right)&#123;<br>            <span class=\"hljs-keyword\">int</span> middle = left + (right - left) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span>(target &gt;nums[middle] )&#123;<br>                <span class=\"hljs-comment\">//如果要找的数比中间值大，说明在区间右边。根据循环不变式，那么当改变left指针的时候，其也是左边闭合的</span><br>                <span class=\"hljs-comment\">//此时left的值应该能被取到，因此left=middle+1</span><br>                left=middle+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target &lt; nums[middle] )&#123;<br>                right=middle-<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//同理，right的值也能被取到</span><br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target == nums[middle] )&#123;<br>                <span class=\"hljs-keyword\">return</span>  middle;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span>  right+<span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right = nums.length;<span class=\"hljs-comment\">//注意此处定义的右边为数组的长度，因此其右端点的值是取不到的</span><br>        <span class=\"hljs-comment\">//也就是左闭右开区间[left,right)，因此left!=right，当left大于等于right的时候循环结束</span><br>        <span class=\"hljs-comment\">//循环中的条件为left&lt;right</span><br>        <span class=\"hljs-keyword\">while</span>(left &lt;right)&#123;<br>            <span class=\"hljs-keyword\">int</span> middle = left + ((right - left) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-keyword\">if</span>(target &gt;nums[middle] )&#123;<br>                <span class=\"hljs-comment\">//如果要找的数比中间值大，说明在区间右边。根据循环不变式，那么当改变left指针的时候，其也是左边闭合的</span><br>                <span class=\"hljs-comment\">//此时left的值应该能被取到，因此left=middle+1</span><br>                left=middle+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target &lt; nums[middle] )&#123;<br>                <span class=\"hljs-comment\">//当要找的值比中间值小的时候，说明区间在左边，由于是左闭右开的区间，所以右端点</span><br>                <span class=\"hljs-comment\">//不能被取到，如果当right=middle-1时候，值是有可能取到的，当right=middle时候</span><br>                <span class=\"hljs-comment\">//由于要找的值是比middle小的，所以是不能被取到的，根据循环不变量原理区间是[0,right)</span><br>                <span class=\"hljs-comment\">//right为middle时候取不到</span><br>                right=middle;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target == nums[middle] )&#123;<br>                <span class=\"hljs-keyword\">return</span>  middle;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//注意此时返回的是right</span><br>        <span class=\"hljs-keyword\">return</span>  right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","more":"<h2 id=\"循环不变量（loop-invariant）\"><a href=\"#循环不变量（loop-invariant）\" class=\"headerlink\" title=\"循环不变量（loop invariant）\"></a>循环不变量（loop invariant）</h2><p>在使用循环的算法里，可以通过循环不变量证明其正确性。</p>\n<p>所谓循环不变量是指一种在整个循环过程中保持不变的性质，它必须在以下3种情况下均保持不变，且该性质在循环终止后能证明算法的正确性。</p>\n<ol>\n<li>初始化（循环初始化后，循环条件测试前）</li>\n<li>迭代（第 n 次迭代后，第 n+1 次迭代前）</li>\n<li>结束（循环终止即循环条件判断为 false 时）</li>\n</ol>\n<h3 id=\"二分法理解循环不变量\"><a href=\"#二分法理解循环不变量\" class=\"headerlink\" title=\"二分法理解循环不变量\"></a>二分法理解循环不变量</h3><p>题目：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。<br>请必须使用时间复杂度为 O(log n) 的算法。<br><br>示例 1:<br>输入: nums = [1,3,5,6], target = 5<br>输出: 2<br><br>示例 2:<br>输入: nums = [1,3,5,6], target = 2<br>输出: 1<br><br>示例 3:<br>输入: nums = [1,3,5,6], target = 7<br>输出: 4<br><br>示例 4:<br>输入: nums = [1,3,5,6], target = 0<br>输出: 0<br><br>示例 5:<br>输入: nums = [1], target = 0<br>输出: 0<br><br>提示:<br>1 &lt;= nums.length &lt;= 104<br>-104 &lt;= nums[i] &lt;= 104<br>nums 为无重复元素的升序排列数组<br>-104 &lt;= target &lt;= 104<br><br>Related Topics<br>数组<br>二分查找<br></code></pre></td></tr></table></figure>\n<p>我自己的理解：使用二分法一直盯着right，保持循环不变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>      \t<span class=\"hljs-comment\">//定义target在左闭右闭合的区间范围里。</span><br>        <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right = nums.length - <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-comment\">//由于target在一个闭合区间里，那么left=right的时候式子也成立，当left&gt;right的时候式子不成立，则可以推出，while()循环条件是</span><br>        <span class=\"hljs-comment\">//left&lt;=right（取补集）。注意这里很容易错，一定要注意推到。</span><br>        <span class=\"hljs-comment\">//就是循环不变式满足：如果在循环的每一步，这个式子都是正确的，那么循环结束后，这个式子也正确。</span><br>        <span class=\"hljs-comment\">//此问题中初始化时定义区间为[0,nums.length - 1],那么根据循环不变量原理则在循环的整个过程中这种模式是不变的</span><br>        <span class=\"hljs-comment\">//都是闭区间的模式。我们可以根据此检验代码的正确性。</span><br>        <span class=\"hljs-comment\">//因为left，right是闭合区间，所以left和right是可以取到的</span><br>        <span class=\"hljs-keyword\">while</span>(left &lt;= right)&#123;<br>            <span class=\"hljs-keyword\">int</span> middle = left + (right - left) / <span class=\"hljs-number\">2</span>;<br>            <span class=\"hljs-keyword\">if</span>(target &gt;nums[middle] )&#123;<br>                <span class=\"hljs-comment\">//如果要找的数比中间值大，说明在区间右边。根据循环不变式，那么当改变left指针的时候，其也是左边闭合的</span><br>                <span class=\"hljs-comment\">//此时left的值应该能被取到，因此left=middle+1</span><br>                left=middle+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target &lt; nums[middle] )&#123;<br>                right=middle-<span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//同理，right的值也能被取到</span><br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target == nums[middle] )&#123;<br>                <span class=\"hljs-keyword\">return</span>  middle;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span>  right+<span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">searchInsert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums, <span class=\"hljs-keyword\">int</span> target)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">int</span> right = nums.length;<span class=\"hljs-comment\">//注意此处定义的右边为数组的长度，因此其右端点的值是取不到的</span><br>        <span class=\"hljs-comment\">//也就是左闭右开区间[left,right)，因此left!=right，当left大于等于right的时候循环结束</span><br>        <span class=\"hljs-comment\">//循环中的条件为left&lt;right</span><br>        <span class=\"hljs-keyword\">while</span>(left &lt;right)&#123;<br>            <span class=\"hljs-keyword\">int</span> middle = left + ((right - left) &gt;&gt; <span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-keyword\">if</span>(target &gt;nums[middle] )&#123;<br>                <span class=\"hljs-comment\">//如果要找的数比中间值大，说明在区间右边。根据循环不变式，那么当改变left指针的时候，其也是左边闭合的</span><br>                <span class=\"hljs-comment\">//此时left的值应该能被取到，因此left=middle+1</span><br>                left=middle+<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target &lt; nums[middle] )&#123;<br>                <span class=\"hljs-comment\">//当要找的值比中间值小的时候，说明区间在左边，由于是左闭右开的区间，所以右端点</span><br>                <span class=\"hljs-comment\">//不能被取到，如果当right=middle-1时候，值是有可能取到的，当right=middle时候</span><br>                <span class=\"hljs-comment\">//由于要找的值是比middle小的，所以是不能被取到的，根据循环不变量原理区间是[0,right)</span><br>                <span class=\"hljs-comment\">//right为middle时候取不到</span><br>                right=middle;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(target == nums[middle] )&#123;<br>                <span class=\"hljs-keyword\">return</span>  middle;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//注意此时返回的是right</span><br>        <span class=\"hljs-keyword\">return</span>  right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"循环不变量","path":"api/categories/循环不变量.json"}],"tags":[{"name":"循环不变量","path":"api/tags/循环不变量.json"}]}