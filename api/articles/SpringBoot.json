{"title":"SpringBoot（基础配置及原理）","slug":"SpringBoot","date":"2022-02-07T09:45:29.000Z","updated":"2022-02-21T05:56:50.626Z","comments":true,"path":"api/articles/SpringBoot.json","realPath":null,"excerpt":null,"covers":["/article/33757/image-20220210171223244.png","/article/33757/%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB.png","/article/33757/1544595010-1.png"],"cover":"/images/theme/coverphoto/Springboot.jpg","content":"<blockquote>\n<p>The scabbard is content to be dull when it protects the keenness of the sword.</p>\n<p>刀鞘保护刀的锋利，它自己则满足于它的迟钝。</p>\n</blockquote>\n<h2 id=\"SpringBoot（基础配置及原理）\"><a href=\"#SpringBoot（基础配置及原理）\" class=\"headerlink\" title=\"SpringBoot（基础配置及原理）\"></a>SpringBoot（基础配置及原理）</h2><p>什么是<a href=\"/article/18155.html\" title=\"Spring\">Spring</a>?</p>\n<h3 id=\"什么是SpringBoot？\"><a href=\"#什么是SpringBoot？\" class=\"headerlink\" title=\"什么是SpringBoot？\"></a>什么是SpringBoot？</h3><p><a href=\"https://spring.io/projects/spring-boot\">SpringBoot官方网站</a></p>\n<p>SpringBoot 是 Pivotal 团队在 Spring 的基础上提供的一套全新的开源框架，其目的是为了简化 Spring 应用的搭建和开发过程。SpringBoot 去除了大量的 XML 配置文件，简化了复杂的依赖管理。</p>\n<p>SpringBoot 具有 Spring 一切优秀特性，Spring 能做的事，SpringBoot 都可以做，而且使用更加简单，功能更加丰富，性能更加稳定而健壮。随着近些年来微服务技术的流行，Spring Boot 也成了时下炙手可热的技术。</p>\n<p>SpringBoot 集成了大量常用的第三方库配置，SpringBoot 应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 SpringBoot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。 </p>\n<p><strong>特点</strong></p>\n<p>Spring Boot 具有以下特点：</p>\n<ol>\n<li><p>独立运行的 Spring 项目</p>\n<p>SpringBoot 可以以 jar 包的形式独立运行，SpringBoot 项目只需通过命令“ java–jar xx.jar” 即可运行。</p>\n</li>\n<li><p>内嵌 Servlet 容器</p>\n<p>SpringBoot 使用嵌入式的 Servlet 容器（例如 Tomcat、Jetty 或者 Undertw 等），应用无需打成 WAR 包 。</p>\n</li>\n<li><p>提供 starter 简化 Maven 配置</p>\n<p>Spring Boot 提供了一系列的“starter”项目对象模型（POMS）来简化 Maven 配置。</p>\n</li>\n<li><p>提供了大量的自动配置</p>\n<p>SpringBoot 提供了大量的默认自动配置，来简化项目的开发，开发人员也通过配置文件修改默认配置。</p>\n</li>\n<li><p>自带应用监控</p>\n<p>Spring Boot 可以对正在运行的项目提供监控。</p>\n</li>\n<li><p>无代码生成和 xml 配置</p>\n<p>SpringBoot 不需要任何 xml 配置即可实现 Spring 的所有配置。</p>\n</li>\n</ol>\n<p><strong>配置</strong></p>\n<p><strong>maven中导入配置：</strong>spring-boot-starter-web、spring-boot-starter-test</p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot配置\">点击跳转SpringBoot配置</a>\n<p>spring-boot-starter-web用于实现HTTP接口（该依赖中包含了SpringMVC）</p>\n<p>spring-boot-starter-test用于编写单元测试的依赖包</p>\n<h3 id=\"什么是微服务？\"><a href=\"#什么是微服务？\" class=\"headerlink\" title=\"什么是微服务？\"></a>什么是微服务？</h3><p>一种软件开发技术-面向服务的体系结构（SOA）架构样式的一种变体，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。</p>\n<p>每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。</p>\n<p>每个服务都围绕着具体业务进行构建，并且能够独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据上下文，选择合适的语言、工具对其进行构建。</p>\n<h3 id=\"SpringBoot自动装配原理\"><a href=\"#SpringBoot自动装配原理\" class=\"headerlink\" title=\"SpringBoot自动装配原理\"></a>SpringBoot自动装配原理</h3><h4 id=\"SpringFactories-机制\"><a href=\"#SpringFactories-机制\" class=\"headerlink\" title=\"SpringFactories 机制\"></a>SpringFactories 机制</h4><p>SpringBoot 的自动配置是基于 SpringFactories 机制实现的。</p>\n<p>SpringFactories 机制是 SpringBoot 中的一种服务发现机制，这种扩展机制与 Java SPI 机制十分相似。SpringBoot 会自动扫描所有 Jar 包类路径下 <code>META-INF/spring.factories</code> 文件，并读取其中的内容，进行实例化，这种机制也是 Spring-Boot-Starter 的基础。</p>\n<p><strong>自动配置的生效和修改</strong></p>\n<p>spring.factories 文件中的所有自动配置类（xxxAutoConfiguration），都是必须在一定的条件下才会作为组件添加到容器中，配置的内容才会生效。这些限制条件在 SpringBoot 中以 @Conditional 派生注解的形式体现。</p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot自动配置注解\">点击跳转SpringBoot自动配置注解</a>\n<p><strong>spring.factories</strong></p>\n<p>spring.factories 文件本质上与 properties 文件相似，其中包含一组或多组键值对（key=vlaue），其中，key 的取值为接口的完全限定名；value 的取值为接口实现类的完全限定名，一个接口可以设置多个实现类，不同实现类之间使用“，”隔开。</p>\n<img src=\"/article/33757/image-20220210171223244.png\" class title=\"image-20220210171223244\">\n<p><strong>SpringFactories 实现原理</strong></p>\n<p>spring-core 包里定义了 SpringFactoriesLoader 类，这个类会扫描所有 Jar 包类路径下的 META-INF/spring.factories 文件，并获取指定接口的配置。在 SpringFactoriesLoader 类中定义了两个对外的方法，如下表。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回值</th>\n<th>方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><T>List<T></T></T></td>\n<td>loadFactories(Class<T> factoryType, @Nullable ClassLoader classLoader)</T></td>\n<td style=\"text-align:left\">静态方法； <br>根据接口获取其实现类的实例； 该方法返回的是实现类对象列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">List<String></String></td>\n<td>loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</td>\n<td style=\"text-align:left\">公共静态方法； <br>根据接口l获取其实现类的名称； 该方法返回的是实现类的类名的列表</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"SpringBoot自动装配流程\"><a href=\"#SpringBoot自动装配流程\" class=\"headerlink\" title=\"SpringBoot自动装配流程\"></a>SpringBoot自动装配流程</h4><ol>\n<li><p><strong>spring-boot-dependencies</strong>:核心依赖在父工程中</p>\n</li>\n<li><p><strong>启动器</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--SpringBoot 的启动场景--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>SpringBoot会将所有的功能场景，都变成一个个的启动器。</p>\n<p>要使用什么功能只要找到对应的启动器即可。</p>\n<p>如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--要使用什么功能，就启动对应的启动器--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>主程序</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Springboot01HelloworldApplication</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    SpringApplication.run(Springboot01HelloworldApplication.class, args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p><code>@SpringBootApplication</code>注解</p>\n<p>标注这个类是一个springboot应用  启动类下的所有资源被导入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@SpringBootConfiguration</span><br><span class=\"hljs-meta\">@EnableAutoConfiguration</span><br><span class=\"hljs-meta\">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class=\"hljs-meta\">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> SpringBootApplication &#123;&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li><p><strong>@SpringBootConfiguration</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Configuration</span>  <span class=\"hljs-comment\">//Spring配置类，说明这也是一个组件</span><br><span class=\"hljs-meta\">@Indexed</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> SpringBootConfiguration &#123;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>@EnableAutoConfiguration</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@AutoConfigurationPackage</span>  <span class=\"hljs-comment\">//自动配置包</span><br><span class=\"hljs-meta\">@Import(AutoConfigurationImportSelector.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableAutoConfiguration &#123;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>@EnableAutoConfiguration</strong></p>\n<ol>\n<li><p><strong>@AutoConfigurationPackage</strong>：扫描并注册我们自己写的java类到spring容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> AutoConfigurationPackage &#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>向容器中导入了一个AutoConfigurationPackages.Registrar的实例对象</p>\n<blockquote>\n<p><strong>AutoConfigurationPackages.Registrar</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Registrar</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ImportBeanDefinitionRegistrar</span>, <span class=\"hljs-title\">DeterminableImports</span> </span>&#123;<br>\t\t<span class=\"hljs-meta\">@Override</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerBeanDefinitions</span><span class=\"hljs-params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;<br>\t\t\tregister(registry, <span class=\"hljs-keyword\">new</span> PackageImports(metadata).getPackageNames().toArray(<span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">0</span>]));<br>\t\t&#125;<br>\t\t...<br>\t&#125;<br></code></pre></td></tr></table></figure>\n<p>其中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">register(registry, <span class=\"hljs-keyword\">new</span> PackageImports(metadata).getPackageNames().toArray(<span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">0</span>]));<br></code></pre></td></tr></table></figure>\n<p>其实就是完成了我们自己写的类的扫描。</p>\n<p>获取到的是指定扫描包的路径，如果未明确指定，默认为主启动类所在的包名。</p>\n</blockquote>\n</li>\n<li><p><strong>@Import(AutoConfigurationImportSelector.class)</strong>：注册springboot提供的自动配置类到spring容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AutoConfigurationImportSelector</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DeferredImportSelector</span>, <span class=\"hljs-title\">BeanClassLoaderAware</span>,</span><br><span class=\"hljs-class\">      <span class=\"hljs-title\">ResourceLoaderAware</span>, <span class=\"hljs-title\">BeanFactoryAware</span>, <span class=\"hljs-title\">EnvironmentAware</span>, <span class=\"hljs-title\">Ordered</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>将springboot提供好的自动配置装载进spring容器</p>\n<blockquote>\n<p><strong>AutoConfigurationImportSelector</strong></p>\n<p>将springboot提供好的自动配置装载进spring容器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AutoConfigurationEntry <span class=\"hljs-title\">getAutoConfigurationEntry</span><span class=\"hljs-params\">(AnnotationMetadata annotationMetadata)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>这个方法是获取所有的自动配置类的实体</p>\n<p>spring-boot在启动时，默认就装载了springboot写好的127个自动配置类实体(spring.factories)，但是并没有启用，只有在引入相关依赖包的时候，这些自动配置才真正被启用，这种按需加载的原理是基于条件注解实现的</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>SpringApplication.run(Springboot01HelloworldApplication.class, args); </p>\n<img src=\"/article/33757/%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB.png\" class title=\"主启动类\">\n<p><a href=\"https://blog.csdn.net/qq_42261668/article/details/103029333\">原理剖析</a></p>\n<ol>\n<li><p>run方法</p>\n<p>大多数应用程序上下文(如果不是全部的话)将实现SPI（服务提供者）接口。</p>\n<p>这里<strong>封装了配置和生命周期方法</strong>，以避免它们被ApplicationContext客户端代码发现（避免配置文件被公开给使用者）。目前的方法只能在启动和关闭代码中使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ConfigurableApplicationContext <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(String... args)</span> </span>&#123;···&#125;<br>---------------------------------------------------------<br><span class=\"hljs-comment\">//可配置的应用上下文</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ConfigurableApplicationContext <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(Class&lt;?&gt; primarySource,String... args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//重载传入 将要被加载的类放到一个对应的CLASS数组中</span><br>    <span class=\"hljs-keyword\">return</span> run(<span class=\"hljs-keyword\">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);<br>  &#125;<br>  ---------------------------------------------------------<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ConfigurableApplicationContext <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(Class&lt;?&gt;[] primarySources,String[] args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//创建一个启动类传入</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SpringApplication(primarySources).run(args);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>run()方法启动Spring应用，实质上是为Spring应用创建并初始化Spring上下文</p>\n<blockquote>\n<ol>\n<li>推断应用的类型是普通的项目还是Web项目</li>\n<li>查找并加载所有可用初始化器，设置到initializers属性中</li>\n<li>找出所有的应用程序监听器，设置到listeners属性中</li>\n<li>推断并设置main方法的定义类，找到运行的主类</li>\n</ol>\n</blockquote>\n<p>在启动时会加载三个jar将其对应的spring.factories工厂文件的接口实现类到MultiValueMap集合当中，并将对应加载器作为key,接口实现类作为value放到缓存当中</p>\n<ul>\n<li>spring-boot-2.1.3.RELEASE.jar!/META-INF/spring.factories</li>\n<li>spring-boot-autocinfiggure-2.1.3.RELEASE.jar!/META-INF/spring.factories</li>\n<li>spring-bean-5.1.5.RELEASE.jar!/META-INF/spring.factories</li>\n</ul>\n<blockquote>\n<p><strong>执行流程：</strong></p>\n<ol>\n<li><p>初始化监听器，以及添加到SpringApplication的自定义监听器;</p>\n</li>\n<li><p>发布ApplicationStartedEvent事件;</p>\n</li>\n<li><p>装配参数和环境，确定是web环境还是非web环境;</p>\n</li>\n<li><p>装配完环境后，就触发ApplicationEnvironmentPreparedEvent事件;</p>\n</li>\n<li><p>如果SpringApplication的showBanner属性被设置为true，则打印启动的Banner;</p>\n</li>\n<li><p>创建ApplicationContext，会根据是否是web环境，来决定创建什么类型的ApplicationContext;</p>\n</li>\n<li><p>装配Context的环境变量，注册Initializers、beanNameGenerator等;</p>\n</li>\n<li><p>发布ApplicationPreparedEvent事件;</p>\n</li>\n<li><p>注册springApplicationArguments、springBootBanner，加载资源等;</p>\n</li>\n<li><p>遍历调用所有SpringApplicationRunListener的contextLoaded()方法;</p>\n</li>\n<li><p>调用ApplicationContext的refresh()方法,装配context beanfactory等非常重要的核心组件;</p>\n</li>\n<li><p>查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们;</p>\n</li>\n<li><p>发布ApplicationReadyEvent事件，启动完毕，表示服务已经可以开始正常提供服务了。通常我们这里会监听这个事件来打印一些监控性质的日志，表示应用正常启动了。</p>\n</li>\n</ol>\n<p>SpringBoot会触发其他的一些事件，这些事件按下列顺序触发：</p>\n<p>（1）ApplicationStartingEvent：项目刚启动时触发，此时除了注册监听器和初始器之外，其他所有处理都没有开始；</p>\n<p>（2）ApplicationEnvironmentPreparedEvent：上下文得到环境信息之后触发，此时上下文创建还没有创建；</p>\n<p>（3）ApplicationPreparedEvent：bean的定义信息加载完成之后触发，此时bean还没有初始化；</p>\n<p>（4）ApplicationReadyEvent：在所有bean初始化完毕，所有回调处理完成，系统准备处理服务请求时触发；</p>\n<p>（5）ApplicationFailedEvent：启动过程出现异常时候触发。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>2. **SpringApplication构造器**\n\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SpringApplication</span><span class=\"hljs-params\">(Class&lt;?&gt;... primarySources)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-keyword\">null</span>, primarySources);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SpringApplication</span><span class=\"hljs-params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;<br>  <span class=\"hljs-comment\">//null</span><br>  <span class=\"hljs-keyword\">this</span>.resourceLoader = resourceLoader;<br>  <span class=\"hljs-comment\">//断言  PrimarySources 不能为空</span><br>  Assert.notNull(primarySources, <span class=\"hljs-string\">&quot;PrimarySources must not be null&quot;</span>);<br>  <span class=\"hljs-comment\">//将传过来对象数组放到集合中 并为primarySources 赋值</span><br>  <span class=\"hljs-keyword\">this</span>.primarySources = <span class=\"hljs-keyword\">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));<br>  <span class=\"hljs-comment\">//推断webApplicationType 的枚举类型 一般都是SERVLET 标准webservice</span><br>  <span class=\"hljs-keyword\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>  <span class=\"hljs-comment\">//设置初始化器 读取一些控制器 </span><br>  <span class=\"hljs-comment\">//获取实现了ApplicationContextInitializer初始化器的工厂并将其实例化 读取相应的一些控制器</span><br>  setInitializers((Collection) getSpringFactoriesInstances(<br>    ApplicationContextInitializer.class));<br>  <span class=\"hljs-comment\">//设置监听器 流程同上</span><br>  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br>  <span class=\"hljs-comment\">//存储带有main方法的启动对象（本例MyApplication）</span><br>  <span class=\"hljs-comment\">//deduceMainApplicationClass 获取推断主应用类 获取对应的MyApplication.class</span><br>  <span class=\"hljs-keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n   [构造方法内容详解](https://blog.csdn.net/qq_42261668/article/details/103029333)\n</code></pre><h3 id=\"yaml\"><a href=\"#yaml\" class=\"headerlink\" title=\"yaml\"></a>yaml</h3><p>SpringBoot 提供了大量的自动配置，极大地简化了spring 应用的开发过程，当用户创建了一个 SpringBoot 项目后，即使不进行任何配置，该项目也能顺利的运行起来。当然，用户也可以根据自身的需要使用配置文件修改 SpringBoot 的默认设置。</p>\n<p>SpringBoot 默认使用以下 2 种全局的配置文件，其文件名是固定的。</p>\n<ul>\n<li>application.properties</li>\n<li>application.yml</li>\n</ul>\n<p>YAML 全称 YAML Ain’t Markup Language，它是一种以数据为中心的标记语言，比 XML 和 JSON 更适合作为配置文件。</p>\n<p>想要使用 YAML 作为属性配置文件（以 .yml 或 .yaml 结尾），需要将 SnakeYAML 库添加到 classpath 下，SpringBoot 中的 spring-boot-starter-web 或 spring-boot-starter 都对 SnakeYAML 库做了集成， 只要项目中引用了这两个 Starter 中的任何一个，SpringBoot 会自动添加 SnakeYAML 库到 classpath 下。</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a><strong>语法</strong></h4><p><strong>YAML 的语法如下：</strong></p>\n<ul>\n<li>使用缩进表示层级关系。</li>\n<li>缩进时不允许使用 Tab 键，只允许使用空格。</li>\n<li>缩进的空格数不重要，但同级元素必须左侧对齐。</li>\n<li>大小写敏感。</li>\n<li>‘#’表示注释</li>\n</ul>\n<p><strong>YAML 支持以下三种数据结构：</strong></p>\n<ul>\n<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>\n<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>\n<li>字面量：单个的、不可拆分的值</li>\n</ul>\n<p><strong>YAML 字面量写法</strong></p>\n<p>字面量是指单个的，不可拆分的值，例如：数字、字符串、布尔值、以及日期等。</p>\n<p>字面量直接写在键值对的“value<strong>”</strong>中即可，且默认情况下字符串是不需要使用单引号或双引号的。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">boolean:</span> <br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-literal\">TRUE</span>  <span class=\"hljs-comment\">#true,True都可以</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-literal\">FALSE</span>  <span class=\"hljs-comment\">#false，False都可以</span><br><span class=\"hljs-attr\">float:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">3.14</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">6.8523015e+5</span>  <span class=\"hljs-comment\">#可以使用科学计数法</span><br><span class=\"hljs-attr\">int:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">123</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">0b1010_0111_0100_1010_1110</span>    <span class=\"hljs-comment\">#二进制表示</span><br><span class=\"hljs-attr\">null:</span><br>    <span class=\"hljs-attr\">nodeName:</span> <span class=\"hljs-string\">&#x27;node&#x27;</span><br>    <span class=\"hljs-attr\">parent:</span> <span class=\"hljs-string\">~</span>  <span class=\"hljs-comment\">#使用~表示null</span><br><span class=\"hljs-attr\">string:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">哈哈</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;Hello world&#x27;</span>  <span class=\"hljs-comment\">#可以使用双引号或者单引号包裹特殊字符</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">newline</span><br>      <span class=\"hljs-string\">newline2</span>    <span class=\"hljs-comment\">#字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class=\"hljs-attr\">date:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">2018-02-17</span>    <span class=\"hljs-comment\">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class=\"hljs-attr\">datetime:</span> <br>    <span class=\"hljs-bullet\">-</span>  <span class=\"hljs-number\">2018-02-17T15:02:31+08:00</span>    <span class=\"hljs-comment\">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></code></pre></td></tr></table></figure>\n<p><strong>YAML 对象写法</strong></p>\n<p>在 YAML 中，对象可能包含多个属性，每一个属性都是一对键值对。<br>YAML 为对象提供了 2 种写法：</p>\n<p>普通写法，使用缩进表示对象与属性的层级关系。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">key:</span> <br> <span class=\"hljs-attr\">child-key:</span> <span class=\"hljs-string\">value</span><br> <span class=\"hljs-attr\">child-key2:</span> <span class=\"hljs-string\">value2</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">?</span>  <br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexkey1</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexkey2</span><br><span class=\"hljs-string\">:</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexvalue1</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexvalue2</span><br><span class=\"hljs-comment\">#对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]</span><br></code></pre></td></tr></table></figure>\n<p>行内写法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">website:</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">bianchengbang</span>,<span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">www.biancheng.net</span>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>YAML 数组写法</strong></p>\n<p>YAML 使用“-”表示数组中的元素，普通写法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">A</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">B</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">C</span><br></code></pre></td></tr></table></figure>\n<p>行内写法</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">key</span>:<span class=\"hljs-meta\"> [value1, value2, ...]</span><br></code></pre></td></tr></table></figure>\n<p><strong>复合结构</strong></p>\n<p>以上三种数据结构可以任意组合使用，以实现不同的用户需求</p>\n<p><strong>引用</strong></p>\n<p><strong>&amp;</strong> 锚点和 <strong>*</strong> 别名，可以用来引用:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">defaults:</span> <span class=\"hljs-meta\">&amp;defaults</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br><br><span class=\"hljs-attr\">development:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_development</span><br>  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*defaults</span><br><br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_test</span><br>  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*defaults</span><br></code></pre></td></tr></table></figure>\n<p>相当于：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">defaults:</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br><br><span class=\"hljs-attr\">development:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_development</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br><br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_test</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br></code></pre></td></tr></table></figure>\n<p><strong>&amp;</strong> 用来建立锚点（defaults），<strong>&lt;&lt;</strong> 表示合并到当前数据，<strong>*</strong> 用来引用锚点。</p>\n<p><strong>YAML 组织结构</strong></p>\n<p>YAML 文件可以由一或多个文档组成（也即相对独立的组织结构组成），文档间使用“—”（三个横线）在每文档开始作为分隔符,且个文档相互独立，互不干扰。同时，文档也可以使用“…”（三个点号）作为结束符（可选）。如果只是单个文档，分隔符“—”可省略。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">---website:</span>  <span class=\"hljs-attr\">name: bianchengbang  url:</span> <span class=\"hljs-string\">www.biancheng.net</span><br><span class=\"hljs-string\">---website:</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">bianchengbang</span>,<span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">www.biancheng.net</span>&#125;<span class=\"hljs-attr\">pets:  -dog  -cat  -pig---pets:</span> [<span class=\"hljs-string\">dog</span>,<span class=\"hljs-string\">cat</span>,<span class=\"hljs-string\">pig</span>]<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&quot;zhangsan \\n lisi&quot;</span><span class=\"hljs-string\">---name:</span> <span class=\"hljs-string\">&#x27;zhangsan \\n lisi&#x27;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"给属性赋值\"><a href=\"#给属性赋值\" class=\"headerlink\" title=\"给属性赋值\"></a>给属性赋值</h4><p><strong>@ConfigurationProperties</strong>：告诉 SpringBoot 将本类中的所有属性和配置文件中相关的配置进行绑定；</p>\n<p>prefix = “ClassName”：配置文件中哪个下面的所有属性进行一一映射</p>\n<p>例：</p>\n<ol>\n<li><p>在全局配置文件 application.yml 中添加以下自定义属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">person:</span><br>  <span class=\"hljs-attr\">lastName:</span> <span class=\"hljs-string\">bobo</span><br>  <span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">18</span><br>  <span class=\"hljs-attr\">boss:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">birth:</span> <span class=\"hljs-number\">1997</span><span class=\"hljs-string\">/07/09</span><br>  <span class=\"hljs-attr\">maps:</span> &#123; <span class=\"hljs-attr\">k1:</span> <span class=\"hljs-string\">v1</span>,<span class=\"hljs-attr\">k2:</span> <span class=\"hljs-number\">12</span> &#125;<br>  <span class=\"hljs-attr\">lists:</span><br>    <span class=\"hljs-string\">‐</span> <span class=\"hljs-number\">111</span><br>    <span class=\"hljs-string\">‐</span> <span class=\"hljs-number\">222</span><br>  <span class=\"hljs-attr\">dog:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">旺财</span><br>    <span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个名为 Person 的实体类，并将配置文件中的属性映射到这个实体类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 将配置文件中配置的每一个属性的值，映射到这个组件中</span><br><span class=\"hljs-comment\">* 只有这个组件是容器中的组件，才能使用容器提供的<span class=\"hljs-doctag\">@ConfigurationProperties</span>功能；</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String lastName;<br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-keyword\">private</span> Boolean boss;<br>  <span class=\"hljs-keyword\">private</span> Date birth;<br>  <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; maps;<br>  <span class=\"hljs-keyword\">private</span> List&lt;Object&gt; lists;<br>  <span class=\"hljs-keyword\">private</span> Dog dog;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;lastName=&#x27;&quot;</span> + lastName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>      <span class=\"hljs-string\">&quot;, boss=&quot;</span> + boss +<br>      <span class=\"hljs-string\">&quot;, birth=&quot;</span> + birth +<br>      <span class=\"hljs-string\">&quot;, maps=&quot;</span> + maps +<br>      <span class=\"hljs-string\">&quot;, lists=&quot;</span> + lists +<br>      <span class=\"hljs-string\">&quot;, dog=&quot;</span> + dog +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-keyword\">private</span> String age;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p><strong>@Value</strong></p>\n<p>只需要读取配置文件中的某一个配置时，可以通过 @Value 注解获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> net.biancheng.www.bean;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.lastName&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> String lastName;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.age&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.boss&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> Boolean boss;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.birth&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> Date birth;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;lastName=&#x27;&quot;</span> + lastName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>      <span class=\"hljs-string\">&quot;, boss=&quot;</span> + boss +<br>      <span class=\"hljs-string\">&quot;, birth=&quot;</span> + birth +<br>      <span class=\"hljs-string\">&quot;, maps=&quot;</span> + maps +<br>      <span class=\"hljs-string\">&quot;, lists=&quot;</span> + lists +<br>      <span class=\"hljs-string\">&quot;, dog=&quot;</span> + dog +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot注解\">点击跳转SpringBoot注解</a>\n<h3 id=\"给属性赋值的两种方法\"><a href=\"#给属性赋值的两种方法\" class=\"headerlink\" title=\"给属性赋值的两种方法\"></a>给属性赋值的两种方法</h3><ol>\n<li><p>通过yaml文件赋值</p>\n<p><a href=\"#给属性赋值\">点击跳转通过yaml文件注解赋值</a></p>\n<p>第一种方法通过<strong>@ConfigurationProperties</strong>或<strong>@Value</strong>给属性赋值</p>\n</li>\n<li><p>通过注解<strong>@PropertySource</strong>给属性赋值</p>\n<p>如果将所有的配置都集中到 <code>application.properties</code> 或 <code>application.yml</code>中，那么这个配置文件会十分的臃肿且难以维护，因此我们通常会将与 SpringBoot 无关的配置（例如自定义配置）提取出来，写在一个单独的配置文件中，并在对应的 JavaBean 上使用 @PropertySource 注解指向该配置文件。</p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot注解\">点击跳转SpringBoot注解</a>\n<p>例：</p>\n<ol>\n<li><p><strong>将与 <code>person</code> 相关的自定义配置移动到 <code>src/main/resources</code> 下的 <code>person.properties</code> 中（注意，必须把 application.properties 或 application.yml 中的相关配置删除）</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-meta\">person.last-name</span>=<span class=\"hljs-string\">李四</span><br><span class=\"hljs-meta\">person.age</span>=<span class=\"hljs-string\">12</span><br><span class=\"hljs-meta\">person.birth</span>=<span class=\"hljs-string\">2000/12/15</span><br><span class=\"hljs-meta\">person.boss</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">person.maps.k1</span>=<span class=\"hljs-string\">v1</span><br><span class=\"hljs-meta\">person.maps.k2</span>=<span class=\"hljs-string\">14</span><br><span class=\"hljs-meta\">person.lists</span>=<span class=\"hljs-string\">a,b,c</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 Person 使用 @PropertySource 注解指向 person.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> net.biancheng.www.bean;<br><br><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.PropertySource;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><span class=\"hljs-comment\">//指向对应的配置文件</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String lastName;<br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-keyword\">private</span> Boolean boss;<br>  <span class=\"hljs-keyword\">private</span> Date birth;<br>  <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; maps;<br>  <span class=\"hljs-keyword\">private</span> List&lt;Object&gt; lists;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;lastName=&#x27;&quot;</span> + lastName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>      <span class=\"hljs-string\">&quot;, boss=&quot;</span> + boss +<br>      <span class=\"hljs-string\">&quot;, birth=&quot;</span> + birth +<br>      <span class=\"hljs-string\">&quot;, maps=&quot;</span> + maps +<br>      <span class=\"hljs-string\">&quot;, lists=&quot;</span> + lists +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"多-Profile-文件方式\"><a href=\"#多-Profile-文件方式\" class=\"headerlink\" title=\"多 Profile 文件方式\"></a>多 Profile 文件方式</h4><p>在实际的项目开发中，一个项目通常会存在多个环境。</p>\n<p>SpringBoot 的配置文件共有两种形式：.properties 文件和 .yml 文件，不管哪种形式，它们都能通过文件名的命名形式区分出不同的环境的配置，文件命名格式为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">application-&#123;profile&#125;.properties/yml</span><br></code></pre></td></tr></table></figure>\n<p>其中，{profile} 一般为各个环境的名称或简称，例如 dev、test 和 prod 等等。</p>\n<p>在 项目 的 src/main/resources 下添加 4 个配置文件：</p>\n<ul>\n<li>application.properties/yml：主配置文件</li>\n<li>application-dev.properties/yml：开发环境配置文件</li>\n<li>application-test.properties/yml：测试环境配置文件</li>\n<li>application-prod.properties/yml：生产环境配置文件</li>\n</ul>\n<p>激活配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\">#properties 激活指定的profile</span><br><span class=\"hljs-meta\">spring.profiles.active</span>=<span class=\"hljs-string\">prod</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\">#yml 激活开发环境配置</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">dev</span> <span class=\"hljs-comment\">#激活开发环境配置</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"多-Profile-文档块模式\"><a href=\"#多-Profile-文档块模式\" class=\"headerlink\" title=\"多 Profile 文档块模式\"></a>多 Profile 文档块模式</h4><p>在 YAML 配置文件中，可以使用“—”把配置文件分割成了多个文档块，因此我们可以在不同的文档块中针对不同的环境进行不同的配置，并在第一个文档块内对配置进行切换。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\">#默认配置</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-comment\">#切换配置</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-comment\">#开发环境</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8081</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">activate:</span><br>      <span class=\"hljs-attr\">on-profile:</span> <span class=\"hljs-string\">dev</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-comment\">#测试环境</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8082</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">activate:</span><br>      <span class=\"hljs-attr\">on-profile:</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-comment\">#生产环境</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8083</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">activate:</span><br>      <span class=\"hljs-attr\">on-profile:</span> <span class=\"hljs-string\">prod</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Spring-Boot默认配置文件\"><a href=\"#Spring-Boot默认配置文件\" class=\"headerlink\" title=\"Spring Boot默认配置文件\"></a>Spring Boot默认配置文件</h4><p>通常情况下，SpringBoot 在启动时会将 resources 目录下的 application.properties 或 apllication.yml 作为其默认配置文件，我们可以在该配置文件中对项目进行配置，但这并不意味着 SpringBoot 项目中只能存在一个 application.properties 或 application.yml。</p>\n<p>SpringBoot 项目中可以存在多个 application.properties 或 apllication.yml。</p>\n<p>SpringBoot 启动时会扫描以下 5 个位置的 application.properties 或 apllication.yml 文件，并将它们作为 Spring boot 的默认配置文件。</p>\n<ol>\n<li>file:./config/</li>\n<li>file:./config/*/</li>\n<li>file:./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ol>\n<blockquote>\n<p>注：file: 指当前项目根目录；classpath: 指当前项目的类路径，即 resources 目录。</p>\n</blockquote>\n<p>以上所有位置的配置文件都会被加载，且它们<strong>优先级依次降低，序号越小优先级越高</strong>。其次，位于相同位置的 application.properties 的优先级高于 application.yml。</p>\n<p><strong>高优先级配置会覆盖低优先级配置，形成互补配置</strong>，即：</p>\n<ul>\n<li>存在相同的配置内容时，高优先级的内容会覆盖低优先级的内容；</li>\n<li>存在不同的配置内容时，高优先级和低优先级的配置内容取并集。</li>\n</ul>\n<p><strong>SpringBoot 配置文件加载位置及优先级</strong></p>\n<img src=\"/article/33757/1544595010-1.png\" class title=\"SpringBoot 配置文件加载顺序\">\n<ul>\n<li>/myBoot：表示 JAR 包所在目录，目录名称自定义；</li>\n<li>/childDir：表示 JAR 包所在目录下 config 目录的子目录，目录名自定义；</li>\n<li>JAR：表示 Spring Boot 项目打包生成的 JAR；</li>\n<li><strong>其余带有“/”标识的目录的目录名称均不能修改。</strong></li>\n<li>红色数字：表示该配置文件的优先级，数字越小优先级越高。</li>\n</ul>\n<p>这些配置文件得优先级顺序，遵循以下规则：</p>\n<ol>\n<li>先加载 JAR 包外的配置文件，再加载 JAR 包内的配置文件；</li>\n<li>先加载 config 目录内的配置文件，再加载 config 目录外的配置文件；</li>\n<li>先加载 config 子目录下的配置文件，再加载 config 目录下的配置文件；</li>\n<li>先加载 appliction-{profile}.properties/yml，再加载 application.properties/yml；</li>\n<li>先加载 .properties 文件，再加载 .yml 文件。</li>\n</ol>\n","more":"<blockquote>\n<p>The scabbard is content to be dull when it protects the keenness of the sword.</p>\n<p>刀鞘保护刀的锋利，它自己则满足于它的迟钝。</p>\n</blockquote>\n<h2 id=\"SpringBoot（基础配置及原理）\"><a href=\"#SpringBoot（基础配置及原理）\" class=\"headerlink\" title=\"SpringBoot（基础配置及原理）\"></a>SpringBoot（基础配置及原理）</h2><p>什么是<a href=\"/article/18155.html\" title=\"Spring\">Spring</a>?</p>\n<h3 id=\"什么是SpringBoot？\"><a href=\"#什么是SpringBoot？\" class=\"headerlink\" title=\"什么是SpringBoot？\"></a>什么是SpringBoot？</h3><p><a href=\"https://spring.io/projects/spring-boot\">SpringBoot官方网站</a></p>\n<p>SpringBoot 是 Pivotal 团队在 Spring 的基础上提供的一套全新的开源框架，其目的是为了简化 Spring 应用的搭建和开发过程。SpringBoot 去除了大量的 XML 配置文件，简化了复杂的依赖管理。</p>\n<p>SpringBoot 具有 Spring 一切优秀特性，Spring 能做的事，SpringBoot 都可以做，而且使用更加简单，功能更加丰富，性能更加稳定而健壮。随着近些年来微服务技术的流行，Spring Boot 也成了时下炙手可热的技术。</p>\n<p>SpringBoot 集成了大量常用的第三方库配置，SpringBoot 应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 SpringBoot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。 </p>\n<p><strong>特点</strong></p>\n<p>Spring Boot 具有以下特点：</p>\n<ol>\n<li><p>独立运行的 Spring 项目</p>\n<p>SpringBoot 可以以 jar 包的形式独立运行，SpringBoot 项目只需通过命令“ java–jar xx.jar” 即可运行。</p>\n</li>\n<li><p>内嵌 Servlet 容器</p>\n<p>SpringBoot 使用嵌入式的 Servlet 容器（例如 Tomcat、Jetty 或者 Undertw 等），应用无需打成 WAR 包 。</p>\n</li>\n<li><p>提供 starter 简化 Maven 配置</p>\n<p>Spring Boot 提供了一系列的“starter”项目对象模型（POMS）来简化 Maven 配置。</p>\n</li>\n<li><p>提供了大量的自动配置</p>\n<p>SpringBoot 提供了大量的默认自动配置，来简化项目的开发，开发人员也通过配置文件修改默认配置。</p>\n</li>\n<li><p>自带应用监控</p>\n<p>Spring Boot 可以对正在运行的项目提供监控。</p>\n</li>\n<li><p>无代码生成和 xml 配置</p>\n<p>SpringBoot 不需要任何 xml 配置即可实现 Spring 的所有配置。</p>\n</li>\n</ol>\n<p><strong>配置</strong></p>\n<p><strong>maven中导入配置：</strong>spring-boot-starter-web、spring-boot-starter-test</p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot配置\">点击跳转SpringBoot配置</a>\n<p>spring-boot-starter-web用于实现HTTP接口（该依赖中包含了SpringMVC）</p>\n<p>spring-boot-starter-test用于编写单元测试的依赖包</p>\n<h3 id=\"什么是微服务？\"><a href=\"#什么是微服务？\" class=\"headerlink\" title=\"什么是微服务？\"></a>什么是微服务？</h3><p>一种软件开发技术-面向服务的体系结构（SOA）架构样式的一种变体，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。</p>\n<p>每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通（通常是基于HTTP的RESTful API）。</p>\n<p>每个服务都围绕着具体业务进行构建，并且能够独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据上下文，选择合适的语言、工具对其进行构建。</p>\n<h3 id=\"SpringBoot自动装配原理\"><a href=\"#SpringBoot自动装配原理\" class=\"headerlink\" title=\"SpringBoot自动装配原理\"></a>SpringBoot自动装配原理</h3><h4 id=\"SpringFactories-机制\"><a href=\"#SpringFactories-机制\" class=\"headerlink\" title=\"SpringFactories 机制\"></a>SpringFactories 机制</h4><p>SpringBoot 的自动配置是基于 SpringFactories 机制实现的。</p>\n<p>SpringFactories 机制是 SpringBoot 中的一种服务发现机制，这种扩展机制与 Java SPI 机制十分相似。SpringBoot 会自动扫描所有 Jar 包类路径下 <code>META-INF/spring.factories</code> 文件，并读取其中的内容，进行实例化，这种机制也是 Spring-Boot-Starter 的基础。</p>\n<p><strong>自动配置的生效和修改</strong></p>\n<p>spring.factories 文件中的所有自动配置类（xxxAutoConfiguration），都是必须在一定的条件下才会作为组件添加到容器中，配置的内容才会生效。这些限制条件在 SpringBoot 中以 @Conditional 派生注解的形式体现。</p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot自动配置注解\">点击跳转SpringBoot自动配置注解</a>\n<p><strong>spring.factories</strong></p>\n<p>spring.factories 文件本质上与 properties 文件相似，其中包含一组或多组键值对（key=vlaue），其中，key 的取值为接口的完全限定名；value 的取值为接口实现类的完全限定名，一个接口可以设置多个实现类，不同实现类之间使用“，”隔开。</p>\n<img src=\"/article/33757/image-20220210171223244.png\" class title=\"image-20220210171223244\">\n<p><strong>SpringFactories 实现原理</strong></p>\n<p>spring-core 包里定义了 SpringFactoriesLoader 类，这个类会扫描所有 Jar 包类路径下的 META-INF/spring.factories 文件，并获取指定接口的配置。在 SpringFactoriesLoader 类中定义了两个对外的方法，如下表。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回值</th>\n<th>方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><T>List<T></T></T></td>\n<td>loadFactories(Class<T> factoryType, @Nullable ClassLoader classLoader)</T></td>\n<td style=\"text-align:left\">静态方法； <br>根据接口获取其实现类的实例； 该方法返回的是实现类对象列表。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">List<String></String></td>\n<td>loadFactoryNames(Class&lt;?&gt; factoryType, @Nullable ClassLoader classLoader)</td>\n<td style=\"text-align:left\">公共静态方法； <br>根据接口l获取其实现类的名称； 该方法返回的是实现类的类名的列表</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"SpringBoot自动装配流程\"><a href=\"#SpringBoot自动装配流程\" class=\"headerlink\" title=\"SpringBoot自动装配流程\"></a>SpringBoot自动装配流程</h4><ol>\n<li><p><strong>spring-boot-dependencies</strong>:核心依赖在父工程中</p>\n</li>\n<li><p><strong>启动器</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--SpringBoot 的启动场景--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>SpringBoot会将所有的功能场景，都变成一个个的启动器。</p>\n<p>要使用什么功能只要找到对应的启动器即可。</p>\n<p>如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--要使用什么功能，就启动对应的启动器--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>主程序</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Springboot01HelloworldApplication</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>    SpringApplication.run(Springboot01HelloworldApplication.class, args);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p><code>@SpringBootApplication</code>注解</p>\n<p>标注这个类是一个springboot应用  启动类下的所有资源被导入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@SpringBootConfiguration</span><br><span class=\"hljs-meta\">@EnableAutoConfiguration</span><br><span class=\"hljs-meta\">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class=\"hljs-meta\">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> SpringBootApplication &#123;&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li><p><strong>@SpringBootConfiguration</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Configuration</span>  <span class=\"hljs-comment\">//Spring配置类，说明这也是一个组件</span><br><span class=\"hljs-meta\">@Indexed</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> SpringBootConfiguration &#123;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>@EnableAutoConfiguration</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@AutoConfigurationPackage</span>  <span class=\"hljs-comment\">//自动配置包</span><br><span class=\"hljs-meta\">@Import(AutoConfigurationImportSelector.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> EnableAutoConfiguration &#123;&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>@EnableAutoConfiguration</strong></p>\n<ol>\n<li><p><strong>@AutoConfigurationPackage</strong>：扫描并注册我们自己写的java类到spring容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> AutoConfigurationPackage &#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>向容器中导入了一个AutoConfigurationPackages.Registrar的实例对象</p>\n<blockquote>\n<p><strong>AutoConfigurationPackages.Registrar</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Registrar</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ImportBeanDefinitionRegistrar</span>, <span class=\"hljs-title\">DeterminableImports</span> </span>&#123;<br>\t\t<span class=\"hljs-meta\">@Override</span><br>\t\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">registerBeanDefinitions</span><span class=\"hljs-params\">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;<br>\t\t\tregister(registry, <span class=\"hljs-keyword\">new</span> PackageImports(metadata).getPackageNames().toArray(<span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">0</span>]));<br>\t\t&#125;<br>\t\t...<br>\t&#125;<br></code></pre></td></tr></table></figure>\n<p>其中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">register(registry, <span class=\"hljs-keyword\">new</span> PackageImports(metadata).getPackageNames().toArray(<span class=\"hljs-keyword\">new</span> String[<span class=\"hljs-number\">0</span>]));<br></code></pre></td></tr></table></figure>\n<p>其实就是完成了我们自己写的类的扫描。</p>\n<p>获取到的是指定扫描包的路径，如果未明确指定，默认为主启动类所在的包名。</p>\n</blockquote>\n</li>\n<li><p><strong>@Import(AutoConfigurationImportSelector.class)</strong>：注册springboot提供的自动配置类到spring容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AutoConfigurationImportSelector</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DeferredImportSelector</span>, <span class=\"hljs-title\">BeanClassLoaderAware</span>,</span><br><span class=\"hljs-class\">      <span class=\"hljs-title\">ResourceLoaderAware</span>, <span class=\"hljs-title\">BeanFactoryAware</span>, <span class=\"hljs-title\">EnvironmentAware</span>, <span class=\"hljs-title\">Ordered</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>将springboot提供好的自动配置装载进spring容器</p>\n<blockquote>\n<p><strong>AutoConfigurationImportSelector</strong></p>\n<p>将springboot提供好的自动配置装载进spring容器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> AutoConfigurationEntry <span class=\"hljs-title\">getAutoConfigurationEntry</span><span class=\"hljs-params\">(AnnotationMetadata annotationMetadata)</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>这个方法是获取所有的自动配置类的实体</p>\n<p>spring-boot在启动时，默认就装载了springboot写好的127个自动配置类实体(spring.factories)，但是并没有启用，只有在引入相关依赖包的时候，这些自动配置才真正被启用，这种按需加载的原理是基于条件注解实现的</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>SpringApplication.run(Springboot01HelloworldApplication.class, args); </p>\n<img src=\"/article/33757/%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB.png\" class title=\"主启动类\">\n<p><a href=\"https://blog.csdn.net/qq_42261668/article/details/103029333\">原理剖析</a></p>\n<ol>\n<li><p>run方法</p>\n<p>大多数应用程序上下文(如果不是全部的话)将实现SPI（服务提供者）接口。</p>\n<p>这里<strong>封装了配置和生命周期方法</strong>，以避免它们被ApplicationContext客户端代码发现（避免配置文件被公开给使用者）。目前的方法只能在启动和关闭代码中使用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ConfigurableApplicationContext <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(String... args)</span> </span>&#123;···&#125;<br>---------------------------------------------------------<br><span class=\"hljs-comment\">//可配置的应用上下文</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ConfigurableApplicationContext <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(Class&lt;?&gt; primarySource,String... args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//重载传入 将要被加载的类放到一个对应的CLASS数组中</span><br>    <span class=\"hljs-keyword\">return</span> run(<span class=\"hljs-keyword\">new</span> Class&lt;?&gt;[] &#123; primarySource &#125;, args);<br>  &#125;<br>  ---------------------------------------------------------<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ConfigurableApplicationContext <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(Class&lt;?&gt;[] primarySources,String[] args)</span> </span>&#123;<br>    <span class=\"hljs-comment\">//创建一个启动类传入</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> SpringApplication(primarySources).run(args);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>run()方法启动Spring应用，实质上是为Spring应用创建并初始化Spring上下文</p>\n<blockquote>\n<ol>\n<li>推断应用的类型是普通的项目还是Web项目</li>\n<li>查找并加载所有可用初始化器，设置到initializers属性中</li>\n<li>找出所有的应用程序监听器，设置到listeners属性中</li>\n<li>推断并设置main方法的定义类，找到运行的主类</li>\n</ol>\n</blockquote>\n<p>在启动时会加载三个jar将其对应的spring.factories工厂文件的接口实现类到MultiValueMap集合当中，并将对应加载器作为key,接口实现类作为value放到缓存当中</p>\n<ul>\n<li>spring-boot-2.1.3.RELEASE.jar!/META-INF/spring.factories</li>\n<li>spring-boot-autocinfiggure-2.1.3.RELEASE.jar!/META-INF/spring.factories</li>\n<li>spring-bean-5.1.5.RELEASE.jar!/META-INF/spring.factories</li>\n</ul>\n<blockquote>\n<p><strong>执行流程：</strong></p>\n<ol>\n<li><p>初始化监听器，以及添加到SpringApplication的自定义监听器;</p>\n</li>\n<li><p>发布ApplicationStartedEvent事件;</p>\n</li>\n<li><p>装配参数和环境，确定是web环境还是非web环境;</p>\n</li>\n<li><p>装配完环境后，就触发ApplicationEnvironmentPreparedEvent事件;</p>\n</li>\n<li><p>如果SpringApplication的showBanner属性被设置为true，则打印启动的Banner;</p>\n</li>\n<li><p>创建ApplicationContext，会根据是否是web环境，来决定创建什么类型的ApplicationContext;</p>\n</li>\n<li><p>装配Context的环境变量，注册Initializers、beanNameGenerator等;</p>\n</li>\n<li><p>发布ApplicationPreparedEvent事件;</p>\n</li>\n<li><p>注册springApplicationArguments、springBootBanner，加载资源等;</p>\n</li>\n<li><p>遍历调用所有SpringApplicationRunListener的contextLoaded()方法;</p>\n</li>\n<li><p>调用ApplicationContext的refresh()方法,装配context beanfactory等非常重要的核心组件;</p>\n</li>\n<li><p>查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们;</p>\n</li>\n<li><p>发布ApplicationReadyEvent事件，启动完毕，表示服务已经可以开始正常提供服务了。通常我们这里会监听这个事件来打印一些监控性质的日志，表示应用正常启动了。</p>\n</li>\n</ol>\n<p>SpringBoot会触发其他的一些事件，这些事件按下列顺序触发：</p>\n<p>（1）ApplicationStartingEvent：项目刚启动时触发，此时除了注册监听器和初始器之外，其他所有处理都没有开始；</p>\n<p>（2）ApplicationEnvironmentPreparedEvent：上下文得到环境信息之后触发，此时上下文创建还没有创建；</p>\n<p>（3）ApplicationPreparedEvent：bean的定义信息加载完成之后触发，此时bean还没有初始化；</p>\n<p>（4）ApplicationReadyEvent：在所有bean初始化完毕，所有回调处理完成，系统准备处理服务请求时触发；</p>\n<p>（5）ApplicationFailedEvent：启动过程出现异常时候触发。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>2. **SpringApplication构造器**\n\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SpringApplication</span><span class=\"hljs-params\">(Class&lt;?&gt;... primarySources)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-keyword\">null</span>, primarySources);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SpringApplication</span><span class=\"hljs-params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;<br>  <span class=\"hljs-comment\">//null</span><br>  <span class=\"hljs-keyword\">this</span>.resourceLoader = resourceLoader;<br>  <span class=\"hljs-comment\">//断言  PrimarySources 不能为空</span><br>  Assert.notNull(primarySources, <span class=\"hljs-string\">&quot;PrimarySources must not be null&quot;</span>);<br>  <span class=\"hljs-comment\">//将传过来对象数组放到集合中 并为primarySources 赋值</span><br>  <span class=\"hljs-keyword\">this</span>.primarySources = <span class=\"hljs-keyword\">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));<br>  <span class=\"hljs-comment\">//推断webApplicationType 的枚举类型 一般都是SERVLET 标准webservice</span><br>  <span class=\"hljs-keyword\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>  <span class=\"hljs-comment\">//设置初始化器 读取一些控制器 </span><br>  <span class=\"hljs-comment\">//获取实现了ApplicationContextInitializer初始化器的工厂并将其实例化 读取相应的一些控制器</span><br>  setInitializers((Collection) getSpringFactoriesInstances(<br>    ApplicationContextInitializer.class));<br>  <span class=\"hljs-comment\">//设置监听器 流程同上</span><br>  setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br>  <span class=\"hljs-comment\">//存储带有main方法的启动对象（本例MyApplication）</span><br>  <span class=\"hljs-comment\">//deduceMainApplicationClass 获取推断主应用类 获取对应的MyApplication.class</span><br>  <span class=\"hljs-keyword\">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n   [构造方法内容详解](https://blog.csdn.net/qq_42261668/article/details/103029333)\n</code></pre><h3 id=\"yaml\"><a href=\"#yaml\" class=\"headerlink\" title=\"yaml\"></a>yaml</h3><p>SpringBoot 提供了大量的自动配置，极大地简化了spring 应用的开发过程，当用户创建了一个 SpringBoot 项目后，即使不进行任何配置，该项目也能顺利的运行起来。当然，用户也可以根据自身的需要使用配置文件修改 SpringBoot 的默认设置。</p>\n<p>SpringBoot 默认使用以下 2 种全局的配置文件，其文件名是固定的。</p>\n<ul>\n<li>application.properties</li>\n<li>application.yml</li>\n</ul>\n<p>YAML 全称 YAML Ain’t Markup Language，它是一种以数据为中心的标记语言，比 XML 和 JSON 更适合作为配置文件。</p>\n<p>想要使用 YAML 作为属性配置文件（以 .yml 或 .yaml 结尾），需要将 SnakeYAML 库添加到 classpath 下，SpringBoot 中的 spring-boot-starter-web 或 spring-boot-starter 都对 SnakeYAML 库做了集成， 只要项目中引用了这两个 Starter 中的任何一个，SpringBoot 会自动添加 SnakeYAML 库到 classpath 下。</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a><strong>语法</strong></h4><p><strong>YAML 的语法如下：</strong></p>\n<ul>\n<li>使用缩进表示层级关系。</li>\n<li>缩进时不允许使用 Tab 键，只允许使用空格。</li>\n<li>缩进的空格数不重要，但同级元素必须左侧对齐。</li>\n<li>大小写敏感。</li>\n<li>‘#’表示注释</li>\n</ul>\n<p><strong>YAML 支持以下三种数据结构：</strong></p>\n<ul>\n<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>\n<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>\n<li>字面量：单个的、不可拆分的值</li>\n</ul>\n<p><strong>YAML 字面量写法</strong></p>\n<p>字面量是指单个的，不可拆分的值，例如：数字、字符串、布尔值、以及日期等。</p>\n<p>字面量直接写在键值对的“value<strong>”</strong>中即可，且默认情况下字符串是不需要使用单引号或双引号的。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">boolean:</span> <br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-literal\">TRUE</span>  <span class=\"hljs-comment\">#true,True都可以</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-literal\">FALSE</span>  <span class=\"hljs-comment\">#false，False都可以</span><br><span class=\"hljs-attr\">float:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">3.14</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">6.8523015e+5</span>  <span class=\"hljs-comment\">#可以使用科学计数法</span><br><span class=\"hljs-attr\">int:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">123</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">0b1010_0111_0100_1010_1110</span>    <span class=\"hljs-comment\">#二进制表示</span><br><span class=\"hljs-attr\">null:</span><br>    <span class=\"hljs-attr\">nodeName:</span> <span class=\"hljs-string\">&#x27;node&#x27;</span><br>    <span class=\"hljs-attr\">parent:</span> <span class=\"hljs-string\">~</span>  <span class=\"hljs-comment\">#使用~表示null</span><br><span class=\"hljs-attr\">string:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">哈哈</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&#x27;Hello world&#x27;</span>  <span class=\"hljs-comment\">#可以使用双引号或者单引号包裹特殊字符</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">newline</span><br>      <span class=\"hljs-string\">newline2</span>    <span class=\"hljs-comment\">#字符串可以拆成多行，每一行会被转化成一个空格</span><br><span class=\"hljs-attr\">date:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">2018-02-17</span>    <span class=\"hljs-comment\">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span><br><span class=\"hljs-attr\">datetime:</span> <br>    <span class=\"hljs-bullet\">-</span>  <span class=\"hljs-number\">2018-02-17T15:02:31+08:00</span>    <span class=\"hljs-comment\">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span><br></code></pre></td></tr></table></figure>\n<p><strong>YAML 对象写法</strong></p>\n<p>在 YAML 中，对象可能包含多个属性，每一个属性都是一对键值对。<br>YAML 为对象提供了 2 种写法：</p>\n<p>普通写法，使用缩进表示对象与属性的层级关系。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">key:</span> <br> <span class=\"hljs-attr\">child-key:</span> <span class=\"hljs-string\">value</span><br> <span class=\"hljs-attr\">child-key2:</span> <span class=\"hljs-string\">value2</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">?</span>  <br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexkey1</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexkey2</span><br><span class=\"hljs-string\">:</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexvalue1</span><br> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">complexvalue2</span><br><span class=\"hljs-comment\">#对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]</span><br></code></pre></td></tr></table></figure>\n<p>行内写法：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">website:</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">bianchengbang</span>,<span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">www.biancheng.net</span>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>YAML 数组写法</strong></p>\n<p>YAML 使用“-”表示数组中的元素，普通写法如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">A</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">B</span><br><span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">C</span><br></code></pre></td></tr></table></figure>\n<p>行内写法</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">key</span>:<span class=\"hljs-meta\"> [value1, value2, ...]</span><br></code></pre></td></tr></table></figure>\n<p><strong>复合结构</strong></p>\n<p>以上三种数据结构可以任意组合使用，以实现不同的用户需求</p>\n<p><strong>引用</strong></p>\n<p><strong>&amp;</strong> 锚点和 <strong>*</strong> 别名，可以用来引用:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">defaults:</span> <span class=\"hljs-meta\">&amp;defaults</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br><br><span class=\"hljs-attr\">development:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_development</span><br>  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*defaults</span><br><br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_test</span><br>  <span class=\"hljs-string\">&lt;&lt;:</span> <span class=\"hljs-meta\">*defaults</span><br></code></pre></td></tr></table></figure>\n<p>相当于：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">defaults:</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br><br><span class=\"hljs-attr\">development:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_development</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br><br><span class=\"hljs-attr\">test:</span><br>  <span class=\"hljs-attr\">database:</span> <span class=\"hljs-string\">myapp_test</span><br>  <span class=\"hljs-attr\">adapter:</span>  <span class=\"hljs-string\">postgres</span><br>  <span class=\"hljs-attr\">host:</span>     <span class=\"hljs-string\">localhost</span><br></code></pre></td></tr></table></figure>\n<p><strong>&amp;</strong> 用来建立锚点（defaults），<strong>&lt;&lt;</strong> 表示合并到当前数据，<strong>*</strong> 用来引用锚点。</p>\n<p><strong>YAML 组织结构</strong></p>\n<p>YAML 文件可以由一或多个文档组成（也即相对独立的组织结构组成），文档间使用“—”（三个横线）在每文档开始作为分隔符,且个文档相互独立，互不干扰。同时，文档也可以使用“…”（三个点号）作为结束符（可选）。如果只是单个文档，分隔符“—”可省略。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">---website:</span>  <span class=\"hljs-attr\">name: bianchengbang  url:</span> <span class=\"hljs-string\">www.biancheng.net</span><br><span class=\"hljs-string\">---website:</span> &#123;<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">bianchengbang</span>,<span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">www.biancheng.net</span>&#125;<span class=\"hljs-attr\">pets:  -dog  -cat  -pig---pets:</span> [<span class=\"hljs-string\">dog</span>,<span class=\"hljs-string\">cat</span>,<span class=\"hljs-string\">pig</span>]<span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">&quot;zhangsan \\n lisi&quot;</span><span class=\"hljs-string\">---name:</span> <span class=\"hljs-string\">&#x27;zhangsan \\n lisi&#x27;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"给属性赋值\"><a href=\"#给属性赋值\" class=\"headerlink\" title=\"给属性赋值\"></a>给属性赋值</h4><p><strong>@ConfigurationProperties</strong>：告诉 SpringBoot 将本类中的所有属性和配置文件中相关的配置进行绑定；</p>\n<p>prefix = “ClassName”：配置文件中哪个下面的所有属性进行一一映射</p>\n<p>例：</p>\n<ol>\n<li><p>在全局配置文件 application.yml 中添加以下自定义属性</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">person:</span><br>  <span class=\"hljs-attr\">lastName:</span> <span class=\"hljs-string\">bobo</span><br>  <span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">18</span><br>  <span class=\"hljs-attr\">boss:</span> <span class=\"hljs-literal\">false</span><br>  <span class=\"hljs-attr\">birth:</span> <span class=\"hljs-number\">1997</span><span class=\"hljs-string\">/07/09</span><br>  <span class=\"hljs-attr\">maps:</span> &#123; <span class=\"hljs-attr\">k1:</span> <span class=\"hljs-string\">v1</span>,<span class=\"hljs-attr\">k2:</span> <span class=\"hljs-number\">12</span> &#125;<br>  <span class=\"hljs-attr\">lists:</span><br>    <span class=\"hljs-string\">‐</span> <span class=\"hljs-number\">111</span><br>    <span class=\"hljs-string\">‐</span> <span class=\"hljs-number\">222</span><br>  <span class=\"hljs-attr\">dog:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">旺财</span><br>    <span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个名为 Person 的实体类，并将配置文件中的属性映射到这个实体类上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 将配置文件中配置的每一个属性的值，映射到这个组件中</span><br><span class=\"hljs-comment\">* 只有这个组件是容器中的组件，才能使用容器提供的<span class=\"hljs-doctag\">@ConfigurationProperties</span>功能；</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String lastName;<br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-keyword\">private</span> Boolean boss;<br>  <span class=\"hljs-keyword\">private</span> Date birth;<br>  <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; maps;<br>  <span class=\"hljs-keyword\">private</span> List&lt;Object&gt; lists;<br>  <span class=\"hljs-keyword\">private</span> Dog dog;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;lastName=&#x27;&quot;</span> + lastName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>      <span class=\"hljs-string\">&quot;, boss=&quot;</span> + boss +<br>      <span class=\"hljs-string\">&quot;, birth=&quot;</span> + birth +<br>      <span class=\"hljs-string\">&quot;, maps=&quot;</span> + maps +<br>      <span class=\"hljs-string\">&quot;, lists=&quot;</span> + lists +<br>      <span class=\"hljs-string\">&quot;, dog=&quot;</span> + dog +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String name;<br>  <span class=\"hljs-keyword\">private</span> String age;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p><strong>@Value</strong></p>\n<p>只需要读取配置文件中的某一个配置时，可以通过 @Value 注解获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> net.biancheng.www.bean;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.lastName&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> String lastName;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.age&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.boss&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> Boolean boss;<br>  <span class=\"hljs-meta\">@Value(&quot;$&#123;person.birth&#125;&quot;)</span><br>  <span class=\"hljs-keyword\">private</span> Date birth;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;lastName=&#x27;&quot;</span> + lastName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>      <span class=\"hljs-string\">&quot;, boss=&quot;</span> + boss +<br>      <span class=\"hljs-string\">&quot;, birth=&quot;</span> + birth +<br>      <span class=\"hljs-string\">&quot;, maps=&quot;</span> + maps +<br>      <span class=\"hljs-string\">&quot;, lists=&quot;</span> + lists +<br>      <span class=\"hljs-string\">&quot;, dog=&quot;</span> + dog +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot注解\">点击跳转SpringBoot注解</a>\n<h3 id=\"给属性赋值的两种方法\"><a href=\"#给属性赋值的两种方法\" class=\"headerlink\" title=\"给属性赋值的两种方法\"></a>给属性赋值的两种方法</h3><ol>\n<li><p>通过yaml文件赋值</p>\n<p><a href=\"#给属性赋值\">点击跳转通过yaml文件注解赋值</a></p>\n<p>第一种方法通过<strong>@ConfigurationProperties</strong>或<strong>@Value</strong>给属性赋值</p>\n</li>\n<li><p>通过注解<strong>@PropertySource</strong>给属性赋值</p>\n<p>如果将所有的配置都集中到 <code>application.properties</code> 或 <code>application.yml</code>中，那么这个配置文件会十分的臃肿且难以维护，因此我们通常会将与 SpringBoot 无关的配置（例如自定义配置）提取出来，写在一个单独的配置文件中，并在对应的 JavaBean 上使用 @PropertySource 注解指向该配置文件。</p>\n<a href=\"/article/37040.html\" title=\"点击跳转SpringBoot注解\">点击跳转SpringBoot注解</a>\n<p>例：</p>\n<ol>\n<li><p><strong>将与 <code>person</code> 相关的自定义配置移动到 <code>src/main/resources</code> 下的 <code>person.properties</code> 中（注意，必须把 application.properties 或 application.yml 中的相关配置删除）</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-meta\">person.last-name</span>=<span class=\"hljs-string\">李四</span><br><span class=\"hljs-meta\">person.age</span>=<span class=\"hljs-string\">12</span><br><span class=\"hljs-meta\">person.birth</span>=<span class=\"hljs-string\">2000/12/15</span><br><span class=\"hljs-meta\">person.boss</span>=<span class=\"hljs-string\">false</span><br><span class=\"hljs-meta\">person.maps.k1</span>=<span class=\"hljs-string\">v1</span><br><span class=\"hljs-meta\">person.maps.k2</span>=<span class=\"hljs-string\">14</span><br><span class=\"hljs-meta\">person.lists</span>=<span class=\"hljs-string\">a,b,c</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在 Person 使用 @PropertySource 注解指向 person.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> net.biancheng.www.bean;<br><br><span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.PropertySource;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><span class=\"hljs-comment\">//指向对应的配置文件</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> String lastName;<br>  <span class=\"hljs-keyword\">private</span> Integer age;<br>  <span class=\"hljs-keyword\">private</span> Boolean boss;<br>  <span class=\"hljs-keyword\">private</span> Date birth;<br>  <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; maps;<br>  <span class=\"hljs-keyword\">private</span> List&lt;Object&gt; lists;<br><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>      <span class=\"hljs-string\">&quot;lastName=&#x27;&quot;</span> + lastName + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>      <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>      <span class=\"hljs-string\">&quot;, boss=&quot;</span> + boss +<br>      <span class=\"hljs-string\">&quot;, birth=&quot;</span> + birth +<br>      <span class=\"hljs-string\">&quot;, maps=&quot;</span> + maps +<br>      <span class=\"hljs-string\">&quot;, lists=&quot;</span> + lists +<br>      <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"多-Profile-文件方式\"><a href=\"#多-Profile-文件方式\" class=\"headerlink\" title=\"多 Profile 文件方式\"></a>多 Profile 文件方式</h4><p>在实际的项目开发中，一个项目通常会存在多个环境。</p>\n<p>SpringBoot 的配置文件共有两种形式：.properties 文件和 .yml 文件，不管哪种形式，它们都能通过文件名的命名形式区分出不同的环境的配置，文件命名格式为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">application-&#123;profile&#125;.properties/yml</span><br></code></pre></td></tr></table></figure>\n<p>其中，{profile} 一般为各个环境的名称或简称，例如 dev、test 和 prod 等等。</p>\n<p>在 项目 的 src/main/resources 下添加 4 个配置文件：</p>\n<ul>\n<li>application.properties/yml：主配置文件</li>\n<li>application-dev.properties/yml：开发环境配置文件</li>\n<li>application-test.properties/yml：测试环境配置文件</li>\n<li>application-prod.properties/yml：生产环境配置文件</li>\n</ul>\n<p>激活配置文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\">#properties 激活指定的profile</span><br><span class=\"hljs-meta\">spring.profiles.active</span>=<span class=\"hljs-string\">prod</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\">#yml 激活开发环境配置</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">dev</span> <span class=\"hljs-comment\">#激活开发环境配置</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"多-Profile-文档块模式\"><a href=\"#多-Profile-文档块模式\" class=\"headerlink\" title=\"多 Profile 文档块模式\"></a>多 Profile 文档块模式</h4><p>在 YAML 配置文件中，可以使用“—”把配置文件分割成了多个文档块，因此我们可以在不同的文档块中针对不同的环境进行不同的配置，并在第一个文档块内对配置进行切换。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\">#默认配置</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-comment\">#切换配置</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">profiles:</span><br>    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-comment\">#开发环境</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8081</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">activate:</span><br>      <span class=\"hljs-attr\">on-profile:</span> <span class=\"hljs-string\">dev</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-comment\">#测试环境</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8082</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">activate:</span><br>      <span class=\"hljs-attr\">on-profile:</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-meta\">---</span><br><span class=\"hljs-comment\">#生产环境</span><br><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8083</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">config:</span><br>    <span class=\"hljs-attr\">activate:</span><br>      <span class=\"hljs-attr\">on-profile:</span> <span class=\"hljs-string\">prod</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"Spring-Boot默认配置文件\"><a href=\"#Spring-Boot默认配置文件\" class=\"headerlink\" title=\"Spring Boot默认配置文件\"></a>Spring Boot默认配置文件</h4><p>通常情况下，SpringBoot 在启动时会将 resources 目录下的 application.properties 或 apllication.yml 作为其默认配置文件，我们可以在该配置文件中对项目进行配置，但这并不意味着 SpringBoot 项目中只能存在一个 application.properties 或 application.yml。</p>\n<p>SpringBoot 项目中可以存在多个 application.properties 或 apllication.yml。</p>\n<p>SpringBoot 启动时会扫描以下 5 个位置的 application.properties 或 apllication.yml 文件，并将它们作为 Spring boot 的默认配置文件。</p>\n<ol>\n<li>file:./config/</li>\n<li>file:./config/*/</li>\n<li>file:./</li>\n<li>classpath:/config/</li>\n<li>classpath:/</li>\n</ol>\n<blockquote>\n<p>注：file: 指当前项目根目录；classpath: 指当前项目的类路径，即 resources 目录。</p>\n</blockquote>\n<p>以上所有位置的配置文件都会被加载，且它们<strong>优先级依次降低，序号越小优先级越高</strong>。其次，位于相同位置的 application.properties 的优先级高于 application.yml。</p>\n<p><strong>高优先级配置会覆盖低优先级配置，形成互补配置</strong>，即：</p>\n<ul>\n<li>存在相同的配置内容时，高优先级的内容会覆盖低优先级的内容；</li>\n<li>存在不同的配置内容时，高优先级和低优先级的配置内容取并集。</li>\n</ul>\n<p><strong>SpringBoot 配置文件加载位置及优先级</strong></p>\n<img src=\"/article/33757/1544595010-1.png\" class title=\"SpringBoot 配置文件加载顺序\">\n<ul>\n<li>/myBoot：表示 JAR 包所在目录，目录名称自定义；</li>\n<li>/childDir：表示 JAR 包所在目录下 config 目录的子目录，目录名自定义；</li>\n<li>JAR：表示 Spring Boot 项目打包生成的 JAR；</li>\n<li><strong>其余带有“/”标识的目录的目录名称均不能修改。</strong></li>\n<li>红色数字：表示该配置文件的优先级，数字越小优先级越高。</li>\n</ul>\n<p>这些配置文件得优先级顺序，遵循以下规则：</p>\n<ol>\n<li>先加载 JAR 包外的配置文件，再加载 JAR 包内的配置文件；</li>\n<li>先加载 config 目录内的配置文件，再加载 config 目录外的配置文件；</li>\n<li>先加载 config 子目录下的配置文件，再加载 config 目录下的配置文件；</li>\n<li>先加载 appliction-{profile}.properties/yml，再加载 application.properties/yml；</li>\n<li>先加载 .properties 文件，再加载 .yml 文件。</li>\n</ol>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"SpringBoot","path":"api/categories/SpringBoot.json"},{"name":"SpringBoot","path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot,Java","path":"api/tags/SpringBoot,Java.json"}]}