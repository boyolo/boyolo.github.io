{"title":"注解与反射","slug":"注解与反射","date":"2021-12-24T02:46:59.000Z","updated":"2022-01-18T15:08:25.822Z","comments":true,"path":"api/articles/注解与反射.json","realPath":null,"excerpt":null,"covers":["/article/1621/Annotation%E6%9E%B6%E6%9E%84.jpg","/article/1621/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84.png","/article/1621/1516208-20200126152957474-364815257.png","/article/1621/376.png","/article/1621/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E5%9B%BE%E8%A7%A3.png"],"cover":"/images/theme/coverphoto/注解与反射.jpg","content":"<blockquote>\n<p>Shadow, with her veil drawn, follows Light in secret meekness,with her silent steps of love.</p>\n<p>阴影戴上她的面幕，秘密地，温顺地，用她的沉默的爱的脚步，跟在“光”后边。</p>\n</blockquote>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p>\n<p>Java 语言中的类、方法、变量、参数和包等都可以被标注。</p>\n<p><strong>Annotation作用</strong></p>\n<ul>\n<li>不是程序本身，可以对程序作出解释</li>\n<li>可以被其他程序（如编译器等）读取</li>\n</ul>\n<p><strong>Annotation格式</strong></p>\n<ul>\n<li>注解是以”@注释名”在代码中存在，还可以添加一些参数值</li>\n</ul>\n<p><strong>Annotation在哪里使用？</strong></p>\n<p>可以附加在package，class，method，field等上面相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</p>\n<h3 id=\"内置的注解\"><a href=\"#内置的注解\" class=\"headerlink\" title=\"内置的注解\"></a>内置的注解</h3><p>Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p>\n<p><strong>作用在代码的注解是</strong></p>\n<ul>\n<li><code>@Override</code> - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li>\n<li><code>@Deprecated</code> - 标记过时方法。如果使用该方法，会报编译警告。表示不鼓励程序员</li>\n<li><code>@SuppressWarnings</code> - 指示编译器去忽略注解中声明的警告。</li>\n</ul>\n<p><strong>作用在其他注解的注解(或者说 元注解)是</strong></p>\n<ul>\n<li><p><code>@Retention</code> - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。(SOURCE &lt; CLASS &lt; RUNTIME)</p>\n<blockquote>\n<ul>\n<li>a) 若 Annotation 的类型为 SOURCE，则意味着：Annotation 仅存在于编译器处理期间，编译器处理完之后，该 Annotation 就没用了。 例如，” @Override” 标志就是一个 Annotation。当它修饰一个方法的时候，就意味着该方法覆盖父类的方法；并且在编译期间会进行语法检查！编译器处理完后，”@Override” 就没有任何作用了。</li>\n<li>b) 若 Annotation 的类型为 CLASS，则意味着：编译器将 Annotation 存储于类对应的 .class 文件中，它是 Annotation 的默认行为。</li>\n<li>c) 若 Annotation 的类型为 RUNTIME，则意味着：编译器将 Annotation 存储于 class 文件中，并且可由JVM读入。</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>@Documented</code> - 标记这些注解是否包含在用户文档中。</p>\n</li>\n<li><p><code>@Target</code> - 标记这个注解应该是哪种 Java 成员。(被描述的注解可以用在什么地方)</p>\n</li>\n<li><p><code>@Inherited</code> - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</p>\n</li>\n<li><p><strong>使用元注解自定义一个简单注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> MyAnnotation1 &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>@interface</li>\n</ol>\n<p>使用 @interface 定义注解时，意味着它实现了 java.lang.annotation.Annotation 接口，即该注解就是一个Annotation。</p>\n<p><strong>定义 Annotation 时，@interface 是必须的。</strong></p>\n<p>注意：它和我们通常的 implemented 实现接口的方法不同。Annotation 接口的实现细节都由编译器完成。通过 @interface 定义注解后，该注解不能继承其他的注解或接口。</p>\n<ol start=\"2\">\n<li>@Documented*</li>\n</ol>\n<p>类和方法的 Annotation 在缺省情况下是不出现在 javadoc 中的。如果使用 @Documented 修饰该 Annotation，则表示它可以出现在 javadoc 中。</p>\n<p>定义 Annotation 时，@Documented 可有可无；若没有定义，则 Annotation 不会出现在 javadoc 中。</p>\n<ol start=\"3\">\n<li>@Target(ElementType.TYPE)</li>\n</ol>\n<p>前面我们说过，ElementType 是 Annotation 的类型属性。而 @Target 的作用，就是来指定 Annotation 的类型属性。</p>\n<p>@Target(ElementType.TYPE) 的意思就是指定该 Annotation 的类型是 ElementType.TYPE。这就意味着，MyAnnotation1 是来修饰”类、接口（包括注释类型）或枚举声明”的注解。</p>\n<p>定义 Annotation 时，@Target 可有可无。若有 @Target，则该 Annotation 只能用于它所指定的地方；若没有 @Target，则该 Annotation 可以用于任何地方。</p>\n<ol start=\"4\">\n<li>@Retention(RetentionPolicy.RUNTIME)</li>\n</ol>\n<p>前面我们说过，RetentionPolicy 是 Annotation 的策略属性，而 @Retention 的作用，就是指定 Annotation 的策略属性。</p>\n<p>@Retention(RetentionPolicy.RUNTIME) 的意思就是指定该 Annotation 的策略是 RetentionPolicy.RUNTIME。这就意味着，编译器会将该 Annotation 信息保留在 .class 文件中，并且能被虚拟机读取。</p>\n<p>定义 Annotation 时，@Retention 可有可无。若没有 @Retention，则默认是 RetentionPolicy.CLASS。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>从 Java 7 开始，额外添加了 3 个注解</strong></p>\n<ul>\n<li><code>@SafeVarargs</code> - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li>\n<li><code>@FunctionalInterface</code> - Java 8 开始支持，标识一个匿名函数或函数式接口。</li>\n<li><code>@Repeatable</code> - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li>\n</ul>\n<p><strong>Annotation 架构</strong></p>\n<img src=\"/article/1621/Annotation%E6%9E%B6%E6%9E%84.jpg\" class title=\"img\">\n<p>从中，我们可以看出：</p>\n<ol>\n<li><p>1 个 Annotation 和 1 个 RetentionPolicy 关联。</p>\n<p>每1个Annotation对象，都会有唯一的RetentionPolicy属性。</p>\n</li>\n<li><p>1 个 Annotation 和 1~n 个 ElementType 关联。</p>\n<p>对于每 1 个 Annotation 对象，可以有若干个 ElementType 属性。</p>\n</li>\n<li><p>Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等等。</p>\n<p>Annotation 的每一个实现类，都 “和 1 个 RetentionPolicy 关联” 并且 “ 和 1~n 个 ElementType 关联”。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Deprecated</span>  -- <span class=\"hljs-meta\">@Deprecated</span> 所标注内容，不再被建议使用。<br><span class=\"hljs-meta\">@Override</span>    -- <span class=\"hljs-meta\">@Override</span> 只能标注方法，表示该方法覆盖父类中的方法。<br><span class=\"hljs-meta\">@Documented</span>  -- <span class=\"hljs-meta\">@Documented</span> 所标注内容，可以出现在javadoc中。<br><span class=\"hljs-meta\">@Inherited</span>   -- <span class=\"hljs-meta\">@Inherited</span>只能被用来标注“Annotation类型”，它所标注的Annotation具有继承性。<br><span class=\"hljs-meta\">@Retention</span>   -- <span class=\"hljs-meta\">@Retention</span>只能被用来标注“Annotation类型”，而且它被用来指定Annotation的RetentionPolicy属性。<br><span class=\"hljs-meta\">@Target</span>      -- <span class=\"hljs-meta\">@Target</span>只能被用来标注“Annotation类型”，而且它被用来指定Annotation的ElementType属性。<br><span class=\"hljs-meta\">@SuppressWarnings</span> -- <span class=\"hljs-meta\">@SuppressWarnings</span> 所标注内容产生的警告，编译器会对这些警告保持静默。<br></code></pre></td></tr></table></figure>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a><strong>自定义注解</strong></h3><p>使用@interface自定义注解时，自动继承 java.lang.annotation.Annotation接口</p>\n<p>分析：</p>\n<ul>\n<li>@interface用来声明一个注解，格式<code>public @interface 注解名&#123;定义内容&#125;</code></li>\n<li>其中每一个方法实际上是声明了一个参数配置；</li>\n<li>方法的名称就是参数的名称；</li>\n<li>返回值类型就是参数的类型（返回值只能是基本类型，Class，String，enum）；</li>\n<li>可以通过default来声明参数的默认值；</li>\n<li>如果只有一个参数成员，一般参数名为value；</li>\n<li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//定义注解类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestAnnotation</span></span>&#123;<br>  <span class=\"hljs-meta\">@MyAnnotation(name = &quot;bobo&quot;)</span><span class=\"hljs-comment\">// name没有默认值，所以必须赋值，age有默认值可以不赋值</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>  <span class=\"hljs-meta\">@MyAnnotation0(&quot;bobo&quot;)</span>  <span class=\"hljs-comment\">//当只有一个参数并且参数名为value时，可以直接写参数值，省略参数名</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test0</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@interface</span> MyAnnotation&#123;<br>  <span class=\"hljs-comment\">//注解的参数  :  参数类型 + 参数名();</span><br>  <span class=\"hljs-function\">String <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span></span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">age</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> 0</span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">id</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span></span>;  <span class=\"hljs-comment\">//如果默认值为 -1 ，代表不存在</span><br>&#125;<br><br><span class=\"hljs-meta\">@interface</span> MyAnnotation0&#123;<br>  <span class=\"hljs-function\">String <span class=\"hljs-title\">value</span><span class=\"hljs-params\">()</span></span>;     <span class=\"hljs-comment\">//当只有一个参数时，参数名可以默认为value</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Annotation-的作用\"><a href=\"#Annotation-的作用\" class=\"headerlink\" title=\"Annotation 的作用\"></a>Annotation 的作用</h3><ol>\n<li>编译检查</li>\n<li>在反射中使用 Annotation</li>\n<li>根据 Annotation 生成帮助文档</li>\n<li>能够帮忙查看查看代码</li>\n</ol>\n<h2 id=\"反射机制\"><a href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"></a>反射机制</h2><p><code>Class c = Class.forName(&quot;java.lang.String&quot;)</code></p>\n<p>反射指的是我们可以在运行期间加载、探知、使用编译期间完全未知的类。是一个动态的机制，允许我们通过字符串来指挥程序实例化，操作属性、调用方法。使得代码提高了灵活性，但是同时也带来了更多的资源开销。</p>\n<p>加载完类之后，在堆内存中，就产生了一个 Class 类型的对象（一个 类只有一个 Class 对象），这个对象就包含了完整的类的结构信息。 我们可以通过这个对象看到类的结构。</p>\n<p>正常方式：<code>引入需要的“包类”名称</code>—&gt;<code>通过new实例化</code>—&gt;<code>取的实例化对象</code></p>\n<p>反射方式：<code>实例化对象</code>—&gt;<code>getCLass()方法</code>—&gt;<code>得到完整的“包类”名称</code></p>\n<h3 id=\"Java中为什么需要反射？反射要解决什么问题？\"><a href=\"#Java中为什么需要反射？反射要解决什么问题？\" class=\"headerlink\" title=\"Java中为什么需要反射？反射要解决什么问题？\"></a>Java中为什么需要反射？反射要解决什么问题？</h3><p>Java中编译类型有两种：</p>\n<ul>\n<li><strong>静态编译</strong>：在编译时确定类型，绑定对象即通过。</li>\n<li><strong>动态编译</strong>：运行时确定类型，绑定对象。动态编译最大限度地发挥了Java的灵活性，体现了多态的应用，可以减低类之间的耦合性。</li>\n</ul>\n<p>反射是Java被视为动态（或准动态）语言的关键，反射机制允许程序在执行期借助Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。包括其modifiers（诸如public、static等）、superclass（例如Object）、实现之interfaces（例如Cloneable），也包括fields和methods的所有信息，并可于运行时改变fields内容或唤起methods。</p>\n<p>Reflection可以在运行时加载、探知、使用编译期间完全未知的classes。即Java程序可以加载一个运行时才得知名称的class，获取其完整构造，并生成其对象实体、或对其fields设值、或唤起其methods。</p>\n<p>反射（reflection）允许静态语言在运行时（runtime）检查、修改程序的结构与行为。<br>在静态语言中，使用一个变量时，必须知道它的类型。在Java中，变量的类型信息在编译时都保存到了class文件中，这样在运行时才能保证准确无误。</p>\n<p>实现Java反射机制的类都位于java.lang.reflect包中：</p>\n<ol>\n<li>Class类：代表一个类</li>\n<li>Field类：代表类的成员变量（类的属性）</li>\n<li>Method类：代表类的方法</li>\n<li>Constructor类：代表类的构造方法</li>\n<li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法</li>\n</ol>\n<p><strong>优点</strong> ：可以实现动态创建对象和编译，体现出很大的灵活性</p>\n<p><strong>缺点</strong> ：对性能有影响，使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且他满足我们的要求，这类操作总是慢于直接执行相同的操作。</p>\n<h3 id=\"获取Class类的对象\"><a href=\"#获取Class类的对象\" class=\"headerlink\" title=\"获取Class类的对象\"></a>获取Class类的对象</h3><p><strong>举例</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//什么叫反射</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test01</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Object</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br>        <span class=\"hljs-comment\">//通过反射获取类的class对象</span><br>        Class&lt;?&gt; c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        System.out.println(c1);<br><br>        Class&lt;?&gt; c2 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        Class&lt;?&gt; c3 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        Class&lt;?&gt; c4 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br><br>        <span class=\"hljs-comment\">//一个类在内存中只有一个class对象</span><br>        <span class=\"hljs-comment\">//一个类被加载后，类的整个结构都会被封装在class对象</span><br>        System.out.println(c2.hashCode());<br>        System.out.println(c3.hashCode());<br>        System.out.println(c4.hashCode());<br><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//实体类  Pojo</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> id, <span class=\"hljs-keyword\">int</span> age)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> id;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getAge</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> age)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, id=&quot;</span> + id +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">class com.bobo.reflection.User   //得到类的全类名</span><br><span class=\"hljs-comment\">789451787</span><br><span class=\"hljs-comment\">789451787</span><br><span class=\"hljs-comment\">789451787</span><br><span class=\"hljs-comment\">//说明一个类在内存中只有一个class对象 ， 因为创建三个对象的hashcode相同</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高</p>\n<p><code>Class c2 = Class.forName(&quot;com.bobo.reflection.Student&quot;);</code></p>\n</li>\n<li><p>一直某个类的实例，调用该实例的getClass()方法获取Class对象</p>\n<p><code>Class c1 = person.getClass();</code></p>\n</li>\n<li><p>一直一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常</p>\n<p><code>Class&lt;Student&gt; c3 = Student.class;</code></p>\n</li>\n<li><p>内置基本数据类型可以直接用<code>类名.Type</code></p>\n<p><code>Class&lt;Integer&gt; c4 = Integer.TYPE;</code></p>\n</li>\n<li><p>还可以利用ClassLoader</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-comment\">//测试Class类的创建方式有哪些</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test02</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br>        Person person = <span class=\"hljs-keyword\">new</span> Student();<br>        System.out.println(<span class=\"hljs-string\">&quot;这个人是：&quot;</span>+person.name);<br><br>        <span class=\"hljs-comment\">//方式一：通过对象获得</span><br>        Class c1 = person.getClass();<br>        System.out.println(c1.hashCode());<br><br>        <span class=\"hljs-comment\">//方式二：通过forName获得</span><br>        Class c2 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class=\"hljs-comment\">//方式三：通过类名.class获得</span><br>        Class&lt;Student&gt; c3 = Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class=\"hljs-comment\">//方式四：基本内置类型的包装类都有一个Type属性</span><br>        Class&lt;Integer&gt; c4 = Integer.TYPE;<br>        System.out.println(c4);<br><br>        <span class=\"hljs-comment\">//获得父类类型</span><br>        Class c5 = c1.getSuperclass();<br>        System.out.println(c5);<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-keyword\">public</span> String name;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Person</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Person</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name=<span class=\"hljs-string\">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Teacher</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name=<span class=\"hljs-string\">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">这个人是：学生</span><br><span class=\"hljs-comment\">1950409828</span><br><span class=\"hljs-comment\">1950409828</span><br><span class=\"hljs-comment\">1950409828</span><br><span class=\"hljs-comment\">int</span><br><span class=\"hljs-comment\">class com.bobo.reflection.Person</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>所有类型的class对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><br><span class=\"hljs-comment\">//所有类型的Class</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test03</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        Class c1 = Object.class;   <span class=\"hljs-comment\">//类</span><br>        Class c2 = Comparable.class;   <span class=\"hljs-comment\">//接口</span><br>        Class c3 = String[].class;   <span class=\"hljs-comment\">//一维数组</span><br>        Class c4 = <span class=\"hljs-keyword\">int</span>[][].class;   <span class=\"hljs-comment\">//二维数组</span><br>        Class c5 = Override.class;   <span class=\"hljs-comment\">//注解</span><br>        Class c6 = ElementType.class;   <span class=\"hljs-comment\">//枚举类型</span><br>        Class c7 = Integer.class;   <span class=\"hljs-comment\">//基本数据类型</span><br>        Class c8 = <span class=\"hljs-keyword\">void</span>.class;    <span class=\"hljs-comment\">//void</span><br>        Class c9 = Class.class;   <span class=\"hljs-comment\">//Class</span><br><br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>        System.out.println(c6);<br>        System.out.println(c7);<br>        System.out.println(c8);<br>        System.out.println(c9);<br><br><br>        <span class=\"hljs-comment\">//只要是元素类型与维度一样，就是同一个Class</span><br>        <span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">10</span>];<br>        <span class=\"hljs-keyword\">int</span>[] b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">100</span>];<br><br>        System.out.println(a.getClass().hashCode());<br>        System.out.println(b.getClass().hashCode());<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">class java.lang.Object</span><br><span class=\"hljs-comment\">interface java.lang.Comparable</span><br><span class=\"hljs-comment\">class [Ljava.lang.String;</span><br><span class=\"hljs-comment\">class [[I</span><br><span class=\"hljs-comment\">interface java.lang.Override</span><br><span class=\"hljs-comment\">class java.lang.annotation.ElementType</span><br><span class=\"hljs-comment\">class java.lang.Integer</span><br><span class=\"hljs-comment\">void</span><br><span class=\"hljs-comment\">class java.lang.Class</span><br><span class=\"hljs-comment\">580220585</span><br><span class=\"hljs-comment\">580220585</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>只要是元素类型与维度一样，就是同一个Class</li>\n</ul>\n<h3 id=\"类加载内存分析\"><a href=\"#类加载内存分析\" class=\"headerlink\" title=\"类加载内存分析\"></a>类加载内存分析</h3><img src=\"/article/1621/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84.png\" class title=\"img\">\n<p>JVM把class文件加载到内存，并对数据进行校验、准备、解析、初始化，最终形成JVM可以直接使用的Java类型的过程。</p>\n<ol>\n<li><p>加载</p>\n<p>将class字节码文件加载到内存中，并将这些数据转换成方法区中的运行时数据（静态变量、静态代码块、常量池等），在堆中生成一个Class类对象代表这个类（反射原理），作为方法区类数据的访问入口。</p>\n</li>\n<li><p>链接</p>\n<p>将Java类的二进制代码合并到JVM的运行状态之中(JRE)。</p>\n<ul>\n<li>验证<br>确保加载的类信息符合JVM规范，没有安全方面的问题。</li>\n<li>准备<br>正式为类变量(static变量)分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。注意此时的设置初始值为默认值，具体赋值在初始化阶段完成</li>\n<li>解析<br>虚拟机常量池内的符号引用替换为直接引用（地址引用）的过程。</li>\n</ul>\n</li>\n<li><p>初始化</p>\n<p>初始化阶段是执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中的所有类变量的<strong>赋值</strong>动作和<strong>静态语句块(static块)</strong>中的语句合并产生的。</clinit></clinit></p>\n<ul>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化、则需要先初始化其父类。</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</clinit></li>\n</ul>\n</li>\n</ol>\n<p><strong>类的初始化</strong></p>\n<p><code>父类</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;父类被加载&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>子类</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;子类被加载&quot;</span>);<br>        m = <span class=\"hljs-number\">300</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">100</span>;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> M = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>主动引用（一定会初始化）</li>\n</ol>\n<ul>\n<li><p>new一个类的对象；</p>\n</li>\n<li><p>当虚拟启动时，先初始化main方法所在的类；</p>\n</li>\n<li><p>调用类的静态成员(除了final常量)和静态方法；</p>\n</li>\n<li><p>使用java.lang.reflect包的方法对类进行反射调用；</p>\n</li>\n<li><p>当初始化一个类，如果其父类没有被初始化，则先会初始化他的父类</p>\n</li>\n</ul>\n<p><code>实现类</code>new一个类的对象主动引用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-comment\">//测试类什么时候会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//主动引用</span><br>        Son son = <span class=\"hljs-keyword\">new</span> Son();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">父类被加载</span><br><span class=\"hljs-comment\">子类被加载</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><code>实现类</code>反射产生主动引用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-comment\">//测试类什么时候会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br>      <span class=\"hljs-comment\">//反射产生主动引用</span><br>      Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Son&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">父类被加载</span><br><span class=\"hljs-comment\">子类被加载</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>被动引用</li>\n</ol>\n<ul>\n<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。例如：通过子类引用父类的静态变量，不会导致子类初始化。</li>\n<li>通过数组定义类引用，不会触发此类的初始化。</li>\n<li>引用常量不会触发此类的初始化（常量在编译阶段就存入调用类的常量池中了）。</li>\n</ul>\n<p><code>实现类</code>子类引用父类的静态变量，不会导致子类的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//测试类什么时候不会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br><br>        <span class=\"hljs-comment\">//不会产生类的引用的方法</span><br>        <span class=\"hljs-comment\">//子类引用父类的静态变量，不会导致子类的初始化</span><br>        System.out.println(Son.b);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">父类被加载</span><br><span class=\"hljs-comment\">2</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><code>实现类</code>只是为一片内存赋名，不会初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//测试类什么时候不会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//只是为一片内存赋名，不会初始化</span><br>        Son[] array = <span class=\"hljs-keyword\">new</span> Son[<span class=\"hljs-number\">5</span>];<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><code>实现类</code>只是为一片内存赋名，不会初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//测试类什么时候不会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//引用常量不会触发此类的初始化</span><br>        System.out.println(Son.M);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">1</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"类加载器的原理\"><a href=\"#类加载器的原理\" class=\"headerlink\" title=\"类加载器的原理\"></a>类加载器的原理</h3><p><strong>类缓存</strong></p>\n<p>标准的Java SE类加载器可以按要求查找类，一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过，JVM垃圾收集器可以回收这些Class对象。</p>\n<p><strong>类加载的作用</strong></p>\n<p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p>\n<img src=\"/article/1621/1516208-20200126152957474-364815257.png\" class title=\"img\">\n<p><strong>类加载器分类</strong></p>\n<img src=\"/article/1621/376.png\" class title=\"img\">\n<ul>\n<li><p>自底向上检查类是否已装载</p>\n</li>\n<li><p>自顶向下尝试加载类</p>\n</li>\n</ul>\n<ol>\n<li><p>引导类加载器（bootstrap class loader）</p>\n<ol>\n<li>它用来加载 Java 的核心库(JAVA_HOME/jre/lib/rt.jar,sun.boot.class.path路径下的内容)，是用原生代码（C语言）来实现的，并不继承自 java.lang.ClassLoader。</li>\n<li>加载扩展类和应用程序类加载器。并指定他们的父类加载器。</li>\n</ol>\n</li>\n<li><p>扩展类加载器（extensions class loader）</p>\n<ol>\n<li>用来加载 Java 的扩展库(JAVA_HOME/jre/ext/*.jar，或java.ext.dirs路径下的内容) 。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java类。</li>\n<li>由sun.misc.Launcher$ExtClassLoader实现。</li>\n</ol>\n</li>\n<li><p>应用程序类加载器（application class loader）</p>\n<ol>\n<li>它根据 Java 应用的类路径（classpath，java.class.path 路径下的内容）来加载 Java 类。<strong>一般来说，Java 应用的类都是由它来完成加载的。</strong></li>\n<li>由sun.misc.Launcher$AppClassLoader实现。</li>\n</ol>\n</li>\n<li><p>自定义类加载器</p>\n<ol>\n<li>开发人员可以通过继承 java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test06</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br><br>        <span class=\"hljs-comment\">//获取系统类的加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class=\"hljs-comment\">//获取系统类加载起的父类加载器 --&gt; 扩展类加载器</span><br>        ClassLoader parent = systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class=\"hljs-comment\">//获取扩展类加载起的父类加载器 --&gt; 根类加载器（C/C++）</span><br>        ClassLoader grandparent = parent.getParent();<br>        <span class=\"hljs-comment\">//用来装载核心类库，改加载类无法直接获取</span><br>        System.out.println(grandparent);<br><br>        <span class=\"hljs-comment\">//测试当前类是哪个加载起加载的</span><br>        ClassLoader classLoader = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Test06&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class=\"hljs-comment\">//测试jdk内置的类是哪个加载起加载的</span><br>        classLoader = Class.forName(<span class=\"hljs-string\">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class=\"hljs-comment\">//如何获得系统类加载器可以加载的路径</span><br>        System.out.println(System.getProperty(<span class=\"hljs-string\">&quot;java.class.path&quot;</span>));<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">jdk.internal.loader.ClassLoaders$AppClassLoader@55054057</span><br><span class=\"hljs-comment\">jdk.internal.loader.ClassLoaders$PlatformClassLoader@2f0e140b</span><br><span class=\"hljs-comment\">null</span><br><span class=\"hljs-comment\">jdk.internal.loader.ClassLoaders$AppClassLoader@55054057</span><br><span class=\"hljs-comment\">null</span><br><span class=\"hljs-comment\">/Users/renbo/Desktop/研究生/学习笔记/编程/JAVA/狂神/relfection/target/classes</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>使用JDK11编译结果如上</p>\n</li>\n<li><p>使用JDK8编译结果如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">sun.misc.Launcher$AppClassLoader@18b4aac2<br>sun.misc.Launcher$ExtClassLoader@1b6d3586<br><span class=\"hljs-keyword\">null</span><br>sun.misc.Launcher$AppClassLoader@18b4aac2<br><span class=\"hljs-keyword\">null</span><br> /Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/charsets.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/deploy.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/cldrdata.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/dnsns.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/jaccess.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/jfxrt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/localedata.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/nashorn.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/sunec.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/zipfs.ja;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/javaws.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jce.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jfr.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jfxswt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jsse.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/management-agent.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/plugin.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/resources.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/rt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/ant-javafx.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/dt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/javafx-mx.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/jconsole.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/packager.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/sa-jdi.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/tools.jar;<br>/Users/renbo/Desktop/研究生/学习笔记/编程/JAVA/狂神/relfection/target/classes<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>双亲委派机制</strong></p>\n<img src=\"/article/1621/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E5%9B%BE%E8%A7%A3.png\" class title=\"img\">\n<ol>\n<li>如果一个类加载器收到了类加载请求，它并不会自己先加载，而是把这个请求委托给父类的加载器去执行</li>\n<li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的引导类加载器；</li>\n<li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委派机制</li>\n<li>父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常</li>\n</ol>\n<p><strong>优势</strong></p>\n<ul>\n<li>避免类的重复加载</li>\n<li>保护程序安全，防止核心API被随意篡改<ul>\n<li>自定义类：java.lang.String (没用)</li>\n<li>自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"获得类的运行时结构\"><a href=\"#获得类的运行时结构\" class=\"headerlink\" title=\"获得类的运行时结构\"></a>获得类的运行时结构</h3><p>Java中反射获取类的成员时需要调用getFields()、getDeclaredFields()；getMethods()、getDeclaredMethods()；getConstructors()、getDeclaredConstructoers()等方法获取Field、Method、Constructor对象，这几对方法的主要区别如下： </p>\n<ol>\n<li><p>getFields()与getDeclaredFields()</p>\n<p>getFields()返回类中所有public的字段,包括从父类或接口继承的public字段；<br>getDeclaredFields()返回本类中声明的所有字段，包括public、protected、private字段，不包括从父类或接口继承的字段 </p>\n</li>\n<li><p>getMethods()与getDeclaredMethods()<br> getMethods()返回类中所有public的方法，包括从父类或接口继承的public方法<br> getDeclaredMethods()返回本类中声明的所有方法，包括public、protected、private方法，不包括从父类或接口继承的方法 </p>\n</li>\n<li><p>getConstructors()与getDeclaredConstructors()<br> getConstructors()返回类中所有public的构造方法；<br> getDeclaredConstructors()返回类中声明的所有构造方法，包括public、protected、private构造方法</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">//获得类的信息</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test07</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;<br>        Class c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        c1 = user.getClass();<br><br>        <span class=\"hljs-comment\">//获得类的名字</span><br>        System.out.println(c1.getName());    <span class=\"hljs-comment\">//获得包名+类名</span><br>        System.out.println(c1.getSimpleName());   <span class=\"hljs-comment\">//获得类名</span><br><br>        <span class=\"hljs-comment\">//获得类得属性</span><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        Field[] fields = c1.getFields();  <span class=\"hljs-comment\">//getFields()只能找到public属性</span><br>        fields = c1.getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>        Field name = c1.getDeclaredField(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        System.out.println(name);<br><br>        <span class=\"hljs-comment\">//获得类的方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        Method[] methods = c1.getMethods();   <span class=\"hljs-comment\">//获得本类及其父类的全部public方法</span><br>        Method[] declaredMethods = c1.getDeclaredMethods();   <span class=\"hljs-comment\">//获得本类的全部方法</span><br><br>        <span class=\"hljs-keyword\">for</span> (Method method : methods) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;正常的：&quot;</span>+method);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (Method declaredMethod : declaredMethods) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;declaredMethod:&quot;</span>+declaredMethod);<br>        &#125;<br><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        <span class=\"hljs-comment\">//获得指定方法</span><br>        <span class=\"hljs-comment\">//重载</span><br>        Method getName = c1.getMethod(<span class=\"hljs-string\">&quot;getName&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        Method setName = c1.getMethod(<span class=\"hljs-string\">&quot;setName&quot;</span>, String.class);<br>        System.out.println(getName);<br>        System.out.println(setName);<br><br>        <span class=\"hljs-comment\">//获得指定的构造器</span><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        Constructor[] constructors = c1.getConstructors();<br>        Constructor[] declaredConstructors = c1.getDeclaredConstructors();<br><br>        <span class=\"hljs-keyword\">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (Constructor declaredConstructor : declaredConstructors) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;#&quot;</span>+declaredConstructor);<br>        &#125;<br><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        <span class=\"hljs-comment\">//获得指定的构造器</span><br>        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class, <span class=\"hljs-keyword\">int</span>.class, <span class=\"hljs-keyword\">int</span>.class);<br>        System.out.println(<span class=\"hljs-string\">&quot;指定+&quot;</span>+declaredConstructor);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">com.bobo.reflection.User</span><br><span class=\"hljs-comment\">User</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">private java.lang.String com.bobo.reflection.User.name</span><br><span class=\"hljs-comment\">private int com.bobo.reflection.User.id</span><br><span class=\"hljs-comment\">private int com.bobo.reflection.User.age</span><br><span class=\"hljs-comment\">private java.lang.String com.bobo.reflection.User.name</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">正常的：public java.lang.String com.bobo.reflection.User.getName()</span><br><span class=\"hljs-comment\">正常的：public java.lang.String com.bobo.reflection.User.toString()</span><br><span class=\"hljs-comment\">正常的：public void com.bobo.reflection.User.setName(java.lang.String)</span><br><span class=\"hljs-comment\">正常的：public int com.bobo.reflection.User.getId()</span><br><span class=\"hljs-comment\">正常的：public void com.bobo.reflection.User.setId(int)</span><br><span class=\"hljs-comment\">正常的：public int com.bobo.reflection.User.getAge()</span><br><span class=\"hljs-comment\">正常的：public void com.bobo.reflection.User.setAge(int)</span><br><span class=\"hljs-comment\">正常的：public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class=\"hljs-comment\">正常的：public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class=\"hljs-comment\">正常的：public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class=\"hljs-comment\">正常的：public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class=\"hljs-comment\">正常的：public native int java.lang.Object.hashCode()</span><br><span class=\"hljs-comment\">正常的：public final native java.lang.Class java.lang.Object.getClass()</span><br><span class=\"hljs-comment\">正常的：public final native void java.lang.Object.notify()</span><br><span class=\"hljs-comment\">正常的：public final native void java.lang.Object.notifyAll()</span><br><span class=\"hljs-comment\">declaredMethod:public java.lang.String com.bobo.reflection.User.getName()</span><br><span class=\"hljs-comment\">declaredMethod:public java.lang.String com.bobo.reflection.User.toString()</span><br><span class=\"hljs-comment\">declaredMethod:public void com.bobo.reflection.User.setName(java.lang.String)</span><br><span class=\"hljs-comment\">declaredMethod:public int com.bobo.reflection.User.getId()</span><br><span class=\"hljs-comment\">declaredMethod:public void com.bobo.reflection.User.setId(int)</span><br><span class=\"hljs-comment\">declaredMethod:public int com.bobo.reflection.User.getAge()</span><br><span class=\"hljs-comment\">declaredMethod:public void com.bobo.reflection.User.setAge(int)</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">public java.lang.String com.bobo.reflection.User.getName()</span><br><span class=\"hljs-comment\">public void com.bobo.reflection.User.setName(java.lang.String)</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">public com.bobo.reflection.User()</span><br><span class=\"hljs-comment\">public com.bobo.reflection.User(java.lang.String,int,int)</span><br><span class=\"hljs-comment\">#public com.bobo.reflection.User()</span><br><span class=\"hljs-comment\">#public com.bobo.reflection.User(java.lang.String,int,int)</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">指定+public com.bobo.reflection.User(java.lang.String,int,int)</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>invoke()方法：用于调用指定的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">Object <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Object obj,Object... args)</span></span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>第一个Object对应原方法的返回值，若原方法无返回值则返回null</li>\n<li>括号里的第一个Object代表调用这个方法的对象</li>\n<li>若原方法形参列表为空，Object[] args为null</li>\n<li>如果原方法声明为private，需要在调用invoke()之前调用setAccessible()方法</li>\n</ul>\n<p><strong>setAccessible()方法：用于启动和禁止访问安全检查的开关</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAccessible</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> flag)</span></span><br></code></pre></td></tr></table></figure>\n<p>参数为false表示反射的对象应该实施访问检查，参数为true则关闭</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">//动态的创建对象，通过反射</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test08</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;<br>        <span class=\"hljs-comment\">//获得Class对象</span><br>        Class c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br><br>        <span class=\"hljs-comment\">//构造一个对象</span><br>        <span class=\"hljs-comment\">//User user = (User) c1.newInstance();   //本质是调用了类无参构造器</span><br>        <span class=\"hljs-comment\">//System.out.println(user);</span><br>        Constructor constructor = (Constructor) c1.getDeclaredConstructor(String.class, <span class=\"hljs-keyword\">int</span>.class, <span class=\"hljs-keyword\">int</span>.class);<br>        User user2 = (User) constructor.newInstance(<span class=\"hljs-string\">&quot;bobo&quot;</span>, <span class=\"hljs-number\">001</span>, <span class=\"hljs-number\">18</span>);<br>        System.out.println(user2);<br><br>        <span class=\"hljs-comment\">//通过反射调用普通方法</span><br>        User user3 = (User) c1.newInstance();<br>        <span class=\"hljs-comment\">//通过反射获取一个方法</span><br>        Method setName = c1.getDeclaredMethod(<span class=\"hljs-string\">&quot;setName&quot;</span>, String.class);<br>        <span class=\"hljs-comment\">//invoke() 激活</span><br>        <span class=\"hljs-comment\">//(对象，&quot;方法的值&quot;)</span><br>        setName.invoke(user3,<span class=\"hljs-string\">&quot;bobo&quot;</span>);<br>        System.out.println(user3.getName());<br><br>        <span class=\"hljs-comment\">//通过反射操作属性</span><br>        System.out.println(<span class=\"hljs-string\">&quot;================================&quot;</span>);<br>        User user4 = (User) c1.newInstance();<br>        Field name = c1.getDeclaredField(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        <span class=\"hljs-comment\">//不能直接操作私有属性，我们需要关闭程序的安全检测   属性或者方法的 setAccessible(true)</span><br>        name.setAccessible(<span class=\"hljs-keyword\">true</span>);<br>        name.set(user4,<span class=\"hljs-string\">&quot;bobo2&quot;</span>);<br>        System.out.println(user4.getName());<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">User&#123;name=&#x27;bobo&#x27;, id=1, age=18&#125;</span><br><span class=\"hljs-comment\">bobo</span><br><span class=\"hljs-comment\">================================</span><br><span class=\"hljs-comment\">bobo2</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"性能对比分析\"><a href=\"#性能对比分析\" class=\"headerlink\" title=\"性能对比分析\"></a>性能对比分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">//分析性能问题</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test09</span> </span>&#123;<br><br>    <span class=\"hljs-comment\">//普通方式调用</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">()</span></span>&#123;<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        <span class=\"hljs-comment\">//获取开始时间</span><br>        <span class=\"hljs-keyword\">long</span> startTime = System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class=\"hljs-comment\">//获取结束时间</span><br>        <span class=\"hljs-keyword\">long</span> endTime = System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;普通方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//反射方式调用</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test02</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class=\"hljs-string\">&quot;getName&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-comment\">//获取开始时间</span><br>        <span class=\"hljs-keyword\">long</span> startTime = System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000000</span>; i++) &#123;<br>            getName.invoke(user, <span class=\"hljs-keyword\">null</span>);<br>        &#125;<br>        <span class=\"hljs-comment\">//获取结束时间</span><br>        <span class=\"hljs-keyword\">long</span> endTime = System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;反射方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//反射方式调用  关闭检测</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test03</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class=\"hljs-string\">&quot;getName&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        getName.setAccessible(<span class=\"hljs-keyword\">true</span>);<br>        <span class=\"hljs-comment\">//获取开始时间</span><br>        <span class=\"hljs-keyword\">long</span> startTime = System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000000</span>; i++) &#123;<br>            getName.invoke(user, <span class=\"hljs-keyword\">null</span>);<br>        &#125;<br>        <span class=\"hljs-comment\">//获取结束时间</span><br>        <span class=\"hljs-keyword\">long</span> endTime = System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;关闭检测，反射方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InvocationTargetException, NoSuchMethodException, IllegalAccessException </span>&#123;<br>        test01();<br>        test02();<br>        test03();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">普通方式执行<span class=\"hljs-number\">10</span>亿次：5ms<br>反射方式执行<span class=\"hljs-number\">10</span>亿次：2470ms<br>关闭检测，反射方式执行<span class=\"hljs-number\">10</span>亿次：1169ms<br></code></pre></td></tr></table></figure>\n<p><strong>反射操作泛型</strong></p>\n<p>Java采用泛型擦除机制来引入泛型。Java中的泛型仅仅是给编译器Javac使用的，确保数据的安全性和免去强制类型转换的麻烦。但是编译一旦完成，所有和泛型有关的类型全部被擦除。</p>\n<p>为了通过反射操作这些类型以迎合实际开发的需要，Java新增了ParameterizedType,GenericArrayType,TypeVariable和WildcardType几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型。 </p>\n<ul>\n<li><code>ParameterizedType</code>:表示一种参数化的类型，比如<code>Collection&lt;String&gt;</code></li>\n<li><code>GenericArrayType</code>:表示一种元素类型是参数化类型或者类型变量的数组类型</li>\n<li><code>TypeVariable</code>:是各种类型变量的公共父接口</li>\n<li><code>WildcardType</code>:代表一种通配符类型表达式，比如<code>？</code>、<code>？ extends Number</code>、<code>？ super Integer</code>。（wildcard是一个单词：就是”通配符“）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Parameter;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.ParameterizedType;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Type;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">//通过反射获取泛型</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;test01&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map&lt;String ,User&gt; <span class=\"hljs-title\">test02</span><span class=\"hljs-params\">()</span></span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;test02&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> NoSuchMethodException </span>&#123;<br>        <span class=\"hljs-comment\">//参数是泛型</span><br>        Method method = Test.class.getMethod(<span class=\"hljs-string\">&quot;test01&quot;</span>, Map.class, List.class);<br>        Type[] genericParameterTypes = method.getGenericParameterTypes();<br>        <span class=\"hljs-keyword\">for</span> (Type genericParameterType : genericParameterTypes) &#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;genericParameterType:&quot;</span>+genericParameterType);<br>            <span class=\"hljs-keyword\">if</span> (genericParameterType <span class=\"hljs-keyword\">instanceof</span> ParameterizedType)&#123;<br>                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();<br>                <span class=\"hljs-keyword\">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                    System.out.println(actualTypeArgument);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//返回值是泛型</span><br>        method = Test.class.getMethod(<span class=\"hljs-string\">&quot;test02&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        Type genericReturnType = method.getGenericReturnType();<br>        <span class=\"hljs-keyword\">if</span> (genericReturnType <span class=\"hljs-keyword\">instanceof</span> ParameterizedType)&#123;<br>            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();<br>            <span class=\"hljs-keyword\">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                System.out.println(actualTypeArgument);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">返回结果：<br>genericParameterType:java.util.Map&lt;java.lang.String,com.bobo.reflection.User&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">lang</span>.<span class=\"hljs-title\">String</span></span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span></span><br><span class=\"hljs-class\"><span class=\"hljs-title\">genericParameterType</span>:<span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">util</span>.<span class=\"hljs-title\">List</span>&lt;<span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span>&gt;</span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span></span><br><span class=\"hljs-class\">  </span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">lang</span>.<span class=\"hljs-title\">String</span></span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span></span><br></code></pre></td></tr></table></figure>\n<h2 id=\"反射操作注解\"><a href=\"#反射操作注解\" class=\"headerlink\" title=\"反射操作注解\"></a>反射操作注解</h2><p><strong>获取注解的方法：</strong></p>\n<ul>\n<li>Class.getAnnotations() 获取所有的注解，包括自己声明的以及继承的</li>\n<li>Class.getAnnotation(Class&lt; A &gt; annotationClass) 获取指定的注解，该注解可以是自己声明的，也可以是继承的</li>\n<li>Class.getDeclaredAnnotations() 获取自己声明的注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.*;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-comment\">//练习反射操作注解</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test11</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        Class c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Students&quot;</span>);<br><br>        <span class=\"hljs-comment\">//通过反射获取注解</span><br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class=\"hljs-keyword\">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<br>        &#125;<br><br>        <span class=\"hljs-comment\">//获得注解的value的值</span><br>        Tablebobo tablebobo = (Tablebobo) c1.getAnnotation(Tablebobo.class);<br>        String value = tablebobo.value();<br>        System.out.println(value);<br><br>        <span class=\"hljs-comment\">//获得类指定的注解</span><br>        Field name = c1.getDeclaredField(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        Filebobo annotation = name.getAnnotation(Filebobo.class);<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.length());<br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Tablebobo(&quot;db_students&quot;)</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Students</span></span>&#123;<br>    <span class=\"hljs-meta\">@Filebobo(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-meta\">@Filebobo(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;<br>    <span class=\"hljs-meta\">@Filebobo(columnName = &quot;db_name&quot;,type = &quot;varcher&quot;,length = 3)</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Students</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Students</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id, <span class=\"hljs-keyword\">int</span> age, String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> id;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getAge</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> age)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Students&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;id=&quot;</span> + id +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//@Target  注解作用域</span><br><span class=\"hljs-comment\">//@Rtention  在什么级别可以获取</span><br><span class=\"hljs-comment\">//类名的注解</span><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@interface</span> Tablebobo&#123;<br>    <span class=\"hljs-function\">String <span class=\"hljs-title\">value</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><br><span class=\"hljs-comment\">//属性的注解</span><br><span class=\"hljs-meta\">@Target(ElementType.FIELD)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@interface</span> Filebobo&#123;<br>    <span class=\"hljs-function\">String <span class=\"hljs-title\">columnName</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\">String <span class=\"hljs-title\">type</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">length</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">运行结果：<br><span class=\"hljs-meta\">@com</span>.bobo.reflection.Tablebobo(<span class=\"hljs-string\">&quot;db_students&quot;</span>)<br>db_students<br>db_name<br>varcher<br><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p>Shadow, with her veil drawn, follows Light in secret meekness,with her silent steps of love.</p>\n<p>阴影戴上她的面幕，秘密地，温顺地，用她的沉默的爱的脚步，跟在“光”后边。</p>\n</blockquote>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p>\n<p>Java 语言中的类、方法、变量、参数和包等都可以被标注。</p>\n<p><strong>Annotation作用</strong></p>\n<ul>\n<li>不是程序本身，可以对程序作出解释</li>\n<li>可以被其他程序（如编译器等）读取</li>\n</ul>\n<p><strong>Annotation格式</strong></p>\n<ul>\n<li>注解是以”@注释名”在代码中存在，还可以添加一些参数值</li>\n</ul>\n<p><strong>Annotation在哪里使用？</strong></p>\n<p>可以附加在package，class，method，field等上面相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</p>\n<h3 id=\"内置的注解\"><a href=\"#内置的注解\" class=\"headerlink\" title=\"内置的注解\"></a>内置的注解</h3><p>Java 定义了一套注解，共有 7 个，3 个在 java.lang 中，剩下 4 个在 java.lang.annotation 中。</p>\n<p><strong>作用在代码的注解是</strong></p>\n<ul>\n<li><code>@Override</code> - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li>\n<li><code>@Deprecated</code> - 标记过时方法。如果使用该方法，会报编译警告。表示不鼓励程序员</li>\n<li><code>@SuppressWarnings</code> - 指示编译器去忽略注解中声明的警告。</li>\n</ul>\n<p><strong>作用在其他注解的注解(或者说 元注解)是</strong></p>\n<ul>\n<li><p><code>@Retention</code> - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。(SOURCE &lt; CLASS &lt; RUNTIME)</p>\n<blockquote>\n<ul>\n<li>a) 若 Annotation 的类型为 SOURCE，则意味着：Annotation 仅存在于编译器处理期间，编译器处理完之后，该 Annotation 就没用了。 例如，” @Override” 标志就是一个 Annotation。当它修饰一个方法的时候，就意味着该方法覆盖父类的方法；并且在编译期间会进行语法检查！编译器处理完后，”@Override” 就没有任何作用了。</li>\n<li>b) 若 Annotation 的类型为 CLASS，则意味着：编译器将 Annotation 存储于类对应的 .class 文件中，它是 Annotation 的默认行为。</li>\n<li>c) 若 Annotation 的类型为 RUNTIME，则意味着：编译器将 Annotation 存储于 class 文件中，并且可由JVM读入。</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>@Documented</code> - 标记这些注解是否包含在用户文档中。</p>\n</li>\n<li><p><code>@Target</code> - 标记这个注解应该是哪种 Java 成员。(被描述的注解可以用在什么地方)</p>\n</li>\n<li><p><code>@Inherited</code> - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</p>\n</li>\n<li><p><strong>使用元注解自定义一个简单注解</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> MyAnnotation1 &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>@interface</li>\n</ol>\n<p>使用 @interface 定义注解时，意味着它实现了 java.lang.annotation.Annotation 接口，即该注解就是一个Annotation。</p>\n<p><strong>定义 Annotation 时，@interface 是必须的。</strong></p>\n<p>注意：它和我们通常的 implemented 实现接口的方法不同。Annotation 接口的实现细节都由编译器完成。通过 @interface 定义注解后，该注解不能继承其他的注解或接口。</p>\n<ol start=\"2\">\n<li>@Documented*</li>\n</ol>\n<p>类和方法的 Annotation 在缺省情况下是不出现在 javadoc 中的。如果使用 @Documented 修饰该 Annotation，则表示它可以出现在 javadoc 中。</p>\n<p>定义 Annotation 时，@Documented 可有可无；若没有定义，则 Annotation 不会出现在 javadoc 中。</p>\n<ol start=\"3\">\n<li>@Target(ElementType.TYPE)</li>\n</ol>\n<p>前面我们说过，ElementType 是 Annotation 的类型属性。而 @Target 的作用，就是来指定 Annotation 的类型属性。</p>\n<p>@Target(ElementType.TYPE) 的意思就是指定该 Annotation 的类型是 ElementType.TYPE。这就意味着，MyAnnotation1 是来修饰”类、接口（包括注释类型）或枚举声明”的注解。</p>\n<p>定义 Annotation 时，@Target 可有可无。若有 @Target，则该 Annotation 只能用于它所指定的地方；若没有 @Target，则该 Annotation 可以用于任何地方。</p>\n<ol start=\"4\">\n<li>@Retention(RetentionPolicy.RUNTIME)</li>\n</ol>\n<p>前面我们说过，RetentionPolicy 是 Annotation 的策略属性，而 @Retention 的作用，就是指定 Annotation 的策略属性。</p>\n<p>@Retention(RetentionPolicy.RUNTIME) 的意思就是指定该 Annotation 的策略是 RetentionPolicy.RUNTIME。这就意味着，编译器会将该 Annotation 信息保留在 .class 文件中，并且能被虚拟机读取。</p>\n<p>定义 Annotation 时，@Retention 可有可无。若没有 @Retention，则默认是 RetentionPolicy.CLASS。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>从 Java 7 开始，额外添加了 3 个注解</strong></p>\n<ul>\n<li><code>@SafeVarargs</code> - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li>\n<li><code>@FunctionalInterface</code> - Java 8 开始支持，标识一个匿名函数或函数式接口。</li>\n<li><code>@Repeatable</code> - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li>\n</ul>\n<p><strong>Annotation 架构</strong></p>\n<img src=\"/article/1621/Annotation%E6%9E%B6%E6%9E%84.jpg\" class title=\"img\">\n<p>从中，我们可以看出：</p>\n<ol>\n<li><p>1 个 Annotation 和 1 个 RetentionPolicy 关联。</p>\n<p>每1个Annotation对象，都会有唯一的RetentionPolicy属性。</p>\n</li>\n<li><p>1 个 Annotation 和 1~n 个 ElementType 关联。</p>\n<p>对于每 1 个 Annotation 对象，可以有若干个 ElementType 属性。</p>\n</li>\n<li><p>Annotation 有许多实现类，包括：Deprecated, Documented, Inherited, Override 等等。</p>\n<p>Annotation 的每一个实现类，都 “和 1 个 RetentionPolicy 关联” 并且 “ 和 1~n 个 ElementType 关联”。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Deprecated</span>  -- <span class=\"hljs-meta\">@Deprecated</span> 所标注内容，不再被建议使用。<br><span class=\"hljs-meta\">@Override</span>    -- <span class=\"hljs-meta\">@Override</span> 只能标注方法，表示该方法覆盖父类中的方法。<br><span class=\"hljs-meta\">@Documented</span>  -- <span class=\"hljs-meta\">@Documented</span> 所标注内容，可以出现在javadoc中。<br><span class=\"hljs-meta\">@Inherited</span>   -- <span class=\"hljs-meta\">@Inherited</span>只能被用来标注“Annotation类型”，它所标注的Annotation具有继承性。<br><span class=\"hljs-meta\">@Retention</span>   -- <span class=\"hljs-meta\">@Retention</span>只能被用来标注“Annotation类型”，而且它被用来指定Annotation的RetentionPolicy属性。<br><span class=\"hljs-meta\">@Target</span>      -- <span class=\"hljs-meta\">@Target</span>只能被用来标注“Annotation类型”，而且它被用来指定Annotation的ElementType属性。<br><span class=\"hljs-meta\">@SuppressWarnings</span> -- <span class=\"hljs-meta\">@SuppressWarnings</span> 所标注内容产生的警告，编译器会对这些警告保持静默。<br></code></pre></td></tr></table></figure>\n<h3 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a><strong>自定义注解</strong></h3><p>使用@interface自定义注解时，自动继承 java.lang.annotation.Annotation接口</p>\n<p>分析：</p>\n<ul>\n<li>@interface用来声明一个注解，格式<code>public @interface 注解名&#123;定义内容&#125;</code></li>\n<li>其中每一个方法实际上是声明了一个参数配置；</li>\n<li>方法的名称就是参数的名称；</li>\n<li>返回值类型就是参数的类型（返回值只能是基本类型，Class，String，enum）；</li>\n<li>可以通过default来声明参数的默认值；</li>\n<li>如果只有一个参数成员，一般参数名为value；</li>\n<li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//定义注解类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestAnnotation</span></span>&#123;<br>  <span class=\"hljs-meta\">@MyAnnotation(name = &quot;bobo&quot;)</span><span class=\"hljs-comment\">// name没有默认值，所以必须赋值，age有默认值可以不赋值</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>  <span class=\"hljs-meta\">@MyAnnotation0(&quot;bobo&quot;)</span>  <span class=\"hljs-comment\">//当只有一个参数并且参数名为value时，可以直接写参数值，省略参数名</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test0</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@interface</span> MyAnnotation&#123;<br>  <span class=\"hljs-comment\">//注解的参数  :  参数类型 + 参数名();</span><br>  <span class=\"hljs-function\">String <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span></span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">age</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> 0</span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">id</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span></span>;  <span class=\"hljs-comment\">//如果默认值为 -1 ，代表不存在</span><br>&#125;<br><br><span class=\"hljs-meta\">@interface</span> MyAnnotation0&#123;<br>  <span class=\"hljs-function\">String <span class=\"hljs-title\">value</span><span class=\"hljs-params\">()</span></span>;     <span class=\"hljs-comment\">//当只有一个参数时，参数名可以默认为value</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Annotation-的作用\"><a href=\"#Annotation-的作用\" class=\"headerlink\" title=\"Annotation 的作用\"></a>Annotation 的作用</h3><ol>\n<li>编译检查</li>\n<li>在反射中使用 Annotation</li>\n<li>根据 Annotation 生成帮助文档</li>\n<li>能够帮忙查看查看代码</li>\n</ol>\n<h2 id=\"反射机制\"><a href=\"#反射机制\" class=\"headerlink\" title=\"反射机制\"></a>反射机制</h2><p><code>Class c = Class.forName(&quot;java.lang.String&quot;)</code></p>\n<p>反射指的是我们可以在运行期间加载、探知、使用编译期间完全未知的类。是一个动态的机制，允许我们通过字符串来指挥程序实例化，操作属性、调用方法。使得代码提高了灵活性，但是同时也带来了更多的资源开销。</p>\n<p>加载完类之后，在堆内存中，就产生了一个 Class 类型的对象（一个 类只有一个 Class 对象），这个对象就包含了完整的类的结构信息。 我们可以通过这个对象看到类的结构。</p>\n<p>正常方式：<code>引入需要的“包类”名称</code>—&gt;<code>通过new实例化</code>—&gt;<code>取的实例化对象</code></p>\n<p>反射方式：<code>实例化对象</code>—&gt;<code>getCLass()方法</code>—&gt;<code>得到完整的“包类”名称</code></p>\n<h3 id=\"Java中为什么需要反射？反射要解决什么问题？\"><a href=\"#Java中为什么需要反射？反射要解决什么问题？\" class=\"headerlink\" title=\"Java中为什么需要反射？反射要解决什么问题？\"></a>Java中为什么需要反射？反射要解决什么问题？</h3><p>Java中编译类型有两种：</p>\n<ul>\n<li><strong>静态编译</strong>：在编译时确定类型，绑定对象即通过。</li>\n<li><strong>动态编译</strong>：运行时确定类型，绑定对象。动态编译最大限度地发挥了Java的灵活性，体现了多态的应用，可以减低类之间的耦合性。</li>\n</ul>\n<p>反射是Java被视为动态（或准动态）语言的关键，反射机制允许程序在执行期借助Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。包括其modifiers（诸如public、static等）、superclass（例如Object）、实现之interfaces（例如Cloneable），也包括fields和methods的所有信息，并可于运行时改变fields内容或唤起methods。</p>\n<p>Reflection可以在运行时加载、探知、使用编译期间完全未知的classes。即Java程序可以加载一个运行时才得知名称的class，获取其完整构造，并生成其对象实体、或对其fields设值、或唤起其methods。</p>\n<p>反射（reflection）允许静态语言在运行时（runtime）检查、修改程序的结构与行为。<br>在静态语言中，使用一个变量时，必须知道它的类型。在Java中，变量的类型信息在编译时都保存到了class文件中，这样在运行时才能保证准确无误。</p>\n<p>实现Java反射机制的类都位于java.lang.reflect包中：</p>\n<ol>\n<li>Class类：代表一个类</li>\n<li>Field类：代表类的成员变量（类的属性）</li>\n<li>Method类：代表类的方法</li>\n<li>Constructor类：代表类的构造方法</li>\n<li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法</li>\n</ol>\n<p><strong>优点</strong> ：可以实现动态创建对象和编译，体现出很大的灵活性</p>\n<p><strong>缺点</strong> ：对性能有影响，使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且他满足我们的要求，这类操作总是慢于直接执行相同的操作。</p>\n<h3 id=\"获取Class类的对象\"><a href=\"#获取Class类的对象\" class=\"headerlink\" title=\"获取Class类的对象\"></a>获取Class类的对象</h3><p><strong>举例</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//什么叫反射</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test01</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Object</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br>        <span class=\"hljs-comment\">//通过反射获取类的class对象</span><br>        Class&lt;?&gt; c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        System.out.println(c1);<br><br>        Class&lt;?&gt; c2 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        Class&lt;?&gt; c3 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        Class&lt;?&gt; c4 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br><br>        <span class=\"hljs-comment\">//一个类在内存中只有一个class对象</span><br>        <span class=\"hljs-comment\">//一个类被加载后，类的整个结构都会被封装在class对象</span><br>        System.out.println(c2.hashCode());<br>        System.out.println(c3.hashCode());<br>        System.out.println(c4.hashCode());<br><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//实体类  Pojo</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> id, <span class=\"hljs-keyword\">int</span> age)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> id;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getAge</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> age)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, id=&quot;</span> + id +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">class com.bobo.reflection.User   //得到类的全类名</span><br><span class=\"hljs-comment\">789451787</span><br><span class=\"hljs-comment\">789451787</span><br><span class=\"hljs-comment\">789451787</span><br><span class=\"hljs-comment\">//说明一个类在内存中只有一个class对象 ， 因为创建三个对象的hashcode相同</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高</p>\n<p><code>Class c2 = Class.forName(&quot;com.bobo.reflection.Student&quot;);</code></p>\n</li>\n<li><p>一直某个类的实例，调用该实例的getClass()方法获取Class对象</p>\n<p><code>Class c1 = person.getClass();</code></p>\n</li>\n<li><p>一直一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException异常</p>\n<p><code>Class&lt;Student&gt; c3 = Student.class;</code></p>\n</li>\n<li><p>内置基本数据类型可以直接用<code>类名.Type</code></p>\n<p><code>Class&lt;Integer&gt; c4 = Integer.TYPE;</code></p>\n</li>\n<li><p>还可以利用ClassLoader</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-comment\">//测试Class类的创建方式有哪些</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test02</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br>        Person person = <span class=\"hljs-keyword\">new</span> Student();<br>        System.out.println(<span class=\"hljs-string\">&quot;这个人是：&quot;</span>+person.name);<br><br>        <span class=\"hljs-comment\">//方式一：通过对象获得</span><br>        Class c1 = person.getClass();<br>        System.out.println(c1.hashCode());<br><br>        <span class=\"hljs-comment\">//方式二：通过forName获得</span><br>        Class c2 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class=\"hljs-comment\">//方式三：通过类名.class获得</span><br>        Class&lt;Student&gt; c3 = Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class=\"hljs-comment\">//方式四：基本内置类型的包装类都有一个Type属性</span><br>        Class&lt;Integer&gt; c4 = Integer.TYPE;<br>        System.out.println(c4);<br><br>        <span class=\"hljs-comment\">//获得父类类型</span><br>        Class c5 = c1.getSuperclass();<br>        System.out.println(c5);<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-keyword\">public</span> String name;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Person</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Person</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name=<span class=\"hljs-string\">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Teacher</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Teacher</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name=<span class=\"hljs-string\">&quot;学生&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">这个人是：学生</span><br><span class=\"hljs-comment\">1950409828</span><br><span class=\"hljs-comment\">1950409828</span><br><span class=\"hljs-comment\">1950409828</span><br><span class=\"hljs-comment\">int</span><br><span class=\"hljs-comment\">class com.bobo.reflection.Person</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>所有类型的class对象</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><br><span class=\"hljs-comment\">//所有类型的Class</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test03</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        Class c1 = Object.class;   <span class=\"hljs-comment\">//类</span><br>        Class c2 = Comparable.class;   <span class=\"hljs-comment\">//接口</span><br>        Class c3 = String[].class;   <span class=\"hljs-comment\">//一维数组</span><br>        Class c4 = <span class=\"hljs-keyword\">int</span>[][].class;   <span class=\"hljs-comment\">//二维数组</span><br>        Class c5 = Override.class;   <span class=\"hljs-comment\">//注解</span><br>        Class c6 = ElementType.class;   <span class=\"hljs-comment\">//枚举类型</span><br>        Class c7 = Integer.class;   <span class=\"hljs-comment\">//基本数据类型</span><br>        Class c8 = <span class=\"hljs-keyword\">void</span>.class;    <span class=\"hljs-comment\">//void</span><br>        Class c9 = Class.class;   <span class=\"hljs-comment\">//Class</span><br><br>        System.out.println(c1);<br>        System.out.println(c2);<br>        System.out.println(c3);<br>        System.out.println(c4);<br>        System.out.println(c5);<br>        System.out.println(c6);<br>        System.out.println(c7);<br>        System.out.println(c8);<br>        System.out.println(c9);<br><br><br>        <span class=\"hljs-comment\">//只要是元素类型与维度一样，就是同一个Class</span><br>        <span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">10</span>];<br>        <span class=\"hljs-keyword\">int</span>[] b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">100</span>];<br><br>        System.out.println(a.getClass().hashCode());<br>        System.out.println(b.getClass().hashCode());<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">class java.lang.Object</span><br><span class=\"hljs-comment\">interface java.lang.Comparable</span><br><span class=\"hljs-comment\">class [Ljava.lang.String;</span><br><span class=\"hljs-comment\">class [[I</span><br><span class=\"hljs-comment\">interface java.lang.Override</span><br><span class=\"hljs-comment\">class java.lang.annotation.ElementType</span><br><span class=\"hljs-comment\">class java.lang.Integer</span><br><span class=\"hljs-comment\">void</span><br><span class=\"hljs-comment\">class java.lang.Class</span><br><span class=\"hljs-comment\">580220585</span><br><span class=\"hljs-comment\">580220585</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>只要是元素类型与维度一样，就是同一个Class</li>\n</ul>\n<h3 id=\"类加载内存分析\"><a href=\"#类加载内存分析\" class=\"headerlink\" title=\"类加载内存分析\"></a>类加载内存分析</h3><img src=\"/article/1621/%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84.png\" class title=\"img\">\n<p>JVM把class文件加载到内存，并对数据进行校验、准备、解析、初始化，最终形成JVM可以直接使用的Java类型的过程。</p>\n<ol>\n<li><p>加载</p>\n<p>将class字节码文件加载到内存中，并将这些数据转换成方法区中的运行时数据（静态变量、静态代码块、常量池等），在堆中生成一个Class类对象代表这个类（反射原理），作为方法区类数据的访问入口。</p>\n</li>\n<li><p>链接</p>\n<p>将Java类的二进制代码合并到JVM的运行状态之中(JRE)。</p>\n<ul>\n<li>验证<br>确保加载的类信息符合JVM规范，没有安全方面的问题。</li>\n<li>准备<br>正式为类变量(static变量)分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。注意此时的设置初始值为默认值，具体赋值在初始化阶段完成</li>\n<li>解析<br>虚拟机常量池内的符号引用替换为直接引用（地址引用）的过程。</li>\n</ul>\n</li>\n<li><p>初始化</p>\n<p>初始化阶段是执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中的所有类变量的<strong>赋值</strong>动作和<strong>静态语句块(static块)</strong>中的语句合并产生的。</clinit></clinit></p>\n<ul>\n<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化、则需要先初始化其父类。</li>\n<li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</clinit></li>\n</ul>\n</li>\n</ol>\n<p><strong>类的初始化</strong></p>\n<p><code>父类</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;父类被加载&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>子类</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Son</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span></span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;子类被加载&quot;</span>);<br>        m = <span class=\"hljs-number\">300</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> m = <span class=\"hljs-number\">100</span>;<br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> M = <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>主动引用（一定会初始化）</li>\n</ol>\n<ul>\n<li><p>new一个类的对象；</p>\n</li>\n<li><p>当虚拟启动时，先初始化main方法所在的类；</p>\n</li>\n<li><p>调用类的静态成员(除了final常量)和静态方法；</p>\n</li>\n<li><p>使用java.lang.reflect包的方法对类进行反射调用；</p>\n</li>\n<li><p>当初始化一个类，如果其父类没有被初始化，则先会初始化他的父类</p>\n</li>\n</ul>\n<p><code>实现类</code>new一个类的对象主动引用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-comment\">//测试类什么时候会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//主动引用</span><br>        Son son = <span class=\"hljs-keyword\">new</span> Son();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">父类被加载</span><br><span class=\"hljs-comment\">子类被加载</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><code>实现类</code>反射产生主动引用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-comment\">//测试类什么时候会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br>      <span class=\"hljs-comment\">//反射产生主动引用</span><br>      Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Son&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">父类被加载</span><br><span class=\"hljs-comment\">子类被加载</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>被动引用</li>\n</ol>\n<ul>\n<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。例如：通过子类引用父类的静态变量，不会导致子类初始化。</li>\n<li>通过数组定义类引用，不会触发此类的初始化。</li>\n<li>引用常量不会触发此类的初始化（常量在编译阶段就存入调用类的常量池中了）。</li>\n</ul>\n<p><code>实现类</code>子类引用父类的静态变量，不会导致子类的初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//测试类什么时候不会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br><br>        <span class=\"hljs-comment\">//不会产生类的引用的方法</span><br>        <span class=\"hljs-comment\">//子类引用父类的静态变量，不会导致子类的初始化</span><br>        System.out.println(Son.b);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">父类被加载</span><br><span class=\"hljs-comment\">2</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><code>实现类</code>只是为一片内存赋名，不会初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//测试类什么时候不会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//只是为一片内存赋名，不会初始化</span><br>        Son[] array = <span class=\"hljs-keyword\">new</span> Son[<span class=\"hljs-number\">5</span>];<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><code>实现类</code>只是为一片内存赋名，不会初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-comment\">//测试类什么时候不会初始化</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;main类被加载&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//引用常量不会触发此类的初始化</span><br>        System.out.println(Son.M);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">main类被加载</span><br><span class=\"hljs-comment\">1</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"类加载器的原理\"><a href=\"#类加载器的原理\" class=\"headerlink\" title=\"类加载器的原理\"></a>类加载器的原理</h3><p><strong>类缓存</strong></p>\n<p>标准的Java SE类加载器可以按要求查找类，一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过，JVM垃圾收集器可以回收这些Class对象。</p>\n<p><strong>类加载的作用</strong></p>\n<p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p>\n<img src=\"/article/1621/1516208-20200126152957474-364815257.png\" class title=\"img\">\n<p><strong>类加载器分类</strong></p>\n<img src=\"/article/1621/376.png\" class title=\"img\">\n<ul>\n<li><p>自底向上检查类是否已装载</p>\n</li>\n<li><p>自顶向下尝试加载类</p>\n</li>\n</ul>\n<ol>\n<li><p>引导类加载器（bootstrap class loader）</p>\n<ol>\n<li>它用来加载 Java 的核心库(JAVA_HOME/jre/lib/rt.jar,sun.boot.class.path路径下的内容)，是用原生代码（C语言）来实现的，并不继承自 java.lang.ClassLoader。</li>\n<li>加载扩展类和应用程序类加载器。并指定他们的父类加载器。</li>\n</ol>\n</li>\n<li><p>扩展类加载器（extensions class loader）</p>\n<ol>\n<li>用来加载 Java 的扩展库(JAVA_HOME/jre/ext/*.jar，或java.ext.dirs路径下的内容) 。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java类。</li>\n<li>由sun.misc.Launcher$ExtClassLoader实现。</li>\n</ol>\n</li>\n<li><p>应用程序类加载器（application class loader）</p>\n<ol>\n<li>它根据 Java 应用的类路径（classpath，java.class.path 路径下的内容）来加载 Java 类。<strong>一般来说，Java 应用的类都是由它来完成加载的。</strong></li>\n<li>由sun.misc.Launcher$AppClassLoader实现。</li>\n</ol>\n</li>\n<li><p>自定义类加载器</p>\n<ol>\n<li>开发人员可以通过继承 java.lang.ClassLoader类的方式实现自己的类加载器，以满足一些特殊的需求。</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test06</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException </span>&#123;<br><br>        <span class=\"hljs-comment\">//获取系统类的加载器</span><br>        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class=\"hljs-comment\">//获取系统类加载起的父类加载器 --&gt; 扩展类加载器</span><br>        ClassLoader parent = systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class=\"hljs-comment\">//获取扩展类加载起的父类加载器 --&gt; 根类加载器（C/C++）</span><br>        ClassLoader grandparent = parent.getParent();<br>        <span class=\"hljs-comment\">//用来装载核心类库，改加载类无法直接获取</span><br>        System.out.println(grandparent);<br><br>        <span class=\"hljs-comment\">//测试当前类是哪个加载起加载的</span><br>        ClassLoader classLoader = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Test06&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class=\"hljs-comment\">//测试jdk内置的类是哪个加载起加载的</span><br>        classLoader = Class.forName(<span class=\"hljs-string\">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class=\"hljs-comment\">//如何获得系统类加载器可以加载的路径</span><br>        System.out.println(System.getProperty(<span class=\"hljs-string\">&quot;java.class.path&quot;</span>));<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">jdk.internal.loader.ClassLoaders$AppClassLoader@55054057</span><br><span class=\"hljs-comment\">jdk.internal.loader.ClassLoaders$PlatformClassLoader@2f0e140b</span><br><span class=\"hljs-comment\">null</span><br><span class=\"hljs-comment\">jdk.internal.loader.ClassLoaders$AppClassLoader@55054057</span><br><span class=\"hljs-comment\">null</span><br><span class=\"hljs-comment\">/Users/renbo/Desktop/研究生/学习笔记/编程/JAVA/狂神/relfection/target/classes</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><p>使用JDK11编译结果如上</p>\n</li>\n<li><p>使用JDK8编译结果如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">sun.misc.Launcher$AppClassLoader@18b4aac2<br>sun.misc.Launcher$ExtClassLoader@1b6d3586<br><span class=\"hljs-keyword\">null</span><br>sun.misc.Launcher$AppClassLoader@18b4aac2<br><span class=\"hljs-keyword\">null</span><br> /Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/charsets.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/deploy.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/cldrdata.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/dnsns.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/jaccess.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/jfxrt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/localedata.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/nashorn.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/sunec.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/ext/zipfs.ja;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/javaws.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jce.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jfr.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jfxswt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/jsse.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/management-agent.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/plugin.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/resources.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/jre/lib/rt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/ant-javafx.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/dt.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/javafx-mx.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/jconsole.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/packager.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/sa-jdi.jar;<br>/Library/Java/JavaVirtualMachines/jdk1<span class=\"hljs-number\">.8</span><span class=\"hljs-number\">.0_131</span>.jdk/Contents/Home/lib/tools.jar;<br>/Users/renbo/Desktop/研究生/学习笔记/编程/JAVA/狂神/relfection/target/classes<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>双亲委派机制</strong></p>\n<img src=\"/article/1621/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E5%9B%BE%E8%A7%A3.png\" class title=\"img\">\n<ol>\n<li>如果一个类加载器收到了类加载请求，它并不会自己先加载，而是把这个请求委托给父类的加载器去执行</li>\n<li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的引导类加载器；</li>\n<li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成加载任务，子加载器才会尝试自己去加载，这就是双亲委派机制</li>\n<li>父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常</li>\n</ol>\n<p><strong>优势</strong></p>\n<ul>\n<li>避免类的重复加载</li>\n<li>保护程序安全，防止核心API被随意篡改<ul>\n<li>自定义类：java.lang.String (没用)</li>\n<li>自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"获得类的运行时结构\"><a href=\"#获得类的运行时结构\" class=\"headerlink\" title=\"获得类的运行时结构\"></a>获得类的运行时结构</h3><p>Java中反射获取类的成员时需要调用getFields()、getDeclaredFields()；getMethods()、getDeclaredMethods()；getConstructors()、getDeclaredConstructoers()等方法获取Field、Method、Constructor对象，这几对方法的主要区别如下： </p>\n<ol>\n<li><p>getFields()与getDeclaredFields()</p>\n<p>getFields()返回类中所有public的字段,包括从父类或接口继承的public字段；<br>getDeclaredFields()返回本类中声明的所有字段，包括public、protected、private字段，不包括从父类或接口继承的字段 </p>\n</li>\n<li><p>getMethods()与getDeclaredMethods()<br> getMethods()返回类中所有public的方法，包括从父类或接口继承的public方法<br> getDeclaredMethods()返回本类中声明的所有方法，包括public、protected、private方法，不包括从父类或接口继承的方法 </p>\n</li>\n<li><p>getConstructors()与getDeclaredConstructors()<br> getConstructors()返回类中所有public的构造方法；<br> getDeclaredConstructors()返回类中声明的所有构造方法，包括public、protected、private构造方法</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">//获得类的信息</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test07</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;<br>        Class c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        c1 = user.getClass();<br><br>        <span class=\"hljs-comment\">//获得类的名字</span><br>        System.out.println(c1.getName());    <span class=\"hljs-comment\">//获得包名+类名</span><br>        System.out.println(c1.getSimpleName());   <span class=\"hljs-comment\">//获得类名</span><br><br>        <span class=\"hljs-comment\">//获得类得属性</span><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        Field[] fields = c1.getFields();  <span class=\"hljs-comment\">//getFields()只能找到public属性</span><br>        fields = c1.getDeclaredFields();<br>        <span class=\"hljs-keyword\">for</span> (Field field : fields) &#123;<br>            System.out.println(field);<br>        &#125;<br>        Field name = c1.getDeclaredField(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        System.out.println(name);<br><br>        <span class=\"hljs-comment\">//获得类的方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        Method[] methods = c1.getMethods();   <span class=\"hljs-comment\">//获得本类及其父类的全部public方法</span><br>        Method[] declaredMethods = c1.getDeclaredMethods();   <span class=\"hljs-comment\">//获得本类的全部方法</span><br><br>        <span class=\"hljs-keyword\">for</span> (Method method : methods) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;正常的：&quot;</span>+method);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (Method declaredMethod : declaredMethods) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;declaredMethod:&quot;</span>+declaredMethod);<br>        &#125;<br><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        <span class=\"hljs-comment\">//获得指定方法</span><br>        <span class=\"hljs-comment\">//重载</span><br>        Method getName = c1.getMethod(<span class=\"hljs-string\">&quot;getName&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        Method setName = c1.getMethod(<span class=\"hljs-string\">&quot;setName&quot;</span>, String.class);<br>        System.out.println(getName);<br>        System.out.println(setName);<br><br>        <span class=\"hljs-comment\">//获得指定的构造器</span><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        Constructor[] constructors = c1.getConstructors();<br>        Constructor[] declaredConstructors = c1.getDeclaredConstructors();<br><br>        <span class=\"hljs-keyword\">for</span> (Constructor constructor : constructors) &#123;<br>            System.out.println(constructor);<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (Constructor declaredConstructor : declaredConstructors) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;#&quot;</span>+declaredConstructor);<br>        &#125;<br><br>        System.out.println(<span class=\"hljs-string\">&quot;====================================&quot;</span>);<br>        <span class=\"hljs-comment\">//获得指定的构造器</span><br>        Constructor declaredConstructor = c1.getDeclaredConstructor(String.class, <span class=\"hljs-keyword\">int</span>.class, <span class=\"hljs-keyword\">int</span>.class);<br>        System.out.println(<span class=\"hljs-string\">&quot;指定+&quot;</span>+declaredConstructor);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">com.bobo.reflection.User</span><br><span class=\"hljs-comment\">User</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">private java.lang.String com.bobo.reflection.User.name</span><br><span class=\"hljs-comment\">private int com.bobo.reflection.User.id</span><br><span class=\"hljs-comment\">private int com.bobo.reflection.User.age</span><br><span class=\"hljs-comment\">private java.lang.String com.bobo.reflection.User.name</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">正常的：public java.lang.String com.bobo.reflection.User.getName()</span><br><span class=\"hljs-comment\">正常的：public java.lang.String com.bobo.reflection.User.toString()</span><br><span class=\"hljs-comment\">正常的：public void com.bobo.reflection.User.setName(java.lang.String)</span><br><span class=\"hljs-comment\">正常的：public int com.bobo.reflection.User.getId()</span><br><span class=\"hljs-comment\">正常的：public void com.bobo.reflection.User.setId(int)</span><br><span class=\"hljs-comment\">正常的：public int com.bobo.reflection.User.getAge()</span><br><span class=\"hljs-comment\">正常的：public void com.bobo.reflection.User.setAge(int)</span><br><span class=\"hljs-comment\">正常的：public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class=\"hljs-comment\">正常的：public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class=\"hljs-comment\">正常的：public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class=\"hljs-comment\">正常的：public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class=\"hljs-comment\">正常的：public native int java.lang.Object.hashCode()</span><br><span class=\"hljs-comment\">正常的：public final native java.lang.Class java.lang.Object.getClass()</span><br><span class=\"hljs-comment\">正常的：public final native void java.lang.Object.notify()</span><br><span class=\"hljs-comment\">正常的：public final native void java.lang.Object.notifyAll()</span><br><span class=\"hljs-comment\">declaredMethod:public java.lang.String com.bobo.reflection.User.getName()</span><br><span class=\"hljs-comment\">declaredMethod:public java.lang.String com.bobo.reflection.User.toString()</span><br><span class=\"hljs-comment\">declaredMethod:public void com.bobo.reflection.User.setName(java.lang.String)</span><br><span class=\"hljs-comment\">declaredMethod:public int com.bobo.reflection.User.getId()</span><br><span class=\"hljs-comment\">declaredMethod:public void com.bobo.reflection.User.setId(int)</span><br><span class=\"hljs-comment\">declaredMethod:public int com.bobo.reflection.User.getAge()</span><br><span class=\"hljs-comment\">declaredMethod:public void com.bobo.reflection.User.setAge(int)</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">public java.lang.String com.bobo.reflection.User.getName()</span><br><span class=\"hljs-comment\">public void com.bobo.reflection.User.setName(java.lang.String)</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">public com.bobo.reflection.User()</span><br><span class=\"hljs-comment\">public com.bobo.reflection.User(java.lang.String,int,int)</span><br><span class=\"hljs-comment\">#public com.bobo.reflection.User()</span><br><span class=\"hljs-comment\">#public com.bobo.reflection.User(java.lang.String,int,int)</span><br><span class=\"hljs-comment\">====================================</span><br><span class=\"hljs-comment\">指定+public com.bobo.reflection.User(java.lang.String,int,int)</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>invoke()方法：用于调用指定的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">Object <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Object obj,Object... args)</span></span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>第一个Object对应原方法的返回值，若原方法无返回值则返回null</li>\n<li>括号里的第一个Object代表调用这个方法的对象</li>\n<li>若原方法形参列表为空，Object[] args为null</li>\n<li>如果原方法声明为private，需要在调用invoke()之前调用setAccessible()方法</li>\n</ul>\n<p><strong>setAccessible()方法：用于启动和禁止访问安全检查的开关</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAccessible</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> flag)</span></span><br></code></pre></td></tr></table></figure>\n<p>参数为false表示反射的对象应该实施访问检查，参数为true则关闭</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Constructor;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">//动态的创建对象，通过反射</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test08</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;<br>        <span class=\"hljs-comment\">//获得Class对象</span><br>        Class c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.User&quot;</span>);<br><br>        <span class=\"hljs-comment\">//构造一个对象</span><br>        <span class=\"hljs-comment\">//User user = (User) c1.newInstance();   //本质是调用了类无参构造器</span><br>        <span class=\"hljs-comment\">//System.out.println(user);</span><br>        Constructor constructor = (Constructor) c1.getDeclaredConstructor(String.class, <span class=\"hljs-keyword\">int</span>.class, <span class=\"hljs-keyword\">int</span>.class);<br>        User user2 = (User) constructor.newInstance(<span class=\"hljs-string\">&quot;bobo&quot;</span>, <span class=\"hljs-number\">001</span>, <span class=\"hljs-number\">18</span>);<br>        System.out.println(user2);<br><br>        <span class=\"hljs-comment\">//通过反射调用普通方法</span><br>        User user3 = (User) c1.newInstance();<br>        <span class=\"hljs-comment\">//通过反射获取一个方法</span><br>        Method setName = c1.getDeclaredMethod(<span class=\"hljs-string\">&quot;setName&quot;</span>, String.class);<br>        <span class=\"hljs-comment\">//invoke() 激活</span><br>        <span class=\"hljs-comment\">//(对象，&quot;方法的值&quot;)</span><br>        setName.invoke(user3,<span class=\"hljs-string\">&quot;bobo&quot;</span>);<br>        System.out.println(user3.getName());<br><br>        <span class=\"hljs-comment\">//通过反射操作属性</span><br>        System.out.println(<span class=\"hljs-string\">&quot;================================&quot;</span>);<br>        User user4 = (User) c1.newInstance();<br>        Field name = c1.getDeclaredField(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        <span class=\"hljs-comment\">//不能直接操作私有属性，我们需要关闭程序的安全检测   属性或者方法的 setAccessible(true)</span><br>        name.setAccessible(<span class=\"hljs-keyword\">true</span>);<br>        name.set(user4,<span class=\"hljs-string\">&quot;bobo2&quot;</span>);<br>        System.out.println(user4.getName());<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">User&#123;name=&#x27;bobo&#x27;, id=1, age=18&#125;</span><br><span class=\"hljs-comment\">bobo</span><br><span class=\"hljs-comment\">================================</span><br><span class=\"hljs-comment\">bobo2</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"性能对比分析\"><a href=\"#性能对比分析\" class=\"headerlink\" title=\"性能对比分析\"></a>性能对比分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><br><span class=\"hljs-comment\">//分析性能问题</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test09</span> </span>&#123;<br><br>    <span class=\"hljs-comment\">//普通方式调用</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">()</span></span>&#123;<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        <span class=\"hljs-comment\">//获取开始时间</span><br>        <span class=\"hljs-keyword\">long</span> startTime = System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000000</span>; i++) &#123;<br>            user.getName();<br>        &#125;<br>        <span class=\"hljs-comment\">//获取结束时间</span><br>        <span class=\"hljs-keyword\">long</span> endTime = System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;普通方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//反射方式调用</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test02</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class=\"hljs-string\">&quot;getName&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        <span class=\"hljs-comment\">//获取开始时间</span><br>        <span class=\"hljs-keyword\">long</span> startTime = System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000000</span>; i++) &#123;<br>            getName.invoke(user, <span class=\"hljs-keyword\">null</span>);<br>        &#125;<br>        <span class=\"hljs-comment\">//获取结束时间</span><br>        <span class=\"hljs-keyword\">long</span> endTime = System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;反射方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//反射方式调用  关闭检测</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test03</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;<br>        User user = <span class=\"hljs-keyword\">new</span> User();<br>        Class c1 = user.getClass();<br>        Method getName = c1.getDeclaredMethod(<span class=\"hljs-string\">&quot;getName&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        getName.setAccessible(<span class=\"hljs-keyword\">true</span>);<br>        <span class=\"hljs-comment\">//获取开始时间</span><br>        <span class=\"hljs-keyword\">long</span> startTime = System.currentTimeMillis();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000000000</span>; i++) &#123;<br>            getName.invoke(user, <span class=\"hljs-keyword\">null</span>);<br>        &#125;<br>        <span class=\"hljs-comment\">//获取结束时间</span><br>        <span class=\"hljs-keyword\">long</span> endTime = System.currentTimeMillis();<br>        System.out.println(<span class=\"hljs-string\">&quot;关闭检测，反射方式执行10亿次：&quot;</span>+(endTime-startTime)+<span class=\"hljs-string\">&quot;ms&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InvocationTargetException, NoSuchMethodException, IllegalAccessException </span>&#123;<br>        test01();<br>        test02();<br>        test03();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">普通方式执行<span class=\"hljs-number\">10</span>亿次：5ms<br>反射方式执行<span class=\"hljs-number\">10</span>亿次：2470ms<br>关闭检测，反射方式执行<span class=\"hljs-number\">10</span>亿次：1169ms<br></code></pre></td></tr></table></figure>\n<p><strong>反射操作泛型</strong></p>\n<p>Java采用泛型擦除机制来引入泛型。Java中的泛型仅仅是给编译器Javac使用的，确保数据的安全性和免去强制类型转换的麻烦。但是编译一旦完成，所有和泛型有关的类型全部被擦除。</p>\n<p>为了通过反射操作这些类型以迎合实际开发的需要，Java新增了ParameterizedType,GenericArrayType,TypeVariable和WildcardType几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型。 </p>\n<ul>\n<li><code>ParameterizedType</code>:表示一种参数化的类型，比如<code>Collection&lt;String&gt;</code></li>\n<li><code>GenericArrayType</code>:表示一种元素类型是参数化类型或者类型变量的数组类型</li>\n<li><code>TypeVariable</code>:是各种类型变量的公共父接口</li>\n<li><code>WildcardType</code>:代表一种通配符类型表达式，比如<code>？</code>、<code>？ extends Number</code>、<code>？ super Integer</code>。（wildcard是一个单词：就是”通配符“）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Method;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Parameter;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.ParameterizedType;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Type;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">//通过反射获取泛型</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>&#123;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test01</span><span class=\"hljs-params\">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;test01&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map&lt;String ,User&gt; <span class=\"hljs-title\">test02</span><span class=\"hljs-params\">()</span></span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;test02&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> NoSuchMethodException </span>&#123;<br>        <span class=\"hljs-comment\">//参数是泛型</span><br>        Method method = Test.class.getMethod(<span class=\"hljs-string\">&quot;test01&quot;</span>, Map.class, List.class);<br>        Type[] genericParameterTypes = method.getGenericParameterTypes();<br>        <span class=\"hljs-keyword\">for</span> (Type genericParameterType : genericParameterTypes) &#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;genericParameterType:&quot;</span>+genericParameterType);<br>            <span class=\"hljs-keyword\">if</span> (genericParameterType <span class=\"hljs-keyword\">instanceof</span> ParameterizedType)&#123;<br>                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();<br>                <span class=\"hljs-keyword\">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                    System.out.println(actualTypeArgument);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-comment\">//返回值是泛型</span><br>        method = Test.class.getMethod(<span class=\"hljs-string\">&quot;test02&quot;</span>, <span class=\"hljs-keyword\">null</span>);<br>        Type genericReturnType = method.getGenericReturnType();<br>        <span class=\"hljs-keyword\">if</span> (genericReturnType <span class=\"hljs-keyword\">instanceof</span> ParameterizedType)&#123;<br>            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();<br>            <span class=\"hljs-keyword\">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;<br>                System.out.println(actualTypeArgument);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">返回结果：<br>genericParameterType:java.util.Map&lt;java.lang.String,com.bobo.reflection.User&gt;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">lang</span>.<span class=\"hljs-title\">String</span></span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span></span><br><span class=\"hljs-class\"><span class=\"hljs-title\">genericParameterType</span>:<span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">util</span>.<span class=\"hljs-title\">List</span>&lt;<span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span>&gt;</span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span></span><br><span class=\"hljs-class\">  </span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">lang</span>.<span class=\"hljs-title\">String</span></span><br><span class=\"hljs-class\"><span class=\"hljs-title\">class</span> <span class=\"hljs-title\">com</span>.<span class=\"hljs-title\">bobo</span>.<span class=\"hljs-title\">reflection</span>.<span class=\"hljs-title\">User</span></span><br></code></pre></td></tr></table></figure>\n<h2 id=\"反射操作注解\"><a href=\"#反射操作注解\" class=\"headerlink\" title=\"反射操作注解\"></a>反射操作注解</h2><p><strong>获取注解的方法：</strong></p>\n<ul>\n<li>Class.getAnnotations() 获取所有的注解，包括自己声明的以及继承的</li>\n<li>Class.getAnnotation(Class&lt; A &gt; annotationClass) 获取指定的注解，该注解可以是自己声明的，也可以是继承的</li>\n<li>Class.getDeclaredAnnotations() 获取自己声明的注解</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.reflection;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.*;<br><span class=\"hljs-keyword\">import</span> java.lang.reflect.Field;<br><span class=\"hljs-comment\">//练习反射操作注解</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test11</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;<br>        Class c1 = Class.forName(<span class=\"hljs-string\">&quot;com.bobo.reflection.Students&quot;</span>);<br><br>        <span class=\"hljs-comment\">//通过反射获取注解</span><br>        Annotation[] annotations = c1.getAnnotations();<br>        <span class=\"hljs-keyword\">for</span> (Annotation annotation : annotations) &#123;<br>            System.out.println(annotation);<br>        &#125;<br><br>        <span class=\"hljs-comment\">//获得注解的value的值</span><br>        Tablebobo tablebobo = (Tablebobo) c1.getAnnotation(Tablebobo.class);<br>        String value = tablebobo.value();<br>        System.out.println(value);<br><br>        <span class=\"hljs-comment\">//获得类指定的注解</span><br>        Field name = c1.getDeclaredField(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        Filebobo annotation = name.getAnnotation(Filebobo.class);<br>        System.out.println(annotation.columnName());<br>        System.out.println(annotation.type());<br>        System.out.println(annotation.length());<br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Tablebobo(&quot;db_students&quot;)</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Students</span></span>&#123;<br>    <span class=\"hljs-meta\">@Filebobo(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;<br>    <span class=\"hljs-meta\">@Filebobo(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;<br>    <span class=\"hljs-meta\">@Filebobo(columnName = &quot;db_name&quot;,type = &quot;varcher&quot;,length = 3)</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Students</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Students</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id, <span class=\"hljs-keyword\">int</span> age, String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> id;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.id = id;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getAge</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> age)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.age = age;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.name = name;<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Students&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;id=&quot;</span> + id +<br>                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +<br>                <span class=\"hljs-string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//@Target  注解作用域</span><br><span class=\"hljs-comment\">//@Rtention  在什么级别可以获取</span><br><span class=\"hljs-comment\">//类名的注解</span><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@interface</span> Tablebobo&#123;<br>    <span class=\"hljs-function\">String <span class=\"hljs-title\">value</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><br><span class=\"hljs-comment\">//属性的注解</span><br><span class=\"hljs-meta\">@Target(ElementType.FIELD)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@interface</span> Filebobo&#123;<br>    <span class=\"hljs-function\">String <span class=\"hljs-title\">columnName</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\">String <span class=\"hljs-title\">type</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">length</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">运行结果：<br><span class=\"hljs-meta\">@com</span>.bobo.reflection.Tablebobo(<span class=\"hljs-string\">&quot;db_students&quot;</span>)<br>db_students<br>db_name<br>varcher<br><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"注解与反射","path":"api/categories/注解与反射.json"}],"tags":[{"name":"Java,注解与反射","path":"api/tags/Java,注解与反射.json"}]}