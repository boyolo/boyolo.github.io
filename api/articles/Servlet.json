{"title":"Servlet","slug":"Servlet","date":"2022-01-01T10:39:05.000Z","updated":"2022-01-02T14:07:18.517Z","comments":true,"path":"api/articles/Servlet.json","realPath":null,"excerpt":null,"covers":["/article/55715/Servlet%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B1.jpg","/article/55715/Servlet%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B2.jpg","/article/55715/image-20220102153458150.png"],"cover":"/images/theme/coverphoto/Servlet.jpg","content":"<blockquote>\n<p>The hurricane seeks the shortest road by the no-road, and suddenly ends its search in the Nowhere.</p>\n<p>风于无路之中寻求最短之路，又突然地在“无何有之国”终之了它的追求。</p>\n</blockquote>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的<a href=\"https://baike.baidu.com/item/服务器/100571\">服务器</a>端程序，具有独立于平台和<a href=\"https://baike.baidu.com/item/协议/13020269\">协议</a>的特性，主要功能在于交互式地浏览和生成数据，生成动态<a href=\"https://baike.baidu.com/item/Web/150564\">Web</a>内容。</p>\n<p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于<a href=\"https://baike.baidu.com/item/HTTP协议/1276942\">HTTP协议</a>的Web服务器。</p>\n<p>最早支持Servlet标准的是JavaSoft的Java <a href=\"https://baike.baidu.com/item/Web Server/9306055\">Web Server</a>，此后，一些其它的基于Java的Web服务器开始支持标准的Servlet。</p>\n<h3 id=\"Servlet原理\"><a href=\"#Servlet原理\" class=\"headerlink\" title=\"Servlet原理\"></a>Servlet原理</h3><p>Servlet运行过程</p>\n<img src=\"/article/55715/Servlet%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B1.jpg\" class title=\"资源分配图\">\n<p><strong>Servlet的工作过程</strong></p>\n<p>步骤：</p>\n<ol>\n<li>Web Client 向Servlet容器（Tomcat）发出Http请求</li>\n<li>Servlet容器接收Web Client的请求</li>\n<li>Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。</li>\n<li>Servlet容器创建一个HttpResponse对象</li>\n<li>Servlet容器调用HttpServlet对象的doservice方法，把HttpRequest对象与HttpResponse对象作为参数传给HttpServlet 对象。</li>\n<li>HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。</li>\n<li>HttpServlet调用HttpResponse对象的有关方法，生成响应数据。</li>\n<li>Servlet容器把HttpServlet的响应结果传给Web Client。</li>\n</ol>\n<blockquote>\n<ol>\n<li>客户端的网络请求首先会被Http服务器接收（也叫Web服务器、web容器，其需要提供web应用运行所需的环境，接收客户端的Http请求）；</li>\n<li>Web服务器根据请求的路径将请求转交给对应的Servlet容器（也称Servlet引擎，为Servlet的运行提供环境支持，可以理解为tomcat或其他服务器）；</li>\n<li>Servlet容器根据对应的虚拟路径（@WebServlet中配置的）来加载Servlet，如果Serlvet没有被实例化则创建该Servlet的一个实例（调用init方法）；</li>\n<li>Servlet容器根据用户的HTTP请求，创建一个ServletRequest对象（HTTP的请求信息被封装在其中）和一个可以对HTTP请求进行响应的ServletResponse对象（类似于寄信，并在信中说明回信的地址），然后调用HttpServlet中重写的service(ServletRequest req, ServletResponse res)方法，并在这个方法中，将ServletRequest、ServletResponse这两个对象向下转型，得到我们非常熟悉的HttpServletRequest和HttpServletResponse两个对象，然后将客户端的请求转发到HttpServlet中protected修饰的service(HttpServletRequest req, HttpServletResponse resp）；</li>\n<li>service(HttpServletRequest req, HttpServletResponse resp)根据请求的method（get、post、put、delete、head、options、trace）来调用不同的方法，如doGet、doPost；</li>\n<li>服务端处理完Http的请求后，根据HttpServletResponse对象将处理结果作为Http响应返回给客户端。</li>\n</ol>\n</blockquote>\n<p><strong>Servlet UML关系图</strong></p>\n<p><img src=\"/article/Servlet UML关系图.png\"><span class=\"image-caption\">img</span></p>\n<h3 id=\"ServletContext\"><a href=\"#ServletContext\" class=\"headerlink\" title=\"ServletContext\"></a><strong>ServletContext</strong></h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>\n<ol>\n<li><p><strong>共享数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ServletContext context = <span class=\"hljs-keyword\">this</span>.getServletContext(); <br>context.setAttribute(<span class=\"hljs-string\">&quot;数据key&quot;</span>,数据value); <span class=\"hljs-comment\">//将一个数据保存</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>获取初始化参数</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--web.xml--&gt;</span> <br><span class=\"hljs-comment\">&lt;!--配置一些web应用初始化参数--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context-param</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-name</span>&gt;</span>url<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/javaweb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-value</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123; <br>  ServletContext context = <span class=\"hljs-keyword\">this</span>.getServletContext(); <br>  String url = context.getInitParameter(<span class=\"hljs-string\">&quot;url&quot;</span>); <br>  resp.getWriter().print(url); <br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>请求转发</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123; <br>  ServletContext context = <span class=\"hljs-keyword\">this</span>.getServletContext(); <br>  <br>  context.getRequestDispatcher(<span class=\"hljs-string\">&quot;/forwardpath&quot;</span>).forward(req,resp); <br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>读取资源文件</strong></p>\n<p>Properties</p>\n<ul>\n<li><p>在java目录下新建properties</p>\n</li>\n<li><p>在resources目录下新建properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">username</span>=<span class=\"hljs-string\">root12312 </span><br><span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">zxczxczxc</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123; <br>  InputStream is = <span class=\"hljs-keyword\">this</span>.getServletContext().getResourceAsStream(<span class=\"hljs-string\">&quot;/WEB- INF/classes/com/bobo/xx.properties&quot;</span>); <br>  Properties prop = <span class=\"hljs-keyword\">new</span> Properties(); <br>  prop.load(is); <br>  String user = prop.getProperty(<span class=\"hljs-string\">&quot;username&quot;</span>); <br>  String pwd = prop.getProperty(<span class=\"hljs-string\">&quot;password&quot;</span>);<br>  resp.getWriter().print(user+<span class=\"hljs-string\">&quot;:&quot;</span>+pwd);<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<img src=\"/article/55715/Servlet%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B2.jpg\" class title=\"资源分配图\">\n<h3 id=\"HttpServletResponse\"><a href=\"#HttpServletResponse\" class=\"headerlink\" title=\"HttpServletResponse\"></a>HttpServletResponse</h3><ol>\n<li><p>简单分类</p>\n<p><strong>负责向浏览器发送数据的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">ServletOutputStream <span class=\"hljs-title\">getOutputStream</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException</span>;<br><span class=\"hljs-function\">PrintWriter <span class=\"hljs-title\">getWriter</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException</span>;<br></code></pre></td></tr></table></figure>\n<p> 从中我们可以看到，getOutputStream()方法返回ServletOutputStream对象，更适合向客户端写入二进制数据，并且Servlet容器不会对这些二进制数据进行编码，因此我们常用ServletOutputStream来向客户端发送如图片、文件等内容；对于getWriter()方法返回的PrintWriter对象，里面封装了更多的写入字符文本的函数，并且我们上文提到的setContentType()方法设置的MIME类型对其输出内容有效，因此也可以很好地解决中文乱码问题。</p>\n<ul>\n<li><p><strong>还有一点需要注意的是，这两个方法在一个response对象中不可以同时调用，否则会抛出一个IllegalStateException</strong>，也就是非法状态异常，因为输出流只能有一个（如果可以多次获取的话，客户端又如何确认哪个Http响应是最后一个呢）。</p>\n<p><a href=\"https://blog.csdn.net/qq_34666857/article/details/104838171\">点击跳转大佬</a></p>\n</li>\n</ul>\n<p><strong>负责向浏览器发送响应头的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCharacterEncoding</span><span class=\"hljs-params\">(String var1)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setContentLength</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> var1)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setContentType</span><span class=\"hljs-params\">(String var1)</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDateHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">long</span> var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addDateHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">long</span> var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setHeader</span><span class=\"hljs-params\">(String var1, String var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addHeader</span><span class=\"hljs-params\">(String var1, String var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setIntHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">int</span> var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addIntHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">int</span> var2)</span></span>;<br></code></pre></td></tr></table></figure>\n<p><strong>相应状态码的常量</strong></p>\n<p>| Name |       discribtion        |                   释义                    |<br>| :–: | :———————-: | :—————————————: |<br>| 200  |          SC_OK           |             此次请求已经成功              |<br>| 301  |   SC_MOVED_PERMANENTLY   |       请求的网页已永久移动到新位置        |<br>| 302  |   SC_MOVED_TEMPORARILY   |          临时移动、请求地址不变           |<br>| 401  |     SC_UNAUTHORIZED      |            未授权、用户需登录             |<br>| 403  |       SC_FORBIDDEN       |     服务器拒绝了此次请求（权限问题）      |<br>| 404  |       SC_NOT_FOUND       |           服务器没找到URI匹配的           |<br>| 405  |  SC_METHOD_NOT_ALLOWED   |  调用的方法不允许使用（get、post不匹配）  |<br>| 500  | SC_INTERNAL_SERVER_ERROR |       服务器内部发生异常，请求中断        |<br>| 502  |      SC_BAD_GATEWAY      | 网关错误（如Nginx），无法收到服务器的响应 |<br>| 504  |    SC_GATEWAY_TIMEOUT    |  请求超时，在约定时间内没有收到Http响应   |</p>\n</li>\n<li><p>常见应用</p>\n<ol>\n<li><p>向浏览器输出信息</p>\n</li>\n<li><p>下载文件</p>\n<ol>\n<li>要获取下载文件的路径</li>\n<li>下载的文件名</li>\n<li>使浏览器可以支持下载 (Content-disposition) 中文文件名用  URLEncoder.encode 编码，否则可能乱码</li>\n<li>获取下载文件输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.servlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletOutputStream;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.FileInputStream;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.net.URLEncoder;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        resp.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>      <br>        <span class=\"hljs-comment\">//1.要获取下载文件的路径</span><br>        String realPath = <span class=\"hljs-string\">&quot;绝对路径&quot;</span>;<br>        System.out.println(<span class=\"hljs-string\">&quot;下载的文件的路径：&quot;</span> + realPath);<br>        <span class=\"hljs-comment\">//2.下载的文件名</span><br>        <span class=\"hljs-comment\">//substring()截取字符串   lastIndexOf()截取/之后的字符串</span><br>        String fileName = realPath.substring(realPath.lastIndexOf(<span class=\"hljs-string\">&quot;\\\\&quot;</span>) + <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">//3.使浏览器可以支持下载 (Content-disposition)   attachment：以附件方式下载    中文文件名用  URLEncoder.encode 编码，否则可能乱码</span><br>        resp.setHeader(<span class=\"hljs-string\">&quot;Content-disposition&quot;</span>,<span class=\"hljs-string\">&quot;attachment;filename&quot;</span> + URLEncoder.encode(<span class=\"hljs-string\">&quot;fileName&quot;</span>,<span class=\"hljs-string\">&quot;utf-8&quot;</span>));<br>        <span class=\"hljs-comment\">//4.获取下载文件输入流</span><br>        FileInputStream in = <span class=\"hljs-keyword\">new</span> FileInputStream(realPath);<br>        <span class=\"hljs-comment\">//5.创建缓冲区</span><br>        <span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">1024</span>];<br>        <span class=\"hljs-comment\">//6.获取OutputStream对象</span><br>        ServletOutputStream out = resp.getOutputStream();<br>        <span class=\"hljs-comment\">//7.将FileOutputStream流入到buffer缓冲区</span><br>      \t<span class=\"hljs-comment\">//in.read(buffer)</span><br>        <span class=\"hljs-comment\">//8.使用OutputStream将缓冲区中的数据输出到客户端</span><br>        <span class=\"hljs-keyword\">while</span> ((len = in.read(buffer))&gt; <span class=\"hljs-number\">0</span>)&#123;<br>            out.write(buffer,<span class=\"hljs-number\">0</span>,len);<br>        &#125;<br>        in.close();<br>        out.close();<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>验证码功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.servlet;<br><span class=\"hljs-keyword\">import</span> javax.imageio.ImageIO;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.awt.*;<br><span class=\"hljs-keyword\">import</span> java.awt.image.BufferedImage;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ImageServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-comment\">//如何让浏览器5s自动刷新一次</span><br>        resp.setHeader(<span class=\"hljs-string\">&quot;refresh&quot;</span>,<span class=\"hljs-string\">&quot;3&quot;</span>);<br>        <span class=\"hljs-comment\">//在内存中创建一个图片</span><br>        BufferedImage image = <span class=\"hljs-keyword\">new</span> BufferedImage(<span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">20</span>,BufferedImage.TYPE_INT_RGB);<br>        <span class=\"hljs-comment\">//得到图片</span><br>        Graphics2D g = (Graphics2D) image.getGraphics();<br>        <span class=\"hljs-comment\">//设置图片背景颜色</span><br>        g.setColor(Color.white);<br>        g.fillRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">20</span>);<br>        <span class=\"hljs-comment\">//给图片写数据</span><br>        g.setColor(Color.BLUE);<br>        g.setFont(<span class=\"hljs-keyword\">new</span> Font(<span class=\"hljs-keyword\">null</span>,Font.BOLD,<span class=\"hljs-number\">20</span>));<br><br>        g.drawString(makeNum(),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">20</span>);<br><br>        <span class=\"hljs-comment\">//告诉浏览器这个请求用图片方式打开</span><br>        resp.setContentType(<span class=\"hljs-string\">&quot;image/png&quot;</span>);<br>        <span class=\"hljs-comment\">//网站存在缓存 不让浏览器缓存</span><br>        resp.setDateHeader(<span class=\"hljs-string\">&quot;expires&quot;</span>,-<span class=\"hljs-number\">1</span>);<br>        resp.setHeader(<span class=\"hljs-string\">&quot;Cache-Control&quot;</span>,<span class=\"hljs-string\">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class=\"hljs-string\">&quot;pragma&quot;</span>,<span class=\"hljs-string\">&quot;no-cache&quot;</span>);<br><br>        <span class=\"hljs-comment\">//将图片写给浏览器</span><br>        <span class=\"hljs-keyword\">boolean</span> write = ImageIO.write(image,<span class=\"hljs-string\">&quot;png&quot;</span>, resp.getOutputStream());<br>    &#125;<br><br>    <span class=\"hljs-comment\">//生成随机数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">makeNum</span><span class=\"hljs-params\">()</span></span>&#123;<br>        Random random = <span class=\"hljs-keyword\">new</span> Random();<br>      \t<span class=\"hljs-comment\">//6个9 代表6位数</span><br>        String num = random.nextInt(<span class=\"hljs-number\">999999</span>) + <span class=\"hljs-string\">&quot;&quot;</span>;<br>        StringBuffer sb = <span class=\"hljs-keyword\">new</span> StringBuffer();  <br>      \t<span class=\"hljs-comment\">//保证输出6位数</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>-num.length() ; i++) &#123;<br>            sb.append(<span class=\"hljs-string\">&quot;0&quot;</span>);<br>        &#125;<br>        String s = sb.toString() + num;<br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>实现重定向</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//resp.setHeader(&quot;location&quot;,&quot;/&quot;);</span><br><span class=\"hljs-comment\">//resp.setStatus(302);//重定向常量</span><br><span class=\"hljs-comment\">//重定向一定要注意路径问题</span><br>resp.sendRedirect(<span class=\"hljs-string\">&quot;/img&quot;</span>);   <span class=\"hljs-comment\">//重定向</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"HttpServletRequest\"><a href=\"#HttpServletRequest\" class=\"headerlink\" title=\"HttpServletRequest\"></a>HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过HttpServletRequest方法，获得客户端的所有信息。</p>\n<img src=\"/article/55715/image-20220102153458150.png\" class title=\"image-20220102153458150\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cookie[] getCookies()</strong></td>\n<td style=\"text-align:left\">返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>ServletInputStream getInputStream()</strong></td>\n<td style=\"text-align:left\">使用 ServletInputStream，以二进制数据形式检索请求的主体。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getCharacterEncoding()</strong></td>\n<td style=\"text-align:left\">返回请求主体中使用的字符编码的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getContentType()</strong></td>\n<td style=\"text-align:left\">返回请求主体的 MIME 类型，如果不知道类型则返回 null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getContextPath()</strong></td>\n<td style=\"text-align:left\">返回指示请求上下文的请求 URI 部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getHeader(String name)</strong></td>\n<td style=\"text-align:left\">以字符串形式返回指定的请求头的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getMethod()</strong></td>\n<td style=\"text-align:left\">返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getParameter(String name)</strong></td>\n<td style=\"text-align:left\">以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getPathInfo()</strong></td>\n<td style=\"text-align:left\">当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getProtocol()</strong></td>\n<td style=\"text-align:left\">返回请求协议的名称和版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getQueryString()</strong></td>\n<td style=\"text-align:left\">返回包含在路径后的请求 URL 中的查询字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRemoteAddr()</strong></td>\n<td style=\"text-align:left\">返回发送请求的客户端的互联网协议（IP）地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRemoteHost()</strong></td>\n<td style=\"text-align:left\">返回发送请求的客户端的完全限定名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRemoteUser()</strong></td>\n<td style=\"text-align:left\">如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRequestURI()</strong></td>\n<td style=\"text-align:left\">从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRequestedSessionId()</strong></td>\n<td style=\"text-align:left\">返回由客户端指定的 session 会话 ID。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getServletPath()</strong></td>\n<td style=\"text-align:left\">返回调用 JSP 的请求的 URL 的一部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getContentLength()</strong></td>\n<td style=\"text-align:left\">以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getIntHeader(String name)</strong></td>\n<td style=\"text-align:left\">返回指定的请求头的值为一个 int 值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getServerPort()</strong></td>\n<td style=\"text-align:left\">返回接收到这个请求的端口号。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getParameterMap()</strong></td>\n<td style=\"text-align:left\">将参数封装成 Map 类型。</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><p>获取前端参数，请求转发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.servlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doGet(req, resp);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-comment\">//后台接收中文乱码问题  </span><br>        req.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br><br>        String username = req.getParameter(<span class=\"hljs-string\">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class=\"hljs-string\">&quot;password&quot;</span>);<br><br>        System.out.println(<span class=\"hljs-string\">&quot;============================&quot;</span>);<br>        <br>        System.out.println(username);<br>        System.out.println(password);<br>        System.out.println(<span class=\"hljs-string\">&quot;============================&quot;</span>);<br><br>        <span class=\"hljs-comment\">//通过请求转发</span><br>        <span class=\"hljs-comment\">// 这里的/代表当前的web应用</span><br>        req.getRequestDispatcher(<span class=\"hljs-string\">&quot;/success.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Cookie-Session\"><a href=\"#Cookie-Session\" class=\"headerlink\" title=\"Cookie_Session\"></a>Cookie_Session</h2><p><strong>会话（Session）</strong>跟踪是Web程序中常用的技术，用来<strong>跟踪用户的整个会话</strong>。常用的会话跟踪技术是Cookie与Session。<strong>Cookie通过在客户端记录信息确定用户身份</strong>，<strong>Session通过在服务器端记录信息确定用户身份</strong>。</p>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>Cookie意为“甜饼”，是<strong>由W3C组织提出</strong>，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。</p>\n<p>　　由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就<strong>给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理</strong>。</p>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。<strong>Session是服务器端使用的一种记录客户端状态的机制</strong>，使用上比Cookie简单一些，相应的也<strong>增加了服务器的存储压力</strong>。</p>\n<p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。</p>\n<a href=\"/article/32177.html\" title=\"点击跳转Cookie_Session详解\">点击跳转Cookie_Session详解</a>\n","more":"<blockquote>\n<p>The hurricane seeks the shortest road by the no-road, and suddenly ends its search in the Nowhere.</p>\n<p>风于无路之中寻求最短之路，又突然地在“无何有之国”终之了它的追求。</p>\n</blockquote>\n<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的<a href=\"https://baike.baidu.com/item/服务器/100571\">服务器</a>端程序，具有独立于平台和<a href=\"https://baike.baidu.com/item/协议/13020269\">协议</a>的特性，主要功能在于交互式地浏览和生成数据，生成动态<a href=\"https://baike.baidu.com/item/Web/150564\">Web</a>内容。</p>\n<p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于<a href=\"https://baike.baidu.com/item/HTTP协议/1276942\">HTTP协议</a>的Web服务器。</p>\n<p>最早支持Servlet标准的是JavaSoft的Java <a href=\"https://baike.baidu.com/item/Web Server/9306055\">Web Server</a>，此后，一些其它的基于Java的Web服务器开始支持标准的Servlet。</p>\n<h3 id=\"Servlet原理\"><a href=\"#Servlet原理\" class=\"headerlink\" title=\"Servlet原理\"></a>Servlet原理</h3><p>Servlet运行过程</p>\n<img src=\"/article/55715/Servlet%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B1.jpg\" class title=\"资源分配图\">\n<p><strong>Servlet的工作过程</strong></p>\n<p>步骤：</p>\n<ol>\n<li>Web Client 向Servlet容器（Tomcat）发出Http请求</li>\n<li>Servlet容器接收Web Client的请求</li>\n<li>Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。</li>\n<li>Servlet容器创建一个HttpResponse对象</li>\n<li>Servlet容器调用HttpServlet对象的doservice方法，把HttpRequest对象与HttpResponse对象作为参数传给HttpServlet 对象。</li>\n<li>HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。</li>\n<li>HttpServlet调用HttpResponse对象的有关方法，生成响应数据。</li>\n<li>Servlet容器把HttpServlet的响应结果传给Web Client。</li>\n</ol>\n<blockquote>\n<ol>\n<li>客户端的网络请求首先会被Http服务器接收（也叫Web服务器、web容器，其需要提供web应用运行所需的环境，接收客户端的Http请求）；</li>\n<li>Web服务器根据请求的路径将请求转交给对应的Servlet容器（也称Servlet引擎，为Servlet的运行提供环境支持，可以理解为tomcat或其他服务器）；</li>\n<li>Servlet容器根据对应的虚拟路径（@WebServlet中配置的）来加载Servlet，如果Serlvet没有被实例化则创建该Servlet的一个实例（调用init方法）；</li>\n<li>Servlet容器根据用户的HTTP请求，创建一个ServletRequest对象（HTTP的请求信息被封装在其中）和一个可以对HTTP请求进行响应的ServletResponse对象（类似于寄信，并在信中说明回信的地址），然后调用HttpServlet中重写的service(ServletRequest req, ServletResponse res)方法，并在这个方法中，将ServletRequest、ServletResponse这两个对象向下转型，得到我们非常熟悉的HttpServletRequest和HttpServletResponse两个对象，然后将客户端的请求转发到HttpServlet中protected修饰的service(HttpServletRequest req, HttpServletResponse resp）；</li>\n<li>service(HttpServletRequest req, HttpServletResponse resp)根据请求的method（get、post、put、delete、head、options、trace）来调用不同的方法，如doGet、doPost；</li>\n<li>服务端处理完Http的请求后，根据HttpServletResponse对象将处理结果作为Http响应返回给客户端。</li>\n</ol>\n</blockquote>\n<p><strong>Servlet UML关系图</strong></p>\n<p><img src=\"/article/Servlet UML关系图.png\"><span class=\"image-caption\">img</span></p>\n<h3 id=\"ServletContext\"><a href=\"#ServletContext\" class=\"headerlink\" title=\"ServletContext\"></a><strong>ServletContext</strong></h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>\n<ol>\n<li><p><strong>共享数据</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ServletContext context = <span class=\"hljs-keyword\">this</span>.getServletContext(); <br>context.setAttribute(<span class=\"hljs-string\">&quot;数据key&quot;</span>,数据value); <span class=\"hljs-comment\">//将一个数据保存</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>获取初始化参数</strong> </p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--web.xml--&gt;</span> <br><span class=\"hljs-comment\">&lt;!--配置一些web应用初始化参数--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context-param</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-name</span>&gt;</span>url<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/javaweb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">param-value</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123; <br>  ServletContext context = <span class=\"hljs-keyword\">this</span>.getServletContext(); <br>  String url = context.getInitParameter(<span class=\"hljs-string\">&quot;url&quot;</span>); <br>  resp.getWriter().print(url); <br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>请求转发</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123; <br>  ServletContext context = <span class=\"hljs-keyword\">this</span>.getServletContext(); <br>  <br>  context.getRequestDispatcher(<span class=\"hljs-string\">&quot;/forwardpath&quot;</span>).forward(req,resp); <br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p><strong>读取资源文件</strong></p>\n<p>Properties</p>\n<ul>\n<li><p>在java目录下新建properties</p>\n</li>\n<li><p>在resources目录下新建properties</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">username</span>=<span class=\"hljs-string\">root12312 </span><br><span class=\"hljs-attr\">password</span>=<span class=\"hljs-string\">zxczxczxc</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span> <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123; <br>  InputStream is = <span class=\"hljs-keyword\">this</span>.getServletContext().getResourceAsStream(<span class=\"hljs-string\">&quot;/WEB- INF/classes/com/bobo/xx.properties&quot;</span>); <br>  Properties prop = <span class=\"hljs-keyword\">new</span> Properties(); <br>  prop.load(is); <br>  String user = prop.getProperty(<span class=\"hljs-string\">&quot;username&quot;</span>); <br>  String pwd = prop.getProperty(<span class=\"hljs-string\">&quot;password&quot;</span>);<br>  resp.getWriter().print(user+<span class=\"hljs-string\">&quot;:&quot;</span>+pwd);<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<img src=\"/article/55715/Servlet%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B2.jpg\" class title=\"资源分配图\">\n<h3 id=\"HttpServletResponse\"><a href=\"#HttpServletResponse\" class=\"headerlink\" title=\"HttpServletResponse\"></a>HttpServletResponse</h3><ol>\n<li><p>简单分类</p>\n<p><strong>负责向浏览器发送数据的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\">ServletOutputStream <span class=\"hljs-title\">getOutputStream</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException</span>;<br><span class=\"hljs-function\">PrintWriter <span class=\"hljs-title\">getWriter</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException</span>;<br></code></pre></td></tr></table></figure>\n<p> 从中我们可以看到，getOutputStream()方法返回ServletOutputStream对象，更适合向客户端写入二进制数据，并且Servlet容器不会对这些二进制数据进行编码，因此我们常用ServletOutputStream来向客户端发送如图片、文件等内容；对于getWriter()方法返回的PrintWriter对象，里面封装了更多的写入字符文本的函数，并且我们上文提到的setContentType()方法设置的MIME类型对其输出内容有效，因此也可以很好地解决中文乱码问题。</p>\n<ul>\n<li><p><strong>还有一点需要注意的是，这两个方法在一个response对象中不可以同时调用，否则会抛出一个IllegalStateException</strong>，也就是非法状态异常，因为输出流只能有一个（如果可以多次获取的话，客户端又如何确认哪个Http响应是最后一个呢）。</p>\n<p><a href=\"https://blog.csdn.net/qq_34666857/article/details/104838171\">点击跳转大佬</a></p>\n</li>\n</ul>\n<p><strong>负责向浏览器发送响应头的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCharacterEncoding</span><span class=\"hljs-params\">(String var1)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setContentLength</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> var1)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setContentType</span><span class=\"hljs-params\">(String var1)</span></span>;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDateHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">long</span> var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addDateHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">long</span> var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setHeader</span><span class=\"hljs-params\">(String var1, String var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addHeader</span><span class=\"hljs-params\">(String var1, String var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setIntHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">int</span> var2)</span></span>;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addIntHeader</span><span class=\"hljs-params\">(String var1, <span class=\"hljs-keyword\">int</span> var2)</span></span>;<br></code></pre></td></tr></table></figure>\n<p><strong>相应状态码的常量</strong></p>\n<p>| Name |       discribtion        |                   释义                    |<br>| :–: | :———————-: | :—————————————: |<br>| 200  |          SC_OK           |             此次请求已经成功              |<br>| 301  |   SC_MOVED_PERMANENTLY   |       请求的网页已永久移动到新位置        |<br>| 302  |   SC_MOVED_TEMPORARILY   |          临时移动、请求地址不变           |<br>| 401  |     SC_UNAUTHORIZED      |            未授权、用户需登录             |<br>| 403  |       SC_FORBIDDEN       |     服务器拒绝了此次请求（权限问题）      |<br>| 404  |       SC_NOT_FOUND       |           服务器没找到URI匹配的           |<br>| 405  |  SC_METHOD_NOT_ALLOWED   |  调用的方法不允许使用（get、post不匹配）  |<br>| 500  | SC_INTERNAL_SERVER_ERROR |       服务器内部发生异常，请求中断        |<br>| 502  |      SC_BAD_GATEWAY      | 网关错误（如Nginx），无法收到服务器的响应 |<br>| 504  |    SC_GATEWAY_TIMEOUT    |  请求超时，在约定时间内没有收到Http响应   |</p>\n</li>\n<li><p>常见应用</p>\n<ol>\n<li><p>向浏览器输出信息</p>\n</li>\n<li><p>下载文件</p>\n<ol>\n<li>要获取下载文件的路径</li>\n<li>下载的文件名</li>\n<li>使浏览器可以支持下载 (Content-disposition) 中文文件名用  URLEncoder.encode 编码，否则可能乱码</li>\n<li>获取下载文件输入流</li>\n<li>创建缓冲区</li>\n<li>获取OutputStream对象</li>\n<li>将FileOutputStream流入到buffer缓冲区</li>\n<li>使用OutputStream将缓冲区中的数据输出到客户端</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.servlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletOutputStream;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.FileInputStream;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.net.URLEncoder;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FileServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        resp.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>      <br>        <span class=\"hljs-comment\">//1.要获取下载文件的路径</span><br>        String realPath = <span class=\"hljs-string\">&quot;绝对路径&quot;</span>;<br>        System.out.println(<span class=\"hljs-string\">&quot;下载的文件的路径：&quot;</span> + realPath);<br>        <span class=\"hljs-comment\">//2.下载的文件名</span><br>        <span class=\"hljs-comment\">//substring()截取字符串   lastIndexOf()截取/之后的字符串</span><br>        String fileName = realPath.substring(realPath.lastIndexOf(<span class=\"hljs-string\">&quot;\\\\&quot;</span>) + <span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-comment\">//3.使浏览器可以支持下载 (Content-disposition)   attachment：以附件方式下载    中文文件名用  URLEncoder.encode 编码，否则可能乱码</span><br>        resp.setHeader(<span class=\"hljs-string\">&quot;Content-disposition&quot;</span>,<span class=\"hljs-string\">&quot;attachment;filename&quot;</span> + URLEncoder.encode(<span class=\"hljs-string\">&quot;fileName&quot;</span>,<span class=\"hljs-string\">&quot;utf-8&quot;</span>));<br>        <span class=\"hljs-comment\">//4.获取下载文件输入流</span><br>        FileInputStream in = <span class=\"hljs-keyword\">new</span> FileInputStream(realPath);<br>        <span class=\"hljs-comment\">//5.创建缓冲区</span><br>        <span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">1024</span>];<br>        <span class=\"hljs-comment\">//6.获取OutputStream对象</span><br>        ServletOutputStream out = resp.getOutputStream();<br>        <span class=\"hljs-comment\">//7.将FileOutputStream流入到buffer缓冲区</span><br>      \t<span class=\"hljs-comment\">//in.read(buffer)</span><br>        <span class=\"hljs-comment\">//8.使用OutputStream将缓冲区中的数据输出到客户端</span><br>        <span class=\"hljs-keyword\">while</span> ((len = in.read(buffer))&gt; <span class=\"hljs-number\">0</span>)&#123;<br>            out.write(buffer,<span class=\"hljs-number\">0</span>,len);<br>        &#125;<br>        in.close();<br>        out.close();<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>验证码功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.servlet;<br><span class=\"hljs-keyword\">import</span> javax.imageio.ImageIO;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.awt.*;<br><span class=\"hljs-keyword\">import</span> java.awt.image.BufferedImage;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ImageServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-comment\">//如何让浏览器5s自动刷新一次</span><br>        resp.setHeader(<span class=\"hljs-string\">&quot;refresh&quot;</span>,<span class=\"hljs-string\">&quot;3&quot;</span>);<br>        <span class=\"hljs-comment\">//在内存中创建一个图片</span><br>        BufferedImage image = <span class=\"hljs-keyword\">new</span> BufferedImage(<span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">20</span>,BufferedImage.TYPE_INT_RGB);<br>        <span class=\"hljs-comment\">//得到图片</span><br>        Graphics2D g = (Graphics2D) image.getGraphics();<br>        <span class=\"hljs-comment\">//设置图片背景颜色</span><br>        g.setColor(Color.white);<br>        g.fillRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">80</span>,<span class=\"hljs-number\">20</span>);<br>        <span class=\"hljs-comment\">//给图片写数据</span><br>        g.setColor(Color.BLUE);<br>        g.setFont(<span class=\"hljs-keyword\">new</span> Font(<span class=\"hljs-keyword\">null</span>,Font.BOLD,<span class=\"hljs-number\">20</span>));<br><br>        g.drawString(makeNum(),<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">20</span>);<br><br>        <span class=\"hljs-comment\">//告诉浏览器这个请求用图片方式打开</span><br>        resp.setContentType(<span class=\"hljs-string\">&quot;image/png&quot;</span>);<br>        <span class=\"hljs-comment\">//网站存在缓存 不让浏览器缓存</span><br>        resp.setDateHeader(<span class=\"hljs-string\">&quot;expires&quot;</span>,-<span class=\"hljs-number\">1</span>);<br>        resp.setHeader(<span class=\"hljs-string\">&quot;Cache-Control&quot;</span>,<span class=\"hljs-string\">&quot;no-cache&quot;</span>);<br>        resp.setHeader(<span class=\"hljs-string\">&quot;pragma&quot;</span>,<span class=\"hljs-string\">&quot;no-cache&quot;</span>);<br><br>        <span class=\"hljs-comment\">//将图片写给浏览器</span><br>        <span class=\"hljs-keyword\">boolean</span> write = ImageIO.write(image,<span class=\"hljs-string\">&quot;png&quot;</span>, resp.getOutputStream());<br>    &#125;<br><br>    <span class=\"hljs-comment\">//生成随机数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">makeNum</span><span class=\"hljs-params\">()</span></span>&#123;<br>        Random random = <span class=\"hljs-keyword\">new</span> Random();<br>      \t<span class=\"hljs-comment\">//6个9 代表6位数</span><br>        String num = random.nextInt(<span class=\"hljs-number\">999999</span>) + <span class=\"hljs-string\">&quot;&quot;</span>;<br>        StringBuffer sb = <span class=\"hljs-keyword\">new</span> StringBuffer();  <br>      \t<span class=\"hljs-comment\">//保证输出6位数</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>-num.length() ; i++) &#123;<br>            sb.append(<span class=\"hljs-string\">&quot;0&quot;</span>);<br>        &#125;<br>        String s = sb.toString() + num;<br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>实现重定向</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//resp.setHeader(&quot;location&quot;,&quot;/&quot;);</span><br><span class=\"hljs-comment\">//resp.setStatus(302);//重定向常量</span><br><span class=\"hljs-comment\">//重定向一定要注意路径问题</span><br>resp.sendRedirect(<span class=\"hljs-string\">&quot;/img&quot;</span>);   <span class=\"hljs-comment\">//重定向</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"HttpServletRequest\"><a href=\"#HttpServletRequest\" class=\"headerlink\" title=\"HttpServletRequest\"></a>HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过HttpServletRequest方法，获得客户端的所有信息。</p>\n<img src=\"/article/55715/image-20220102153458150.png\" class title=\"image-20220102153458150\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Cookie[] getCookies()</strong></td>\n<td style=\"text-align:left\">返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>ServletInputStream getInputStream()</strong></td>\n<td style=\"text-align:left\">使用 ServletInputStream，以二进制数据形式检索请求的主体。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getCharacterEncoding()</strong></td>\n<td style=\"text-align:left\">返回请求主体中使用的字符编码的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getContentType()</strong></td>\n<td style=\"text-align:left\">返回请求主体的 MIME 类型，如果不知道类型则返回 null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getContextPath()</strong></td>\n<td style=\"text-align:left\">返回指示请求上下文的请求 URI 部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getHeader(String name)</strong></td>\n<td style=\"text-align:left\">以字符串形式返回指定的请求头的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getMethod()</strong></td>\n<td style=\"text-align:left\">返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getParameter(String name)</strong></td>\n<td style=\"text-align:left\">以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getPathInfo()</strong></td>\n<td style=\"text-align:left\">当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getProtocol()</strong></td>\n<td style=\"text-align:left\">返回请求协议的名称和版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getQueryString()</strong></td>\n<td style=\"text-align:left\">返回包含在路径后的请求 URL 中的查询字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRemoteAddr()</strong></td>\n<td style=\"text-align:left\">返回发送请求的客户端的互联网协议（IP）地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRemoteHost()</strong></td>\n<td style=\"text-align:left\">返回发送请求的客户端的完全限定名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRemoteUser()</strong></td>\n<td style=\"text-align:left\">如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRequestURI()</strong></td>\n<td style=\"text-align:left\">从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getRequestedSessionId()</strong></td>\n<td style=\"text-align:left\">返回由客户端指定的 session 会话 ID。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>String getServletPath()</strong></td>\n<td style=\"text-align:left\">返回调用 JSP 的请求的 URL 的一部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getContentLength()</strong></td>\n<td style=\"text-align:left\">以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getIntHeader(String name)</strong></td>\n<td style=\"text-align:left\">返回指定的请求头的值为一个 int 值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getServerPort()</strong></td>\n<td style=\"text-align:left\">返回接收到这个请求的端口号。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int getParameterMap()</strong></td>\n<td style=\"text-align:left\">将参数封装成 Map 类型。</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li><p>获取前端参数，请求转发</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.servlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.Arrays;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doGet(req, resp);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-comment\">//后台接收中文乱码问题  </span><br>        req.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>        resp.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br><br>        String username = req.getParameter(<span class=\"hljs-string\">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class=\"hljs-string\">&quot;password&quot;</span>);<br><br>        System.out.println(<span class=\"hljs-string\">&quot;============================&quot;</span>);<br>        <br>        System.out.println(username);<br>        System.out.println(password);<br>        System.out.println(<span class=\"hljs-string\">&quot;============================&quot;</span>);<br><br>        <span class=\"hljs-comment\">//通过请求转发</span><br>        <span class=\"hljs-comment\">// 这里的/代表当前的web应用</span><br>        req.getRequestDispatcher(<span class=\"hljs-string\">&quot;/success.jsp&quot;</span>).forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Cookie-Session\"><a href=\"#Cookie-Session\" class=\"headerlink\" title=\"Cookie_Session\"></a>Cookie_Session</h2><p><strong>会话（Session）</strong>跟踪是Web程序中常用的技术，用来<strong>跟踪用户的整个会话</strong>。常用的会话跟踪技术是Cookie与Session。<strong>Cookie通过在客户端记录信息确定用户身份</strong>，<strong>Session通过在服务器端记录信息确定用户身份</strong>。</p>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>Cookie意为“甜饼”，是<strong>由W3C组织提出</strong>，最早由Netscape社区发展的一种机制。目前Cookie已经成为标准，所有的主流浏览器如IE、Netscape、Firefox、Opera等都支持Cookie。</p>\n<p>　　由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就<strong>给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理</strong>。</p>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>除了使用Cookie，Web应用程序中还经常使用Session来记录客户端状态。<strong>Session是服务器端使用的一种记录客户端状态的机制</strong>，使用上比Cookie简单一些，相应的也<strong>增加了服务器的存储压力</strong>。</p>\n<p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。</p>\n<a href=\"/article/32177.html\" title=\"点击跳转Cookie_Session详解\">点击跳转Cookie_Session详解</a>\n","categories":[{"name":"JavaWeb","path":"api/categories/JavaWeb.json"},{"name":"Servlet","path":"api/categories/Servlet.json"}],"tags":[{"name":"JavaWeb,Java,Servlet","path":"api/tags/JavaWeb,Java,Servlet.json"}]}