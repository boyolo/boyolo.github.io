{"title":"RabbitMQ","slug":"RabbitMQ","date":"2022-08-18T01:40:38.000Z","updated":"2024-04-10T14:20:53.413Z","comments":true,"path":"api/articles/RabbitMQ.json","realPath":null,"excerpt":null,"covers":["/article/33708/AMQP%E6%A0%B8%E5%BF%83%E7%BB%84%E6%88%90.png","/article/33708/%E6%A6%82%E8%A6%81.png","/article/33708/%E8%BF%9E%E6%8E%A5.png","/article/33708/%E9%80%9A%E9%81%93.png","/article/33708/%E4%BA%A4%E6%8D%A2%E6%9C%BA.png","/article/33708/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E5%8F%AF%E8%83%BD%E7%9A%84%E6%83%85%E5%86%B5.png"],"cover":"/article/33708/AMQP%E6%A0%B8%E5%BF%83%E7%BB%84%E6%88%90.png","content":"<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p><strong>RabbitMQ</strong>是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。</p>\n<p><strong>AMQP</strong>（Advanced Message Queuing Protocol）高级消息队列协议，一个提供统一消息服务的应用层标准协议，是应用层协议的一个开放标准，为面向消息的中间件设计。AMQP是一个进程间传递异步消息的网络协议。</p>\n<img src=\"/article/33708/AMQP%E6%A0%B8%E5%BF%83%E7%BB%84%E6%88%90.png\" class title=\"AMQP核心组成\">\n<blockquote>\n<p><strong>Producer(生产者)</strong>:生产消息</p>\n<p><strong>ConnectionFactory(连接工厂)</strong>:生产Connection的的工厂</p>\n<p><strong>Connection(连接)</strong>:连接，应用程序与Broker的网络连接TCP/IP/三次握手和四次挥手。</p>\n<p>AMQP连接通常是长连接。AMQP是一个使用 TCP提供可靠投递的应用层协议。AMQP 使用认证机制并且提供 TLS（SSL）保护。当一个应用不再需要连接到 AMQP 代理的时候，需要优雅的释放掉 AMQP 连接，而不是直接将 TCP 连接关闭。</p>\n<p><strong>Channel(信道)</strong>:网络信道，是建立在Connection连接之上的一种轻量级的连接。几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立多各Channel，每个Channel代表一个会话任务。</p>\n<p>大部分的业务操作是在Channel这个接口中完成的，包括:</p>\n<p>队列的声明queueDeclare<br>交换机的声明exchangeDeclare<br>队列的绑定queueBind<br>发布消息basicPublish<br>消费消息basicConsume等。<br>Broker(中间件)</p>\n<p><strong>VirtualHost(虚拟主机)</strong>:虚拟主机，用于进行逻辑隔离，一个虚拟主机理由可以有若干个Exchange和Queue，同一个虚拟主机里面不能有相同名字的Exchange。</p>\n<p>为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP 提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟 Web servers虚拟主机概念非常相似，这为 AMQP 实体提供了完全隔离的环境。当连接被建立的时候，AMQP 客户端来指定使用哪个虚拟主机。</p>\n<p><strong>Exchange(交换机)</strong>:交换机，接受消息，根据路由键发送消息到绑定的队列（不具备消息存储的能力）。</p>\n<p>交换机是用来发送消息的 AMQP 实体。交换机拿到一个消息之后将它路由给一个或零个队列。它使用哪种路由算法是由交换机类型和绑定（Bindings）规则所决定的。</p>\n<p><strong>Consumer(消费者)</strong>:消费者消费消息。在AMQP中，消费者获取待消费消息的途径有两种：</p>\n<ul>\n<li>消息中间件将消息投递给消费者（push API）</li>\n<li>消费者主动获取消息 (pull API)</li>\n</ul>\n<p><strong>需要注意：多个消费者监听同一个队列时，队列中的消息只会被其中一个消费者消费（并不会每个消费者都消费一次）</strong></p>\n<p><strong>Message(消息)</strong>:消息，服务与应用程序之间传送的数据，由Properties（属性）和body（主体）组成。属性是对消息进行修饰，比如消息的优先级，延迟等高级特性，主体则就是消息体的内容。</p>\n</blockquote>\n<p>优点：</p>\n<ol>\n<li>应用耦合</li>\n<li>异步处理</li>\n<li>流量削峰</li>\n</ol>\n<h3 id=\"RabbitMQ优势\"><a href=\"#RabbitMQ优势\" class=\"headerlink\" title=\"RabbitMQ优势\"></a><strong>RabbitMQ优势</strong></h3><ol>\n<li>基于AMQP协议</li>\n<li>高并发（是一个容量的概念，服务器可以接受的最大任务数量）</li>\n<li>高性能（是一个速度的概念，单位时间内服务器可以处理的任务数）</li>\n<li>高可用（是一个持久的概念，单位时间内服务器可以正常工作的时间比例）</li>\n<li>强大的社区支持</li>\n<li>支持插件</li>\n<li>支持多语言</li>\n</ol>\n<h3 id=\"RabbitMQ界面\"><a href=\"#RabbitMQ界面\" class=\"headerlink\" title=\"RabbitMQ界面\"></a><strong>RabbitMQ界面</strong></h3><ol>\n<li><p>概要</p>\n<img src=\"/article/33708/%E6%A6%82%E8%A6%81.png\" class title=\"概要\">\n</li>\n<li><p>连接</p>\n<img src=\"/article/33708/%E8%BF%9E%E6%8E%A5.png\" class title=\"连接\">\n</li>\n<li><p>通道</p>\n<img src=\"/article/33708/%E9%80%9A%E9%81%93.png\" class title=\"通道\">\n<ol>\n<li>一个连接可以创建多个通道</li>\n<li>一个应用或者一个线程，都是一个通道</li>\n<li>在通道中创建队列，生产者的通道一般立马关闭，消费者是一只在监听，通道一直存在</li>\n</ol>\n</li>\n<li><p>交换机</p>\n<img src=\"/article/33708/%E4%BA%A4%E6%8D%A2%E6%9C%BA.png\" class title=\"交换机\">\n<p>| Type              | 解释                                                         |<br>| —————– | ———————————————————— |<br>| direct            | 它会把消息路由到那些 binding key 与 routing key 完全匹配的 Queue 中 |<br>| fanout            | 它会把所有发送到该 Exchange 的消息路由到所有与它绑定的 Queue 中 |<br>| headers           | headers 类型的 Exchange 不依赖于 routing key 与 binding key 的匹配规则来路由消息，而是根据发送的消息内容中的 headers 属性进行匹配。（headers 类型的交换器性能差，不实用，基本不会使用。） |<br>| topic             | 与direct模型相比，多了个可以使用通配符                       |<br>| x-delayed-message | 延迟交换机，可以延迟接收消息                                 |</p>\n<p>| <strong>Features</strong> | <strong>解释</strong>                                                     |<br>| ———— | ———————————————————— |<br>| D            | d 是 durable 的缩写，代表这个队列中的消息支持持久化          |<br>| AD           | ad 是 autoDelete 的缩写。代表当前队列的最后一个消费者退订时被自动删除。注意：此时不管队列中是否还存在消息，队列都会删除。 |<br>| excl         | 是 exclusive 的缩写。代表这是一个排他队列。如果一个队列被声明为排他队列，该队列仅对首次声明它的连接可见，并在连接断开时自动删除。这里需要注意三点：其一，排他队列是基于连接可见的，同一连接的不同信道是可以同时访问同一个连接创建的排他队列的。其二，“首次”，如果一个连接已经声明了一个排他队列，其他连接是不允许建立同名的排他队列的，这个与普通队列不同。其三，即使该队列是持久化的，一旦连接关闭或者客户端退出，该排他队列都会被自动删除的。这种队列适用于只限于一个客户端发送读取消息的应用场景。 |<br>| Args         | 是 arguments 的缩写。代表该队列配置了 arguments 参数。       |<br>| TTL          | 是 x-message-ttl 的缩写。设置队列中的所有消息的生存周期(统一为整个队列的所有消息设置生命周期), 也可以在发布消息的时候单独为某个消息指定剩余生存时间，单位毫秒。 |<br>| Exp          | Auto Expire，是 x-expires 配置的缩写。当队列在指定的时间没有被访问(consume, basicGet, queueDeclare…)就会被删除，Features=Exp。注意这里是删除队列，不是队列中的消息。 |<br>| Lim          | 说明该队列配置了 x-max-length。限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉。 |<br>| Lim B        | 说明队列配置了 x-max-length-bytes。限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小。 |<br>| DLX          | 说明该队列配置了 x-dead-letter-exchange。当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉。 |<br>| DLK          | x-dead-letter-routing-key 的缩写，将删除的消息推送到指定交换机的指定路由键的队列中去。 |<br>| Pri          | x-max-priority 的缩写，优先级队列。表明该队列支持优先级，先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费。 |<br>| Ovfl         | x-overflow 的缩写。队列中的消息溢出时，如何处理这些消息。要么丢弃队列头部的消息，要么拒绝接收后面生产者发送过来的所有消息。有两个配置项：drop-head，代表丢弃队列头部的消息，默认行为；reject-publish 设置队列中的消息溢出后,该队列的行为:”拒绝接收”(所有消息)。 |<br>| ha-all       | 镜像队列。all 表示镜像到集群上的所有节点，ha-params 参数忽略。 |</p>\n</li>\n</ol>\n<h3 id=\"七大示例\"><a href=\"#七大示例\" class=\"headerlink\" title=\"七大示例\"></a>七大示例</h3><ol>\n<li><p>Hello World</p>\n</li>\n<li><p>工作队列</p>\n<p>假如一共20条消息，A处理时间1s，B处理时间2s</p>\n<ol>\n<li><p>轮询</p>\n<p>A，B同时拿到各自的10条消息，然后再处理，所以A经过10s处理完，B要经过20s才能处理完</p>\n</li>\n<li><p>公平</p>\n<p>A和B不能直接拿到所有消息，设置<strong>int prefetchCount = 1</strong>表示消费者每次只能接收一条消息，只有处理完这条消息，才能处理下一条</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">channel.basicQos(prefetchCount);<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>这样A处理的快，所以A可以不断从信道中得到消息，B处理的比A慢，间隔2s才可以获得一条消息\n\n**没有资源浪费**\n</code></pre><ol start=\"3\">\n<li><p>发布订阅（使用交换机，使用广播模式<strong>fanout</strong>）</p>\n<ol>\n<li>生产者绑定交换机，将消息发送至交换机</li>\n<li>交换机生成<strong>排他队列</strong>，然后将交换机与队列进行绑定</li>\n<li>消费者监听对应队列的消息</li>\n</ol>\n<p>交换机将消息转发至队列，消费者可以收到生产发布的消息。 </p>\n</li>\n<li><p>路由队列（使用交换机，使用路由模式<strong>direct</strong>）</p>\n<ol>\n<li>生产者绑定交换机，并且定义不同的<strong>routingKey</strong>，生产者将携带不同<strong>routingKey</strong>的消息发送至交换机</li>\n<li>交换机生成<strong>排他队列</strong>，同时将队列与交换机进行绑定，此时不同的队列绑定不同的<strong>routingKey</strong></li>\n<li>消费者监听对应队列的消息</li>\n</ol>\n<p>交换机将携带不同的<strong>routingKey</strong>的消息转发至对应<strong>routingKey</strong>的队列，消费者可以收到生产发布的消息</p>\n</li>\n<li><p>主题队列（使用交换机，使用主题模式<strong>topic</strong>）</p>\n<p>* 匹配一个字符串</p>\n<p># 匹配0个或多个</p>\n<p><strong>队列和交换机绑定才可以使用通配符，发送消息时必须使用具体的路由名称</strong></p>\n</li>\n<li><p>PRC模式</p>\n<p>客户端同时是生产者和消费者，服务端者同时是生产者和消费者</p>\n<p>客户端发送请求携带 <strong>reply_to</strong> 表示服务端收到消息后转发的队列名 以及 <strong>correlation_id</strong> 表示该消息的唯一id</p>\n</li>\n</ol>\n<h3 id=\"RabbitMQ消息的事务机制\"><a href=\"#RabbitMQ消息的事务机制\" class=\"headerlink\" title=\"RabbitMQ消息的事务机制\"></a>RabbitMQ消息的事务机制</h3><ol>\n<li>通过AMQP事务机制实现；</li>\n<li>通过将channel设置成confirm模式来实现</li>\n</ol>\n<p><strong>两种事务控制形式不能同时开启</strong></p>\n<h4 id=\"通过AMQP事务机制实现\"><a href=\"#通过AMQP事务机制实现\" class=\"headerlink\" title=\"通过AMQP事务机制实现\"></a>通过AMQP事务机制实现</h4><ol>\n<li>txSelect() 将当前channel设置成transaction模式，即开启事务</li>\n<li>txCommit() 提交事务</li>\n<li>txRollback() 回滚事务</li>\n</ol>\n<p>在通过 txSelect() 开启事务之后，便可以发布消息给 broker 代理服务器了，如果 txCommit() 提交成功了，则消息一定到达了 broker 了,如果在 txCommit() 执行之前 broker 异常崩溃或者由于其他原因抛出异常，这个时候便可以捕获异常通过 txRollback() 回滚事务。</p>\n<p><strong>缺点：降低RabbitMQ的性能</strong></p>\n<h4 id=\"confirm确认模式\"><a href=\"#confirm确认模式\" class=\"headerlink\" title=\"confirm确认模式\"></a>confirm确认模式</h4><p>生产者将信道设置成 <strong>confirm</strong> 模式，一旦信道进入 confirm 模式，所有在该信道上面发布的消息都将会被指派一个<strong>唯一的ID(从1开始)</strong>，<strong>一旦消息被投递到所有匹配的队列之后</strong>，broker 就会发送一个确认给生产者(包含消息的唯一ID)，这就使得生产者知道消息已经正确到达目的队列了；</p>\n<p>如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置 basicAck 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理。</p>\n<p>confirm模式最大的好处在于它是可以 异步 的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消息，生产者应用程序同样可以在回调方法中处理该 nack 消息。</p>\n<p>在 channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack）或者 nack 一次，但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm 又被 nack。</p>\n<p><strong>实现方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 开启确认发布</span><br>channel.confirmSelect();<br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>普通 confirm 模式</p>\n<p>这是一种简单的确认方式，它是一种 <strong>同步</strong> 确认发布的方式，也就是发布一个消息之后，只有收到了确认发布，后续的消息才能继续发布，waitForConfirms() 这个方法在消息被确认的时候返回true，如果在指定时间范围内，这个消息没有被确认那么它将返回false。</p>\n<p>waitForConfirmsOrDie() 这个方法只有在消息被确认的时候才返回，如果在指定时间范围内，这个消息没有被确认那么它将抛出异常。</p>\n<p>这种确认方式有一个最大的缺点就是：发布速度特别的慢，因为如果没有收到确认发布的消息，就会阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布消息的吞吐量。</p>\n</li>\n<li><p>批量 confirm 模式</p>\n<p>先发布一批消息，然后一起确认可以极大地提高吞吐量，当然这种方式的缺点就是：<strong>当发生故障导致发布出现问题时，不知道是哪个消息出现问题了</strong>，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息。当然这种方案仍然是 同步的，也一样阻塞消息的发布。</p>\n</li>\n<li><p>异步 confirm 模式</p>\n<p>channel 利用回调函数 ConfirmListener() 来达到消息可靠性传递的，这个回调函数只包含 deliveryTag(当前Channel发出的消息序号) ，需要自己手动维护一个 unconfirm 的消息序号集合，每发布一条消息，集合中元素+1 ， 每回调一次 <code>handleAck</code> 方法，unconfirm集合删除相应的一条或多条记录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//信道添加监听回调函数</span><br>channel.addConfirmListener(<span class=\"hljs-keyword\">new</span> ConfirmListener()&#123;<br>  <span class=\"hljs-comment\">//重写 handleAck 回调方法</span><br>  <span class=\"hljs-comment\">//deliveryTag 消息发送序号</span><br>  <span class=\"hljs-comment\">//multiple 是否是多条</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleAck</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> deliveryTag , <span class=\"hljs-keyword\">boolean</span> multiple)</span> <span class=\"hljs-keyword\">throws</span> IOException</span>&#123;<br>    处理逻辑<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"SpringAMQP\"><a href=\"#SpringAMQP\" class=\"headerlink\" title=\"SpringAMQP\"></a>SpringAMQP</h2><p>Spring AMQP 是对 Spring 基于 AMQP 的消息收发解决方案，它是一个抽象层，不依赖于特定的 AMQP Broker 实现和客户端的抽象，所以可以很方便地替换。</p>\n<h2 id=\"邮件发送\"><a href=\"#邮件发送\" class=\"headerlink\" title=\"邮件发送\"></a>邮件发送</h2><p><strong>邮箱中开启SMTP服务</strong></p>\n<blockquote>\n<p><strong>依赖</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&lt;dependencies&gt;<br>  &lt;dependency&gt;<br> \t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.4</span>&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>  \t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.0</span>&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>  \t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.4</span>&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>  \t&lt;groupId&gt;com.boyolo&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;yeb-server&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-SNAPSHOT&lt;/version&gt;<br>  &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">server:<br>  #端口<br>  port: <span class=\"hljs-number\">8082</span><br>spring:<br>  #邮件配置<br>  mail:<br>    #邮件服务器地址<br>    host: smtp<span class=\"hljs-number\">.163</span>.com<br>    #协议<br>    protocol: smtp<br>    #编码格式<br>    <span class=\"hljs-keyword\">default</span>-encoding: utf-<span class=\"hljs-number\">8</span><br>    #授权码（在邮箱开通服务时获取）<br>    password: NBFXNQFSTKVDEBTN<br>    #发送者邮箱地址<br>    username: beau_renbo@<span class=\"hljs-number\">163.</span>com<br>    #端口（不同邮箱端口号不同）<br>    port: <span class=\"hljs-number\">25</span><br><br>  #rabbitmq配置<br>  rabbitmq:<br>    #用户名<br>    username: guest<br>    #密码<br>    password: guest<br>    #服务器地址<br>    host: localhost<br>    #端口<br>    port: <span class=\"hljs-number\">5672</span><br>    listener:<br>      simple:<br>        #开启手动确认<br>        acknowledge-mode: manual<br><br>  redis:<br>    #超时时间<br>    timeout: 10000ms<br>    #服务器地址<br>    host: <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>    #服务器端口<br>    port: <span class=\"hljs-number\">6379</span><br>    #数据库<br>    database: <span class=\"hljs-number\">0</span><br>    password: buzhidao<br>    lettuce:<br>      pool:<br>        #最大连接数<br>        max-active: <span class=\"hljs-number\">1024</span><br>        #最大连接阻塞等待时间<br>        max-wait: 10000ms<br>        #最大空闲连接<br>        max-idle: <span class=\"hljs-number\">200</span><br>        #最小空闲连接<br>        min-idle: <span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>设置邮件发送常量</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.server.pojo;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MailConstants</span> </span>&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息投递中</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer DELIVERING = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息投递成功</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer SUCCESS = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息投递失败</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer FAILURE = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最大尝试次数</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer MAX_TRY_COUNT = <span class=\"hljs-number\">3</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息超时时间</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer MSG_TIMEOUT = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 对列</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String MAIL_QUEUE_NAME = <span class=\"hljs-string\">&quot;mail.queue&quot;</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 交换机</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String MAIL_EXCHANGE_NAME = <span class=\"hljs-string\">&quot;mail.exchange&quot;</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 路由键</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String MAIL_ROUTING_KEY_NAME = <span class=\"hljs-string\">&quot;mail.routing.key&quot;</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>邮件接收</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.mail;<br><br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.Employee;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailConstants;<br><span class=\"hljs-keyword\">import</span> com.rabbitmq.client.Channel;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.support.AmqpHeaders;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.mail.MailProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.HashOperations;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class=\"hljs-keyword\">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class=\"hljs-keyword\">import</span> org.springframework.messaging.Message;<br><span class=\"hljs-keyword\">import</span> org.springframework.messaging.MessageHeaders;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.thymeleaf.TemplateEngine;<br><span class=\"hljs-keyword\">import</span> org.thymeleaf.context.Context;<br><span class=\"hljs-keyword\">import</span> javax.mail.internet.MimeMessage;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MailReceiver</span> </span>&#123;<br>  <span class=\"hljs-comment\">//日志</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(MailReceiver.class);<br>\t<br>  <span class=\"hljs-comment\">//邮件发送</span><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> JavaMailSender javaMailSender;<br>  <span class=\"hljs-comment\">//邮件配置</span><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> MailProperties mailProperties;<br>  <span class=\"hljs-comment\">//模版引擎 负责把对象数据呈现成文本数据</span><br>  <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  1. 指令简单 - 内置不超过10个常用的指令.</span><br><span class=\"hljs-comment\">\t2. 基于XPath - 直接使用XPath查找对象,并且可以使用XPath强大的语法和函数.</span><br><span class=\"hljs-comment\">\t3. 容易扩展 - 无论是指令还是XPath函数都可以自定义.</span><br><span class=\"hljs-comment\">\t4. 解析超快 - 基于其语法特点,解析模板结构非常快.</span><br><span class=\"hljs-comment\">  */</span><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> TemplateEngine templateEngine;<br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisTemplate redisTemplate;<br><br>  <span class=\"hljs-meta\">@RabbitListener(queues = MailConstants.MAIL_QUEUE_NAME)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">(Message message, Channel channel)</span> </span>&#123;<br>    Employee employee = (Employee) message.getPayload();<br>    MessageHeaders headers = message.getHeaders();<br>    <span class=\"hljs-comment\">//消息序号</span><br>    <span class=\"hljs-keyword\">long</span> tag = (<span class=\"hljs-keyword\">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG);<br>    String msgId = (String) headers.get(<span class=\"hljs-string\">&quot;spring_returned_message_correlation&quot;</span>);<br>    HashOperations hashOperations = redisTemplate.opsForHash();<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (hashOperations.entries(<span class=\"hljs-string\">&quot;mail_log&quot;</span>).containsKey(msgId)) &#123;<br>        LOGGER.error(<span class=\"hljs-string\">&quot;消息已经被消费==========&gt;&#123;&#125;&quot;</span>, msgId);<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">                 * 手动确认消息</span><br><span class=\"hljs-comment\">                 * tag：消息序号</span><br><span class=\"hljs-comment\">                 * multiple:是否确认多条</span><br><span class=\"hljs-comment\">                 */</span><br>        channel.basicAck(tag, <span class=\"hljs-keyword\">false</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      <br>      MimeMessage msg = javaMailSender.createMimeMessage();<br>      MimeMessageHelper helper = <span class=\"hljs-keyword\">new</span> MimeMessageHelper(msg);<br>      <span class=\"hljs-comment\">//发件人</span><br>      helper.setFrom(mailProperties.getUsername());<br>      <span class=\"hljs-comment\">//收件人</span><br>      helper.setTo(employee.getEmail());<br>      <span class=\"hljs-comment\">//主题</span><br>      helper.setSubject(<span class=\"hljs-string\">&quot;入职欢迎邮件&quot;</span>);<br>      <span class=\"hljs-comment\">//发送日期</span><br>      helper.setSentDate(<span class=\"hljs-keyword\">new</span> Date());<br>      <br>      <span class=\"hljs-comment\">//邮件内容</span><br>      Context context = <span class=\"hljs-keyword\">new</span> Context();<br>      context.setVariable(<span class=\"hljs-string\">&quot;name&quot;</span>, employee.getName());<br>      context.setVariable(<span class=\"hljs-string\">&quot;posName&quot;</span>, employee.getPosition().getName());<br>      context.setVariable(<span class=\"hljs-string\">&quot;jobLevelName&quot;</span>, employee.getJoblevel().getName());<br>      context.setVariable(<span class=\"hljs-string\">&quot;departmentName&quot;</span>, employee.getDepartment().getName());<br><br>      String mail = templateEngine.process(<span class=\"hljs-string\">&quot;mail&quot;</span>, context);<br>      helper.setText(mail, <span class=\"hljs-keyword\">true</span>);<br><br>      javaMailSender.send(msg);<br>      LOGGER.info(<span class=\"hljs-string\">&quot;邮件发送成功&quot;</span>);<br>      <span class=\"hljs-comment\">//将消息Id存入redis</span><br>      hashOperations.put(<span class=\"hljs-string\">&quot;mail_log&quot;</span>, msgId, <span class=\"hljs-string\">&quot;OK&quot;</span>);<br>      <span class=\"hljs-comment\">//手动确认消息</span><br>      channel.basicAck(tag, <span class=\"hljs-keyword\">false</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">                 * 手动确认消息</span><br><span class=\"hljs-comment\">                 * tag：消息序号</span><br><span class=\"hljs-comment\">                 * multiple:是否确认多条</span><br><span class=\"hljs-comment\">                 * requeue:是否退回队列</span><br><span class=\"hljs-comment\">                 */</span><br>        channel.basicNack(tag, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">true</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (IOException ioException) &#123;<br>        LOGGER.error(<span class=\"hljs-string\">&quot;邮件发送失败========&gt;&#123;&#125;&quot;</span>, e.getMessage());<br>      &#125;<br>      LOGGER.error(<span class=\"hljs-string\">&quot;邮件发送失败========&gt;&#123;&#125;&quot;</span>, e.getMessage());<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>EmployeeServiceImpl.java</strong> 添加员工发送消息时消息可靠性–消息落库</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> == employeeMapper.insert(employee)) &#123;<br><br>  Employee emp = employeeMapper.getEmployee(employee.getId()).get(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-comment\">//数据库记录发送的消息</span><br>  String msgId = UUID.randomUUID().toString();<br>  <span class=\"hljs-comment\">//            String msgId = &quot;123456&quot;;</span><br>  MailLog mailLog = <span class=\"hljs-keyword\">new</span> MailLog();<br>  mailLog.setMsgId(msgId);<br>  mailLog.setEid(employee.getId());<br>  mailLog.setStatus(<span class=\"hljs-number\">0</span>);<br>  mailLog.setRouteKey(MailConstants.MAIL_ROUTING_KEY_NAME);<br>  mailLog.setExchange(MailConstants.MAIL_EXCHANGE_NAME);<br>  mailLog.setCount(<span class=\"hljs-number\">0</span>);<br>  mailLog.setTryTime(LocalDateTime.now().plusMinutes(MailConstants.MSG_TIMEOUT));<br>  mailLog.setCreateTime(LocalDateTime.now());<br>  mailLog.setUpdateTime(LocalDateTime.now());<br>  mailLogMapper.insert(mailLog);<br><br>  <span class=\"hljs-comment\">//发送信息</span><br>  rabbitTemplate.convertAndSend(MailConstants.MAIL_EXCHANGE_NAME, MailConstants.MAIL_ROUTING_KEY_NAME, emp, <span class=\"hljs-keyword\">new</span> CorrelationData(msgId));<br><br>  <span class=\"hljs-keyword\">return</span> RespBean.success(<span class=\"hljs-string\">&quot;添加成功！&quot;</span>);<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>RabbitMQ配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.server.config;<br><br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailConstants;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailLog;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.service.IMailLogService;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.Binding;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.DirectExchange;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.Queue;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * RabbitMq 配置类</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RabbitMqConfig</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(RabbitMqConfig.class);<br><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> CachingConnectionFactory cachingConnectionFactory;<br><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> IMailLogService mailLogService;<br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RabbitTemplate <span class=\"hljs-title\">rabbitTemplate</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    RabbitTemplate rabbitTemplate = <span class=\"hljs-keyword\">new</span> RabbitTemplate(cachingConnectionFactory);<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 消息确认回调，确认消息是否到达broker</span><br><span class=\"hljs-comment\">         * data:消息唯一标识</span><br><span class=\"hljs-comment\">         * ack：确认结果</span><br><span class=\"hljs-comment\">         * cause：失败原因</span><br><span class=\"hljs-comment\">         */</span><br>    rabbitTemplate.setConfirmCallback((data, ack, cause) -&gt; &#123;<br>      String msgId = data.getId();<br>      <span class=\"hljs-keyword\">if</span> (ack) &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;&#123;&#125;========&gt;消息发送成功&quot;</span>, msgId);<br>        mailLogService.update(<span class=\"hljs-keyword\">new</span> UpdateWrapper&lt;MailLog&gt;().set(<span class=\"hljs-string\">&quot;status&quot;</span>, <span class=\"hljs-number\">1</span>).eq(<span class=\"hljs-string\">&quot;msgID&quot;</span>, msgId));<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        LOGGER.error(<span class=\"hljs-string\">&quot;&#123;&#125;========&gt;消息发送失败&quot;</span>, msgId);<br>      &#125;<br>    &#125;);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 消息失败回调  比如route不到queue</span><br><span class=\"hljs-comment\">         * smg：消息主题</span><br><span class=\"hljs-comment\">         * repCode：响应码</span><br><span class=\"hljs-comment\">         * repTExt：响应，描述</span><br><span class=\"hljs-comment\">         * exchange：交换机</span><br><span class=\"hljs-comment\">         * routingkey：路由键</span><br><span class=\"hljs-comment\">         */</span><br><br>    <span class=\"hljs-comment\">//        rabbitTemplate.setReturnCallback((msg, repCode, repText, exchange, routingkey)</span><br>    rabbitTemplate.setReturnsCallback((msg) -&gt; &#123;<br>      LOGGER.error(<span class=\"hljs-string\">&quot;&#123;&#125;========&gt;消息发送queue时失败&quot;</span>,msg.getMessage().getBody());<br>    &#125;);<br><br>    <span class=\"hljs-keyword\">return</span> rabbitTemplate;<br>  &#125;<br><br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Queue <span class=\"hljs-title\">queue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Queue(MailConstants.MAIL_QUEUE_NAME);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DirectExchange <span class=\"hljs-title\">directExchange</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DirectExchange(MailConstants.MAIL_EXCHANGE_NAME);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Binding <span class=\"hljs-title\">binding</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> BindingBuilder.bind(queue()).to(directExchange()).with(MailConstants.MAIL_ROUTING_KEY_NAME);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>邮件发送定时任务–失败重传</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.server.task;<br><br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.Employee;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailConstants;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailLog;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.service.IEmployeeService;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.service.IMailLogService;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.time.LocalDateTime;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 邮件发送定时任务</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MailTask</span> </span>&#123;<br><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> IMailLogService mailLogService;<br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> IEmployeeService employeeService;<br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RabbitTemplate rabbitTemplate;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 邮件发送定时任务</span><br><span class=\"hljs-comment\">     * 10s一次</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-meta\">@Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">mailTask</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    List&lt;MailLog&gt; list = mailLogService.list(<span class=\"hljs-keyword\">new</span> QueryWrapper&lt;MailLog&gt;().eq(<span class=\"hljs-string\">&quot;status&quot;</span>, <span class=\"hljs-number\">0</span>).lt(<span class=\"hljs-string\">&quot;tryTime&quot;</span>, LocalDateTime.now()));<br>    list.forEach(mailLog -&gt; &#123;<br>      <span class=\"hljs-comment\">//如果重试次数超过三次，更新状态为投递失败，不再重试</span><br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">3</span> &lt;= mailLog.getCount())&#123;<br>        mailLogService.update(<span class=\"hljs-keyword\">new</span> UpdateWrapper&lt;MailLog&gt;().set(<span class=\"hljs-string\">&quot;status&quot;</span>,<span class=\"hljs-number\">2</span>).eq(<span class=\"hljs-string\">&quot;msgId&quot;</span>,mailLog.getMsgId()));<br>      &#125;<br>      mailLogService.update(<span class=\"hljs-keyword\">new</span> UpdateWrapper&lt;MailLog&gt;().set(<span class=\"hljs-string\">&quot;count&quot;</span>,mailLog.getCount()+<span class=\"hljs-number\">1</span>).set(<span class=\"hljs-string\">&quot;updateTime&quot;</span>,LocalDateTime.now()).set(<span class=\"hljs-string\">&quot;tryTime&quot;</span>,LocalDateTime.now().plusMinutes(MailConstants.MSG_TIMEOUT)).eq(<span class=\"hljs-string\">&quot;msgId&quot;</span>,mailLog.getMsgId()));<br>      Employee employee = employeeService.getEmployee(mailLog.getEid()).get(<span class=\"hljs-number\">0</span>);<br>      <span class=\"hljs-comment\">//重新发送消息</span><br>      rabbitTemplate.convertAndSend(MailConstants.MAIL_EXCHANGE_NAME,MailConstants.MAIL_ROUTING_KEY_NAME,employee,<span class=\"hljs-keyword\">new</span> CorrelationData(mailLog.getMsgId()));<br><br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"RabbitMQ消息可靠性\"><a href=\"#RabbitMQ消息可靠性\" class=\"headerlink\" title=\"RabbitMQ消息可靠性\"></a>RabbitMQ消息可靠性</h2><p>保证消息百分百发送到消息队列中去</p>\n<ul>\n<li>保证mq节点成功接受消息</li>\n<li>消息发送端需要接受到mq服务端接受到消息的确认应答</li>\n<li>完善的消息补偿机制，发送失败的消息可以再感知并⼆次处理</li>\n</ul>\n<img src=\"/article/33708/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E5%8F%AF%E8%83%BD%E7%9A%84%E6%83%85%E5%86%B5.png\" class title=\"消息丢失可能的情况\">\n<ol>\n<li><p>确保生产者发送的消息被rabbitmq接收了；</p>\n<p><a href=\"#RabbitMQ消息的事务机制\">RabbitMQ事务</a></p>\n</li>\n<li><p>确保队列中的消息能够持久化；</p>\n<ol>\n<li><p>创建 queue 的时候将其设置为持久化</p>\n<p>这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</p>\n</li>\n<li><p>第二个是发送消息的时候将消息的 deliveryMode 设置为 2</p>\n<p>就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</p>\n</li>\n</ol>\n<p><strong>必须要同时设置这两个持久化才行</strong></p>\n</li>\n<li><p>确保消费者已经把消息处理完了。</p>\n<p>RabbitMQ提供了<strong>消息确认机制</strong></p>\n<p>消费者在订阅队列时，可以指定autoAck参数，</p>\n<ol>\n<li><p>当autoAck等于false时，RabbitMQ 会等待消费者显式地回复确认信号后才从内存（或者磁盘）中移去消息（实质上是先打上删除标记，之后再删除）。</p>\n</li>\n<li><p>当autoAck等于true时，RabbitMQ会自动把发送出去的消息置为确认，然后从内存（或者磁盘）中删除，而不管消费者是否真正的消费到了这些消息。</p>\n</li>\n<li><p>RabbitMQ不会为未确认的消息设置过期时间，它判断此消息是否需要重新投递给消费者的唯一依据是消费该消息的消费者连接是否已经断开，这么设计的原因是RabbitMQ允许消费者消费一条消息的时间可以很久很久。</p>\n</li>\n</ol>\n</li>\n</ol>\n","more":"<h2 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h2><p><strong>RabbitMQ</strong>是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。</p>\n<p><strong>AMQP</strong>（Advanced Message Queuing Protocol）高级消息队列协议，一个提供统一消息服务的应用层标准协议，是应用层协议的一个开放标准，为面向消息的中间件设计。AMQP是一个进程间传递异步消息的网络协议。</p>\n<img src=\"/article/33708/AMQP%E6%A0%B8%E5%BF%83%E7%BB%84%E6%88%90.png\" class title=\"AMQP核心组成\">\n<blockquote>\n<p><strong>Producer(生产者)</strong>:生产消息</p>\n<p><strong>ConnectionFactory(连接工厂)</strong>:生产Connection的的工厂</p>\n<p><strong>Connection(连接)</strong>:连接，应用程序与Broker的网络连接TCP/IP/三次握手和四次挥手。</p>\n<p>AMQP连接通常是长连接。AMQP是一个使用 TCP提供可靠投递的应用层协议。AMQP 使用认证机制并且提供 TLS（SSL）保护。当一个应用不再需要连接到 AMQP 代理的时候，需要优雅的释放掉 AMQP 连接，而不是直接将 TCP 连接关闭。</p>\n<p><strong>Channel(信道)</strong>:网络信道，是建立在Connection连接之上的一种轻量级的连接。几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道，客户端可以建立多各Channel，每个Channel代表一个会话任务。</p>\n<p>大部分的业务操作是在Channel这个接口中完成的，包括:</p>\n<p>队列的声明queueDeclare<br>交换机的声明exchangeDeclare<br>队列的绑定queueBind<br>发布消息basicPublish<br>消费消息basicConsume等。<br>Broker(中间件)</p>\n<p><strong>VirtualHost(虚拟主机)</strong>:虚拟主机，用于进行逻辑隔离，一个虚拟主机理由可以有若干个Exchange和Queue，同一个虚拟主机里面不能有相同名字的Exchange。</p>\n<p>为了在一个单独的代理上实现多个隔离的环境（用户、用户组、交换机、队列 等），AMQP 提供了一个虚拟主机（virtual hosts - vhosts）的概念。这跟 Web servers虚拟主机概念非常相似，这为 AMQP 实体提供了完全隔离的环境。当连接被建立的时候，AMQP 客户端来指定使用哪个虚拟主机。</p>\n<p><strong>Exchange(交换机)</strong>:交换机，接受消息，根据路由键发送消息到绑定的队列（不具备消息存储的能力）。</p>\n<p>交换机是用来发送消息的 AMQP 实体。交换机拿到一个消息之后将它路由给一个或零个队列。它使用哪种路由算法是由交换机类型和绑定（Bindings）规则所决定的。</p>\n<p><strong>Consumer(消费者)</strong>:消费者消费消息。在AMQP中，消费者获取待消费消息的途径有两种：</p>\n<ul>\n<li>消息中间件将消息投递给消费者（push API）</li>\n<li>消费者主动获取消息 (pull API)</li>\n</ul>\n<p><strong>需要注意：多个消费者监听同一个队列时，队列中的消息只会被其中一个消费者消费（并不会每个消费者都消费一次）</strong></p>\n<p><strong>Message(消息)</strong>:消息，服务与应用程序之间传送的数据，由Properties（属性）和body（主体）组成。属性是对消息进行修饰，比如消息的优先级，延迟等高级特性，主体则就是消息体的内容。</p>\n</blockquote>\n<p>优点：</p>\n<ol>\n<li>应用耦合</li>\n<li>异步处理</li>\n<li>流量削峰</li>\n</ol>\n<h3 id=\"RabbitMQ优势\"><a href=\"#RabbitMQ优势\" class=\"headerlink\" title=\"RabbitMQ优势\"></a><strong>RabbitMQ优势</strong></h3><ol>\n<li>基于AMQP协议</li>\n<li>高并发（是一个容量的概念，服务器可以接受的最大任务数量）</li>\n<li>高性能（是一个速度的概念，单位时间内服务器可以处理的任务数）</li>\n<li>高可用（是一个持久的概念，单位时间内服务器可以正常工作的时间比例）</li>\n<li>强大的社区支持</li>\n<li>支持插件</li>\n<li>支持多语言</li>\n</ol>\n<h3 id=\"RabbitMQ界面\"><a href=\"#RabbitMQ界面\" class=\"headerlink\" title=\"RabbitMQ界面\"></a><strong>RabbitMQ界面</strong></h3><ol>\n<li><p>概要</p>\n<img src=\"/article/33708/%E6%A6%82%E8%A6%81.png\" class title=\"概要\">\n</li>\n<li><p>连接</p>\n<img src=\"/article/33708/%E8%BF%9E%E6%8E%A5.png\" class title=\"连接\">\n</li>\n<li><p>通道</p>\n<img src=\"/article/33708/%E9%80%9A%E9%81%93.png\" class title=\"通道\">\n<ol>\n<li>一个连接可以创建多个通道</li>\n<li>一个应用或者一个线程，都是一个通道</li>\n<li>在通道中创建队列，生产者的通道一般立马关闭，消费者是一只在监听，通道一直存在</li>\n</ol>\n</li>\n<li><p>交换机</p>\n<img src=\"/article/33708/%E4%BA%A4%E6%8D%A2%E6%9C%BA.png\" class title=\"交换机\">\n<p>| Type              | 解释                                                         |<br>| —————– | ———————————————————— |<br>| direct            | 它会把消息路由到那些 binding key 与 routing key 完全匹配的 Queue 中 |<br>| fanout            | 它会把所有发送到该 Exchange 的消息路由到所有与它绑定的 Queue 中 |<br>| headers           | headers 类型的 Exchange 不依赖于 routing key 与 binding key 的匹配规则来路由消息，而是根据发送的消息内容中的 headers 属性进行匹配。（headers 类型的交换器性能差，不实用，基本不会使用。） |<br>| topic             | 与direct模型相比，多了个可以使用通配符                       |<br>| x-delayed-message | 延迟交换机，可以延迟接收消息                                 |</p>\n<p>| <strong>Features</strong> | <strong>解释</strong>                                                     |<br>| ———— | ———————————————————— |<br>| D            | d 是 durable 的缩写，代表这个队列中的消息支持持久化          |<br>| AD           | ad 是 autoDelete 的缩写。代表当前队列的最后一个消费者退订时被自动删除。注意：此时不管队列中是否还存在消息，队列都会删除。 |<br>| excl         | 是 exclusive 的缩写。代表这是一个排他队列。如果一个队列被声明为排他队列，该队列仅对首次声明它的连接可见，并在连接断开时自动删除。这里需要注意三点：其一，排他队列是基于连接可见的，同一连接的不同信道是可以同时访问同一个连接创建的排他队列的。其二，“首次”，如果一个连接已经声明了一个排他队列，其他连接是不允许建立同名的排他队列的，这个与普通队列不同。其三，即使该队列是持久化的，一旦连接关闭或者客户端退出，该排他队列都会被自动删除的。这种队列适用于只限于一个客户端发送读取消息的应用场景。 |<br>| Args         | 是 arguments 的缩写。代表该队列配置了 arguments 参数。       |<br>| TTL          | 是 x-message-ttl 的缩写。设置队列中的所有消息的生存周期(统一为整个队列的所有消息设置生命周期), 也可以在发布消息的时候单独为某个消息指定剩余生存时间，单位毫秒。 |<br>| Exp          | Auto Expire，是 x-expires 配置的缩写。当队列在指定的时间没有被访问(consume, basicGet, queueDeclare…)就会被删除，Features=Exp。注意这里是删除队列，不是队列中的消息。 |<br>| Lim          | 说明该队列配置了 x-max-length。限定队列的消息的最大值长度，超过指定长度将会把最早的几条删除掉。 |<br>| Lim B        | 说明队列配置了 x-max-length-bytes。限定队列最大占用的空间大小， 一般受限于内存、磁盘的大小。 |<br>| DLX          | 说明该队列配置了 x-dead-letter-exchange。当队列消息长度大于最大长度、或者过期的等，将从队列中删除的消息推送到指定的交换机中去而不是丢弃掉。 |<br>| DLK          | x-dead-letter-routing-key 的缩写，将删除的消息推送到指定交换机的指定路由键的队列中去。 |<br>| Pri          | x-max-priority 的缩写，优先级队列。表明该队列支持优先级，先定义最大优先级值(定义最大值一般不要太大)，在发布消息的时候指定该消息的优先级， 优先级更高（数值更大的）的消息先被消费。 |<br>| Ovfl         | x-overflow 的缩写。队列中的消息溢出时，如何处理这些消息。要么丢弃队列头部的消息，要么拒绝接收后面生产者发送过来的所有消息。有两个配置项：drop-head，代表丢弃队列头部的消息，默认行为；reject-publish 设置队列中的消息溢出后,该队列的行为:”拒绝接收”(所有消息)。 |<br>| ha-all       | 镜像队列。all 表示镜像到集群上的所有节点，ha-params 参数忽略。 |</p>\n</li>\n</ol>\n<h3 id=\"七大示例\"><a href=\"#七大示例\" class=\"headerlink\" title=\"七大示例\"></a>七大示例</h3><ol>\n<li><p>Hello World</p>\n</li>\n<li><p>工作队列</p>\n<p>假如一共20条消息，A处理时间1s，B处理时间2s</p>\n<ol>\n<li><p>轮询</p>\n<p>A，B同时拿到各自的10条消息，然后再处理，所以A经过10s处理完，B要经过20s才能处理完</p>\n</li>\n<li><p>公平</p>\n<p>A和B不能直接拿到所有消息，设置<strong>int prefetchCount = 1</strong>表示消费者每次只能接收一条消息，只有处理完这条消息，才能处理下一条</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">channel.basicQos(prefetchCount);<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<pre><code>这样A处理的快，所以A可以不断从信道中得到消息，B处理的比A慢，间隔2s才可以获得一条消息\n\n**没有资源浪费**\n</code></pre><ol start=\"3\">\n<li><p>发布订阅（使用交换机，使用广播模式<strong>fanout</strong>）</p>\n<ol>\n<li>生产者绑定交换机，将消息发送至交换机</li>\n<li>交换机生成<strong>排他队列</strong>，然后将交换机与队列进行绑定</li>\n<li>消费者监听对应队列的消息</li>\n</ol>\n<p>交换机将消息转发至队列，消费者可以收到生产发布的消息。 </p>\n</li>\n<li><p>路由队列（使用交换机，使用路由模式<strong>direct</strong>）</p>\n<ol>\n<li>生产者绑定交换机，并且定义不同的<strong>routingKey</strong>，生产者将携带不同<strong>routingKey</strong>的消息发送至交换机</li>\n<li>交换机生成<strong>排他队列</strong>，同时将队列与交换机进行绑定，此时不同的队列绑定不同的<strong>routingKey</strong></li>\n<li>消费者监听对应队列的消息</li>\n</ol>\n<p>交换机将携带不同的<strong>routingKey</strong>的消息转发至对应<strong>routingKey</strong>的队列，消费者可以收到生产发布的消息</p>\n</li>\n<li><p>主题队列（使用交换机，使用主题模式<strong>topic</strong>）</p>\n<p>* 匹配一个字符串</p>\n<p># 匹配0个或多个</p>\n<p><strong>队列和交换机绑定才可以使用通配符，发送消息时必须使用具体的路由名称</strong></p>\n</li>\n<li><p>PRC模式</p>\n<p>客户端同时是生产者和消费者，服务端者同时是生产者和消费者</p>\n<p>客户端发送请求携带 <strong>reply_to</strong> 表示服务端收到消息后转发的队列名 以及 <strong>correlation_id</strong> 表示该消息的唯一id</p>\n</li>\n</ol>\n<h3 id=\"RabbitMQ消息的事务机制\"><a href=\"#RabbitMQ消息的事务机制\" class=\"headerlink\" title=\"RabbitMQ消息的事务机制\"></a>RabbitMQ消息的事务机制</h3><ol>\n<li>通过AMQP事务机制实现；</li>\n<li>通过将channel设置成confirm模式来实现</li>\n</ol>\n<p><strong>两种事务控制形式不能同时开启</strong></p>\n<h4 id=\"通过AMQP事务机制实现\"><a href=\"#通过AMQP事务机制实现\" class=\"headerlink\" title=\"通过AMQP事务机制实现\"></a>通过AMQP事务机制实现</h4><ol>\n<li>txSelect() 将当前channel设置成transaction模式，即开启事务</li>\n<li>txCommit() 提交事务</li>\n<li>txRollback() 回滚事务</li>\n</ol>\n<p>在通过 txSelect() 开启事务之后，便可以发布消息给 broker 代理服务器了，如果 txCommit() 提交成功了，则消息一定到达了 broker 了,如果在 txCommit() 执行之前 broker 异常崩溃或者由于其他原因抛出异常，这个时候便可以捕获异常通过 txRollback() 回滚事务。</p>\n<p><strong>缺点：降低RabbitMQ的性能</strong></p>\n<h4 id=\"confirm确认模式\"><a href=\"#confirm确认模式\" class=\"headerlink\" title=\"confirm确认模式\"></a>confirm确认模式</h4><p>生产者将信道设置成 <strong>confirm</strong> 模式，一旦信道进入 confirm 模式，所有在该信道上面发布的消息都将会被指派一个<strong>唯一的ID(从1开始)</strong>，<strong>一旦消息被投递到所有匹配的队列之后</strong>，broker 就会发送一个确认给生产者(包含消息的唯一ID)，这就使得生产者知道消息已经正确到达目的队列了；</p>\n<p>如果消息和队列是可持久化的，那么确认消息会在将消息写入磁盘之后发出，broker 回传给生产者的确认消息中 delivery-tag 域包含了确认消息的序列号，此外 broker 也可以设置 basicAck 的 multiple 域，表示到这个序列号之前的所有消息都已经得到了处理。</p>\n<p>confirm模式最大的好处在于它是可以 异步 的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ 因为自身内部错误导致消息丢失，就会发送一条 nack 消息，生产者应用程序同样可以在回调方法中处理该 nack 消息。</p>\n<p>在 channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack）或者 nack 一次，但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm 又被 nack。</p>\n<p><strong>实现方式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 开启确认发布</span><br>channel.confirmSelect();<br></code></pre></td></tr></table></figure>\n<ol>\n<li><p>普通 confirm 模式</p>\n<p>这是一种简单的确认方式，它是一种 <strong>同步</strong> 确认发布的方式，也就是发布一个消息之后，只有收到了确认发布，后续的消息才能继续发布，waitForConfirms() 这个方法在消息被确认的时候返回true，如果在指定时间范围内，这个消息没有被确认那么它将返回false。</p>\n<p>waitForConfirmsOrDie() 这个方法只有在消息被确认的时候才返回，如果在指定时间范围内，这个消息没有被确认那么它将抛出异常。</p>\n<p>这种确认方式有一个最大的缺点就是：发布速度特别的慢，因为如果没有收到确认发布的消息，就会阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布消息的吞吐量。</p>\n</li>\n<li><p>批量 confirm 模式</p>\n<p>先发布一批消息，然后一起确认可以极大地提高吞吐量，当然这种方式的缺点就是：<strong>当发生故障导致发布出现问题时，不知道是哪个消息出现问题了</strong>，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息。当然这种方案仍然是 同步的，也一样阻塞消息的发布。</p>\n</li>\n<li><p>异步 confirm 模式</p>\n<p>channel 利用回调函数 ConfirmListener() 来达到消息可靠性传递的，这个回调函数只包含 deliveryTag(当前Channel发出的消息序号) ，需要自己手动维护一个 unconfirm 的消息序号集合，每发布一条消息，集合中元素+1 ， 每回调一次 <code>handleAck</code> 方法，unconfirm集合删除相应的一条或多条记录</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//信道添加监听回调函数</span><br>channel.addConfirmListener(<span class=\"hljs-keyword\">new</span> ConfirmListener()&#123;<br>  <span class=\"hljs-comment\">//重写 handleAck 回调方法</span><br>  <span class=\"hljs-comment\">//deliveryTag 消息发送序号</span><br>  <span class=\"hljs-comment\">//multiple 是否是多条</span><br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handleAck</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> deliveryTag , <span class=\"hljs-keyword\">boolean</span> multiple)</span> <span class=\"hljs-keyword\">throws</span> IOException</span>&#123;<br>    处理逻辑<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"SpringAMQP\"><a href=\"#SpringAMQP\" class=\"headerlink\" title=\"SpringAMQP\"></a>SpringAMQP</h2><p>Spring AMQP 是对 Spring 基于 AMQP 的消息收发解决方案，它是一个抽象层，不依赖于特定的 AMQP Broker 实现和客户端的抽象，所以可以很方便地替换。</p>\n<h2 id=\"邮件发送\"><a href=\"#邮件发送\" class=\"headerlink\" title=\"邮件发送\"></a>邮件发送</h2><p><strong>邮箱中开启SMTP服务</strong></p>\n<blockquote>\n<p><strong>依赖</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&lt;dependencies&gt;<br>  &lt;dependency&gt;<br> \t\t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.4</span>&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>  \t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.0</span>&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>  \t&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">2.6</span><span class=\"hljs-number\">.4</span>&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>  \t&lt;groupId&gt;com.boyolo&lt;/groupId&gt;<br>  \t&lt;artifactId&gt;yeb-server&lt;/artifactId&gt;<br>  \t&lt;version&gt;<span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>-SNAPSHOT&lt;/version&gt;<br>  &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">server:<br>  #端口<br>  port: <span class=\"hljs-number\">8082</span><br>spring:<br>  #邮件配置<br>  mail:<br>    #邮件服务器地址<br>    host: smtp<span class=\"hljs-number\">.163</span>.com<br>    #协议<br>    protocol: smtp<br>    #编码格式<br>    <span class=\"hljs-keyword\">default</span>-encoding: utf-<span class=\"hljs-number\">8</span><br>    #授权码（在邮箱开通服务时获取）<br>    password: NBFXNQFSTKVDEBTN<br>    #发送者邮箱地址<br>    username: beau_renbo@<span class=\"hljs-number\">163.</span>com<br>    #端口（不同邮箱端口号不同）<br>    port: <span class=\"hljs-number\">25</span><br><br>  #rabbitmq配置<br>  rabbitmq:<br>    #用户名<br>    username: guest<br>    #密码<br>    password: guest<br>    #服务器地址<br>    host: localhost<br>    #端口<br>    port: <span class=\"hljs-number\">5672</span><br>    listener:<br>      simple:<br>        #开启手动确认<br>        acknowledge-mode: manual<br><br>  redis:<br>    #超时时间<br>    timeout: 10000ms<br>    #服务器地址<br>    host: <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>    #服务器端口<br>    port: <span class=\"hljs-number\">6379</span><br>    #数据库<br>    database: <span class=\"hljs-number\">0</span><br>    password: buzhidao<br>    lettuce:<br>      pool:<br>        #最大连接数<br>        max-active: <span class=\"hljs-number\">1024</span><br>        #最大连接阻塞等待时间<br>        max-wait: 10000ms<br>        #最大空闲连接<br>        max-idle: <span class=\"hljs-number\">200</span><br>        #最小空闲连接<br>        min-idle: <span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>设置邮件发送常量</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.server.pojo;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MailConstants</span> </span>&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息投递中</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer DELIVERING = <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息投递成功</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer SUCCESS = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息投递失败</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer FAILURE = <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 最大尝试次数</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer MAX_TRY_COUNT = <span class=\"hljs-number\">3</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 消息超时时间</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Integer MSG_TIMEOUT = <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 对列</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String MAIL_QUEUE_NAME = <span class=\"hljs-string\">&quot;mail.queue&quot;</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 交换机</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String MAIL_EXCHANGE_NAME = <span class=\"hljs-string\">&quot;mail.exchange&quot;</span>;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 路由键</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String MAIL_ROUTING_KEY_NAME = <span class=\"hljs-string\">&quot;mail.routing.key&quot;</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>邮件接收</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.mail;<br><br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.Employee;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailConstants;<br><span class=\"hljs-keyword\">import</span> com.rabbitmq.client.Channel;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.support.AmqpHeaders;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.mail.MailProperties;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.HashOperations;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.mail.javamail.JavaMailSender;<br><span class=\"hljs-keyword\">import</span> org.springframework.mail.javamail.MimeMessageHelper;<br><span class=\"hljs-keyword\">import</span> org.springframework.messaging.Message;<br><span class=\"hljs-keyword\">import</span> org.springframework.messaging.MessageHeaders;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.thymeleaf.TemplateEngine;<br><span class=\"hljs-keyword\">import</span> org.thymeleaf.context.Context;<br><span class=\"hljs-keyword\">import</span> javax.mail.internet.MimeMessage;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MailReceiver</span> </span>&#123;<br>  <span class=\"hljs-comment\">//日志</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(MailReceiver.class);<br>\t<br>  <span class=\"hljs-comment\">//邮件发送</span><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> JavaMailSender javaMailSender;<br>  <span class=\"hljs-comment\">//邮件配置</span><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> MailProperties mailProperties;<br>  <span class=\"hljs-comment\">//模版引擎 负责把对象数据呈现成文本数据</span><br>  <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">  1. 指令简单 - 内置不超过10个常用的指令.</span><br><span class=\"hljs-comment\">\t2. 基于XPath - 直接使用XPath查找对象,并且可以使用XPath强大的语法和函数.</span><br><span class=\"hljs-comment\">\t3. 容易扩展 - 无论是指令还是XPath函数都可以自定义.</span><br><span class=\"hljs-comment\">\t4. 解析超快 - 基于其语法特点,解析模板结构非常快.</span><br><span class=\"hljs-comment\">  */</span><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> TemplateEngine templateEngine;<br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisTemplate redisTemplate;<br><br>  <span class=\"hljs-meta\">@RabbitListener(queues = MailConstants.MAIL_QUEUE_NAME)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">(Message message, Channel channel)</span> </span>&#123;<br>    Employee employee = (Employee) message.getPayload();<br>    MessageHeaders headers = message.getHeaders();<br>    <span class=\"hljs-comment\">//消息序号</span><br>    <span class=\"hljs-keyword\">long</span> tag = (<span class=\"hljs-keyword\">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG);<br>    String msgId = (String) headers.get(<span class=\"hljs-string\">&quot;spring_returned_message_correlation&quot;</span>);<br>    HashOperations hashOperations = redisTemplate.opsForHash();<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (hashOperations.entries(<span class=\"hljs-string\">&quot;mail_log&quot;</span>).containsKey(msgId)) &#123;<br>        LOGGER.error(<span class=\"hljs-string\">&quot;消息已经被消费==========&gt;&#123;&#125;&quot;</span>, msgId);<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">                 * 手动确认消息</span><br><span class=\"hljs-comment\">                 * tag：消息序号</span><br><span class=\"hljs-comment\">                 * multiple:是否确认多条</span><br><span class=\"hljs-comment\">                 */</span><br>        channel.basicAck(tag, <span class=\"hljs-keyword\">false</span>);<br>        <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      <br>      MimeMessage msg = javaMailSender.createMimeMessage();<br>      MimeMessageHelper helper = <span class=\"hljs-keyword\">new</span> MimeMessageHelper(msg);<br>      <span class=\"hljs-comment\">//发件人</span><br>      helper.setFrom(mailProperties.getUsername());<br>      <span class=\"hljs-comment\">//收件人</span><br>      helper.setTo(employee.getEmail());<br>      <span class=\"hljs-comment\">//主题</span><br>      helper.setSubject(<span class=\"hljs-string\">&quot;入职欢迎邮件&quot;</span>);<br>      <span class=\"hljs-comment\">//发送日期</span><br>      helper.setSentDate(<span class=\"hljs-keyword\">new</span> Date());<br>      <br>      <span class=\"hljs-comment\">//邮件内容</span><br>      Context context = <span class=\"hljs-keyword\">new</span> Context();<br>      context.setVariable(<span class=\"hljs-string\">&quot;name&quot;</span>, employee.getName());<br>      context.setVariable(<span class=\"hljs-string\">&quot;posName&quot;</span>, employee.getPosition().getName());<br>      context.setVariable(<span class=\"hljs-string\">&quot;jobLevelName&quot;</span>, employee.getJoblevel().getName());<br>      context.setVariable(<span class=\"hljs-string\">&quot;departmentName&quot;</span>, employee.getDepartment().getName());<br><br>      String mail = templateEngine.process(<span class=\"hljs-string\">&quot;mail&quot;</span>, context);<br>      helper.setText(mail, <span class=\"hljs-keyword\">true</span>);<br><br>      javaMailSender.send(msg);<br>      LOGGER.info(<span class=\"hljs-string\">&quot;邮件发送成功&quot;</span>);<br>      <span class=\"hljs-comment\">//将消息Id存入redis</span><br>      hashOperations.put(<span class=\"hljs-string\">&quot;mail_log&quot;</span>, msgId, <span class=\"hljs-string\">&quot;OK&quot;</span>);<br>      <span class=\"hljs-comment\">//手动确认消息</span><br>      channel.basicAck(tag, <span class=\"hljs-keyword\">false</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">                 * 手动确认消息</span><br><span class=\"hljs-comment\">                 * tag：消息序号</span><br><span class=\"hljs-comment\">                 * multiple:是否确认多条</span><br><span class=\"hljs-comment\">                 * requeue:是否退回队列</span><br><span class=\"hljs-comment\">                 */</span><br>        channel.basicNack(tag, <span class=\"hljs-keyword\">false</span>, <span class=\"hljs-keyword\">true</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (IOException ioException) &#123;<br>        LOGGER.error(<span class=\"hljs-string\">&quot;邮件发送失败========&gt;&#123;&#125;&quot;</span>, e.getMessage());<br>      &#125;<br>      LOGGER.error(<span class=\"hljs-string\">&quot;邮件发送失败========&gt;&#123;&#125;&quot;</span>, e.getMessage());<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>EmployeeServiceImpl.java</strong> 添加员工发送消息时消息可靠性–消息落库</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> == employeeMapper.insert(employee)) &#123;<br><br>  Employee emp = employeeMapper.getEmployee(employee.getId()).get(<span class=\"hljs-number\">0</span>);<br><br>  <span class=\"hljs-comment\">//数据库记录发送的消息</span><br>  String msgId = UUID.randomUUID().toString();<br>  <span class=\"hljs-comment\">//            String msgId = &quot;123456&quot;;</span><br>  MailLog mailLog = <span class=\"hljs-keyword\">new</span> MailLog();<br>  mailLog.setMsgId(msgId);<br>  mailLog.setEid(employee.getId());<br>  mailLog.setStatus(<span class=\"hljs-number\">0</span>);<br>  mailLog.setRouteKey(MailConstants.MAIL_ROUTING_KEY_NAME);<br>  mailLog.setExchange(MailConstants.MAIL_EXCHANGE_NAME);<br>  mailLog.setCount(<span class=\"hljs-number\">0</span>);<br>  mailLog.setTryTime(LocalDateTime.now().plusMinutes(MailConstants.MSG_TIMEOUT));<br>  mailLog.setCreateTime(LocalDateTime.now());<br>  mailLog.setUpdateTime(LocalDateTime.now());<br>  mailLogMapper.insert(mailLog);<br><br>  <span class=\"hljs-comment\">//发送信息</span><br>  rabbitTemplate.convertAndSend(MailConstants.MAIL_EXCHANGE_NAME, MailConstants.MAIL_ROUTING_KEY_NAME, emp, <span class=\"hljs-keyword\">new</span> CorrelationData(msgId));<br><br>  <span class=\"hljs-keyword\">return</span> RespBean.success(<span class=\"hljs-string\">&quot;添加成功！&quot;</span>);<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>RabbitMQ配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.server.config;<br><br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailConstants;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailLog;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.service.IMailLogService;<br><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.Binding;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.BindingBuilder;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.DirectExchange;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.core.Queue;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.connection.CachingConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * RabbitMq 配置类</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RabbitMqConfig</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(RabbitMqConfig.class);<br><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> CachingConnectionFactory cachingConnectionFactory;<br><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> IMailLogService mailLogService;<br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> RabbitTemplate <span class=\"hljs-title\">rabbitTemplate</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    RabbitTemplate rabbitTemplate = <span class=\"hljs-keyword\">new</span> RabbitTemplate(cachingConnectionFactory);<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 消息确认回调，确认消息是否到达broker</span><br><span class=\"hljs-comment\">         * data:消息唯一标识</span><br><span class=\"hljs-comment\">         * ack：确认结果</span><br><span class=\"hljs-comment\">         * cause：失败原因</span><br><span class=\"hljs-comment\">         */</span><br>    rabbitTemplate.setConfirmCallback((data, ack, cause) -&gt; &#123;<br>      String msgId = data.getId();<br>      <span class=\"hljs-keyword\">if</span> (ack) &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;&#123;&#125;========&gt;消息发送成功&quot;</span>, msgId);<br>        mailLogService.update(<span class=\"hljs-keyword\">new</span> UpdateWrapper&lt;MailLog&gt;().set(<span class=\"hljs-string\">&quot;status&quot;</span>, <span class=\"hljs-number\">1</span>).eq(<span class=\"hljs-string\">&quot;msgID&quot;</span>, msgId));<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        LOGGER.error(<span class=\"hljs-string\">&quot;&#123;&#125;========&gt;消息发送失败&quot;</span>, msgId);<br>      &#125;<br>    &#125;);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 消息失败回调  比如route不到queue</span><br><span class=\"hljs-comment\">         * smg：消息主题</span><br><span class=\"hljs-comment\">         * repCode：响应码</span><br><span class=\"hljs-comment\">         * repTExt：响应，描述</span><br><span class=\"hljs-comment\">         * exchange：交换机</span><br><span class=\"hljs-comment\">         * routingkey：路由键</span><br><span class=\"hljs-comment\">         */</span><br><br>    <span class=\"hljs-comment\">//        rabbitTemplate.setReturnCallback((msg, repCode, repText, exchange, routingkey)</span><br>    rabbitTemplate.setReturnsCallback((msg) -&gt; &#123;<br>      LOGGER.error(<span class=\"hljs-string\">&quot;&#123;&#125;========&gt;消息发送queue时失败&quot;</span>,msg.getMessage().getBody());<br>    &#125;);<br><br>    <span class=\"hljs-keyword\">return</span> rabbitTemplate;<br>  &#125;<br><br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Queue <span class=\"hljs-title\">queue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Queue(MailConstants.MAIL_QUEUE_NAME);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> DirectExchange <span class=\"hljs-title\">directExchange</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DirectExchange(MailConstants.MAIL_EXCHANGE_NAME);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@Bean</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Binding <span class=\"hljs-title\">binding</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> BindingBuilder.bind(queue()).to(directExchange()).with(MailConstants.MAIL_ROUTING_KEY_NAME);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p><strong>邮件发送定时任务–失败重传</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.boyolo.server.task;<br><br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;<br><span class=\"hljs-keyword\">import</span> com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.Employee;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailConstants;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.pojo.MailLog;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.service.IEmployeeService;<br><span class=\"hljs-keyword\">import</span> com.boyolo.server.service.IMailLogService;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;<br><span class=\"hljs-keyword\">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.scheduling.annotation.Scheduled;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.time.LocalDateTime;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 邮件发送定时任务</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> renbo</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MailTask</span> </span>&#123;<br><br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> IMailLogService mailLogService;<br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> IEmployeeService employeeService;<br>  <span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RabbitTemplate rabbitTemplate;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 邮件发送定时任务</span><br><span class=\"hljs-comment\">     * 10s一次</span><br><span class=\"hljs-comment\">     */</span><br>  <span class=\"hljs-meta\">@Scheduled(cron = &quot;0/10 * * * * ?&quot;)</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">mailTask</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    List&lt;MailLog&gt; list = mailLogService.list(<span class=\"hljs-keyword\">new</span> QueryWrapper&lt;MailLog&gt;().eq(<span class=\"hljs-string\">&quot;status&quot;</span>, <span class=\"hljs-number\">0</span>).lt(<span class=\"hljs-string\">&quot;tryTime&quot;</span>, LocalDateTime.now()));<br>    list.forEach(mailLog -&gt; &#123;<br>      <span class=\"hljs-comment\">//如果重试次数超过三次，更新状态为投递失败，不再重试</span><br>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">3</span> &lt;= mailLog.getCount())&#123;<br>        mailLogService.update(<span class=\"hljs-keyword\">new</span> UpdateWrapper&lt;MailLog&gt;().set(<span class=\"hljs-string\">&quot;status&quot;</span>,<span class=\"hljs-number\">2</span>).eq(<span class=\"hljs-string\">&quot;msgId&quot;</span>,mailLog.getMsgId()));<br>      &#125;<br>      mailLogService.update(<span class=\"hljs-keyword\">new</span> UpdateWrapper&lt;MailLog&gt;().set(<span class=\"hljs-string\">&quot;count&quot;</span>,mailLog.getCount()+<span class=\"hljs-number\">1</span>).set(<span class=\"hljs-string\">&quot;updateTime&quot;</span>,LocalDateTime.now()).set(<span class=\"hljs-string\">&quot;tryTime&quot;</span>,LocalDateTime.now().plusMinutes(MailConstants.MSG_TIMEOUT)).eq(<span class=\"hljs-string\">&quot;msgId&quot;</span>,mailLog.getMsgId()));<br>      Employee employee = employeeService.getEmployee(mailLog.getEid()).get(<span class=\"hljs-number\">0</span>);<br>      <span class=\"hljs-comment\">//重新发送消息</span><br>      rabbitTemplate.convertAndSend(MailConstants.MAIL_EXCHANGE_NAME,MailConstants.MAIL_ROUTING_KEY_NAME,employee,<span class=\"hljs-keyword\">new</span> CorrelationData(mailLog.getMsgId()));<br><br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"RabbitMQ消息可靠性\"><a href=\"#RabbitMQ消息可靠性\" class=\"headerlink\" title=\"RabbitMQ消息可靠性\"></a>RabbitMQ消息可靠性</h2><p>保证消息百分百发送到消息队列中去</p>\n<ul>\n<li>保证mq节点成功接受消息</li>\n<li>消息发送端需要接受到mq服务端接受到消息的确认应答</li>\n<li>完善的消息补偿机制，发送失败的消息可以再感知并⼆次处理</li>\n</ul>\n<img src=\"/article/33708/%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1%E5%8F%AF%E8%83%BD%E7%9A%84%E6%83%85%E5%86%B5.png\" class title=\"消息丢失可能的情况\">\n<ol>\n<li><p>确保生产者发送的消息被rabbitmq接收了；</p>\n<p><a href=\"#RabbitMQ消息的事务机制\">RabbitMQ事务</a></p>\n</li>\n<li><p>确保队列中的消息能够持久化；</p>\n<ol>\n<li><p>创建 queue 的时候将其设置为持久化</p>\n<p>这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</p>\n</li>\n<li><p>第二个是发送消息的时候将消息的 deliveryMode 设置为 2</p>\n<p>就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</p>\n</li>\n</ol>\n<p><strong>必须要同时设置这两个持久化才行</strong></p>\n</li>\n<li><p>确保消费者已经把消息处理完了。</p>\n<p>RabbitMQ提供了<strong>消息确认机制</strong></p>\n<p>消费者在订阅队列时，可以指定autoAck参数，</p>\n<ol>\n<li><p>当autoAck等于false时，RabbitMQ 会等待消费者显式地回复确认信号后才从内存（或者磁盘）中移去消息（实质上是先打上删除标记，之后再删除）。</p>\n</li>\n<li><p>当autoAck等于true时，RabbitMQ会自动把发送出去的消息置为确认，然后从内存（或者磁盘）中删除，而不管消费者是否真正的消费到了这些消息。</p>\n</li>\n<li><p>RabbitMQ不会为未确认的消息设置过期时间，它判断此消息是否需要重新投递给消费者的唯一依据是消费该消息的消费者连接是否已经断开，这么设计的原因是RabbitMQ允许消费者消费一条消息的时间可以很久很久。</p>\n</li>\n</ol>\n</li>\n</ol>\n","categories":[{"name":"RabbitMQ","path":"api/categories/RabbitMQ.json"}],"tags":[{"name":"RabbitMQ","path":"api/tags/RabbitMQ.json"}]}