{"title":"Java异常处理","slug":"Java异常处理","date":"2021-12-14T02:27:58.000Z","updated":"2021-12-16T03:07:22.234Z","comments":true,"path":"api/articles/Java异常处理.json","realPath":null,"excerpt":null,"covers":["/article/28277/exception-hierarchy.png"],"cover":"/images/theme/coverphoto/Java异常处理.jpeg","content":"<blockquote>\n<p>My wishes are fools, they shout across thy song, my Master. </p>\n<p>神呀，我的那些愿望真是愚傻呀，它们杂在你的歌声中喧叫着呢。 </p>\n<p>Let me but listen. </p>\n<p>让我只是静听着吧。</p>\n</blockquote>\n<h2 id=\"Java异常处理\"><a href=\"#Java异常处理\" class=\"headerlink\" title=\"Java异常处理\"></a>Java异常处理</h2><p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据；</li>\n<li>要打开的文件不存在；</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的；</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略；</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。</li>\n</ul>\n<img src=\"/article/28277/exception-hierarchy.png\" class title=\"exception-hierarchy\">\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><p>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作<strong>无关</strong></p>\n<p>Java虚拟机运行错误（Virtual MachineError），当JVM不再继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机一般会选择线程终止。</p>\n<p>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><p>所有的异常类是从 java.lang.Exception 类继承的子类。</p>\n<p>这些已成一般是由于程序逻辑错误引起的，程序应该从逻辑的角度尽可能避免这些类异常的发生。</p>\n<h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><p>Mac快捷键：<code>Command + option + T</code></p>\n<p><strong>try-catch</strong></p>\n<ul>\n<li>使用 try 和 catch 关键字可以捕获异常；</li>\n<li>try-catch 代码块放在异常可能发生的地方。</li>\n</ul>\n<p>try-catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span>&#123;<br>   <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">1</span> 异常的变量名<span class=\"hljs-number\">1</span>)&#123;<br>  <span class=\"hljs-comment\">//Catch 块</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">2</span> 异常的变量名<span class=\"hljs-number\">2</span>)&#123;<br>  <span class=\"hljs-comment\">//Catch 块</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">3</span> 异常的变量名<span class=\"hljs-number\">3</span>)&#123;<br>  <span class=\"hljs-comment\">//Catch 块</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<p>捕获<strong>多个异常</strong>时，顺序要由小到大！</p>\n<p><strong>finally</strong></p>\n<ul>\n<li>finally 关键字用来创建在 try 代码块后面执行的代码块；</li>\n<li><strong>无论是否发生异常，finally 代码块中的代码总会被执行；</strong><ul>\n<li>有一种特殊情况finally不执行：当程序没进入try就报错的情况下不执行；</li>\n</ul>\n</li>\n<li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</li>\n<li>finally 代码块出现在 catch 代码块最后，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span>&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">1</span> 异常的变量名<span class=\"hljs-number\">1</span>)&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">2</span> 异常的变量名<span class=\"hljs-number\">2</span>)&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<ul>\n<li>catch 不能独立于 try 存在；</li>\n<li>在 try-catch 后面添加 finally 块并非强制性要求的；</li>\n<li>try 代码后不能既没 catch 块也没 finally 块；</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<p><strong>throws/throw </strong></p>\n<p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.io.*;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">className</span></span><br><span class=\"hljs-class\"></span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deposit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span> amount)</span> <span class=\"hljs-keyword\">throws</span> RemoteException</span><br><span class=\"hljs-function\">  </span>&#123;<br>    <span class=\"hljs-comment\">// Method implementation</span><br>    <span class=\"hljs-comment\">//主动抛出异常，一般在方法中使用</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RemoteException();<br>  &#125;<br>  <span class=\"hljs-comment\">//Remainder of class definition</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"声明自定义异常\"><a href=\"#声明自定义异常\" class=\"headerlink\" title=\"声明自定义异常\"></a>声明自定义异常</h2><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点：</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类；</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。只继承Exception 类来创建的异常类是检查性异常类;</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Exception</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"通用异常\"><a href=\"#通用异常\" class=\"headerlink\" title=\"通用异常\"></a>通用异常</h2><p>在Java中定义了两种类型的异常和错误。</p>\n<ul>\n<li><strong>JVM(Java虚拟机)</strong> <strong>异常：</strong>由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li><strong>程序级异常：</strong>由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n<h2 id=\"Java异常合集\"><a href=\"#Java异常合集\" class=\"headerlink\" title=\"Java异常合集\"></a>Java异常合集</h2>","more":"<blockquote>\n<p>My wishes are fools, they shout across thy song, my Master. </p>\n<p>神呀，我的那些愿望真是愚傻呀，它们杂在你的歌声中喧叫着呢。 </p>\n<p>Let me but listen. </p>\n<p>让我只是静听着吧。</p>\n</blockquote>\n<h2 id=\"Java异常处理\"><a href=\"#Java异常处理\" class=\"headerlink\" title=\"Java异常处理\"></a>Java异常处理</h2><p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据；</li>\n<li>要打开的文件不存在；</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的；</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略；</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。</li>\n</ul>\n<img src=\"/article/28277/exception-hierarchy.png\" class title=\"exception-hierarchy\">\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><p>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作<strong>无关</strong></p>\n<p>Java虚拟机运行错误（Virtual MachineError），当JVM不再继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机一般会选择线程终止。</p>\n<p>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><p>所有的异常类是从 java.lang.Exception 类继承的子类。</p>\n<p>这些已成一般是由于程序逻辑错误引起的，程序应该从逻辑的角度尽可能避免这些类异常的发生。</p>\n<h2 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h2><p>Mac快捷键：<code>Command + option + T</code></p>\n<p><strong>try-catch</strong></p>\n<ul>\n<li>使用 try 和 catch 关键字可以捕获异常；</li>\n<li>try-catch 代码块放在异常可能发生的地方。</li>\n</ul>\n<p>try-catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span>&#123;<br>   <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">1</span> 异常的变量名<span class=\"hljs-number\">1</span>)&#123;<br>  <span class=\"hljs-comment\">//Catch 块</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">2</span> 异常的变量名<span class=\"hljs-number\">2</span>)&#123;<br>  <span class=\"hljs-comment\">//Catch 块</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">3</span> 异常的变量名<span class=\"hljs-number\">3</span>)&#123;<br>  <span class=\"hljs-comment\">//Catch 块</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<p>捕获<strong>多个异常</strong>时，顺序要由小到大！</p>\n<p><strong>finally</strong></p>\n<ul>\n<li>finally 关键字用来创建在 try 代码块后面执行的代码块；</li>\n<li><strong>无论是否发生异常，finally 代码块中的代码总会被执行；</strong><ul>\n<li>有一种特殊情况finally不执行：当程序没进入try就报错的情况下不执行；</li>\n</ul>\n</li>\n<li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</li>\n<li>finally 代码块出现在 catch 代码块最后，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">try</span>&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">1</span> 异常的变量名<span class=\"hljs-number\">1</span>)&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">catch</span>(异常类型<span class=\"hljs-number\">2</span> 异常的变量名<span class=\"hljs-number\">2</span>)&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>  <span class=\"hljs-comment\">// 程序代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<ul>\n<li>catch 不能独立于 try 存在；</li>\n<li>在 try-catch 后面添加 finally 块并非强制性要求的；</li>\n<li>try 代码后不能既没 catch 块也没 finally 块；</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<p><strong>throws/throw </strong></p>\n<p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.io.*;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">className</span></span><br><span class=\"hljs-class\"></span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deposit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">double</span> amount)</span> <span class=\"hljs-keyword\">throws</span> RemoteException</span><br><span class=\"hljs-function\">  </span>&#123;<br>    <span class=\"hljs-comment\">// Method implementation</span><br>    <span class=\"hljs-comment\">//主动抛出异常，一般在方法中使用</span><br>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> RemoteException();<br>  &#125;<br>  <span class=\"hljs-comment\">//Remainder of class definition</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"声明自定义异常\"><a href=\"#声明自定义异常\" class=\"headerlink\" title=\"声明自定义异常\"></a>声明自定义异常</h2><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点：</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类；</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。只继承Exception 类来创建的异常类是检查性异常类;</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Exception</span></span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"通用异常\"><a href=\"#通用异常\" class=\"headerlink\" title=\"通用异常\"></a>通用异常</h2><p>在Java中定义了两种类型的异常和错误。</p>\n<ul>\n<li><strong>JVM(Java虚拟机)</strong> <strong>异常：</strong>由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li><strong>程序级异常：</strong>由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n<h2 id=\"Java异常合集\"><a href=\"#Java异常合集\" class=\"headerlink\" title=\"Java异常合集\"></a>Java异常合集</h2>","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"异常处理","path":"api/categories/异常处理.json"}],"tags":[{"name":"Java, 异常处理","path":"api/tags/Java, 异常处理.json"}]}