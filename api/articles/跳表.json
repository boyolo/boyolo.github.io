{"title":"跳表","slug":"跳表","date":"2022-05-14T02:57:57.000Z","updated":"2022-05-14T05:22:12.137Z","comments":true,"path":"api/articles/跳表.json","realPath":null,"excerpt":null,"covers":["/article/undefined/%E9%93%BE%E8%A1%A8+%E7%B4%A2%E5%BC%95.jpg","/article/undefined/%E9%93%BE%E8%A1%A8+%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95.jpg","/article/undefined/%E6%AF%8F%E5%B1%82%E6%9C%80%E5%A4%9A3%E8%8A%82%E7%82%B9%E9%81%8D%E5%8E%86.jpg","/article/undefined/%E8%B7%B3%E8%A1%A8%E6%AF%8F%E5%B1%82%E8%8A%82%E7%82%B9%E6%95%B0.jpg","/article/undefined/%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.jpg","/article/undefined/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0%E6%9B%B4%E6%96%B0%E7%B4%A2%E5%BC%95.jpg"],"cover":"/images/theme/coverphoto/跳表.jpg","content":"<h2 id=\"跳表\"><a href=\"#跳表\" class=\"headerlink\" title=\"跳表\"></a>跳表</h2><blockquote>\n<p>假设每两个节点建立一个索引</p>\n</blockquote>\n<p>对链表稍加改造，就可以支持类似“二分”的查找算法。我们把改造之后的数据结构叫做<strong>跳表（Skip list）</strong></p>\n<p><strong>Redis 中的有序集合（Sorted Set）就是用跳表来实现的。</strong></p>\n<h3 id=\"如何理解“跳表”？\"><a href=\"#如何理解“跳表”？\" class=\"headerlink\" title=\"如何理解“跳表”？\"></a>如何理解“跳表”？</h3><p>对于一个单链表来讲，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历链表。这样查找效率就会很低，时间复杂度会很高，是 O(n)。</p>\n<p><strong>初级优化</strong></p>\n<p>像图中那样，对链表建立一级“索引”，每两个结点提取一个结点到上一级，我们把抽出来的那一级叫做<strong>索引或索引层</strong>。down 表示 down 指针，指向下一级结点。</p>\n<img src=\"/article/undefined/%E9%93%BE%E8%A1%A8+%E7%B4%A2%E5%BC%95.jpg\" class title=\"链表+索引\">\n<p>加来一层索引之后，查找一个结点需要遍历的结点个数减少了，也就是说查找效率提高了</p>\n<p><strong>再次优化</strong></p>\n<p>跟前面建立第一级索引的方式相似，我们在第一级索引的基础之上，每两个结点就抽出一个结点到第二级索引。</p>\n<img src=\"/article/undefined/%E9%93%BE%E8%A1%A8+%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95.jpg\" class title=\"链表+二级索引\">\n<p><strong>这种链表加多级索引的结构，就是跳表</strong></p>\n<h3 id=\"用跳表查询到底有多快？\"><a href=\"#用跳表查询到底有多快？\" class=\"headerlink\" title=\"用跳表查询到底有多快？\"></a>用跳表查询到底有多快？</h3><p>如果链表里有 n 个结点，会有多少级索引呢？</p>\n<p>每两个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是 n/2，第二级索引的结点个数大约就是 n/4，第三级索引的结点个数大约就是 n/8，依次类推，也就是说，<strong>第 k 级索引的结点个数是第 k-1 级索引的结点个数的 1/2，那第 k级索引结点的个数就是 n/(2<sup>k</sup>)。</strong></p>\n<p>假设索引有 h 级，最高级的索引有 2 个结点。通过上面的公式，可以得到 n/(2<sup>h</sup>)=2，从而求得 h=log<sub>2</sub>n-1。如果包含原始链表这一层，整个跳表的高度就是 log<sub>2</sub>n。我们在跳表中查询某个数据的时候，如果每一层都要遍历 m 个结点，那在跳表中查询一个数据的时间复杂度就是 O(m*logn)。</p>\n<p>m 的值是多少呢？</p>\n<p>按照前面这种索引结构，我们每一级索引都最多只需要遍历 3 个结点，也就是说 m=3。</p>\n<blockquote>\n<p>假设我们要查找的数据是 x，在第 k 级索引中，我们遍历到 y 结点之后，发现 x 大于 y，小于后面的结点 z，所以我们通过 y 的 down 指针，从第 k 级索引下降到第 k-1 级索引。在第 k-1 级索引中，y 和 z 之间只有 3 个结点（包含 y 和 z），所以，我们在 K-1 级索引中最多只需要遍历 3 个结点，依次类推，每一级索引都最多只需要遍历 3 个结点。</p>\n<img src=\"/article/undefined/%E6%AF%8F%E5%B1%82%E6%9C%80%E5%A4%9A3%E8%8A%82%E7%82%B9%E9%81%8D%E5%8E%86.jpg\" class title=\"每层最多3节点遍历\">\n</blockquote>\n<p><strong>在跳表中查询任意数据的时间复杂度就是 O(logn)</strong></p>\n<h3 id=\"跳表是不是很浪费内存？\"><a href=\"#跳表是不是很浪费内存？\" class=\"headerlink\" title=\"跳表是不是很浪费内存？\"></a>跳表是不是很浪费内存？</h3><p>假设原始链表大小为 n，那第一级索引大约有 n/2 个结点，第二级索引大约有 n/4 个结点，以此类推，每上升一级就减少一半，直到剩下 2 个结点。如果我们把每层索引的结点数写出来，就是一个等比数列。</p>\n<img src=\"/article/undefined/%E8%B7%B3%E8%A1%A8%E6%AF%8F%E5%B1%82%E8%8A%82%E7%82%B9%E6%95%B0.jpg\" class title=\"跳表每层节点数\">\n<p>这几级索引的结点总和就是 n/2+n/4+n/8…+8+4+2=n-2</p>\n<p>所以，<strong>跳表的空间复杂度是 O(n)</strong></p>\n<h3 id=\"高效的动态插入和删除\"><a href=\"#高效的动态插入和删除\" class=\"headerlink\" title=\"高效的动态插入和删除\"></a>高效的动态插入和删除</h3><p><strong>插入、删除操作的时间复杂度是 O(logn)</strong></p>\n<img src=\"/article/undefined/%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.jpg\" class title=\"插入操作\">\n<h3 id=\"跳表索引动态更新\"><a href=\"#跳表索引动态更新\" class=\"headerlink\" title=\"跳表索引动态更新\"></a>跳表索引动态更新</h3><p>当我们不停地往跳表中插入数据时，如果不更新索引，就有可能出现某 2 个索引结点之间数据非常多的情况。极端情况下，跳表还会退化成单链表。</p>\n<p><strong>跳表是通过随机函数来维护前面提到的“平衡性”</strong></p>\n<blockquote>\n<p>当往跳表中插入数据的时候，可以选择同时将这个数据插入到部分索引层中。如何选择加入哪些索引层呢？</p>\n</blockquote>\n<p>通过一个随机函数，来决定将这个结点插入到哪几级索引中，比如随机函数生成了值 K，那我们就将这个结点添加到第一级到第 K 级这 K 级索引中。</p>\n<img src=\"/article/undefined/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0%E6%9B%B4%E6%96%B0%E7%B4%A2%E5%BC%95.jpg\" class title=\"随机函数更新索引\">\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> skiplist;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 跳表的一种实现方法。</span><br><span class=\"hljs-comment\"> * 跳表中存储的是正整数，并且存储的是不重复的。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SkipList</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">float</span> SKIPLIST_P = <span class=\"hljs-number\">0.5f</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> MAX_LEVEL = <span class=\"hljs-number\">16</span>;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> levelCount = <span class=\"hljs-number\">1</span>;<br><br>  <span class=\"hljs-keyword\">private</span> Node head = <span class=\"hljs-keyword\">new</span> Node();  <span class=\"hljs-comment\">// 带头链表</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    Node p = head;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = levelCount - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>      <span class=\"hljs-keyword\">while</span> (p.forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;<br>        p = p.forwards[i];<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (p.forwards[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[<span class=\"hljs-number\">0</span>].data == value) &#123;<br>      <span class=\"hljs-keyword\">return</span> p.forwards[<span class=\"hljs-number\">0</span>];<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> level = randomLevel();<br>    Node newNode = <span class=\"hljs-keyword\">new</span> Node();<br>    newNode.data = value;<br>    newNode.maxLevel = level;<br>    Node update[] = <span class=\"hljs-keyword\">new</span> Node[level];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; level; ++i) &#123;<br>      update[i] = head;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// record every level largest value which smaller than insert value in update[]</span><br>    Node p = head;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = level - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>      <span class=\"hljs-keyword\">while</span> (p.forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;<br>        p = p.forwards[i];<br>      &#125;<br>      update[i] = p;<span class=\"hljs-comment\">// use update save node in search path</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">// in search path node next node become new node forwords(next)</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; level; ++i) &#123;<br>      newNode.forwards[i] = update[i].forwards[i];<br>      update[i].forwards[i] = newNode;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// update node hight</span><br>    <span class=\"hljs-keyword\">if</span> (levelCount &lt; level) levelCount = level;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    Node[] update = <span class=\"hljs-keyword\">new</span> Node[levelCount];<br>    Node p = head;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = levelCount - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>      <span class=\"hljs-keyword\">while</span> (p.forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;<br>        p = p.forwards[i];<br>      &#125;<br>      update[i] = p;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (p.forwards[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[<span class=\"hljs-number\">0</span>].data == value) &#123;<br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = levelCount - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>        <span class=\"hljs-keyword\">if</span> (update[i].forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; update[i].forwards[i].data == value) &#123;<br>          update[i].forwards[i] = update[i].forwards[i].forwards[i];<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">while</span> (levelCount&gt;<span class=\"hljs-number\">1</span>&amp;&amp;head.forwards[levelCount]==<span class=\"hljs-keyword\">null</span>)&#123;<br>      levelCount--;<br>    &#125;<br><br>  &#125;<br><br>  <span class=\"hljs-comment\">// 理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。</span><br>  <span class=\"hljs-comment\">// 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。</span><br>  <span class=\"hljs-comment\">// 该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：</span><br>  <span class=\"hljs-comment\">//        50%的概率返回 1</span><br>  <span class=\"hljs-comment\">//        25%的概率返回 2</span><br>  <span class=\"hljs-comment\">//      12.5%的概率返回 3 ...</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">randomLevel</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> level = <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-keyword\">while</span> (Math.random() &lt; SKIPLIST_P &amp;&amp; level &lt; MAX_LEVEL)<br>      level += <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">return</span> level;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printAll</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    Node p = head;<br>    <span class=\"hljs-keyword\">while</span> (p.forwards[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-keyword\">null</span>) &#123;<br>      System.out.print(p.forwards[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">&quot; &quot;</span>);<br>      p = p.forwards[<span class=\"hljs-number\">0</span>];<br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> data = -<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">private</span> Node forwards[] = <span class=\"hljs-keyword\">new</span> Node[MAX_LEVEL];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxLevel = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>      StringBuilder builder = <span class=\"hljs-keyword\">new</span> StringBuilder();<br>      builder.append(<span class=\"hljs-string\">&quot;&#123; data: &quot;</span>);<br>      builder.append(data);<br>      builder.append(<span class=\"hljs-string\">&quot;; levels: &quot;</span>);<br>      builder.append(maxLevel);<br>      builder.append(<span class=\"hljs-string\">&quot; &#125;&quot;</span>);<br><br>      <span class=\"hljs-keyword\">return</span> builder.toString();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","more":"<h2 id=\"跳表\"><a href=\"#跳表\" class=\"headerlink\" title=\"跳表\"></a>跳表</h2><blockquote>\n<p>假设每两个节点建立一个索引</p>\n</blockquote>\n<p>对链表稍加改造，就可以支持类似“二分”的查找算法。我们把改造之后的数据结构叫做<strong>跳表（Skip list）</strong></p>\n<p><strong>Redis 中的有序集合（Sorted Set）就是用跳表来实现的。</strong></p>\n<h3 id=\"如何理解“跳表”？\"><a href=\"#如何理解“跳表”？\" class=\"headerlink\" title=\"如何理解“跳表”？\"></a>如何理解“跳表”？</h3><p>对于一个单链表来讲，即便链表中存储的数据是有序的，如果我们要想在其中查找某个数据，也只能从头到尾遍历链表。这样查找效率就会很低，时间复杂度会很高，是 O(n)。</p>\n<p><strong>初级优化</strong></p>\n<p>像图中那样，对链表建立一级“索引”，每两个结点提取一个结点到上一级，我们把抽出来的那一级叫做<strong>索引或索引层</strong>。down 表示 down 指针，指向下一级结点。</p>\n<img src=\"/article/undefined/%E9%93%BE%E8%A1%A8+%E7%B4%A2%E5%BC%95.jpg\" class title=\"链表+索引\">\n<p>加来一层索引之后，查找一个结点需要遍历的结点个数减少了，也就是说查找效率提高了</p>\n<p><strong>再次优化</strong></p>\n<p>跟前面建立第一级索引的方式相似，我们在第一级索引的基础之上，每两个结点就抽出一个结点到第二级索引。</p>\n<img src=\"/article/undefined/%E9%93%BE%E8%A1%A8+%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95.jpg\" class title=\"链表+二级索引\">\n<p><strong>这种链表加多级索引的结构，就是跳表</strong></p>\n<h3 id=\"用跳表查询到底有多快？\"><a href=\"#用跳表查询到底有多快？\" class=\"headerlink\" title=\"用跳表查询到底有多快？\"></a>用跳表查询到底有多快？</h3><p>如果链表里有 n 个结点，会有多少级索引呢？</p>\n<p>每两个结点会抽出一个结点作为上一级索引的结点，那第一级索引的结点个数大约就是 n/2，第二级索引的结点个数大约就是 n/4，第三级索引的结点个数大约就是 n/8，依次类推，也就是说，<strong>第 k 级索引的结点个数是第 k-1 级索引的结点个数的 1/2，那第 k级索引结点的个数就是 n/(2<sup>k</sup>)。</strong></p>\n<p>假设索引有 h 级，最高级的索引有 2 个结点。通过上面的公式，可以得到 n/(2<sup>h</sup>)=2，从而求得 h=log<sub>2</sub>n-1。如果包含原始链表这一层，整个跳表的高度就是 log<sub>2</sub>n。我们在跳表中查询某个数据的时候，如果每一层都要遍历 m 个结点，那在跳表中查询一个数据的时间复杂度就是 O(m*logn)。</p>\n<p>m 的值是多少呢？</p>\n<p>按照前面这种索引结构，我们每一级索引都最多只需要遍历 3 个结点，也就是说 m=3。</p>\n<blockquote>\n<p>假设我们要查找的数据是 x，在第 k 级索引中，我们遍历到 y 结点之后，发现 x 大于 y，小于后面的结点 z，所以我们通过 y 的 down 指针，从第 k 级索引下降到第 k-1 级索引。在第 k-1 级索引中，y 和 z 之间只有 3 个结点（包含 y 和 z），所以，我们在 K-1 级索引中最多只需要遍历 3 个结点，依次类推，每一级索引都最多只需要遍历 3 个结点。</p>\n<img src=\"/article/undefined/%E6%AF%8F%E5%B1%82%E6%9C%80%E5%A4%9A3%E8%8A%82%E7%82%B9%E9%81%8D%E5%8E%86.jpg\" class title=\"每层最多3节点遍历\">\n</blockquote>\n<p><strong>在跳表中查询任意数据的时间复杂度就是 O(logn)</strong></p>\n<h3 id=\"跳表是不是很浪费内存？\"><a href=\"#跳表是不是很浪费内存？\" class=\"headerlink\" title=\"跳表是不是很浪费内存？\"></a>跳表是不是很浪费内存？</h3><p>假设原始链表大小为 n，那第一级索引大约有 n/2 个结点，第二级索引大约有 n/4 个结点，以此类推，每上升一级就减少一半，直到剩下 2 个结点。如果我们把每层索引的结点数写出来，就是一个等比数列。</p>\n<img src=\"/article/undefined/%E8%B7%B3%E8%A1%A8%E6%AF%8F%E5%B1%82%E8%8A%82%E7%82%B9%E6%95%B0.jpg\" class title=\"跳表每层节点数\">\n<p>这几级索引的结点总和就是 n/2+n/4+n/8…+8+4+2=n-2</p>\n<p>所以，<strong>跳表的空间复杂度是 O(n)</strong></p>\n<h3 id=\"高效的动态插入和删除\"><a href=\"#高效的动态插入和删除\" class=\"headerlink\" title=\"高效的动态插入和删除\"></a>高效的动态插入和删除</h3><p><strong>插入、删除操作的时间复杂度是 O(logn)</strong></p>\n<img src=\"/article/undefined/%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.jpg\" class title=\"插入操作\">\n<h3 id=\"跳表索引动态更新\"><a href=\"#跳表索引动态更新\" class=\"headerlink\" title=\"跳表索引动态更新\"></a>跳表索引动态更新</h3><p>当我们不停地往跳表中插入数据时，如果不更新索引，就有可能出现某 2 个索引结点之间数据非常多的情况。极端情况下，跳表还会退化成单链表。</p>\n<p><strong>跳表是通过随机函数来维护前面提到的“平衡性”</strong></p>\n<blockquote>\n<p>当往跳表中插入数据的时候，可以选择同时将这个数据插入到部分索引层中。如何选择加入哪些索引层呢？</p>\n</blockquote>\n<p>通过一个随机函数，来决定将这个结点插入到哪几级索引中，比如随机函数生成了值 K，那我们就将这个结点添加到第一级到第 K 级这 K 级索引中。</p>\n<img src=\"/article/undefined/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0%E6%9B%B4%E6%96%B0%E7%B4%A2%E5%BC%95.jpg\" class title=\"随机函数更新索引\">\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> skiplist;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 跳表的一种实现方法。</span><br><span class=\"hljs-comment\"> * 跳表中存储的是正整数，并且存储的是不重复的。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SkipList</span> </span>&#123;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">float</span> SKIPLIST_P = <span class=\"hljs-number\">0.5f</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> MAX_LEVEL = <span class=\"hljs-number\">16</span>;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> levelCount = <span class=\"hljs-number\">1</span>;<br><br>  <span class=\"hljs-keyword\">private</span> Node head = <span class=\"hljs-keyword\">new</span> Node();  <span class=\"hljs-comment\">// 带头链表</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    Node p = head;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = levelCount - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>      <span class=\"hljs-keyword\">while</span> (p.forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;<br>        p = p.forwards[i];<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (p.forwards[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[<span class=\"hljs-number\">0</span>].data == value) &#123;<br>      <span class=\"hljs-keyword\">return</span> p.forwards[<span class=\"hljs-number\">0</span>];<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> level = randomLevel();<br>    Node newNode = <span class=\"hljs-keyword\">new</span> Node();<br>    newNode.data = value;<br>    newNode.maxLevel = level;<br>    Node update[] = <span class=\"hljs-keyword\">new</span> Node[level];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; level; ++i) &#123;<br>      update[i] = head;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// record every level largest value which smaller than insert value in update[]</span><br>    Node p = head;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = level - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>      <span class=\"hljs-keyword\">while</span> (p.forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;<br>        p = p.forwards[i];<br>      &#125;<br>      update[i] = p;<span class=\"hljs-comment\">// use update save node in search path</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">// in search path node next node become new node forwords(next)</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; level; ++i) &#123;<br>      newNode.forwards[i] = update[i].forwards[i];<br>      update[i].forwards[i] = newNode;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// update node hight</span><br>    <span class=\"hljs-keyword\">if</span> (levelCount &lt; level) levelCount = level;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> value)</span> </span>&#123;<br>    Node[] update = <span class=\"hljs-keyword\">new</span> Node[levelCount];<br>    Node p = head;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = levelCount - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>      <span class=\"hljs-keyword\">while</span> (p.forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[i].data &lt; value) &#123;<br>        p = p.forwards[i];<br>      &#125;<br>      update[i] = p;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span> (p.forwards[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.forwards[<span class=\"hljs-number\">0</span>].data == value) &#123;<br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = levelCount - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; --i) &#123;<br>        <span class=\"hljs-keyword\">if</span> (update[i].forwards[i] != <span class=\"hljs-keyword\">null</span> &amp;&amp; update[i].forwards[i].data == value) &#123;<br>          update[i].forwards[i] = update[i].forwards[i].forwards[i];<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">while</span> (levelCount&gt;<span class=\"hljs-number\">1</span>&amp;&amp;head.forwards[levelCount]==<span class=\"hljs-keyword\">null</span>)&#123;<br>      levelCount--;<br>    &#125;<br><br>  &#125;<br><br>  <span class=\"hljs-comment\">// 理论来讲，一级索引中元素个数应该占原始数据的 50%，二级索引中元素个数占 25%，三级索引12.5% ，一直到最顶层。</span><br>  <span class=\"hljs-comment\">// 因为这里每一层的晋升概率是 50%。对于每一个新插入的节点，都需要调用 randomLevel 生成一个合理的层数。</span><br>  <span class=\"hljs-comment\">// 该 randomLevel 方法会随机生成 1~MAX_LEVEL 之间的数，且 ：</span><br>  <span class=\"hljs-comment\">//        50%的概率返回 1</span><br>  <span class=\"hljs-comment\">//        25%的概率返回 2</span><br>  <span class=\"hljs-comment\">//      12.5%的概率返回 3 ...</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">randomLevel</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">int</span> level = <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-keyword\">while</span> (Math.random() &lt; SKIPLIST_P &amp;&amp; level &lt; MAX_LEVEL)<br>      level += <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">return</span> level;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printAll</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    Node p = head;<br>    <span class=\"hljs-keyword\">while</span> (p.forwards[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-keyword\">null</span>) &#123;<br>      System.out.print(p.forwards[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">&quot; &quot;</span>);<br>      p = p.forwards[<span class=\"hljs-number\">0</span>];<br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> data = -<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">private</span> Node forwards[] = <span class=\"hljs-keyword\">new</span> Node[MAX_LEVEL];<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> maxLevel = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>&#123;<br>      StringBuilder builder = <span class=\"hljs-keyword\">new</span> StringBuilder();<br>      builder.append(<span class=\"hljs-string\">&quot;&#123; data: &quot;</span>);<br>      builder.append(data);<br>      builder.append(<span class=\"hljs-string\">&quot;; levels: &quot;</span>);<br>      builder.append(maxLevel);<br>      builder.append(<span class=\"hljs-string\">&quot; &#125;&quot;</span>);<br><br>      <span class=\"hljs-keyword\">return</span> builder.toString();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"跳表","path":"api/categories/跳表.json"}],"tags":[{"name":"数据结构与算法,跳表","path":"api/tags/数据结构与算法,跳表.json"}]}