{"title":"JSP","slug":"JSP","date":"2022-01-03T05:09:09.000Z","updated":"2022-01-04T03:31:18.326Z","comments":true,"path":"api/articles/JSP.json","realPath":null,"excerpt":null,"covers":["/article/6685/jsp-processing.jpg","/article/6685/jsp_life_cycle.jpg"],"cover":"/images/theme/coverphoto/JSP.jpg","content":"<blockquote>\n<p>Take my wine in my own cup, friend.<br>It loses its wreath of foam when poured into that of others.</p>\n<p>在我自己的杯中，饮了我的酒吧，朋友。一倒在别人的杯里，这酒的腾跳的泡沫便要消失了。</p>\n</blockquote>\n<h2 id=\"Java-Server-Pages\"><a href=\"#Java-Server-Pages\" class=\"headerlink\" title=\"Java Server Pages\"></a>Java Server Pages</h2><p>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p>\n<p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p>\n<p>JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p>\n<p>JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。</p>\n<h3 id=\"JSP-处理\"><a href=\"#JSP-处理\" class=\"headerlink\" title=\"JSP 处理\"></a>JSP 处理</h3><p>以下步骤表明了 Web 服务器是如何使用JSP来创建网页的：</p>\n<ul>\n<li>就像其他普通的网页一样，您的浏览器发送一个 HTTP 请求给服务器。</li>\n<li>Web 服务器识别出这是一个对 JSP 网页的请求，并且将该请求传递给 JSP 引擎。通过使用 URL或者 .jsp 文件来完成。</li>\n<li>JSP 引擎从磁盘中载入 JSP 文件，然后将它们转化为 Servlet。这种转化只是简单地将所有模板文本改用 println() 语句，并且将所有的 JSP 元素转化成 Java 代码。</li>\n<li>JSP 引擎将 Servlet 编译成可执行类，并且将原始请求传递给 Servlet 引擎。</li>\n<li>Web 服务器的某组件将会调用 Servlet 引擎，然后载入并执行 Servlet 类。在执行过程中，Servlet 产生 HTML 格式的输出并将其内嵌于 HTTP response 中上交给 Web 服务器。</li>\n<li>Web 服务器以静态 HTML 网页的形式将 HTTP response 返回到您的浏览器中。</li>\n<li>最终，Web 浏览器处理 HTTP response 中动态产生的HTML网页，就好像在处理静态网页一样。</li>\n</ul>\n<img src=\"/article/6685/jsp-processing.jpg\" class title=\"img\">\n<p>一般情况下，JSP 引擎会检查 JSP 文件对应的 Servlet 是否已经存在，并且检查 JSP 文件的修改日期是否早于 Servlet。如果 JSP 文件的修改日期早于对应的 Servlet，那么容器就可以确定 JSP 文件没有被修改过并且 Servlet 有效。这使得整个流程与其他脚本语言（比如 PHP）相比要高效快捷一些。</p>\n<p>总的来说，JSP 网页就是用另一种方式来编写 Servlet 而不用成为 Java 编程高手。除了解释阶段外，JSP 网页几乎可以被当成一个普通的 Servlet 来对待。</p>\n<h3 id=\"JSP-生命周期\"><a href=\"#JSP-生命周期\" class=\"headerlink\" title=\"JSP 生命周期\"></a>JSP 生命周期</h3><p>JSP生命周期就是从创建到销毁的整个过程，类似于servlet生命周期，区别在于JSP生命周期还包括将JSP文件编译成servlet。</p>\n<p>以下是JSP生命周期中所走过的几个阶段：</p>\n<ol>\n<li><p>编译阶段：</p>\n<p>servlet容器编译servlet源文件，生成servlet类</p>\n</li>\n<li><p>初始化阶段：</p>\n<p>加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法</p>\n</li>\n<li><p>执行阶段：</p>\n<p>调用与JSP对应的servlet实例的服务方法</p>\n</li>\n<li><p>销毁阶段：</p>\n<p>调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例</p>\n<img src=\"/article/6685/jsp_life_cycle.jpg\" class title=\"img\">\n</li>\n</ol>\n<h3 id=\"JSP编译\"><a href=\"#JSP编译\" class=\"headerlink\" title=\"JSP编译\"></a>JSP编译</h3><p>当浏览器请求JSP页面时，JSP引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。</p>\n<p><code>Mac</code>文件地址：<code>~/Library/Caches/JetBrains/IntelliJIdea/tomcat/项目名/work/Catalina/localhost/ROOT/org/apache/jsp/index_jsp.java</code></p>\n<p>编译的过程包括三个步骤：</p>\n<ul>\n<li>解析JSP文件。</li>\n<li>将JSP文件转为servlet。</li>\n<li>编译servlet。</li>\n</ul>\n<ol>\n<li><p>JSP初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">jspInit</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-comment\">// 初始化代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>一般来讲程序只初始化一次，servlet也是如此。通常情况下您可以在jspInit()方法中初始化数据库连接、打开文件和创建查询表。</p>\n</li>\n<li><p>JSP执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">_jspService</span><span class=\"hljs-params\">(HttpServletRequest request,HttpServletResponse response)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>   <span class=\"hljs-comment\">// 服务端处理代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。</p>\n</li>\n<li><p>JSP清理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">jspDestroy</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>   <span class=\"hljs-comment\">// 清理代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>输出页面前新增的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">response.setContentType(<span class=\"hljs-string\">&quot;text/html&quot;</span>); <span class=\"hljs-comment\">//设置相应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class=\"hljs-keyword\">this</span>, request, response,<br>         <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-number\">8192</span>, <span class=\"hljs-keyword\">true</span>);<br>_jspx_page_context = pageContext;<br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure>\n<p>以上这些对象可以在jsp对象中直接使用</p>\n<h3 id=\"JSP-隐式对象-内置\"><a href=\"#JSP-隐式对象-内置\" class=\"headerlink\" title=\"JSP 隐式对象(内置)\"></a>JSP 隐式对象(内置)</h3><p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> javax.servlet.jsp.PageContext pageContext;<br>javax.servlet.http.HttpSession session = <span class=\"hljs-keyword\">null</span>;<br><span class=\"hljs-keyword\">final</span> javax.servlet.ServletContext application;<br><span class=\"hljs-keyword\">final</span> javax.servlet.ServletConfig config;<br>javax.servlet.jsp.JspWriter out = <span class=\"hljs-keyword\">null</span>;<br><span class=\"hljs-keyword\">final</span> java.lang.Object page = <span class=\"hljs-keyword\">this</span>;<br>javax.servlet.jsp.JspWriter _jspx_out = <span class=\"hljs-keyword\">null</span>;<br>javax.servlet.jsp.PageContext _jspx_page_context = <span class=\"hljs-keyword\">null</span>;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>对象</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">request</td>\n<td style=\"text-align:center\"><strong>HttpServletRequest</strong> 接口的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">response</td>\n<td style=\"text-align:center\"><strong>HttpServletResponse</strong> 接口的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">out</td>\n<td style=\"text-align:center\"><strong>JspWriter</strong>类的实例，用于把结果输出至网页上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">session</td>\n<td style=\"text-align:center\"><strong>HttpSession</strong>类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">application</td>\n<td style=\"text-align:center\"><strong>ServletContext</strong>类的实例，与应用上下文有关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">config</td>\n<td style=\"text-align:center\"><strong>ServletConfig</strong>类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pageContext</td>\n<td style=\"text-align:center\"><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">page</td>\n<td style=\"text-align:center\">类似于Java类中的this关键字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Exception</td>\n<td style=\"text-align:center\"><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%--内置对象--%&gt;<br>&lt;%<br>    pageContext.setAttribute(<span class=\"hljs-string\">&quot;name1&quot;</span>,<span class=\"hljs-string\">&quot;1&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一个页面中有效</span><br>    request.setAttribute(<span class=\"hljs-string\">&quot;name2&quot;</span>,<span class=\"hljs-string\">&quot;2&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>    session.setAttribute(<span class=\"hljs-string\">&quot;name3&quot;</span>,<span class=\"hljs-string\">&quot;3&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>    application.setAttribute(<span class=\"hljs-string\">&quot;name4&quot;</span>,<span class=\"hljs-string\">&quot;4&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一次服务器中有效，从打开服务器到关闭服务器</span><br>%&gt;<br><br>&lt;%<br>\t\t<span class=\"hljs-comment\">//通过pageContext取出我们保存的值</span><br>    <span class=\"hljs-comment\">//通过寻找的方式</span><br>    String name1 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name1&quot;</span>);<br>    String name2 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name2&quot;</span>);<br>    String name3 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name3&quot;</span>);<br>    String name4 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name4&quot;</span>);<br>    String name5 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name5&quot;</span>);<br>%&gt;<br><br>&lt;%--使用EL表达式输出  $&#123;&#125;--%&gt;<br>&lt;h1&gt;取出的值为：&lt;/h1&gt;<br>&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;<br>&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;<br>&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;<br>&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;<br>&lt;%--使用EL表达式输出  不存在不会输出--%&gt;<br>&lt;h3&gt;$&#123;name5&#125;&lt;/h3&gt;<br>&lt;%--原始方式输出 不存在会输出<span class=\"hljs-keyword\">null</span>--%&gt;<br>&lt;h3&gt;&lt;%=name5%&gt;&lt;/h3&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><a href=\"/article/37040.html\" title=\"JSPMaven导包\">JSPMaven导包</a>\n<p><strong>JSP注释</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>语法</strong></th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;%– 注释 –%&gt;</td>\n<td style=\"text-align:center\">JSP注释，注释内容不会被发送至浏览器甚至不会被编译</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><!-- 注释 --></td>\n<td style=\"text-align:center\">HTML注释，通过浏览器查看网页源代码时可以看见注释内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;\\%</td>\n<td style=\"text-align:center\">代表静态 &lt;%常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%></td>\n<td style=\"text-align:center\">代表静态 %&gt; 常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\’</td>\n<td style=\"text-align:center\">在属性中使用的单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\”</td>\n<td style=\"text-align:center\">在属性中使用的双引号</td>\n</tr>\n</tbody>\n</table>\n<p><strong>脚本程序</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;% 代码片段 %&gt;<br>&lt;!-- 或 --&gt;<br>&lt;jsp:scriptlet&gt;<br>   代码片段<br>&lt;/jsp:scriptlet&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>中文编码问题</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%@ page language=<span class=\"hljs-string\">&quot;java&quot;</span> contentType=<span class=\"hljs-string\">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>%&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>JSP声明</strong></p>\n<p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%! declaration; [ declaration; ]+ ... %&gt;<br>&lt;!-- 或 --&gt;<br>&lt;jsp:expression&gt;<br>   代码片段<br>&lt;/jsp:expression&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>JSP表达式</strong></p>\n<p>将程序结果输出到客户端</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%= 表达式 %&gt;<br>&lt;!-- 或 --&gt;<br>&lt;jsp:declaration&gt;<br>   代码片段<br>&lt;/jsp:declaration&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>JSP指令</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%@ directive attribute=<span class=\"hljs-string\">&quot;value&quot;</span> %&gt;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>指令</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;%@ page … %&gt;</td>\n<td style=\"text-align:center\">定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;%@ include … %&gt;</td>\n<td style=\"text-align:center\">包含其他文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;%@ taglib … %&gt;</td>\n<td style=\"text-align:center\">引入标签库的定义，可以是自定义标签</td>\n</tr>\n</tbody>\n</table>\n<p><strong>JSP行为</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;jsp:action_name attribute=<span class=\"hljs-string\">&quot;value&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>语法</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">jsp:include</td>\n<td style=\"text-align:center\">用于在当前页面中包含静态或动态资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:useBean</td>\n<td style=\"text-align:center\">寻找和初始化一个JavaBean组件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:setProperty</td>\n<td style=\"text-align:center\">设置 JavaBean组件的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:getProperty</td>\n<td style=\"text-align:center\">将 JavaBean组件的值插入到 output中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:forward</td>\n<td style=\"text-align:center\">从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:plugin</td>\n<td style=\"text-align:center\">用于在生成的HTML页面中包含Applet和JavaBean对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:element</td>\n<td style=\"text-align:center\">动态创建一个XML元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:attribute</td>\n<td style=\"text-align:center\">定义动态创建的XML元素的属性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:body</td>\n<td style=\"text-align:center\">定义动态创建的XML元素的主体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:text</td>\n<td style=\"text-align:center\">用于封装模板数据</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>&lt;%@ include %&gt;</code>将两个页面合为一整个页面</li>\n<li><code>&lt;jsp:include&gt;</code>将页面拼接</li>\n</ul>\n<p><strong>JSTL标签</strong></p>\n<p>弥补HTML标签的不足</p>\n<ol>\n<li><p>核心标签</p>\n<p>导入标签库</p>\n <figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%@ taglib prefix=<span class=\"hljs-string\">&quot;c&quot;</span> uri=<span class=\"hljs-string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br></code></pre></td></tr></table></figure>\n<p> |      标签       |                             描述                             |<br> | :————-: | :———————————————————-: |<br> |    &lt;&lt;c:out&gt;&gt;    |              用于在JSP中显示数据，就像&lt;%= … &gt;              |<br> |    &lt;&lt;c:set&gt;&gt;    |                         用于保存数据                         |<br> |    &lt;&lt;c:if&gt;&gt;     | &lt;&lt;c:if&gt;&gt;标签判断表达式的值，如果表达式的值为 true 则执行其主体内容。 |<br> |  &lt;&lt;c:remove&gt;&gt;   |                         用于删除数据                         |<br> |  &lt;&lt;c:forEach&gt;&gt;  |                基础迭代标签，接受多种集合类型                |<br> |    &lt;&lt;c:url&gt;&gt;    |               使用可选的查询参数来创造一个URL                |<br> |  &lt;&lt;c:choose&gt;&gt;   |        本身只当做&lt;&lt;c:when&gt;&gt;和&lt;&lt;c:otherwise&gt;&gt;的父标签         |<br> |   &lt;&lt;c:when&gt;&gt;    |          &lt;&lt;c:choose&gt;&gt;的子标签，用来判断条件是否成立          |<br> | &lt;&lt;c:otherwise&gt;&gt; | &lt;&lt;c:choose&gt;&gt;的子标签，接在&lt;&lt;c:when&gt;&gt;标签后，当&lt;&lt;c:when&gt;&gt;标签判断为false时被执行 |</p>\n</li>\n</ol>\n<h3 id=\"JSP-JavaBean\"><a href=\"#JSP-JavaBean\" class=\"headerlink\" title=\"JSP JavaBean\"></a>JSP JavaBean</h3><p>JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的<a href=\"https://baike.baidu.com/item/构造器/9844976\"><code>构造器</code></a>。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，set和get方法获取。众所周知，属性名称符合这种模式，其他Java 类可以通过自省机制(反射机制)发现和操作这些JavaBean 的属性。</p>\n<ul>\n<li>提供一个默认的无参构造函数。</li>\n<li>需要被序列化并且实现了 Serializable 接口。</li>\n<li>可能有一系列可读写属性。</li>\n<li>可能有一系列的 <strong>getter</strong> 或 <strong>setter</strong> 方法</li>\n</ul>\n<p><strong>JavaBean 属性</strong></p>\n<p>一个 JavaBean 对象的属性应该是可访问的。这个属性可以是任意合法的 Java 数据类型，包括自定义 Java 类。</p>\n<p>一个 JavaBean 对象的属性可以是可读写，或只读，或只写。JavaBean 对象的属性通过 JavaBean 实现类中提供的两个方法来访问：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>方法</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>getPropertyName()</strong></td>\n<td style=\"text-align:left\">举例来说，如果属性的名称为 myName，那么这个方法的名字就要写成 getMyName() 来读取这个属性。这个方法也称为访问器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>setPropertyName()</strong></td>\n<td style=\"text-align:left\">举例来说，如果属性的名称为 myName，那么这个方法的名字就要写成 setMyName()来写入这个属性。这个方法也称为写入器。</td>\n</tr>\n</tbody>\n</table>\n<p>一个只读的属性只提供 getPropertyName() 方法，一个只写的属性只提供 setPropertyName() 方法。</p>\n<p><strong>访问JavaBean</strong></p>\n<p>&lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt;标签可以在 JSP 中声明一个 JavaBean，然后使用。声明后，JavaBean 对象就成了脚本变量，可以通过脚本元素或其他自定义标签来访问。&lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt;标签的语法格式如下：</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;jsp:useBean id=<span class=\"hljs-string\">&quot;bean 的名字&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.类名&quot;</span> scope=<span class=\"hljs-string\">&quot;bean 的作用域&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n<p>scope 的值可以是 page，request，session 或 application。id值可任意只要不和同一 JSP 文件中其它 &lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt; 中 id 值一样就行了</p>\n<p><strong>访问 JavaBean 对象的属性</strong></p>\n<p>在 &lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt; 标签主体中使用 &lt;<a href=\"jsp:getProperty/\">jsp:getProperty/</a>&gt; 标签来调用 <strong>getter</strong> 方法，使用 &lt;<a href=\"jsp:setProperty/\">jsp:setProperty/</a>&gt; 标签来调用 <strong>setter</strong> 方法，语法格式如下：</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;jsp:useBean id=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;bean 编译的类&quot;</span> scope=<span class=\"hljs-string\">&quot;bean 作用域&quot;</span>&gt;<br>   &lt;jsp:setProperty name=<span class=\"hljs-string\">&quot;bean 的 id&quot;</span> property=<span class=\"hljs-string\">&quot;属性名&quot;</span>  <br>                    value=<span class=\"hljs-string\">&quot;value&quot;</span>/&gt;<br>   &lt;jsp:getProperty name=<span class=\"hljs-string\">&quot;bean 的 id&quot;</span> property=<span class=\"hljs-string\">&quot;属性名&quot;</span>/&gt;<br>   ...........<br>&lt;/jsp:useBean&gt;<br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p>Take my wine in my own cup, friend.<br>It loses its wreath of foam when poured into that of others.</p>\n<p>在我自己的杯中，饮了我的酒吧，朋友。一倒在别人的杯里，这酒的腾跳的泡沫便要消失了。</p>\n</blockquote>\n<h2 id=\"Java-Server-Pages\"><a href=\"#Java-Server-Pages\" class=\"headerlink\" title=\"Java Server Pages\"></a>Java Server Pages</h2><p>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p>\n<p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p>\n<p>JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p>\n<p>JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。</p>\n<h3 id=\"JSP-处理\"><a href=\"#JSP-处理\" class=\"headerlink\" title=\"JSP 处理\"></a>JSP 处理</h3><p>以下步骤表明了 Web 服务器是如何使用JSP来创建网页的：</p>\n<ul>\n<li>就像其他普通的网页一样，您的浏览器发送一个 HTTP 请求给服务器。</li>\n<li>Web 服务器识别出这是一个对 JSP 网页的请求，并且将该请求传递给 JSP 引擎。通过使用 URL或者 .jsp 文件来完成。</li>\n<li>JSP 引擎从磁盘中载入 JSP 文件，然后将它们转化为 Servlet。这种转化只是简单地将所有模板文本改用 println() 语句，并且将所有的 JSP 元素转化成 Java 代码。</li>\n<li>JSP 引擎将 Servlet 编译成可执行类，并且将原始请求传递给 Servlet 引擎。</li>\n<li>Web 服务器的某组件将会调用 Servlet 引擎，然后载入并执行 Servlet 类。在执行过程中，Servlet 产生 HTML 格式的输出并将其内嵌于 HTTP response 中上交给 Web 服务器。</li>\n<li>Web 服务器以静态 HTML 网页的形式将 HTTP response 返回到您的浏览器中。</li>\n<li>最终，Web 浏览器处理 HTTP response 中动态产生的HTML网页，就好像在处理静态网页一样。</li>\n</ul>\n<img src=\"/article/6685/jsp-processing.jpg\" class title=\"img\">\n<p>一般情况下，JSP 引擎会检查 JSP 文件对应的 Servlet 是否已经存在，并且检查 JSP 文件的修改日期是否早于 Servlet。如果 JSP 文件的修改日期早于对应的 Servlet，那么容器就可以确定 JSP 文件没有被修改过并且 Servlet 有效。这使得整个流程与其他脚本语言（比如 PHP）相比要高效快捷一些。</p>\n<p>总的来说，JSP 网页就是用另一种方式来编写 Servlet 而不用成为 Java 编程高手。除了解释阶段外，JSP 网页几乎可以被当成一个普通的 Servlet 来对待。</p>\n<h3 id=\"JSP-生命周期\"><a href=\"#JSP-生命周期\" class=\"headerlink\" title=\"JSP 生命周期\"></a>JSP 生命周期</h3><p>JSP生命周期就是从创建到销毁的整个过程，类似于servlet生命周期，区别在于JSP生命周期还包括将JSP文件编译成servlet。</p>\n<p>以下是JSP生命周期中所走过的几个阶段：</p>\n<ol>\n<li><p>编译阶段：</p>\n<p>servlet容器编译servlet源文件，生成servlet类</p>\n</li>\n<li><p>初始化阶段：</p>\n<p>加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法</p>\n</li>\n<li><p>执行阶段：</p>\n<p>调用与JSP对应的servlet实例的服务方法</p>\n</li>\n<li><p>销毁阶段：</p>\n<p>调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例</p>\n<img src=\"/article/6685/jsp_life_cycle.jpg\" class title=\"img\">\n</li>\n</ol>\n<h3 id=\"JSP编译\"><a href=\"#JSP编译\" class=\"headerlink\" title=\"JSP编译\"></a>JSP编译</h3><p>当浏览器请求JSP页面时，JSP引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。</p>\n<p><code>Mac</code>文件地址：<code>~/Library/Caches/JetBrains/IntelliJIdea/tomcat/项目名/work/Catalina/localhost/ROOT/org/apache/jsp/index_jsp.java</code></p>\n<p>编译的过程包括三个步骤：</p>\n<ul>\n<li>解析JSP文件。</li>\n<li>将JSP文件转为servlet。</li>\n<li>编译servlet。</li>\n</ul>\n<ol>\n<li><p>JSP初始化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">jspInit</span><span class=\"hljs-params\">()</span></span>&#123;<br>  <span class=\"hljs-comment\">// 初始化代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>一般来讲程序只初始化一次，servlet也是如此。通常情况下您可以在jspInit()方法中初始化数据库连接、打开文件和创建查询表。</p>\n</li>\n<li><p>JSP执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">_jspService</span><span class=\"hljs-params\">(HttpServletRequest request,HttpServletResponse response)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>   <span class=\"hljs-comment\">// 服务端处理代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。</p>\n</li>\n<li><p>JSP清理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">jspDestroy</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>   <span class=\"hljs-comment\">// 清理代码</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>输出页面前新增的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">response.setContentType(<span class=\"hljs-string\">&quot;text/html&quot;</span>); <span class=\"hljs-comment\">//设置相应的页面类型</span><br>pageContext = _jspxFactory.getPageContext(<span class=\"hljs-keyword\">this</span>, request, response,<br>         <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-number\">8192</span>, <span class=\"hljs-keyword\">true</span>);<br>_jspx_page_context = pageContext;<br>application = pageContext.getServletContext();<br>config = pageContext.getServletConfig();<br>session = pageContext.getSession();<br>out = pageContext.getOut();<br>_jspx_out = out;<br></code></pre></td></tr></table></figure>\n<p>以上这些对象可以在jsp对象中直接使用</p>\n<h3 id=\"JSP-隐式对象-内置\"><a href=\"#JSP-隐式对象-内置\" class=\"headerlink\" title=\"JSP 隐式对象(内置)\"></a>JSP 隐式对象(内置)</h3><p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">final</span> javax.servlet.jsp.PageContext pageContext;<br>javax.servlet.http.HttpSession session = <span class=\"hljs-keyword\">null</span>;<br><span class=\"hljs-keyword\">final</span> javax.servlet.ServletContext application;<br><span class=\"hljs-keyword\">final</span> javax.servlet.ServletConfig config;<br>javax.servlet.jsp.JspWriter out = <span class=\"hljs-keyword\">null</span>;<br><span class=\"hljs-keyword\">final</span> java.lang.Object page = <span class=\"hljs-keyword\">this</span>;<br>javax.servlet.jsp.JspWriter _jspx_out = <span class=\"hljs-keyword\">null</span>;<br>javax.servlet.jsp.PageContext _jspx_page_context = <span class=\"hljs-keyword\">null</span>;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>对象</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">request</td>\n<td style=\"text-align:center\"><strong>HttpServletRequest</strong> 接口的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">response</td>\n<td style=\"text-align:center\"><strong>HttpServletResponse</strong> 接口的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">out</td>\n<td style=\"text-align:center\"><strong>JspWriter</strong>类的实例，用于把结果输出至网页上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">session</td>\n<td style=\"text-align:center\"><strong>HttpSession</strong>类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">application</td>\n<td style=\"text-align:center\"><strong>ServletContext</strong>类的实例，与应用上下文有关</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">config</td>\n<td style=\"text-align:center\"><strong>ServletConfig</strong>类的实例</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pageContext</td>\n<td style=\"text-align:center\"><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">page</td>\n<td style=\"text-align:center\">类似于Java类中的this关键字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Exception</td>\n<td style=\"text-align:center\"><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%--内置对象--%&gt;<br>&lt;%<br>    pageContext.setAttribute(<span class=\"hljs-string\">&quot;name1&quot;</span>,<span class=\"hljs-string\">&quot;1&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一个页面中有效</span><br>    request.setAttribute(<span class=\"hljs-string\">&quot;name2&quot;</span>,<span class=\"hljs-string\">&quot;2&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br>    session.setAttribute(<span class=\"hljs-string\">&quot;name3&quot;</span>,<span class=\"hljs-string\">&quot;3&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br>    application.setAttribute(<span class=\"hljs-string\">&quot;name4&quot;</span>,<span class=\"hljs-string\">&quot;4&quot;</span>);  <span class=\"hljs-comment\">//保存的数据只在一次服务器中有效，从打开服务器到关闭服务器</span><br>%&gt;<br><br>&lt;%<br>\t\t<span class=\"hljs-comment\">//通过pageContext取出我们保存的值</span><br>    <span class=\"hljs-comment\">//通过寻找的方式</span><br>    String name1 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name1&quot;</span>);<br>    String name2 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name2&quot;</span>);<br>    String name3 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name3&quot;</span>);<br>    String name4 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name4&quot;</span>);<br>    String name5 = (String) pageContext.findAttribute(<span class=\"hljs-string\">&quot;name5&quot;</span>);<br>%&gt;<br><br>&lt;%--使用EL表达式输出  $&#123;&#125;--%&gt;<br>&lt;h1&gt;取出的值为：&lt;/h1&gt;<br>&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;<br>&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;<br>&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;<br>&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;<br>&lt;%--使用EL表达式输出  不存在不会输出--%&gt;<br>&lt;h3&gt;$&#123;name5&#125;&lt;/h3&gt;<br>&lt;%--原始方式输出 不存在会输出<span class=\"hljs-keyword\">null</span>--%&gt;<br>&lt;h3&gt;&lt;%=name5%&gt;&lt;/h3&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><a href=\"/article/37040.html\" title=\"JSPMaven导包\">JSPMaven导包</a>\n<p><strong>JSP注释</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>语法</strong></th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;%– 注释 –%&gt;</td>\n<td style=\"text-align:center\">JSP注释，注释内容不会被发送至浏览器甚至不会被编译</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><!-- 注释 --></td>\n<td style=\"text-align:center\">HTML注释，通过浏览器查看网页源代码时可以看见注释内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;\\%</td>\n<td style=\"text-align:center\">代表静态 &lt;%常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%></td>\n<td style=\"text-align:center\">代表静态 %&gt; 常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\’</td>\n<td style=\"text-align:center\">在属性中使用的单引号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\”</td>\n<td style=\"text-align:center\">在属性中使用的双引号</td>\n</tr>\n</tbody>\n</table>\n<p><strong>脚本程序</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;% 代码片段 %&gt;<br>&lt;!-- 或 --&gt;<br>&lt;jsp:scriptlet&gt;<br>   代码片段<br>&lt;/jsp:scriptlet&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>中文编码问题</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%@ page language=<span class=\"hljs-string\">&quot;java&quot;</span> contentType=<span class=\"hljs-string\">&quot;text/html; charset=UTF-8&quot;</span><br>    pageEncoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>%&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>JSP声明</strong></p>\n<p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。在JSP文件中，您必须先声明这些变量和方法然后才能使用它们。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%! declaration; [ declaration; ]+ ... %&gt;<br>&lt;!-- 或 --&gt;<br>&lt;jsp:expression&gt;<br>   代码片段<br>&lt;/jsp:expression&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>JSP表达式</strong></p>\n<p>将程序结果输出到客户端</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%= 表达式 %&gt;<br>&lt;!-- 或 --&gt;<br>&lt;jsp:declaration&gt;<br>   代码片段<br>&lt;/jsp:declaration&gt;<br></code></pre></td></tr></table></figure>\n<p><strong>JSP指令</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%@ directive attribute=<span class=\"hljs-string\">&quot;value&quot;</span> %&gt;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>指令</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&lt;%@ page … %&gt;</td>\n<td style=\"text-align:center\">定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;%@ include … %&gt;</td>\n<td style=\"text-align:center\">包含其他文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;%@ taglib … %&gt;</td>\n<td style=\"text-align:center\">引入标签库的定义，可以是自定义标签</td>\n</tr>\n</tbody>\n</table>\n<p><strong>JSP行为</strong></p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;jsp:action_name attribute=<span class=\"hljs-string\">&quot;value&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>语法</strong></th>\n<th style=\"text-align:center\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">jsp:include</td>\n<td style=\"text-align:center\">用于在当前页面中包含静态或动态资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:useBean</td>\n<td style=\"text-align:center\">寻找和初始化一个JavaBean组件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:setProperty</td>\n<td style=\"text-align:center\">设置 JavaBean组件的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:getProperty</td>\n<td style=\"text-align:center\">将 JavaBean组件的值插入到 output中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:forward</td>\n<td style=\"text-align:center\">从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:plugin</td>\n<td style=\"text-align:center\">用于在生成的HTML页面中包含Applet和JavaBean对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:element</td>\n<td style=\"text-align:center\">动态创建一个XML元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:attribute</td>\n<td style=\"text-align:center\">定义动态创建的XML元素的属性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:body</td>\n<td style=\"text-align:center\">定义动态创建的XML元素的主体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jsp:text</td>\n<td style=\"text-align:center\">用于封装模板数据</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>&lt;%@ include %&gt;</code>将两个页面合为一整个页面</li>\n<li><code>&lt;jsp:include&gt;</code>将页面拼接</li>\n</ul>\n<p><strong>JSTL标签</strong></p>\n<p>弥补HTML标签的不足</p>\n<ol>\n<li><p>核心标签</p>\n<p>导入标签库</p>\n <figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;%@ taglib prefix=<span class=\"hljs-string\">&quot;c&quot;</span> uri=<span class=\"hljs-string\">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br></code></pre></td></tr></table></figure>\n<p> |      标签       |                             描述                             |<br> | :————-: | :———————————————————-: |<br> |    &lt;&lt;c:out&gt;&gt;    |              用于在JSP中显示数据，就像&lt;%= … &gt;              |<br> |    &lt;&lt;c:set&gt;&gt;    |                         用于保存数据                         |<br> |    &lt;&lt;c:if&gt;&gt;     | &lt;&lt;c:if&gt;&gt;标签判断表达式的值，如果表达式的值为 true 则执行其主体内容。 |<br> |  &lt;&lt;c:remove&gt;&gt;   |                         用于删除数据                         |<br> |  &lt;&lt;c:forEach&gt;&gt;  |                基础迭代标签，接受多种集合类型                |<br> |    &lt;&lt;c:url&gt;&gt;    |               使用可选的查询参数来创造一个URL                |<br> |  &lt;&lt;c:choose&gt;&gt;   |        本身只当做&lt;&lt;c:when&gt;&gt;和&lt;&lt;c:otherwise&gt;&gt;的父标签         |<br> |   &lt;&lt;c:when&gt;&gt;    |          &lt;&lt;c:choose&gt;&gt;的子标签，用来判断条件是否成立          |<br> | &lt;&lt;c:otherwise&gt;&gt; | &lt;&lt;c:choose&gt;&gt;的子标签，接在&lt;&lt;c:when&gt;&gt;标签后，当&lt;&lt;c:when&gt;&gt;标签判断为false时被执行 |</p>\n</li>\n</ol>\n<h3 id=\"JSP-JavaBean\"><a href=\"#JSP-JavaBean\" class=\"headerlink\" title=\"JSP JavaBean\"></a>JSP JavaBean</h3><p>JavaBean 是一种JAVA语言写成的可重用组件。为写成JavaBean，类必须是具体的和公共的，并且具有无参数的<a href=\"https://baike.baidu.com/item/构造器/9844976\"><code>构造器</code></a>。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，set和get方法获取。众所周知，属性名称符合这种模式，其他Java 类可以通过自省机制(反射机制)发现和操作这些JavaBean 的属性。</p>\n<ul>\n<li>提供一个默认的无参构造函数。</li>\n<li>需要被序列化并且实现了 Serializable 接口。</li>\n<li>可能有一系列可读写属性。</li>\n<li>可能有一系列的 <strong>getter</strong> 或 <strong>setter</strong> 方法</li>\n</ul>\n<p><strong>JavaBean 属性</strong></p>\n<p>一个 JavaBean 对象的属性应该是可访问的。这个属性可以是任意合法的 Java 数据类型，包括自定义 Java 类。</p>\n<p>一个 JavaBean 对象的属性可以是可读写，或只读，或只写。JavaBean 对象的属性通过 JavaBean 实现类中提供的两个方法来访问：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>方法</strong></th>\n<th style=\"text-align:left\"><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>getPropertyName()</strong></td>\n<td style=\"text-align:left\">举例来说，如果属性的名称为 myName，那么这个方法的名字就要写成 getMyName() 来读取这个属性。这个方法也称为访问器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>setPropertyName()</strong></td>\n<td style=\"text-align:left\">举例来说，如果属性的名称为 myName，那么这个方法的名字就要写成 setMyName()来写入这个属性。这个方法也称为写入器。</td>\n</tr>\n</tbody>\n</table>\n<p>一个只读的属性只提供 getPropertyName() 方法，一个只写的属性只提供 setPropertyName() 方法。</p>\n<p><strong>访问JavaBean</strong></p>\n<p>&lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt;标签可以在 JSP 中声明一个 JavaBean，然后使用。声明后，JavaBean 对象就成了脚本变量，可以通过脚本元素或其他自定义标签来访问。&lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt;标签的语法格式如下：</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;jsp:useBean id=<span class=\"hljs-string\">&quot;bean 的名字&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;com.bobo.pojo.类名&quot;</span> scope=<span class=\"hljs-string\">&quot;bean 的作用域&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>\n<p>scope 的值可以是 page，request，session 或 application。id值可任意只要不和同一 JSP 文件中其它 &lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt; 中 id 值一样就行了</p>\n<p><strong>访问 JavaBean 对象的属性</strong></p>\n<p>在 &lt;<a href=\"jsp:useBean\">jsp:useBean</a>&gt; 标签主体中使用 &lt;<a href=\"jsp:getProperty/\">jsp:getProperty/</a>&gt; 标签来调用 <strong>getter</strong> 方法，使用 &lt;<a href=\"jsp:setProperty/\">jsp:setProperty/</a>&gt; 标签来调用 <strong>setter</strong> 方法，语法格式如下：</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsp\">&lt;jsp:useBean id=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">&quot;bean 编译的类&quot;</span> scope=<span class=\"hljs-string\">&quot;bean 作用域&quot;</span>&gt;<br>   &lt;jsp:setProperty name=<span class=\"hljs-string\">&quot;bean 的 id&quot;</span> property=<span class=\"hljs-string\">&quot;属性名&quot;</span>  <br>                    value=<span class=\"hljs-string\">&quot;value&quot;</span>/&gt;<br>   &lt;jsp:getProperty name=<span class=\"hljs-string\">&quot;bean 的 id&quot;</span> property=<span class=\"hljs-string\">&quot;属性名&quot;</span>/&gt;<br>   ...........<br>&lt;/jsp:useBean&gt;<br></code></pre></td></tr></table></figure>\n","categories":[{"name":"JavaWeb","path":"api/categories/JavaWeb.json"},{"name":"JSP","path":"api/categories/JSP.json"}],"tags":[{"name":"JavaWeb,JSP,Java","path":"api/tags/JavaWeb,JSP,Java.json"}]}