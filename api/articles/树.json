{"title":"树","slug":"树","date":"2022-05-17T02:32:28.000Z","updated":"2022-05-21T17:42:36.306Z","comments":true,"path":"api/articles/树.json","realPath":null,"excerpt":null,"covers":["/article/undefined/%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%91.jpg","/article/undefined/%E6%A0%91.jpg","/article/undefined/%E6%A0%91%E7%9A%84%E9%AB%98%E5%BA%A6%E6%B7%B1%E5%BA%A6%E5%B1%82.jpg","/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91.jpg","/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8.jpg","/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8.jpg","/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.jpg","/article/undefined/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C.jpg","/article/undefined/%E8%A6%81%E5%88%A0%E9%99%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%AD%90%E8%8A%82%E7%82%B9.jpg","/article/undefined/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.jpg","/article/undefined/%E7%9C%81%E7%95%A5%E5%8C%85%E5%90%AB%E7%A9%BA%E8%8A%82%E7%82%B9%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91.jpg","/article/undefined/%E5%8E%BB%E6%8E%89%E7%BA%A2%E8%89%B2%E8%8A%82%E7%82%B9%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91.jpg","/article/undefined/%E5%B7%A6%E6%97%8B%E5%8F%B3%E6%97%8B%E7%AE%80%E5%9B%BE.jpg","/article/undefined/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91.jpg","/article/undefined/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91.jpg","/article/undefined/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6.jpg","/article/undefined/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E9%80%92%E5%BD%92%E6%A0%91.jpg","/article/undefined/%E5%85%A8%E6%8E%92%E5%88%97%E9%80%92%E5%BD%92%E6%A0%91.jpg","/article/undefined/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E5%A0%86.jpg","/article/undefined/%E5%BE%80%E5%A0%86%E4%B8%AD%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0.jpg","/article/undefined/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8A%E7%9A%84%E5%A0%86%E5%8C%96%E6%96%B9%E6%B3%95.jpg","/article/undefined/%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E7%9A%84%E5%A0%86%E5%8C%96%E6%96%B9%E6%B3%95.jpg","/article/undefined/%E5%BB%BA%E5%A0%86%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg","/article/undefined/%E6%AF%8F%E4%B8%AA%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E9%AB%98%E5%BA%A6%E6%B1%82%E5%92%8C.jpg","/article/undefined/%E9%AB%98%E6%80%A7%E8%83%BD%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E4%BE%8B.jpg","/article/undefined/%E4%B8%A4%E4%B8%AA%E5%A0%86%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%AA%E6%95%B0%E4%B8%8D%E7%AC%A6%E5%90%88.jpg"],"cover":"/images/theme/coverphoto/树.jpg","content":"<p><strong>二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？</strong></p>\n<h2 id=\"树（Tree）\"><a href=\"#树（Tree）\" class=\"headerlink\" title=\"树（Tree）\"></a>树（Tree）</h2><img src=\"/article/undefined/%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%91.jpg\" class title=\"什么是树\">\n<img src=\"/article/undefined/%E6%A0%91.jpg\" class title=\"树\">\n<p>A 节点就是 B 节点的<strong>父节点</strong>，B 节点是 A 节点的<strong>子节点</strong>。B、C、D 这三个节点的父节点是同一个节点，所以它们之间互称为<strong>兄弟节点</strong>。没有父节点的节点叫做<strong>根节点</strong>，也就是图中的节点 E。我们把没有子节点的节点叫做<strong>叶子节点或者叶节点</strong>，比如图中的 G、H、I、J、K、L 都是叶子节点。</p>\n<p><strong>高度（Height）：</strong>节点到叶子结点的最长路径（边数） （树的高度 = 根节点的高度）</p>\n<p><strong>深度（Depth）：</strong>根节点到这个节点所经历的边得个数</p>\n<p><strong>层（Level）：</strong>节点的深度 + 1</p>\n<img src=\"/article/undefined/%E6%A0%91%E7%9A%84%E9%AB%98%E5%BA%A6%E6%B7%B1%E5%BA%A6%E5%B1%82.jpg\" class title=\"树的高度深度层\">\n<h2 id=\"二叉树（Binary-Tree）\"><a href=\"#二叉树（Binary-Tree）\" class=\"headerlink\" title=\"二叉树（Binary Tree）\"></a>二叉树（Binary Tree）</h2><p>二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是<strong>左子节点和右子节点</strong>。</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91.jpg\" class title=\"二叉树\">\n<p><strong>满二叉树：</strong>编号 2 的二叉树中，<strong>叶子节点全都在最底层</strong>，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树就叫做满二叉树。</p>\n<p><strong>完全二叉树：</strong>编号 3 的二叉树中，<strong>叶子节点都在最底下两层</strong>，<strong>最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大</strong>，这种二叉树叫做完全二叉树。</p>\n<blockquote>\n<p><strong>如何求一棵包含 n 个节点的完全二叉树的高度？</strong></p>\n<p>包含 n 个节点的完全二叉树中，第一层包含 1 个节点，第二层包含 2 个节点，第三层包含 4 个节点，依次类推，下面一层节点个数是上一层的 2 倍，第 K 层包含的节点个数就是 2^(K-1)。</p>\n<p><strong>最后一层的节点个数包含的节点个数在 1 个到 2^(L-1) 个之间（假设最大层数是 L）</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">n &gt;= 1+2+4+8+...+2^(L-2)+1<br>n &lt;= 1+2+4+8+...+2^(L-2)+2^(L-1)<br></code></pre></td></tr></table></figure>\n<p><strong>L 的范围是[log<sub>2</sub>(n+1), log<sub>2</sub>n +1]</strong></p>\n<p>完全二叉树的层数小于等于 log<sub>2</sub>n +1，也就是说，完全二叉树的高度小于等于 log<sub>2</sub>n。</p>\n</blockquote>\n<h3 id=\"如何表示（或者存储）一棵二叉树？\"><a href=\"#如何表示（或者存储）一棵二叉树？\" class=\"headerlink\" title=\"如何表示（或者存储）一棵二叉树？\"></a>如何表示（或者存储）一棵二叉树？</h3><p>想要存储一棵二叉树，有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。</p>\n<ol>\n<li><p>链式存储法</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8.jpg\" class title=\"二叉树的链式存储\">\n<p>每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针</p>\n</li>\n<li><p>顺序存储法</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8.jpg\" class title=\"二叉树的顺序存储\">\n<p><strong>根节点存储在下标 i = 1 的位置</strong></p>\n<p><strong>左子节点</strong>存储在下标 <strong>2 * i = 2</strong> 的位置</p>\n<p><strong>右子节点</strong>存储在 <strong>2 * i + 1 = 3</strong> 的位置</p>\n<p>如果节点 X 存储在数组中下标为 i 的位置，下标为 2 <em> i 的位置存储的就是左子节点，下标为 2 </em> i + 1 的位置存储的就是右子节点。反过来，下标为 i/2 的位置存储就是它的父节点。</p>\n<p><strong>完全二叉树，用数组存储是最节省内存的一种方式</strong></p>\n</li>\n</ol>\n<h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3><img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.jpg\" class title=\"二叉树的遍历\">\n<p>二叉树的前、中、后序遍历就是一个递归的过程</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">前序遍历的递推公式：<br>preOrder(r) = print r-&gt;preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)<br><br>中序遍历的递推公式：<br>inOrder(r) = inOrder(r-&gt;left)-&gt;print r-&gt;inOrder(r-&gt;right)<br><br>后序遍历的递推公式：<br>postOrder(r) = postOrder(r-&gt;left)-&gt;postOrder(r-&gt;right)-&gt;print r<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">preOrder</span><span class=\"hljs-params\">(Node* root)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>;<br>  print root <span class=\"hljs-comment\">// 此处为伪代码，表示打印root节点</span><br>  preOrder(root-&gt;left);<br>  preOrder(root-&gt;right);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">inOrder</span><span class=\"hljs-params\">(Node* root)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>;<br>  inOrder(root-&gt;left);<br>  print root <span class=\"hljs-comment\">// 此处为伪代码，表示打印root节点</span><br>  inOrder(root-&gt;right);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">postOrder</span><span class=\"hljs-params\">(Node* root)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>;<br>  postOrder(root-&gt;left);<br>  postOrder(root-&gt;right);<br>  print root <span class=\"hljs-comment\">// 此处为伪代码，表示打印root节点</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点的个数 n 成正比，也就是说<strong>二叉树遍历的时间复杂度是 O(n)</strong></p>\n<p><strong>中序遍历二叉查找树，可以输出有序的数据序列，时间复杂度是 O(n)</strong></p>\n<h3 id=\"二叉查找树（Binary-Search-Tree）\"><a href=\"#二叉查找树（Binary-Search-Tree）\" class=\"headerlink\" title=\"二叉查找树（Binary Search Tree）\"></a>二叉查找树（Binary Search Tree）</h3><p><strong>二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。</strong></p>\n<ol>\n<li><p>二叉查找树的查找操作</p>\n<p>先取根节点，如果它等于我们要查找的数据，那就返回。如果要查找的数据比根节点的值小，那就在左子树中递归查找；如果要查找的数据比根节点的值大，那就在右子树中递归查找。</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C.jpg\" class title=\"二叉查找树的查找操作\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySearchTree</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> Node tree;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>    Node p = tree;<br>    <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">null</span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (data &lt; p.data) p = p.left;<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &gt; p.data) p = p.right;<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> p;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-keyword\">private</span> Node left;<br>    <span class=\"hljs-keyword\">private</span> Node right;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">this</span>.data = data;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>二叉查找树的插入操作</p>\n<p>新插入的数据一般都是在叶子节点上，所以我们只需要从根节点开始，依次比较要插入的数据和节点的大小关系。</p>\n<p>如果要插入的数据比节点的数据大，并且节点的右子树为空，就将新数据直接插到右子节点的位置；如果不为空，就再递归遍历右子树，查找插入位置。同理，如果要插入的数据比节点数值小，并且节点的左子树为空，就将新数据插入到左子节点的位置；如果不为空，就再递归遍历左子树，查找插入位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (tree == <span class=\"hljs-keyword\">null</span>) &#123;<br>    tree = <span class=\"hljs-keyword\">new</span> Node(data);<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br><br>  Node p = tree;<br>  <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">null</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (data &gt; p.data) &#123;<br>      <span class=\"hljs-keyword\">if</span> (p.right == <span class=\"hljs-keyword\">null</span>) &#123;<br>        p.right = <span class=\"hljs-keyword\">new</span> Node(data);<br>        <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      p = p.right;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// data &lt; p.data</span><br>      <span class=\"hljs-keyword\">if</span> (p.left == <span class=\"hljs-keyword\">null</span>) &#123;<br>        p.left = <span class=\"hljs-keyword\">new</span> Node(data);<br>        <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      p = p.left;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>二叉查找树的删除操作</p>\n<ol>\n<li>如果要删除的节点没有子节点，只需要直接将父节点中，指向要删除节点的指针置为 null</li>\n<li>如果要删除的节点只有一个子节点（只有左子节点或者右子节点），只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了</li>\n<li>如果要删除的节点有两个子节点，需要找到这个节点的右子树中的最小节点，把它替换到要删除的节点上。然后再删除掉这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了）</li>\n</ol>\n<img src=\"/article/undefined/%E8%A6%81%E5%88%A0%E9%99%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%AD%90%E8%8A%82%E7%82%B9.jpg\" class title=\"要删除的节点有两个子节点\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>  Node p = tree; <span class=\"hljs-comment\">// p指向要删除的节点，初始化指向根节点</span><br>  Node pp = <span class=\"hljs-keyword\">null</span>; <span class=\"hljs-comment\">// pp记录的是p的父节点</span><br>  <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.data != data) &#123;<br>    pp = p;<br>    <span class=\"hljs-keyword\">if</span> (data &gt; p.data) p = p.right;<br>    <span class=\"hljs-keyword\">else</span> p = p.left;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 没有找到</span><br><br>  <span class=\"hljs-comment\">// 要删除的节点有两个子节点</span><br>  <span class=\"hljs-keyword\">if</span> (p.left != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.right != <span class=\"hljs-keyword\">null</span>) &#123; <span class=\"hljs-comment\">// 查找右子树中最小节点</span><br>    Node minP = p.right;<br>    Node minPP = p; <span class=\"hljs-comment\">// minPP表示minP的父节点</span><br>    <span class=\"hljs-keyword\">while</span> (minP.left != <span class=\"hljs-keyword\">null</span>) &#123;<br>      minPP = minP;<br>      minP = minP.left;<br>    &#125;<br>    p.data = minP.data; <span class=\"hljs-comment\">// 将minP的数据替换到p中</span><br>    p = minP; <span class=\"hljs-comment\">// 下面就变成了删除minP了</span><br>    pp = minPP;<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 删除节点是叶子节点或者仅有一个子节点</span><br>  Node child; <span class=\"hljs-comment\">// p的子节点</span><br>  <span class=\"hljs-keyword\">if</span> (p.left != <span class=\"hljs-keyword\">null</span>) child = p.left;<br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p.right != <span class=\"hljs-keyword\">null</span>) child = p.right;<br>  <span class=\"hljs-keyword\">else</span> child = <span class=\"hljs-keyword\">null</span>;<br><br>  <span class=\"hljs-keyword\">if</span> (pp == <span class=\"hljs-keyword\">null</span>) tree = child; <span class=\"hljs-comment\">// 删除的是根节点</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pp.left == p) pp.left = child;<br>  <span class=\"hljs-keyword\">else</span> pp.right = child;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>二叉查找树的其他操作</p>\n<p>二叉查找树中还可以支持快速地查找最大节点和最小节点、前驱节点和后继节点</p>\n</li>\n</ol>\n<p><strong>支持重复数据的二叉查找树</strong></p>\n<p>二叉查找树也可以存储包含很多字段的对象</p>\n<p>利用对象的<strong>某个字段作为键值（key）</strong>来构建二叉查找树。对象中的其他字段叫作卫星数据。</p>\n<blockquote>\n<p><strong>问题：如果存储的两个对象键值相同，这种情况该怎么处理呢？</strong></p>\n<ol>\n<li><p>二叉查找树中每一个节点不仅会存储一个数据，因此我们通过链表和支持动态扩容的数组等数据结构，把值相同的数据都存储在同一个节点上。</p>\n</li>\n<li><p>每个节点仍然只存储一个数据。在查找插入位置的过程中，如果碰到一个节点的值，与要插入数据的值相同，我们就将这个要插入的数据放到这个节点的右子树，也就是说，把这个新插入的数据当作大于这个节点的值来处理。</p>\n<p>当要查找数据的时候，遇到值相同的节点，我们并不停止查找操作，而是继续在右子树中查找，直到遇到叶子节点，才停止。这样就可以把键值等于要查找值的所有节点都找出来。</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>二叉查找树的时间复杂度分析</strong></p>\n<ol>\n<li><p>最坏情况时间复杂度：O(n)</p>\n</li>\n<li><p>最好情况时间复杂度：二叉查找树是一棵完全二叉树（或满二叉树），跟树的高度成正比，也就是 O(height)</p>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：相对散列表，为什么还要用二叉查找树呢？</strong></p>\n<ol>\n<li>第一，散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对于二叉查找树来说，只需要中序遍历，就可以在 O(n) 的时间复杂度内，输出有序的数据序列。</li>\n<li>散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在 O(logn)。</li>\n<li>尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比 logn 小，所以实际的查找速度可能不一定比 O(logn) 快。加上哈希函数的耗时，也不一定就比平衡二叉查找树的效率高。</li>\n<li>第四，散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定。</li>\n<li>最后，为了避免过多的散列冲突，散列表装载因子不能太大，特别是基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间。</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><h3 id=\"什么是“平衡二叉查找树”？\"><a href=\"#什么是“平衡二叉查找树”？\" class=\"headerlink\" title=\"什么是“平衡二叉查找树”？\"></a>什么是“平衡二叉查找树”？</h3><p>平衡二叉树的严格定义是这样的：二叉树中任意一个节点的左右子树的高度相差不能大于 1。</p>\n<img src=\"/article/undefined/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.jpg\" class title=\"平衡二叉树\">\n<p>很多平衡二叉查找树其实并没有严格符合上面的定义（树中任意一个节点的左右子树的高度相差不能大于 1）。比如<strong>红黑树</strong>，<strong>它从根节点到各个叶子节点的最长路径，有可能会比最短路径大一倍。</strong></p>\n<h3 id=\"如何定义一棵“红黑树”？\"><a href=\"#如何定义一棵“红黑树”？\" class=\"headerlink\" title=\"如何定义一棵“红黑树”？\"></a>如何定义一棵“红黑树”？</h3><p>红黑树(Red-Black Tree，简称 R-B Tree)，是一种不严格的平衡二叉查找树。</p>\n<p>顾名思义，红黑树中的节点，一类被标记为黑色，一类被标记为红色。除此之外，一棵红黑树还需要满足这样几个要求：</p>\n<ol>\n<li>根节点是黑色的；</li>\n<li>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</li>\n<li>任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；</li>\n<li>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；</li>\n</ol>\n<img src=\"/article/undefined/%E7%9C%81%E7%95%A5%E5%8C%85%E5%90%AB%E7%A9%BA%E8%8A%82%E7%82%B9%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91.jpg\" class title=\"省略包含空节点的红黑树\">\n<h3 id=\"为什么说红黑树是“近似平衡”的？\"><a href=\"#为什么说红黑树是“近似平衡”的？\" class=\"headerlink\" title=\"为什么说红黑树是“近似平衡”的？\"></a>为什么说红黑树是“近似平衡”的？</h3><p>平衡二叉查找树的初衷，是为了解决二叉查找树因为动态更新导致的性能退化问题。所以，<strong>“平衡”的意思可以等价为性能不退化。“近似平衡”就等价为性能不会退化得太严重。</strong></p>\n<blockquote>\n<p><strong>红黑树的高度分析</strong></p>\n<ol>\n<li><p>首先，如果将红色节点从红黑树中去掉，那单纯包含黑色节点的红黑树的高度是多少呢？</p>\n<p>红色节点删除之后，有些节点就没有父节点了，它们会直接拿这些节点的祖父节点（父节点的父节点）作为父节点。所以，之前的二叉树就变成了四叉树。</p>\n<img src=\"/article/undefined/%E5%8E%BB%E6%8E%89%E7%BA%A2%E8%89%B2%E8%8A%82%E7%82%B9%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91.jpg\" class title=\"去掉红色节点的红黑树\">\n<blockquote>\n<p>红黑树的定义中：从任意节点到可达的叶子节点的每个路径包含相同数目的黑色节点。</p>\n</blockquote>\n<p>从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树。所以，仅包含黑色节点的四叉树的高度，比包含相同节点个数的完全二叉树的高度还要小。</p>\n</li>\n<li><p>把红色节点加回去，高度会变成多少呢？</p>\n<blockquote>\n<p>红黑树的定义中：任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；也就是说，有一个红色节点就要至少有一个黑色节点，将它跟其他红色节点隔开。</p>\n</blockquote>\n<p>红黑树中包含最多黑色节点的路径不会超过 log<sub>2</sub>n，所以加入红色节点之后，最长路径不会超过 2log<sub>2</sub>nn，也就是说，<strong>红黑树的高度近似 2log<sub>2</sub>n。</strong></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"实现红黑树的基本思想\"><a href=\"#实现红黑树的基本思想\" class=\"headerlink\" title=\"实现红黑树的基本思想\"></a>实现红黑树的基本思想</h3><p>一棵合格的红黑树需要满足这样几个要求：</p>\n<ol>\n<li>根节点是黑色的；</li>\n<li>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</li>\n<li>任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；</li>\n<li>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。</li>\n</ol>\n<p>在插入、删除节点的过程中，第三、第四点要求可能会被破坏，而红黑树的“平衡调整”，实际上就是要把被破坏的第三、第四点恢复过来。</p>\n<p><strong>左旋（rotate left）围绕某个节点的左旋、右旋（rotate right）围绕某个节点的右旋</strong></p>\n<img src=\"/article/undefined/%E5%B7%A6%E6%97%8B%E5%8F%B3%E6%97%8B%E7%AE%80%E5%9B%BE.jpg\" class title=\"左旋右旋简图\">\n<h3 id=\"插入删除平衡调整\"><a href=\"#插入删除平衡调整\" class=\"headerlink\" title=\"插入删除平衡调整\"></a>插入删除平衡调整</h3><h4 id=\"插入操作的平衡调整\"><a href=\"#插入操作的平衡调整\" class=\"headerlink\" title=\"插入操作的平衡调整\"></a>插入操作的平衡调整</h4><p><strong>红黑树规定，插入的节点必须是红色的。而且，二叉查找树中新插入的节点都是放在叶子节点上</strong></p>\n<ol>\n<li>如果插入节点的父节点是黑色的，什么都不用做，它仍然满足红黑树的定义。</li>\n<li>如果插入的节点是根节点，那我们直接改变它的颜色，把它变成黑色就可以了。</li>\n<li>其他违背红黑树定义的情况。（<strong>左右旋转和改变颜色</strong>）</li>\n</ol>\n<p>正在处理的节点叫做<strong>关注节点</strong></p>\n<ol>\n<li><p>如果关注节点是 a，它的叔叔节点 d 是红色</p>\n<p><img src=\"/article/插入CASE 1.jpg\"><span class=\"image-caption\">CASE 1</span></p>\n<ol>\n<li>将关注节点 a 的父节点 b、叔叔节点 d 的颜色都设置成黑色；</li>\n<li>将关注节点 a 的祖父节点 c 的颜色设置成红色；</li>\n<li>关注节点变成 a 的祖父节点 c；</li>\n<li>跳到 CASE 2 或者 CASE 3。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的右子节点</p>\n<p><img src=\"/article/插入CASE 2.jpg\"><span class=\"image-caption\">CASE 2</span></p>\n<ol>\n<li>关注节点变成节点 a 的父节点 b；</li>\n<li>围绕新的关注节点\bb 左旋；</li>\n<li>跳到 CASE 3。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的左子节点</p>\n<p><img src=\"/article/插入CASE 3.jpg\"><span class=\"image-caption\">CASE 3</span></p>\n<ol>\n<li>围绕关注节点 a 的祖父节点 c 右旋；</li>\n<li>将关注节点 a 的父节点 b、兄弟节点 c 的颜色互换。</li>\n<li>调整结束。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"删除操作的平衡调整\"><a href=\"#删除操作的平衡调整\" class=\"headerlink\" title=\"删除操作的平衡调整\"></a>删除操作的平衡调整</h4><p><strong>第一步是针对删除节点初步调整</strong>。初步调整只是保证整棵红黑树在一个节点删除之后，仍然满足最后一条定义的要求，也就是说，每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；<strong>第二步是针对关注节点进行二次调整</strong>，让它满足红黑树的第三条定义，即不存在相邻的两个红色节点。</p>\n<ol>\n<li><p>针对删除节点初步调整</p>\n<p>红黑树的定义中“只包含红色节点和黑色节点”，</p>\n<p>经过初步调整之后，为了保证满足红黑树定义的最后一条要求，有些节点会被标记成两种颜色，“红 - 黑”或者“黑 - 黑”。如果一个节点被标记为了“黑 - 黑”，那在计算黑色节点个数的时候，要算成两个黑色节点。</p>\n<ol>\n<li><p>如果要删除的节点是 a，它只有一个子节点 b</p>\n<p><img src=\"/article/初步删除CASE 1.jpg\"><span class=\"image-caption\">初步删除CASE 1</span></p>\n<ol>\n<li>删除节点 a，并且把节点 b 替换到节点 a 的位置；</li>\n<li>节点 a 只能是黑色，节点 b 也只能是红色，其他情况均不符合红黑树的定义。这种情况下，我们把节点 b 改为黑色；</li>\n<li>调整结束，不需要进行二次调整。</li>\n</ol>\n</li>\n<li><p>如果要删除的节点 a 有两个非空子节点，并且它的后继节点就是节点 a 的右子节点 c</p>\n<p><img src=\"/article/初步删除CASE 2.jpg\"><span class=\"image-caption\">初步删除CASE 2</span></p>\n<ol>\n<li>如果节点 a 的后继节点就是右子节点 c，那右子节点 c 肯定没有左子树。把节点 a 删除，并且将节点 c 替换到节点 a 的位置；</li>\n<li>然后把节点 c 的颜色设置为跟节点 a 相同的颜色；</li>\n<li>如果节点 c 是黑色，为了不违反红黑树的最后一条定义，我们给节点 c 的右子节点 d 多加一个黑色，这个时候节点 d 就成了“红 - 黑”或者“黑 - 黑”；</li>\n<li>这个时候，关注节点变成了节点 d，第二步的调整操作就会针对关注节点来做。</li>\n</ol>\n</li>\n<li><p>如果要删除的是节点 a，它有两个非空子节点，并且节点 a 的后继节点不是右子节点</p>\n<p><img src=\"/article/初步删除CASE 3.jpg\"><span class=\"image-caption\">初步删除CASE 3</span></p>\n<ol>\n<li>找到后继节点 d，并将它删除，删除后继节点 d 的过程参照 CASE 1；</li>\n<li>将节点 a 替换成后继节点 d；</li>\n<li>把节点 d 的颜色设置为跟节点 a 相同的颜色；</li>\n<li>如果节点 d 是黑色，为了不违反红黑树的最后一条定义，我们给节点 d 的右子节点 c 多加一个黑色，这个时候节点 c 就成了“红 - 黑”或者“黑 - 黑”；</li>\n<li>这个时候，关注节点变成了节点 c，第二步的调整操作就会针对关注节点来做。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>针对关注节点进行二次调整</p>\n<p>经过初步调整之后，关注节点变成了“红 - 黑”或者“黑 - 黑”节点</p>\n<ol>\n<li><p>如果关注节点是 a，它的兄弟节点 c 是红色的</p>\n<p><img src=\"/article/删除二次调整CASE 1.jpg\"><span class=\"image-caption\">删除二次调整CASE 1</span></p>\n<ol>\n<li>围绕关注节点 a 的父节点 b 左旋；</li>\n<li>关注节点 a 的父节点 b 和祖父节点 c 交换颜色；</li>\n<li>关注节点不变；</li>\n<li>继续从四种情况中选择适合的规则来调整。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的兄弟节点 c 是黑色的，并且节点 c 的左右子节点 d、e 都是黑色的</p>\n<p><img src=\"/article/删除二次调整CASE 2.jpg\"><span class=\"image-caption\">删除二次调整CASE 2</span></p>\n<ol>\n<li>将关注节点 a 的兄弟节点 c 的颜色变成红色；</li>\n<li>从关注节点 a 中去掉一个黑色，这个时候节点 a 就是单纯的红色或者黑色；</li>\n<li>给关注节点 a 的父节点 b 添加一个黑色，这个时候节点 b 就变成了“红 - 黑”或者“黑 - 黑”；</li>\n<li>关注节点从 a 变成其父节点 b；</li>\n<li>继续从四种情况中选择符合的规则来调整。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的兄弟节点 c 是黑色，c 的左子节点 d 是红色，c 的右子节点 e 是黑色</p>\n<p><img src=\"/article/删除二次调整CASE 3.jpg\"><span class=\"image-caption\">删除二次调整CASE 3</span></p>\n<ol>\n<li>围绕关注节点 a 的兄弟节点 c 右旋；</li>\n<li>节点 c 和节点 d 交换颜色；</li>\n<li>关注节点不变；</li>\n<li>跳转到 CASE 4，继续调整。</li>\n</ol>\n</li>\n<li><p>如果关注节点 a 的兄弟节点 c 是黑色的，并且 c 的右子节点是红色的</p>\n<p><img src=\"/article/删除二次调整CASE 4.jpg\"><span class=\"image-caption\">删除二次调整CASE 4</span></p>\n<ol>\n<li>围绕关注节点 a 的父节点 b 左旋；</li>\n<li>将关注节点 a 的兄弟节点 c 的颜色，跟关注节点 a 的父节点 b 设置成相同的颜色；</li>\n<li>将关注节点 a 的父节点 b 的颜色设置为黑色；</li>\n<li>从关注节点 a 中去掉一个黑色，节点 a 就变成了单纯的红色或者黑色；</li>\n<li>将关注节点 a 的叔叔节点 e 设置为黑色；调整结束。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"递归树\"><a href=\"#递归树\" class=\"headerlink\" title=\"递归树\"></a>递归树</h2><p><strong>如何用递归树，来分析递归代码的时间复杂度</strong></p>\n<blockquote>\n<img src=\"/article/undefined/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"归并排序递归树\">\n<p>归并排序递归树时间复杂度</p>\n<p>因为每次分解都是一分为二，所以代价很低，把时间上的消耗记作常量 1。</p>\n<p>归并算法中比较耗时的是归并操作，也就是把两个子数组合并为大数组。从图中可以看出，每一层归并操作消耗的时间总和是一样的，跟要排序的数据规模有关。把每一层归并操作消耗的时间记作 n。</p>\n<p>只需要知道这棵树的高度 h，用高度 h 乘以每一层的时间消耗 n，就可以得到总的时间复杂度 O(n * h)</p>\n<p>归并排序递归树是一棵满二叉树。满二叉树的高度大约是 log<sub>2</sub>n，所以，<strong>归并排序递归实现的时间复杂度就是 O(nlogn)</strong></p>\n</blockquote>\n<h3 id=\"实战一：分析快速排序的时间复杂度\"><a href=\"#实战一：分析快速排序的时间复杂度\" class=\"headerlink\" title=\"实战一：分析快速排序的时间复杂度\"></a>实战一：分析快速排序的时间复杂度</h3><blockquote>\n<p>快速排序在最好情况下，每次分区都能一分为二，用递推公式 T(n)=2T(n/2)+n，很容易就能推导出时间复杂度是 O(nlogn)。但是，不可能每次分区都正好一分为二。</p>\n<p>假设平均情况下，每次分区之后，两个分区的大小比例为 1:k。当 k=9 时，如果用递推公式的方法来求解时间复杂度的话，递推公式就写成 T(n)=T(n/10)+T(9n/10)+n。</p>\n</blockquote>\n<p><strong>用递归树来分析快速排序的平均情况时间复杂度</strong></p>\n<img src=\"/article/undefined/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"快速排序递归树\">\n<p>快速排序的过程中，每次分区都要遍历待分区区间的所有数据，所以，每一层分区操作所遍历的数据的个数之和就是 n。我们现在只要求出递归树的高度 h，这个快排过程遍历的数据个数就是 h <em> n ，也就是说，时间复杂度就是 O(h </em> n)。</p>\n<p>因为每次分区并不是均匀地一分为二，所以递归树并不是满二叉树。</p>\n<blockquote>\n<p>快速排序结束的条件就是待排序的小区间，大小为 1，也就是说叶子节点里的数据规模是 1。从根节点 n 到叶子节点 1，递归树中最短的一个路径每次都乘以 1/10，最长的一个路径每次都乘以 9/10。通过计算可以得到，从根节点到叶子节点的最短路径是 log<sub>10</sub>n，最长的路径是 log<sub>10/9</sub>n</p>\n<img src=\"/article/undefined/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6.jpg\" class title=\"快速排序递归树路径长度\">\n</blockquote>\n<p>所以，遍历数据的个数总和就介于 nlog<sub>10</sub>n 和 nlog<sub>10/9</sub>n 之间</p>\n<p>当分区大小比例是 1:9 时，快速排序的时间复杂度仍然是 O(nlogn)</p>\n<p>对于 k 等于 9，99，甚至是 999，9999……，只要 k 的值不随 n 变化，是一个事先确定的常量，那快排的时间复杂度就是 O(nlogn)。所以，从概率论的角度来说，快排的平均时间复杂度就是 O(nlogn)。</p>\n<h3 id=\"实战二：分析斐波那契数列的时间复杂度\"><a href=\"#实战二：分析斐波那契数列的时间复杂度\" class=\"headerlink\" title=\"实战二：分析斐波那契数列的时间复杂度\"></a>实战二：分析斐波那契数列的时间复杂度</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">return</span> f(n-<span class=\"hljs-number\">1</span>) + f(n-<span class=\"hljs-number\">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/undefined/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"斐波那契数列递归树\">\n<blockquote>\n<p>斐波那契数列递归树的高度</p>\n<p>f(n) 分解为 f(n−1) 和 f(n−2)，每次数据规模都是 −1 或者 −2，叶子节点的数据规模是 1 或者 2。所以，从根节点走到叶子节点，每条路径是长短不一的。如果每次都是 −1，那最长路径大约就是 n；如果每次都是 −2，那最短路径大约就是 n/2。</p>\n<p>每次分解之后的合并操作只需要一次加法运算，把这次加法运算的时间消耗记作 1。所以，从上往下，第一层的总时间消耗是 1，第二层的总时间消耗是 2，第三层的总时间消耗就是 2<sup>2</sup>。依次类推，第 k 层的时间消耗就是 2<sup>k−1</sup>，那整个算法的总的时间消耗就是每一层时间消耗之和。</p>\n<p>如果路径长度都为 n，那这个总和就是 2<sup>n</sup>−1。</p>\n<p>如果路径长度都是 n/2 ，那整个算法的总的时间消耗就是 2<sup>n/2</sup>−1。</p>\n</blockquote>\n<p>算法的时间复杂度就介于 O(2<sup>n</sup>) 和 O(2<sup>n/2</sup>) 之间</p>\n<h3 id=\"实战三：分析全排列的时间复杂度\"><a href=\"#实战三：分析全排列的时间复杂度\" class=\"headerlink\" title=\"实战三：分析全排列的时间复杂度\"></a>实战三：分析全排列的时间复杂度</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">1, 2, 3<br>1, 3, 2<br>2, 1, 3<br>2, 3, 1<br>3, 1, 2<br>3, 2, 1<br></code></pre></td></tr></table></figure>\n<p>如果确定了最后一位数据，那就变成了求解剩下 n−1 个数据的排列问题。而最后一位数据可以是 n 个数据中的任意一个，因此它的取值就有 n 种情况。所以，“n 个数据的排列”问题，就可以分解成 n 个“n−1 个数据的排列”的子问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">假设数组中存储的是1，2， 3...n。<br>        <br>f(1,2,...n) = &#123;最后一位是1, f(n-1)&#125; + &#123;最后一位是2, f(n-1)&#125; +...+&#123;最后一位是n, f(n-1)&#125;。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 调用方式：</span><br><span class=\"hljs-comment\">// int[]a = a=&#123;1, 2, 3, 4&#125;; printPermutations(a, 4, 4);</span><br><span class=\"hljs-comment\">// k表示要处理的子数组的数据个数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printPermutations</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] data, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123;<br>      System.out.print(data[i] + <span class=\"hljs-string\">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; k; ++i) &#123;<br>    <span class=\"hljs-keyword\">int</span> tmp = data[i];<br>    data[i] = data[k-<span class=\"hljs-number\">1</span>];<br>    data[k-<span class=\"hljs-number\">1</span>] = tmp;<br><br>    printPermutations(data, n, k - <span class=\"hljs-number\">1</span>);<br><br>    tmp = data[i];<br>    data[i] = data[k-<span class=\"hljs-number\">1</span>];<br>    data[k-<span class=\"hljs-number\">1</span>] = tmp;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/undefined/%E5%85%A8%E6%8E%92%E5%88%97%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"全排列递归树\">\n<p>第一层分解有 n 次交换操作，第二层有 n 个节点，每个节点分解需要 n−1 次交换，所以第二层总的交换次数是 n <em> (n−1)。第三层有 n </em> (n−1) 个节点，每个节点分解需要 n−2 次交换，所以第三层总的交换次数是 n <em> (n−1) </em> (n−2)。</p>\n<p>以此类推，第 k 层总的交换次数就是 n <em> (n−1) </em> (n−2) <em> … </em> (n−k+1)。最后一层的交换次数就是 n <em> (n−1) </em> (n−2) <em> … </em> 2 * 1。每一层的交换次数之和就是总的交换次数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">n + n*(n-1) + n*(n-1)*(n-2) +... + n*(n-1)*(n-2)*...*2*1<br></code></pre></td></tr></table></figure>\n<p>最后一个数，n <em> (n−1) </em> (n−2) <em> … </em> 2 <em> 1 等于 n!，而前面的 n−1 个数都小于最后一个数，所以，总和肯定小于 n </em> n!，也就是说，<strong>全排列的递归算法的时间复杂度大于 O(n!)，小于 O(n * n!)</strong></p>\n<h2 id=\"“堆”（Heap）\"><a href=\"#“堆”（Heap）\" class=\"headerlink\" title=\"“堆”（Heap）\"></a>“堆”（Heap）</h2><p><strong>堆排序是一种原地的、时间复杂度为 O(nlogn) 的排序算法</strong></p>\n<p><strong>堆排序不是稳定的排序算法</strong></p>\n<p>堆满足的两点要求：</p>\n<ol>\n<li>堆是一个完全二叉树；</li>\n<li>堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。</li>\n</ol>\n<h3 id=\"如何实现一个堆？\"><a href=\"#如何实现一个堆？\" class=\"headerlink\" title=\"如何实现一个堆？\"></a>如何实现一个堆？</h3><p>完全二叉树比较适合用数组来存储。用数组来存储完全二叉树是非常节省存储空间的。</p>\n<img src=\"/article/undefined/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E5%A0%86.jpg\" class title=\"数组存储堆\">\n<p>数组中下标为 i 的节点的左子节点，就是下标为 i <em> 2 的节点，右子节点就是下标为 i </em> 2 + 1 的节点，父节点就是下标为 i/2 的节点。</p>\n<p><strong>堆化（heapify）</strong></p>\n<p>堆化有两种，从下往上和从上往下</p>\n<ol>\n<li><p>从下往上的堆化方法</p>\n<img src=\"/article/undefined/%E5%BE%80%E5%A0%86%E4%B8%AD%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0.jpg\" class title=\"往堆中插入一个元素\">\n<p>让新插入的节点与父节点对比大小。如果不满足子节点小于等于父节点的大小关系，我们就互换两个节点。一直重复这个过程，直到父子节点之间满足堆的大小关系</p>\n<img src=\"/article/undefined/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8A%E7%9A%84%E5%A0%86%E5%8C%96%E6%96%B9%E6%B3%95.jpg\" class title=\"从下往上的堆化方法\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Heap</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] a; <span class=\"hljs-comment\">// 数组，从下标1开始存储数据</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n;  <span class=\"hljs-comment\">// 堆可以存储的最大数据个数</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> count; <span class=\"hljs-comment\">// 堆中已经存储的数据个数</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Heap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>    a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[capacity + <span class=\"hljs-number\">1</span>];<br>    n = capacity;<br>    count = <span class=\"hljs-number\">0</span>;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (count &gt;= n) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 堆满了</span><br>    ++count;<br>    a[count] = data;<br>    <span class=\"hljs-keyword\">int</span> i = count;<br>    <span class=\"hljs-keyword\">while</span> (i/<span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">0</span> &amp;&amp; a[i] &gt; a[i/<span class=\"hljs-number\">2</span>]) &#123; <span class=\"hljs-comment\">// 自下往上堆化</span><br>      swap(a, i, i/<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// swap()函数作用：交换下标为i和i/2的两个元素</span><br>      i = i/<span class=\"hljs-number\">2</span>;<br>    &#125;<br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>从上往下的堆化方法</p>\n<p>删除堆顶元素之后，需要把第二大的元素放到堆顶，那第二大元素肯定会出现在左右子节点中。然后再迭代地删除第二大节点，以此类推，直到叶子节点被删除。</p>\n<p>把最后一个节点放到堆顶，然后利用同样的父子节点对比方法。对于不满足父子节点大小关系的，互换两个节点，并且重复进行这个过程，直到父子节点之间满足大小关系为止。这就是<strong>从上往下的堆化方法</strong>。</p>\n<img src=\"/article/undefined/%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E7%9A%84%E5%A0%86%E5%8C%96%E6%96%B9%E6%B3%95.jpg\" class title=\"从上往下的堆化方法\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeMax</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 堆中没有数据</span><br>  a[<span class=\"hljs-number\">1</span>] = a[count];<br>  --count;<br>  heapify(a, count, <span class=\"hljs-number\">1</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">heapify</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> i)</span> </span>&#123; <span class=\"hljs-comment\">// 自上往下堆化</span><br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) &#123;<br>    <span class=\"hljs-keyword\">int</span> maxPos = i;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span> &lt;= n &amp;&amp; a[i] &lt; a[i*<span class=\"hljs-number\">2</span>]) maxPos = i*<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span> &lt;= n &amp;&amp; a[maxPos] &lt; a[i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>]) maxPos = i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (maxPos == i) <span class=\"hljs-keyword\">break</span>;<br>    swap(a, i, maxPos);<br>    i = maxPos;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个包含 n 个节点的完全二叉树，树的高度不会超过 log<sub>2</sub>n。堆化的过程是顺着节点所在路径比较交换的，所以堆化的时间复杂度跟树的高度成正比，也就是 O(logn)。插入数据和删除堆顶元素的主要逻辑就是堆化，所以，往堆中插入一个元素和删除堆顶元素的时间复杂度都是 O(logn)。</p>\n<h3 id=\"如何基于堆实现排序？\"><a href=\"#如何基于堆实现排序？\" class=\"headerlink\" title=\"如何基于堆实现排序？\"></a>如何基于堆实现排序？</h3><ol>\n<li><p>建堆</p>\n<p>将数组原地建成一个堆。所谓“原地”就是，不借助另一个数组，就在原数组上操作。</p>\n<ol>\n<li><p>第一种是在堆中插入一个元素的思路。尽管数组中包含 n 个数据，假设，起初堆中只包含一个数据，就是下标为 1 的数据。然后，调用插入操作，将下标从 2 到 n 的数据依次插入到堆中。</p>\n</li>\n<li><p>第二种实现思路是从后往前处理数组，并且每个数据都是从上往下堆化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = n/<span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">1</span>; --i) &#123;<br>    heapify(a, n, i);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">heapify</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> i)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) &#123;<br>    <span class=\"hljs-keyword\">int</span> maxPos = i;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span> &lt;= n &amp;&amp; a[i] &lt; a[i*<span class=\"hljs-number\">2</span>]) maxPos = i*<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span> &lt;= n &amp;&amp; a[maxPos] &lt; a[i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>]) maxPos = i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (maxPos == i) <span class=\"hljs-keyword\">break</span>;<br>    swap(a, i, maxPos);<br>    i = maxPos;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>对下标从 n/2 开始到 1 的数据进行堆化，下标是 n/2+1 到 n 的节点是叶子节点，我们不需要堆化</p>\n<p><strong>对于完全二叉树来说，下标从 n/2+1 到 n 的节点都是叶子节点</strong></p>\n</li>\n</ol>\n<blockquote>\n<p>建堆操作的时间复杂度:</p>\n<p>因为叶子节点不需要堆化，所以需要堆化的节点从倒数第二层开始。每个节点堆化的过程中，需要比较和交换的节点个数，跟这个节点的高度 k 成正比。</p>\n<img src=\"/article/undefined/%E5%BB%BA%E5%A0%86%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg\" class title=\"建堆的时间复杂度\">\n<img src=\"/article/undefined/%E6%AF%8F%E4%B8%AA%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E9%AB%98%E5%BA%A6%E6%B1%82%E5%92%8C.jpg\" class title=\"每个非叶子节点的高度求和\">\n</blockquote>\n<p>因为 h=log<sub>2</sub>n，代入公式 S，就能得到 S=O(n)，所以，建堆的时间复杂度就是 O(n)。</p>\n</li>\n<li><p>排序</p>\n<p>建堆结束之后，数组中的数据已经是按照大顶堆的特性来组织的。数组中的第一个元素就是堆顶，也就是最大的元素。把它跟最后一个元素交换，那最大元素就放到了下标为 n 的位置。</p>\n<p>然后再通过堆化的方法，将剩下的 n−1 个元素重新构建成堆。堆化完成之后，我们再取堆顶的元素，放到下标是 n−1 的位置，一直重复这个过程，直到最后堆中只剩下标为 1 的一个元素，排序工作就完成了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// n表示数据的个数，数组a中的数据从下标1到n的位置。</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  buildHeap(a, n);<br>  <span class=\"hljs-keyword\">int</span> k = n;<br>  <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span>) &#123;<br>    swap(a, <span class=\"hljs-number\">1</span>, k);<br>    --k;<br>    heapify(a, k, <span class=\"hljs-number\">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>堆排序的时间复杂度:</p>\n<p>整个堆排序的过程，都只需要极个别临时存储空间，所以堆排序是原地排序算法。堆排序包括建堆和排序两个操作，建堆过程的时间复杂度是 O(n)，排序过程的时间复杂度是 O(nlogn)，所以，堆排序整体的时间复杂度是 O(nlogn)。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：实际开发中，为什么快速排序要比堆排序性能好？</strong></p>\n<ol>\n<li><p>堆排序数据访问的方式没有快速排序友好</p>\n</li>\n<li><p>对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序</p>\n<p>对于基于比较的排序算法来说，整个排序过程就是由两个基本的操作组成的，比较和交换（或移动）。快速排序数据交换的次数不会比逆序度多。</p>\n<p>但是堆排序的第一步是建堆，建堆的过程会打乱数据原有的相对先后顺序，导致原数据的有序度降低。</p>\n</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"堆的应用\"><a href=\"#堆的应用\" class=\"headerlink\" title=\"堆的应用\"></a>堆的应用</h3><ol>\n<li><p>优先级队列</p>\n<p>在优先级队列中，数据的出队顺序不是先进先出，而是按照优先级来，优先级最高的，最先出队。</p>\n<p>往优先级队列中插入一个元素，就相当于往堆中插入一个元素；从优先级队列中取出优先级最高的元素，就相当于取出堆顶元素。</p>\n<blockquote>\n<ol>\n<li><p>合并有序小文件</p>\n<p>假设有 100 个小文件，每个文件的大小是 100MB，每个文件中存储的都是有序的字符串。希望将这些 100 个小文件合并成一个有序的大文件。</p>\n<blockquote>\n<p>将从小文件中取出来的字符串放入到小顶堆中，那堆顶的元素，也就是优先级队列队首的元素，就是最小的字符串。将这个字符串放入到大文件中，并将其从堆中删除。然后再从小文件中取出下一个字符串，放入到堆中。循环这个过程，就可以将 100 个小文件中的数据依次放入到大文件中。</p>\n</blockquote>\n</li>\n<li><p>高性能定时器</p>\n<p>假设有一个定时器，定时器中维护了很多定时任务，每个任务都设定了一个要触发执行的时间点。定时器每过一个很小的单位时间（比如 1 秒），就扫描一遍任务，看是否有任务到达设定的执行时间。如果到达了，就拿出来执行。</p>\n<img src=\"/article/undefined/%E9%AB%98%E6%80%A7%E8%83%BD%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E4%BE%8B.jpg\" class title=\"高性能定时器实例\">\n<p>但是，这样每过 1 秒就扫描一遍任务列表的做法比较低效，主要原因有两点：第一，任务的约定执行时间离当前时间可能还有很久，这样前面很多次扫描其实都是徒劳的；第二，每次都要扫描整个任务列表，如果任务列表很大的话，势必会比较耗时。</p>\n<blockquote>\n<p>按照任务设定的执行时间，将这些任务存储在优先级队列中，队列首部（也就是小顶堆的堆顶）存储的是最先执行的任务。</p>\n<p>定时器拿队首任务的执行时间点，与当前时间点相减，得到一个时间间隔 T。</p>\n<p>这个时间间隔 T 就是，从当前时间开始，需要等待多久，才会有第一个任务需要被执行。</p>\n<p>定时器就可以设定在 T 秒之后，再来执行任务。从当前时间点到（T-1）秒这段时间里，定时器都不需要做任何事情。</p>\n<p>当 T 秒时间过去之后，定时器取优先级队列中队首的任务执行。然后再计算新的队首任务的执行时间点与当前时间点的差值，把这个值作为定时器执行下一个任务需要等待的时间。这样，定时器既不用间隔 1 秒就轮询一次，也不用遍历整个任务列表，性能也就提高了。</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>利用堆求 Top K</p>\n<blockquote>\n<ol>\n<li><p>针对静态数据集合：数据集合事先确定，不会再变</p>\n<blockquote>\n<p>维护一个大小为 K 的小顶堆，顺序遍历数组，从数组中取出数据与堆顶元素比较。如果比堆顶元素大，我们就把堆顶元素删除，并且将这个元素插入到堆中；如果比堆顶元素小，则不做处理，继续遍历数组。这样等数组中的数据都遍历完之后，堆中的数据就是前 K 大数据了。</p>\n</blockquote>\n<p>遍历数组需要 O(n) 的时间复杂度，一次堆化操作需要 O(logK) 的时间复杂度，所以最坏情况下，n 个元素都入堆一次，时间复杂度就是 O(nlogK)。</p>\n</li>\n<li><p>针对动态数据集合：数据集合事先并不确定，有数据动态地加入到集合中</p>\n<p>一个数据集合中有两个操作，一个是添加数据，另一个询问当前的前 K 大数据。如果每次询问前 K 大数据，我们都基于当前的数据重新计算的话，那时间复杂度就是 O(nlogK)，n 表示当前的数据的大小。</p>\n<blockquote>\n<p>一直维护一个 K 大小的小顶堆，当有数据被添加到集合中时，我们就拿它与堆顶的元素对比。如果比堆顶元素大，我们就把堆顶元素删除，并且将这个元素插入到堆中；如果比堆顶元素小，则不做处理。这样，无论任何时候需要查询当前的前 K 大数据，我们都可以立刻返回。</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>利用堆求中位数</p>\n<blockquote>\n<p>维护两个堆，一个大顶堆，一个小顶堆。大顶堆中存储前半部分数据，小顶堆中存储后半部分数据，且小顶堆中的数据都大于大顶堆中的数据。</p>\n<p>如果有 n 个数据，n 是偶数，我们从小到大排序，那前 n/2 个数据存储在大顶堆中，后 n/2 个数据存储在小顶堆中。这样，大顶堆中的堆顶元素就是我们要找的中位数。如果 n 是奇数，情况是类似的，大顶堆就存储 n/2+1 个数据，小顶堆中就存储 n/2 个数据。</p>\n<p>如果新加入的数据小于等于大顶堆的堆顶元素，我们就将这个新数据插入到大顶堆；否则，我们就将这个新数据插入到小顶堆。</p>\n<p>可能出现，两个堆中的数据个数不符合前面约定的情况:从一个堆中不停地将堆顶元素移动到另一个堆，通过这样的调整，来让两个堆中的数据满足上面的约定。</p>\n<img src=\"/article/undefined/%E4%B8%A4%E4%B8%AA%E5%A0%86%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%AA%E6%95%B0%E4%B8%8D%E7%AC%A6%E5%90%88.jpg\" class title=\"两个堆中的数据个数不符合\">\n</blockquote>\n</li>\n</ol>\n","more":"<p><strong>二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？</strong></p>\n<h2 id=\"树（Tree）\"><a href=\"#树（Tree）\" class=\"headerlink\" title=\"树（Tree）\"></a>树（Tree）</h2><img src=\"/article/undefined/%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%91.jpg\" class title=\"什么是树\">\n<img src=\"/article/undefined/%E6%A0%91.jpg\" class title=\"树\">\n<p>A 节点就是 B 节点的<strong>父节点</strong>，B 节点是 A 节点的<strong>子节点</strong>。B、C、D 这三个节点的父节点是同一个节点，所以它们之间互称为<strong>兄弟节点</strong>。没有父节点的节点叫做<strong>根节点</strong>，也就是图中的节点 E。我们把没有子节点的节点叫做<strong>叶子节点或者叶节点</strong>，比如图中的 G、H、I、J、K、L 都是叶子节点。</p>\n<p><strong>高度（Height）：</strong>节点到叶子结点的最长路径（边数） （树的高度 = 根节点的高度）</p>\n<p><strong>深度（Depth）：</strong>根节点到这个节点所经历的边得个数</p>\n<p><strong>层（Level）：</strong>节点的深度 + 1</p>\n<img src=\"/article/undefined/%E6%A0%91%E7%9A%84%E9%AB%98%E5%BA%A6%E6%B7%B1%E5%BA%A6%E5%B1%82.jpg\" class title=\"树的高度深度层\">\n<h2 id=\"二叉树（Binary-Tree）\"><a href=\"#二叉树（Binary-Tree）\" class=\"headerlink\" title=\"二叉树（Binary Tree）\"></a>二叉树（Binary Tree）</h2><p>二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是<strong>左子节点和右子节点</strong>。</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91.jpg\" class title=\"二叉树\">\n<p><strong>满二叉树：</strong>编号 2 的二叉树中，<strong>叶子节点全都在最底层</strong>，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树就叫做满二叉树。</p>\n<p><strong>完全二叉树：</strong>编号 3 的二叉树中，<strong>叶子节点都在最底下两层</strong>，<strong>最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大</strong>，这种二叉树叫做完全二叉树。</p>\n<blockquote>\n<p><strong>如何求一棵包含 n 个节点的完全二叉树的高度？</strong></p>\n<p>包含 n 个节点的完全二叉树中，第一层包含 1 个节点，第二层包含 2 个节点，第三层包含 4 个节点，依次类推，下面一层节点个数是上一层的 2 倍，第 K 层包含的节点个数就是 2^(K-1)。</p>\n<p><strong>最后一层的节点个数包含的节点个数在 1 个到 2^(L-1) 个之间（假设最大层数是 L）</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">n &gt;= 1+2+4+8+...+2^(L-2)+1<br>n &lt;= 1+2+4+8+...+2^(L-2)+2^(L-1)<br></code></pre></td></tr></table></figure>\n<p><strong>L 的范围是[log<sub>2</sub>(n+1), log<sub>2</sub>n +1]</strong></p>\n<p>完全二叉树的层数小于等于 log<sub>2</sub>n +1，也就是说，完全二叉树的高度小于等于 log<sub>2</sub>n。</p>\n</blockquote>\n<h3 id=\"如何表示（或者存储）一棵二叉树？\"><a href=\"#如何表示（或者存储）一棵二叉树？\" class=\"headerlink\" title=\"如何表示（或者存储）一棵二叉树？\"></a>如何表示（或者存储）一棵二叉树？</h3><p>想要存储一棵二叉树，有两种方法，一种是基于指针或者引用的二叉链式存储法，一种是基于数组的顺序存储法。</p>\n<ol>\n<li><p>链式存储法</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8.jpg\" class title=\"二叉树的链式存储\">\n<p>每个节点有三个字段，其中一个存储数据，另外两个是指向左右子节点的指针</p>\n</li>\n<li><p>顺序存储法</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8.jpg\" class title=\"二叉树的顺序存储\">\n<p><strong>根节点存储在下标 i = 1 的位置</strong></p>\n<p><strong>左子节点</strong>存储在下标 <strong>2 * i = 2</strong> 的位置</p>\n<p><strong>右子节点</strong>存储在 <strong>2 * i + 1 = 3</strong> 的位置</p>\n<p>如果节点 X 存储在数组中下标为 i 的位置，下标为 2 <em> i 的位置存储的就是左子节点，下标为 2 </em> i + 1 的位置存储的就是右子节点。反过来，下标为 i/2 的位置存储就是它的父节点。</p>\n<p><strong>完全二叉树，用数组存储是最节省内存的一种方式</strong></p>\n</li>\n</ol>\n<h3 id=\"二叉树的遍历\"><a href=\"#二叉树的遍历\" class=\"headerlink\" title=\"二叉树的遍历\"></a>二叉树的遍历</h3><img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86.jpg\" class title=\"二叉树的遍历\">\n<p>二叉树的前、中、后序遍历就是一个递归的过程</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">前序遍历的递推公式：<br>preOrder(r) = print r-&gt;preOrder(r-&gt;left)-&gt;preOrder(r-&gt;right)<br><br>中序遍历的递推公式：<br>inOrder(r) = inOrder(r-&gt;left)-&gt;print r-&gt;inOrder(r-&gt;right)<br><br>后序遍历的递推公式：<br>postOrder(r) = postOrder(r-&gt;left)-&gt;postOrder(r-&gt;right)-&gt;print r<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">preOrder</span><span class=\"hljs-params\">(Node* root)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>;<br>  print root <span class=\"hljs-comment\">// 此处为伪代码，表示打印root节点</span><br>  preOrder(root-&gt;left);<br>  preOrder(root-&gt;right);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">inOrder</span><span class=\"hljs-params\">(Node* root)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>;<br>  inOrder(root-&gt;left);<br>  print root <span class=\"hljs-comment\">// 此处为伪代码，表示打印root节点</span><br>  inOrder(root-&gt;right);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">postOrder</span><span class=\"hljs-params\">(Node* root)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>;<br>  postOrder(root-&gt;left);<br>  postOrder(root-&gt;right);<br>  print root <span class=\"hljs-comment\">// 此处为伪代码，表示打印root节点</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点的个数 n 成正比，也就是说<strong>二叉树遍历的时间复杂度是 O(n)</strong></p>\n<p><strong>中序遍历二叉查找树，可以输出有序的数据序列，时间复杂度是 O(n)</strong></p>\n<h3 id=\"二叉查找树（Binary-Search-Tree）\"><a href=\"#二叉查找树（Binary-Search-Tree）\" class=\"headerlink\" title=\"二叉查找树（Binary Search Tree）\"></a>二叉查找树（Binary Search Tree）</h3><p><strong>二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。</strong></p>\n<ol>\n<li><p>二叉查找树的查找操作</p>\n<p>先取根节点，如果它等于我们要查找的数据，那就返回。如果要查找的数据比根节点的值小，那就在左子树中递归查找；如果要查找的数据比根节点的值大，那就在右子树中递归查找。</p>\n<img src=\"/article/undefined/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C.jpg\" class title=\"二叉查找树的查找操作\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySearchTree</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> Node tree;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>    Node p = tree;<br>    <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">null</span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (data &lt; p.data) p = p.left;<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (data &gt; p.data) p = p.right;<br>      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> p;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> data;<br>    <span class=\"hljs-keyword\">private</span> Node left;<br>    <span class=\"hljs-keyword\">private</span> Node right;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">this</span>.data = data;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>二叉查找树的插入操作</p>\n<p>新插入的数据一般都是在叶子节点上，所以我们只需要从根节点开始，依次比较要插入的数据和节点的大小关系。</p>\n<p>如果要插入的数据比节点的数据大，并且节点的右子树为空，就将新数据直接插到右子节点的位置；如果不为空，就再递归遍历右子树，查找插入位置。同理，如果要插入的数据比节点数值小，并且节点的左子树为空，就将新数据插入到左子节点的位置；如果不为空，就再递归遍历左子树，查找插入位置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (tree == <span class=\"hljs-keyword\">null</span>) &#123;<br>    tree = <span class=\"hljs-keyword\">new</span> Node(data);<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br><br>  Node p = tree;<br>  <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">null</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (data &gt; p.data) &#123;<br>      <span class=\"hljs-keyword\">if</span> (p.right == <span class=\"hljs-keyword\">null</span>) &#123;<br>        p.right = <span class=\"hljs-keyword\">new</span> Node(data);<br>        <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      p = p.right;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// data &lt; p.data</span><br>      <span class=\"hljs-keyword\">if</span> (p.left == <span class=\"hljs-keyword\">null</span>) &#123;<br>        p.left = <span class=\"hljs-keyword\">new</span> Node(data);<br>        <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      p = p.left;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>二叉查找树的删除操作</p>\n<ol>\n<li>如果要删除的节点没有子节点，只需要直接将父节点中，指向要删除节点的指针置为 null</li>\n<li>如果要删除的节点只有一个子节点（只有左子节点或者右子节点），只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了</li>\n<li>如果要删除的节点有两个子节点，需要找到这个节点的右子树中的最小节点，把它替换到要删除的节点上。然后再删除掉这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了）</li>\n</ol>\n<img src=\"/article/undefined/%E8%A6%81%E5%88%A0%E9%99%A4%E7%9A%84%E8%8A%82%E7%82%B9%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%AD%90%E8%8A%82%E7%82%B9.jpg\" class title=\"要删除的节点有两个子节点\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>  Node p = tree; <span class=\"hljs-comment\">// p指向要删除的节点，初始化指向根节点</span><br>  Node pp = <span class=\"hljs-keyword\">null</span>; <span class=\"hljs-comment\">// pp记录的是p的父节点</span><br>  <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.data != data) &#123;<br>    pp = p;<br>    <span class=\"hljs-keyword\">if</span> (data &gt; p.data) p = p.right;<br>    <span class=\"hljs-keyword\">else</span> p = p.left;<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (p == <span class=\"hljs-keyword\">null</span>) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 没有找到</span><br><br>  <span class=\"hljs-comment\">// 要删除的节点有两个子节点</span><br>  <span class=\"hljs-keyword\">if</span> (p.left != <span class=\"hljs-keyword\">null</span> &amp;&amp; p.right != <span class=\"hljs-keyword\">null</span>) &#123; <span class=\"hljs-comment\">// 查找右子树中最小节点</span><br>    Node minP = p.right;<br>    Node minPP = p; <span class=\"hljs-comment\">// minPP表示minP的父节点</span><br>    <span class=\"hljs-keyword\">while</span> (minP.left != <span class=\"hljs-keyword\">null</span>) &#123;<br>      minPP = minP;<br>      minP = minP.left;<br>    &#125;<br>    p.data = minP.data; <span class=\"hljs-comment\">// 将minP的数据替换到p中</span><br>    p = minP; <span class=\"hljs-comment\">// 下面就变成了删除minP了</span><br>    pp = minPP;<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 删除节点是叶子节点或者仅有一个子节点</span><br>  Node child; <span class=\"hljs-comment\">// p的子节点</span><br>  <span class=\"hljs-keyword\">if</span> (p.left != <span class=\"hljs-keyword\">null</span>) child = p.left;<br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p.right != <span class=\"hljs-keyword\">null</span>) child = p.right;<br>  <span class=\"hljs-keyword\">else</span> child = <span class=\"hljs-keyword\">null</span>;<br><br>  <span class=\"hljs-keyword\">if</span> (pp == <span class=\"hljs-keyword\">null</span>) tree = child; <span class=\"hljs-comment\">// 删除的是根节点</span><br>  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pp.left == p) pp.left = child;<br>  <span class=\"hljs-keyword\">else</span> pp.right = child;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>二叉查找树的其他操作</p>\n<p>二叉查找树中还可以支持快速地查找最大节点和最小节点、前驱节点和后继节点</p>\n</li>\n</ol>\n<p><strong>支持重复数据的二叉查找树</strong></p>\n<p>二叉查找树也可以存储包含很多字段的对象</p>\n<p>利用对象的<strong>某个字段作为键值（key）</strong>来构建二叉查找树。对象中的其他字段叫作卫星数据。</p>\n<blockquote>\n<p><strong>问题：如果存储的两个对象键值相同，这种情况该怎么处理呢？</strong></p>\n<ol>\n<li><p>二叉查找树中每一个节点不仅会存储一个数据，因此我们通过链表和支持动态扩容的数组等数据结构，把值相同的数据都存储在同一个节点上。</p>\n</li>\n<li><p>每个节点仍然只存储一个数据。在查找插入位置的过程中，如果碰到一个节点的值，与要插入数据的值相同，我们就将这个要插入的数据放到这个节点的右子树，也就是说，把这个新插入的数据当作大于这个节点的值来处理。</p>\n<p>当要查找数据的时候，遇到值相同的节点，我们并不停止查找操作，而是继续在右子树中查找，直到遇到叶子节点，才停止。这样就可以把键值等于要查找值的所有节点都找出来。</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>二叉查找树的时间复杂度分析</strong></p>\n<ol>\n<li><p>最坏情况时间复杂度：O(n)</p>\n</li>\n<li><p>最好情况时间复杂度：二叉查找树是一棵完全二叉树（或满二叉树），跟树的高度成正比，也就是 O(height)</p>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：相对散列表，为什么还要用二叉查找树呢？</strong></p>\n<ol>\n<li>第一，散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对于二叉查找树来说，只需要中序遍历，就可以在 O(n) 的时间复杂度内，输出有序的数据序列。</li>\n<li>散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在 O(logn)。</li>\n<li>尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比 logn 小，所以实际的查找速度可能不一定比 O(logn) 快。加上哈希函数的耗时，也不一定就比平衡二叉查找树的效率高。</li>\n<li>第四，散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定。</li>\n<li>最后，为了避免过多的散列冲突，散列表装载因子不能太大，特别是基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间。</li>\n</ol>\n</blockquote>\n<hr>\n<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><h3 id=\"什么是“平衡二叉查找树”？\"><a href=\"#什么是“平衡二叉查找树”？\" class=\"headerlink\" title=\"什么是“平衡二叉查找树”？\"></a>什么是“平衡二叉查找树”？</h3><p>平衡二叉树的严格定义是这样的：二叉树中任意一个节点的左右子树的高度相差不能大于 1。</p>\n<img src=\"/article/undefined/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.jpg\" class title=\"平衡二叉树\">\n<p>很多平衡二叉查找树其实并没有严格符合上面的定义（树中任意一个节点的左右子树的高度相差不能大于 1）。比如<strong>红黑树</strong>，<strong>它从根节点到各个叶子节点的最长路径，有可能会比最短路径大一倍。</strong></p>\n<h3 id=\"如何定义一棵“红黑树”？\"><a href=\"#如何定义一棵“红黑树”？\" class=\"headerlink\" title=\"如何定义一棵“红黑树”？\"></a>如何定义一棵“红黑树”？</h3><p>红黑树(Red-Black Tree，简称 R-B Tree)，是一种不严格的平衡二叉查找树。</p>\n<p>顾名思义，红黑树中的节点，一类被标记为黑色，一类被标记为红色。除此之外，一棵红黑树还需要满足这样几个要求：</p>\n<ol>\n<li>根节点是黑色的；</li>\n<li>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</li>\n<li>任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；</li>\n<li>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；</li>\n</ol>\n<img src=\"/article/undefined/%E7%9C%81%E7%95%A5%E5%8C%85%E5%90%AB%E7%A9%BA%E8%8A%82%E7%82%B9%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91.jpg\" class title=\"省略包含空节点的红黑树\">\n<h3 id=\"为什么说红黑树是“近似平衡”的？\"><a href=\"#为什么说红黑树是“近似平衡”的？\" class=\"headerlink\" title=\"为什么说红黑树是“近似平衡”的？\"></a>为什么说红黑树是“近似平衡”的？</h3><p>平衡二叉查找树的初衷，是为了解决二叉查找树因为动态更新导致的性能退化问题。所以，<strong>“平衡”的意思可以等价为性能不退化。“近似平衡”就等价为性能不会退化得太严重。</strong></p>\n<blockquote>\n<p><strong>红黑树的高度分析</strong></p>\n<ol>\n<li><p>首先，如果将红色节点从红黑树中去掉，那单纯包含黑色节点的红黑树的高度是多少呢？</p>\n<p>红色节点删除之后，有些节点就没有父节点了，它们会直接拿这些节点的祖父节点（父节点的父节点）作为父节点。所以，之前的二叉树就变成了四叉树。</p>\n<img src=\"/article/undefined/%E5%8E%BB%E6%8E%89%E7%BA%A2%E8%89%B2%E8%8A%82%E7%82%B9%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91.jpg\" class title=\"去掉红色节点的红黑树\">\n<blockquote>\n<p>红黑树的定义中：从任意节点到可达的叶子节点的每个路径包含相同数目的黑色节点。</p>\n</blockquote>\n<p>从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树。所以，仅包含黑色节点的四叉树的高度，比包含相同节点个数的完全二叉树的高度还要小。</p>\n</li>\n<li><p>把红色节点加回去，高度会变成多少呢？</p>\n<blockquote>\n<p>红黑树的定义中：任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；也就是说，有一个红色节点就要至少有一个黑色节点，将它跟其他红色节点隔开。</p>\n</blockquote>\n<p>红黑树中包含最多黑色节点的路径不会超过 log<sub>2</sub>n，所以加入红色节点之后，最长路径不会超过 2log<sub>2</sub>nn，也就是说，<strong>红黑树的高度近似 2log<sub>2</sub>n。</strong></p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"实现红黑树的基本思想\"><a href=\"#实现红黑树的基本思想\" class=\"headerlink\" title=\"实现红黑树的基本思想\"></a>实现红黑树的基本思想</h3><p>一棵合格的红黑树需要满足这样几个要求：</p>\n<ol>\n<li>根节点是黑色的；</li>\n<li>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</li>\n<li>任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；</li>\n<li>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。</li>\n</ol>\n<p>在插入、删除节点的过程中，第三、第四点要求可能会被破坏，而红黑树的“平衡调整”，实际上就是要把被破坏的第三、第四点恢复过来。</p>\n<p><strong>左旋（rotate left）围绕某个节点的左旋、右旋（rotate right）围绕某个节点的右旋</strong></p>\n<img src=\"/article/undefined/%E5%B7%A6%E6%97%8B%E5%8F%B3%E6%97%8B%E7%AE%80%E5%9B%BE.jpg\" class title=\"左旋右旋简图\">\n<h3 id=\"插入删除平衡调整\"><a href=\"#插入删除平衡调整\" class=\"headerlink\" title=\"插入删除平衡调整\"></a>插入删除平衡调整</h3><h4 id=\"插入操作的平衡调整\"><a href=\"#插入操作的平衡调整\" class=\"headerlink\" title=\"插入操作的平衡调整\"></a>插入操作的平衡调整</h4><p><strong>红黑树规定，插入的节点必须是红色的。而且，二叉查找树中新插入的节点都是放在叶子节点上</strong></p>\n<ol>\n<li>如果插入节点的父节点是黑色的，什么都不用做，它仍然满足红黑树的定义。</li>\n<li>如果插入的节点是根节点，那我们直接改变它的颜色，把它变成黑色就可以了。</li>\n<li>其他违背红黑树定义的情况。（<strong>左右旋转和改变颜色</strong>）</li>\n</ol>\n<p>正在处理的节点叫做<strong>关注节点</strong></p>\n<ol>\n<li><p>如果关注节点是 a，它的叔叔节点 d 是红色</p>\n<p><img src=\"/article/插入CASE 1.jpg\"><span class=\"image-caption\">CASE 1</span></p>\n<ol>\n<li>将关注节点 a 的父节点 b、叔叔节点 d 的颜色都设置成黑色；</li>\n<li>将关注节点 a 的祖父节点 c 的颜色设置成红色；</li>\n<li>关注节点变成 a 的祖父节点 c；</li>\n<li>跳到 CASE 2 或者 CASE 3。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的右子节点</p>\n<p><img src=\"/article/插入CASE 2.jpg\"><span class=\"image-caption\">CASE 2</span></p>\n<ol>\n<li>关注节点变成节点 a 的父节点 b；</li>\n<li>围绕新的关注节点\bb 左旋；</li>\n<li>跳到 CASE 3。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的左子节点</p>\n<p><img src=\"/article/插入CASE 3.jpg\"><span class=\"image-caption\">CASE 3</span></p>\n<ol>\n<li>围绕关注节点 a 的祖父节点 c 右旋；</li>\n<li>将关注节点 a 的父节点 b、兄弟节点 c 的颜色互换。</li>\n<li>调整结束。</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"删除操作的平衡调整\"><a href=\"#删除操作的平衡调整\" class=\"headerlink\" title=\"删除操作的平衡调整\"></a>删除操作的平衡调整</h4><p><strong>第一步是针对删除节点初步调整</strong>。初步调整只是保证整棵红黑树在一个节点删除之后，仍然满足最后一条定义的要求，也就是说，每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；<strong>第二步是针对关注节点进行二次调整</strong>，让它满足红黑树的第三条定义，即不存在相邻的两个红色节点。</p>\n<ol>\n<li><p>针对删除节点初步调整</p>\n<p>红黑树的定义中“只包含红色节点和黑色节点”，</p>\n<p>经过初步调整之后，为了保证满足红黑树定义的最后一条要求，有些节点会被标记成两种颜色，“红 - 黑”或者“黑 - 黑”。如果一个节点被标记为了“黑 - 黑”，那在计算黑色节点个数的时候，要算成两个黑色节点。</p>\n<ol>\n<li><p>如果要删除的节点是 a，它只有一个子节点 b</p>\n<p><img src=\"/article/初步删除CASE 1.jpg\"><span class=\"image-caption\">初步删除CASE 1</span></p>\n<ol>\n<li>删除节点 a，并且把节点 b 替换到节点 a 的位置；</li>\n<li>节点 a 只能是黑色，节点 b 也只能是红色，其他情况均不符合红黑树的定义。这种情况下，我们把节点 b 改为黑色；</li>\n<li>调整结束，不需要进行二次调整。</li>\n</ol>\n</li>\n<li><p>如果要删除的节点 a 有两个非空子节点，并且它的后继节点就是节点 a 的右子节点 c</p>\n<p><img src=\"/article/初步删除CASE 2.jpg\"><span class=\"image-caption\">初步删除CASE 2</span></p>\n<ol>\n<li>如果节点 a 的后继节点就是右子节点 c，那右子节点 c 肯定没有左子树。把节点 a 删除，并且将节点 c 替换到节点 a 的位置；</li>\n<li>然后把节点 c 的颜色设置为跟节点 a 相同的颜色；</li>\n<li>如果节点 c 是黑色，为了不违反红黑树的最后一条定义，我们给节点 c 的右子节点 d 多加一个黑色，这个时候节点 d 就成了“红 - 黑”或者“黑 - 黑”；</li>\n<li>这个时候，关注节点变成了节点 d，第二步的调整操作就会针对关注节点来做。</li>\n</ol>\n</li>\n<li><p>如果要删除的是节点 a，它有两个非空子节点，并且节点 a 的后继节点不是右子节点</p>\n<p><img src=\"/article/初步删除CASE 3.jpg\"><span class=\"image-caption\">初步删除CASE 3</span></p>\n<ol>\n<li>找到后继节点 d，并将它删除，删除后继节点 d 的过程参照 CASE 1；</li>\n<li>将节点 a 替换成后继节点 d；</li>\n<li>把节点 d 的颜色设置为跟节点 a 相同的颜色；</li>\n<li>如果节点 d 是黑色，为了不违反红黑树的最后一条定义，我们给节点 d 的右子节点 c 多加一个黑色，这个时候节点 c 就成了“红 - 黑”或者“黑 - 黑”；</li>\n<li>这个时候，关注节点变成了节点 c，第二步的调整操作就会针对关注节点来做。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>针对关注节点进行二次调整</p>\n<p>经过初步调整之后，关注节点变成了“红 - 黑”或者“黑 - 黑”节点</p>\n<ol>\n<li><p>如果关注节点是 a，它的兄弟节点 c 是红色的</p>\n<p><img src=\"/article/删除二次调整CASE 1.jpg\"><span class=\"image-caption\">删除二次调整CASE 1</span></p>\n<ol>\n<li>围绕关注节点 a 的父节点 b 左旋；</li>\n<li>关注节点 a 的父节点 b 和祖父节点 c 交换颜色；</li>\n<li>关注节点不变；</li>\n<li>继续从四种情况中选择适合的规则来调整。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的兄弟节点 c 是黑色的，并且节点 c 的左右子节点 d、e 都是黑色的</p>\n<p><img src=\"/article/删除二次调整CASE 2.jpg\"><span class=\"image-caption\">删除二次调整CASE 2</span></p>\n<ol>\n<li>将关注节点 a 的兄弟节点 c 的颜色变成红色；</li>\n<li>从关注节点 a 中去掉一个黑色，这个时候节点 a 就是单纯的红色或者黑色；</li>\n<li>给关注节点 a 的父节点 b 添加一个黑色，这个时候节点 b 就变成了“红 - 黑”或者“黑 - 黑”；</li>\n<li>关注节点从 a 变成其父节点 b；</li>\n<li>继续从四种情况中选择符合的规则来调整。</li>\n</ol>\n</li>\n<li><p>如果关注节点是 a，它的兄弟节点 c 是黑色，c 的左子节点 d 是红色，c 的右子节点 e 是黑色</p>\n<p><img src=\"/article/删除二次调整CASE 3.jpg\"><span class=\"image-caption\">删除二次调整CASE 3</span></p>\n<ol>\n<li>围绕关注节点 a 的兄弟节点 c 右旋；</li>\n<li>节点 c 和节点 d 交换颜色；</li>\n<li>关注节点不变；</li>\n<li>跳转到 CASE 4，继续调整。</li>\n</ol>\n</li>\n<li><p>如果关注节点 a 的兄弟节点 c 是黑色的，并且 c 的右子节点是红色的</p>\n<p><img src=\"/article/删除二次调整CASE 4.jpg\"><span class=\"image-caption\">删除二次调整CASE 4</span></p>\n<ol>\n<li>围绕关注节点 a 的父节点 b 左旋；</li>\n<li>将关注节点 a 的兄弟节点 c 的颜色，跟关注节点 a 的父节点 b 设置成相同的颜色；</li>\n<li>将关注节点 a 的父节点 b 的颜色设置为黑色；</li>\n<li>从关注节点 a 中去掉一个黑色，节点 a 就变成了单纯的红色或者黑色；</li>\n<li>将关注节点 a 的叔叔节点 e 设置为黑色；调整结束。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"递归树\"><a href=\"#递归树\" class=\"headerlink\" title=\"递归树\"></a>递归树</h2><p><strong>如何用递归树，来分析递归代码的时间复杂度</strong></p>\n<blockquote>\n<img src=\"/article/undefined/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"归并排序递归树\">\n<p>归并排序递归树时间复杂度</p>\n<p>因为每次分解都是一分为二，所以代价很低，把时间上的消耗记作常量 1。</p>\n<p>归并算法中比较耗时的是归并操作，也就是把两个子数组合并为大数组。从图中可以看出，每一层归并操作消耗的时间总和是一样的，跟要排序的数据规模有关。把每一层归并操作消耗的时间记作 n。</p>\n<p>只需要知道这棵树的高度 h，用高度 h 乘以每一层的时间消耗 n，就可以得到总的时间复杂度 O(n * h)</p>\n<p>归并排序递归树是一棵满二叉树。满二叉树的高度大约是 log<sub>2</sub>n，所以，<strong>归并排序递归实现的时间复杂度就是 O(nlogn)</strong></p>\n</blockquote>\n<h3 id=\"实战一：分析快速排序的时间复杂度\"><a href=\"#实战一：分析快速排序的时间复杂度\" class=\"headerlink\" title=\"实战一：分析快速排序的时间复杂度\"></a>实战一：分析快速排序的时间复杂度</h3><blockquote>\n<p>快速排序在最好情况下，每次分区都能一分为二，用递推公式 T(n)=2T(n/2)+n，很容易就能推导出时间复杂度是 O(nlogn)。但是，不可能每次分区都正好一分为二。</p>\n<p>假设平均情况下，每次分区之后，两个分区的大小比例为 1:k。当 k=9 时，如果用递推公式的方法来求解时间复杂度的话，递推公式就写成 T(n)=T(n/10)+T(9n/10)+n。</p>\n</blockquote>\n<p><strong>用递归树来分析快速排序的平均情况时间复杂度</strong></p>\n<img src=\"/article/undefined/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"快速排序递归树\">\n<p>快速排序的过程中，每次分区都要遍历待分区区间的所有数据，所以，每一层分区操作所遍历的数据的个数之和就是 n。我们现在只要求出递归树的高度 h，这个快排过程遍历的数据个数就是 h <em> n ，也就是说，时间复杂度就是 O(h </em> n)。</p>\n<p>因为每次分区并不是均匀地一分为二，所以递归树并不是满二叉树。</p>\n<blockquote>\n<p>快速排序结束的条件就是待排序的小区间，大小为 1，也就是说叶子节点里的数据规模是 1。从根节点 n 到叶子节点 1，递归树中最短的一个路径每次都乘以 1/10，最长的一个路径每次都乘以 9/10。通过计算可以得到，从根节点到叶子节点的最短路径是 log<sub>10</sub>n，最长的路径是 log<sub>10/9</sub>n</p>\n<img src=\"/article/undefined/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E9%80%92%E5%BD%92%E6%A0%91%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6.jpg\" class title=\"快速排序递归树路径长度\">\n</blockquote>\n<p>所以，遍历数据的个数总和就介于 nlog<sub>10</sub>n 和 nlog<sub>10/9</sub>n 之间</p>\n<p>当分区大小比例是 1:9 时，快速排序的时间复杂度仍然是 O(nlogn)</p>\n<p>对于 k 等于 9，99，甚至是 999，9999……，只要 k 的值不随 n 变化，是一个事先确定的常量，那快排的时间复杂度就是 O(nlogn)。所以，从概率论的角度来说，快排的平均时间复杂度就是 O(nlogn)。</p>\n<h3 id=\"实战二：分析斐波那契数列的时间复杂度\"><a href=\"#实战二：分析斐波那契数列的时间复杂度\" class=\"headerlink\" title=\"实战二：分析斐波那契数列的时间复杂度\"></a>实战二：分析斐波那契数列的时间复杂度</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">return</span> f(n-<span class=\"hljs-number\">1</span>) + f(n-<span class=\"hljs-number\">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/undefined/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"斐波那契数列递归树\">\n<blockquote>\n<p>斐波那契数列递归树的高度</p>\n<p>f(n) 分解为 f(n−1) 和 f(n−2)，每次数据规模都是 −1 或者 −2，叶子节点的数据规模是 1 或者 2。所以，从根节点走到叶子节点，每条路径是长短不一的。如果每次都是 −1，那最长路径大约就是 n；如果每次都是 −2，那最短路径大约就是 n/2。</p>\n<p>每次分解之后的合并操作只需要一次加法运算，把这次加法运算的时间消耗记作 1。所以，从上往下，第一层的总时间消耗是 1，第二层的总时间消耗是 2，第三层的总时间消耗就是 2<sup>2</sup>。依次类推，第 k 层的时间消耗就是 2<sup>k−1</sup>，那整个算法的总的时间消耗就是每一层时间消耗之和。</p>\n<p>如果路径长度都为 n，那这个总和就是 2<sup>n</sup>−1。</p>\n<p>如果路径长度都是 n/2 ，那整个算法的总的时间消耗就是 2<sup>n/2</sup>−1。</p>\n</blockquote>\n<p>算法的时间复杂度就介于 O(2<sup>n</sup>) 和 O(2<sup>n/2</sup>) 之间</p>\n<h3 id=\"实战三：分析全排列的时间复杂度\"><a href=\"#实战三：分析全排列的时间复杂度\" class=\"headerlink\" title=\"实战三：分析全排列的时间复杂度\"></a>实战三：分析全排列的时间复杂度</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">1, 2, 3<br>1, 3, 2<br>2, 1, 3<br>2, 3, 1<br>3, 1, 2<br>3, 2, 1<br></code></pre></td></tr></table></figure>\n<p>如果确定了最后一位数据，那就变成了求解剩下 n−1 个数据的排列问题。而最后一位数据可以是 n 个数据中的任意一个，因此它的取值就有 n 种情况。所以，“n 个数据的排列”问题，就可以分解成 n 个“n−1 个数据的排列”的子问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">假设数组中存储的是1，2， 3...n。<br>        <br>f(1,2,...n) = &#123;最后一位是1, f(n-1)&#125; + &#123;最后一位是2, f(n-1)&#125; +...+&#123;最后一位是n, f(n-1)&#125;。<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 调用方式：</span><br><span class=\"hljs-comment\">// int[]a = a=&#123;1, 2, 3, 4&#125;; printPermutations(a, 4, 4);</span><br><span class=\"hljs-comment\">// k表示要处理的子数组的数据个数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printPermutations</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] data, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> k)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">1</span>) &#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) &#123;<br>      System.out.print(data[i] + <span class=\"hljs-string\">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>  &#125;<br><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; k; ++i) &#123;<br>    <span class=\"hljs-keyword\">int</span> tmp = data[i];<br>    data[i] = data[k-<span class=\"hljs-number\">1</span>];<br>    data[k-<span class=\"hljs-number\">1</span>] = tmp;<br><br>    printPermutations(data, n, k - <span class=\"hljs-number\">1</span>);<br><br>    tmp = data[i];<br>    data[i] = data[k-<span class=\"hljs-number\">1</span>];<br>    data[k-<span class=\"hljs-number\">1</span>] = tmp;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/undefined/%E5%85%A8%E6%8E%92%E5%88%97%E9%80%92%E5%BD%92%E6%A0%91.jpg\" class title=\"全排列递归树\">\n<p>第一层分解有 n 次交换操作，第二层有 n 个节点，每个节点分解需要 n−1 次交换，所以第二层总的交换次数是 n <em> (n−1)。第三层有 n </em> (n−1) 个节点，每个节点分解需要 n−2 次交换，所以第三层总的交换次数是 n <em> (n−1) </em> (n−2)。</p>\n<p>以此类推，第 k 层总的交换次数就是 n <em> (n−1) </em> (n−2) <em> … </em> (n−k+1)。最后一层的交换次数就是 n <em> (n−1) </em> (n−2) <em> … </em> 2 * 1。每一层的交换次数之和就是总的交换次数</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">n + n*(n-1) + n*(n-1)*(n-2) +... + n*(n-1)*(n-2)*...*2*1<br></code></pre></td></tr></table></figure>\n<p>最后一个数，n <em> (n−1) </em> (n−2) <em> … </em> 2 <em> 1 等于 n!，而前面的 n−1 个数都小于最后一个数，所以，总和肯定小于 n </em> n!，也就是说，<strong>全排列的递归算法的时间复杂度大于 O(n!)，小于 O(n * n!)</strong></p>\n<h2 id=\"“堆”（Heap）\"><a href=\"#“堆”（Heap）\" class=\"headerlink\" title=\"“堆”（Heap）\"></a>“堆”（Heap）</h2><p><strong>堆排序是一种原地的、时间复杂度为 O(nlogn) 的排序算法</strong></p>\n<p><strong>堆排序不是稳定的排序算法</strong></p>\n<p>堆满足的两点要求：</p>\n<ol>\n<li>堆是一个完全二叉树；</li>\n<li>堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。</li>\n</ol>\n<h3 id=\"如何实现一个堆？\"><a href=\"#如何实现一个堆？\" class=\"headerlink\" title=\"如何实现一个堆？\"></a>如何实现一个堆？</h3><p>完全二叉树比较适合用数组来存储。用数组来存储完全二叉树是非常节省存储空间的。</p>\n<img src=\"/article/undefined/%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E5%A0%86.jpg\" class title=\"数组存储堆\">\n<p>数组中下标为 i 的节点的左子节点，就是下标为 i <em> 2 的节点，右子节点就是下标为 i </em> 2 + 1 的节点，父节点就是下标为 i/2 的节点。</p>\n<p><strong>堆化（heapify）</strong></p>\n<p>堆化有两种，从下往上和从上往下</p>\n<ol>\n<li><p>从下往上的堆化方法</p>\n<img src=\"/article/undefined/%E5%BE%80%E5%A0%86%E4%B8%AD%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0.jpg\" class title=\"往堆中插入一个元素\">\n<p>让新插入的节点与父节点对比大小。如果不满足子节点小于等于父节点的大小关系，我们就互换两个节点。一直重复这个过程，直到父子节点之间满足堆的大小关系</p>\n<img src=\"/article/undefined/%E4%BB%8E%E4%B8%8B%E5%BE%80%E4%B8%8A%E7%9A%84%E5%A0%86%E5%8C%96%E6%96%B9%E6%B3%95.jpg\" class title=\"从下往上的堆化方法\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Heap</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] a; <span class=\"hljs-comment\">// 数组，从下标1开始存储数据</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> n;  <span class=\"hljs-comment\">// 堆可以存储的最大数据个数</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> count; <span class=\"hljs-comment\">// 堆中已经存储的数据个数</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Heap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>    a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[capacity + <span class=\"hljs-number\">1</span>];<br>    n = capacity;<br>    count = <span class=\"hljs-number\">0</span>;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> data)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (count &gt;= n) <span class=\"hljs-keyword\">return</span>; <span class=\"hljs-comment\">// 堆满了</span><br>    ++count;<br>    a[count] = data;<br>    <span class=\"hljs-keyword\">int</span> i = count;<br>    <span class=\"hljs-keyword\">while</span> (i/<span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">0</span> &amp;&amp; a[i] &gt; a[i/<span class=\"hljs-number\">2</span>]) &#123; <span class=\"hljs-comment\">// 自下往上堆化</span><br>      swap(a, i, i/<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// swap()函数作用：交换下标为i和i/2的两个元素</span><br>      i = i/<span class=\"hljs-number\">2</span>;<br>    &#125;<br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>从上往下的堆化方法</p>\n<p>删除堆顶元素之后，需要把第二大的元素放到堆顶，那第二大元素肯定会出现在左右子节点中。然后再迭代地删除第二大节点，以此类推，直到叶子节点被删除。</p>\n<p>把最后一个节点放到堆顶，然后利用同样的父子节点对比方法。对于不满足父子节点大小关系的，互换两个节点，并且重复进行这个过程，直到父子节点之间满足大小关系为止。这就是<strong>从上往下的堆化方法</strong>。</p>\n<img src=\"/article/undefined/%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E7%9A%84%E5%A0%86%E5%8C%96%E6%96%B9%E6%B3%95.jpg\" class title=\"从上往下的堆化方法\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">removeMax</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 堆中没有数据</span><br>  a[<span class=\"hljs-number\">1</span>] = a[count];<br>  --count;<br>  heapify(a, count, <span class=\"hljs-number\">1</span>);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">heapify</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> i)</span> </span>&#123; <span class=\"hljs-comment\">// 自上往下堆化</span><br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) &#123;<br>    <span class=\"hljs-keyword\">int</span> maxPos = i;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span> &lt;= n &amp;&amp; a[i] &lt; a[i*<span class=\"hljs-number\">2</span>]) maxPos = i*<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span> &lt;= n &amp;&amp; a[maxPos] &lt; a[i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>]) maxPos = i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (maxPos == i) <span class=\"hljs-keyword\">break</span>;<br>    swap(a, i, maxPos);<br>    i = maxPos;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>一个包含 n 个节点的完全二叉树，树的高度不会超过 log<sub>2</sub>n。堆化的过程是顺着节点所在路径比较交换的，所以堆化的时间复杂度跟树的高度成正比，也就是 O(logn)。插入数据和删除堆顶元素的主要逻辑就是堆化，所以，往堆中插入一个元素和删除堆顶元素的时间复杂度都是 O(logn)。</p>\n<h3 id=\"如何基于堆实现排序？\"><a href=\"#如何基于堆实现排序？\" class=\"headerlink\" title=\"如何基于堆实现排序？\"></a>如何基于堆实现排序？</h3><ol>\n<li><p>建堆</p>\n<p>将数组原地建成一个堆。所谓“原地”就是，不借助另一个数组，就在原数组上操作。</p>\n<ol>\n<li><p>第一种是在堆中插入一个元素的思路。尽管数组中包含 n 个数据，假设，起初堆中只包含一个数据，就是下标为 1 的数据。然后，调用插入操作，将下标从 2 到 n 的数据依次插入到堆中。</p>\n</li>\n<li><p>第二种实现思路是从后往前处理数组，并且每个数据都是从上往下堆化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = n/<span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">1</span>; --i) &#123;<br>    heapify(a, n, i);<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">heapify</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> i)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) &#123;<br>    <span class=\"hljs-keyword\">int</span> maxPos = i;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span> &lt;= n &amp;&amp; a[i] &lt; a[i*<span class=\"hljs-number\">2</span>]) maxPos = i*<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">if</span> (i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span> &lt;= n &amp;&amp; a[maxPos] &lt; a[i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>]) maxPos = i*<span class=\"hljs-number\">2</span>+<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (maxPos == i) <span class=\"hljs-keyword\">break</span>;<br>    swap(a, i, maxPos);<br>    i = maxPos;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>对下标从 n/2 开始到 1 的数据进行堆化，下标是 n/2+1 到 n 的节点是叶子节点，我们不需要堆化</p>\n<p><strong>对于完全二叉树来说，下标从 n/2+1 到 n 的节点都是叶子节点</strong></p>\n</li>\n</ol>\n<blockquote>\n<p>建堆操作的时间复杂度:</p>\n<p>因为叶子节点不需要堆化，所以需要堆化的节点从倒数第二层开始。每个节点堆化的过程中，需要比较和交换的节点个数，跟这个节点的高度 k 成正比。</p>\n<img src=\"/article/undefined/%E5%BB%BA%E5%A0%86%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.jpg\" class title=\"建堆的时间复杂度\">\n<img src=\"/article/undefined/%E6%AF%8F%E4%B8%AA%E9%9D%9E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E9%AB%98%E5%BA%A6%E6%B1%82%E5%92%8C.jpg\" class title=\"每个非叶子节点的高度求和\">\n</blockquote>\n<p>因为 h=log<sub>2</sub>n，代入公式 S，就能得到 S=O(n)，所以，建堆的时间复杂度就是 O(n)。</p>\n</li>\n<li><p>排序</p>\n<p>建堆结束之后，数组中的数据已经是按照大顶堆的特性来组织的。数组中的第一个元素就是堆顶，也就是最大的元素。把它跟最后一个元素交换，那最大元素就放到了下标为 n 的位置。</p>\n<p>然后再通过堆化的方法，将剩下的 n−1 个元素重新构建成堆。堆化完成之后，我们再取堆顶的元素，放到下标是 n−1 的位置，一直重复这个过程，直到最后堆中只剩下标为 1 的一个元素，排序工作就完成了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// n表示数据的个数，数组a中的数据从下标1到n的位置。</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] a, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;<br>  buildHeap(a, n);<br>  <span class=\"hljs-keyword\">int</span> k = n;<br>  <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span>) &#123;<br>    swap(a, <span class=\"hljs-number\">1</span>, k);<br>    --k;<br>    heapify(a, k, <span class=\"hljs-number\">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>堆排序的时间复杂度:</p>\n<p>整个堆排序的过程，都只需要极个别临时存储空间，所以堆排序是原地排序算法。堆排序包括建堆和排序两个操作，建堆过程的时间复杂度是 O(n)，排序过程的时间复杂度是 O(nlogn)，所以，堆排序整体的时间复杂度是 O(nlogn)。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<blockquote>\n<p><strong>问题：实际开发中，为什么快速排序要比堆排序性能好？</strong></p>\n<ol>\n<li><p>堆排序数据访问的方式没有快速排序友好</p>\n</li>\n<li><p>对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序</p>\n<p>对于基于比较的排序算法来说，整个排序过程就是由两个基本的操作组成的，比较和交换（或移动）。快速排序数据交换的次数不会比逆序度多。</p>\n<p>但是堆排序的第一步是建堆，建堆的过程会打乱数据原有的相对先后顺序，导致原数据的有序度降低。</p>\n</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"堆的应用\"><a href=\"#堆的应用\" class=\"headerlink\" title=\"堆的应用\"></a>堆的应用</h3><ol>\n<li><p>优先级队列</p>\n<p>在优先级队列中，数据的出队顺序不是先进先出，而是按照优先级来，优先级最高的，最先出队。</p>\n<p>往优先级队列中插入一个元素，就相当于往堆中插入一个元素；从优先级队列中取出优先级最高的元素，就相当于取出堆顶元素。</p>\n<blockquote>\n<ol>\n<li><p>合并有序小文件</p>\n<p>假设有 100 个小文件，每个文件的大小是 100MB，每个文件中存储的都是有序的字符串。希望将这些 100 个小文件合并成一个有序的大文件。</p>\n<blockquote>\n<p>将从小文件中取出来的字符串放入到小顶堆中，那堆顶的元素，也就是优先级队列队首的元素，就是最小的字符串。将这个字符串放入到大文件中，并将其从堆中删除。然后再从小文件中取出下一个字符串，放入到堆中。循环这个过程，就可以将 100 个小文件中的数据依次放入到大文件中。</p>\n</blockquote>\n</li>\n<li><p>高性能定时器</p>\n<p>假设有一个定时器，定时器中维护了很多定时任务，每个任务都设定了一个要触发执行的时间点。定时器每过一个很小的单位时间（比如 1 秒），就扫描一遍任务，看是否有任务到达设定的执行时间。如果到达了，就拿出来执行。</p>\n<img src=\"/article/undefined/%E9%AB%98%E6%80%A7%E8%83%BD%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E4%BE%8B.jpg\" class title=\"高性能定时器实例\">\n<p>但是，这样每过 1 秒就扫描一遍任务列表的做法比较低效，主要原因有两点：第一，任务的约定执行时间离当前时间可能还有很久，这样前面很多次扫描其实都是徒劳的；第二，每次都要扫描整个任务列表，如果任务列表很大的话，势必会比较耗时。</p>\n<blockquote>\n<p>按照任务设定的执行时间，将这些任务存储在优先级队列中，队列首部（也就是小顶堆的堆顶）存储的是最先执行的任务。</p>\n<p>定时器拿队首任务的执行时间点，与当前时间点相减，得到一个时间间隔 T。</p>\n<p>这个时间间隔 T 就是，从当前时间开始，需要等待多久，才会有第一个任务需要被执行。</p>\n<p>定时器就可以设定在 T 秒之后，再来执行任务。从当前时间点到（T-1）秒这段时间里，定时器都不需要做任何事情。</p>\n<p>当 T 秒时间过去之后，定时器取优先级队列中队首的任务执行。然后再计算新的队首任务的执行时间点与当前时间点的差值，把这个值作为定时器执行下一个任务需要等待的时间。这样，定时器既不用间隔 1 秒就轮询一次，也不用遍历整个任务列表，性能也就提高了。</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>利用堆求 Top K</p>\n<blockquote>\n<ol>\n<li><p>针对静态数据集合：数据集合事先确定，不会再变</p>\n<blockquote>\n<p>维护一个大小为 K 的小顶堆，顺序遍历数组，从数组中取出数据与堆顶元素比较。如果比堆顶元素大，我们就把堆顶元素删除，并且将这个元素插入到堆中；如果比堆顶元素小，则不做处理，继续遍历数组。这样等数组中的数据都遍历完之后，堆中的数据就是前 K 大数据了。</p>\n</blockquote>\n<p>遍历数组需要 O(n) 的时间复杂度，一次堆化操作需要 O(logK) 的时间复杂度，所以最坏情况下，n 个元素都入堆一次，时间复杂度就是 O(nlogK)。</p>\n</li>\n<li><p>针对动态数据集合：数据集合事先并不确定，有数据动态地加入到集合中</p>\n<p>一个数据集合中有两个操作，一个是添加数据，另一个询问当前的前 K 大数据。如果每次询问前 K 大数据，我们都基于当前的数据重新计算的话，那时间复杂度就是 O(nlogK)，n 表示当前的数据的大小。</p>\n<blockquote>\n<p>一直维护一个 K 大小的小顶堆，当有数据被添加到集合中时，我们就拿它与堆顶的元素对比。如果比堆顶元素大，我们就把堆顶元素删除，并且将这个元素插入到堆中；如果比堆顶元素小，则不做处理。这样，无论任何时候需要查询当前的前 K 大数据，我们都可以立刻返回。</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>利用堆求中位数</p>\n<blockquote>\n<p>维护两个堆，一个大顶堆，一个小顶堆。大顶堆中存储前半部分数据，小顶堆中存储后半部分数据，且小顶堆中的数据都大于大顶堆中的数据。</p>\n<p>如果有 n 个数据，n 是偶数，我们从小到大排序，那前 n/2 个数据存储在大顶堆中，后 n/2 个数据存储在小顶堆中。这样，大顶堆中的堆顶元素就是我们要找的中位数。如果 n 是奇数，情况是类似的，大顶堆就存储 n/2+1 个数据，小顶堆中就存储 n/2 个数据。</p>\n<p>如果新加入的数据小于等于大顶堆的堆顶元素，我们就将这个新数据插入到大顶堆；否则，我们就将这个新数据插入到小顶堆。</p>\n<p>可能出现，两个堆中的数据个数不符合前面约定的情况:从一个堆中不停地将堆顶元素移动到另一个堆，通过这样的调整，来让两个堆中的数据满足上面的约定。</p>\n<img src=\"/article/undefined/%E4%B8%A4%E4%B8%AA%E5%A0%86%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%AA%E6%95%B0%E4%B8%8D%E7%AC%A6%E5%90%88.jpg\" class title=\"两个堆中的数据个数不符合\">\n</blockquote>\n</li>\n</ol>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"树","path":"api/categories/树.json"}],"tags":[{"name":"数据结构与算法,树","path":"api/tags/数据结构与算法,树.json"}]}