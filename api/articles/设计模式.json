{"title":"设计模式","slug":"设计模式","date":"2022-01-07T12:43:29.000Z","updated":"2022-09-06T03:27:01.714Z","comments":true,"path":"api/articles/设计模式.json","realPath":null,"excerpt":null,"covers":["/article/41682/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.jpg","/article/41682/the-relationship-between-design-patterns.jpg"],"cover":"/images/theme/coverphoto/设计模式.jpg","content":"<blockquote>\n<p>Thank the flame for its light, but do not forget the lampholder<br>standing in the shade with constancy of patience.</p>\n<p>谢谢火焰给你光明，但是不要忘了那执灯的人，他是坚忍地站在黑暗当中呢。</p>\n</blockquote>\n<img src=\"/article/41682/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.jpg\" class title=\"点击查看源网页\">\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n<p><strong>什么是 GOF?</strong></p>\n<p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 的书，该书首次提到了软件开发中设计模式的概念。</p>\n<p>四位作者合称 <strong>GOF（四人帮，全拼 Gang of Four）</strong>。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p>\n<ul>\n<li>对接口编程而不是对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<p>模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p>\n<p><strong>创建型模式</strong>:这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>\n<blockquote>\n<ul>\n<li>工厂模式（Factory Pattern）</li>\n<li>抽象工厂模式（Abstract Factory Pattern）</li>\n<li>单例模式（Singleton Pattern）</li>\n<li>建造者模式（Builder Pattern）</li>\n<li>原型模式（Prototype Pattern）</li>\n</ul>\n</blockquote>\n<p><strong>结构型模式</strong>:这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>\n<blockquote>\n<ul>\n<li>适配器模式（Adapter Pattern）</li>\n<li>桥接模式（Bridge Pattern）</li>\n<li>过滤器模式（Filter、Criteria Pattern）</li>\n<li>组合模式（Composite Pattern）</li>\n<li>装饰器模式（Decorator Pattern）</li>\n<li>外观模式（Facade Pattern）</li>\n<li>享元模式（Flyweight Pattern）</li>\n<li>代理模式（Proxy Pattern）</li>\n</ul>\n</blockquote>\n<p><strong>行为型模式</strong>:这些设计模式特别关注对象之间的通信。</p>\n<blockquote>\n<ul>\n<li>责任链模式（Chain of Responsibility Pattern）</li>\n<li>命令模式（Command Pattern）</li>\n<li>解释器模式（Interpreter Pattern）</li>\n<li>迭代器模式（Iterator Pattern）</li>\n<li>中介者模式（Mediator Pattern）</li>\n<li>备忘录模式（Memento Pattern）</li>\n<li>观察者模式（Observer Pattern）</li>\n<li>状态模式（State Pattern）</li>\n<li>空对象模式（Null Object Pattern）</li>\n<li>策略模式（Strategy Pattern）</li>\n<li>模板模式（Template Pattern）</li>\n<li>访问者模式（Visitor Pattern）</li>\n</ul>\n</blockquote>\n<img src=\"/article/41682/the-relationship-between-design-patterns.jpg\" class title=\"设计模式之间的关系\">\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<p><strong>满足原则</strong></p>\n<ul>\n<li>开闭原则</li>\n<li>依赖倒转原则</li>\n<li>迪米特法则</li>\n</ul>\n<p><strong>实质</strong></p>\n<ol>\n<li>实例化对象不能new，用工厂方法代替</li>\n<li>将选择实现类，创建对象统一管理和控制，从而将调度这跟我们实现类解耦</li>\n</ol>\n<p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>\n<p><strong>主要解决：</strong>主要解决接口选择的问题。</p>\n<p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p>\n<p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p>\n<p><strong>关键代码：</strong>创建过程在其子类执行。</p>\n<p><strong>优点：</strong> </p>\n<ol>\n<li>一个调用者想创建一个对象，只要知道其名称就可以了。</li>\n<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li>\n<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>\n</ol>\n<p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p>\n<p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>\n<p><strong>实例</strong></p>\n<blockquote>\n<p>Car接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>TSL实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TSL</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br> <span class=\"hljs-meta\">@Override</span><br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span> </span>&#123;<br>     System.out.println(<span class=\"hljs-string\">&quot;TSL&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>WL实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WL</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;WL&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>CarFactory接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-comment\">//工厂方法模式</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarFactory</span> </span>&#123;<br>\t<span class=\"hljs-function\">Car <span class=\"hljs-title\">getCar</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>TSLFactory工厂实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TSLFactory</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CarFactory</span> </span>&#123;<br> <span class=\"hljs-meta\">@Override</span><br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Car <span class=\"hljs-title\">getCar</span><span class=\"hljs-params\">()</span> </span>&#123;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TSL();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p> WLFactory工厂实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WLFactory</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CarFactory</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Car <span class=\"hljs-title\">getCar</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> WL();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>Consumer实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//使用工厂创建</span><br>        Car car = <span class=\"hljs-keyword\">new</span> WLFactory().getCar();<br>        Car car1 = <span class=\"hljs-keyword\">new</span> TSLFactory().getCar();<br>        car.name();<br>        car1.name();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">WL<br>TSL<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例设计模式（Singleton Design Pattern）:一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。</p>\n<blockquote>\n<ol>\n<li>构造函数需要是 private 访问权限的，这样才能避免外部通过 new 创建实例；</li>\n<li>考虑对象创建时的线程安全问题；</li>\n<li>考虑是否支持延迟加载；</li>\n<li>考虑 getInstance() 性能是否高（是否加锁）。</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>饿汉式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton1</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton1 INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton1();<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton1</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton1 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不支持延迟加载</p>\n<p>线程安全</p>\n</li>\n<li><p>懒汉式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton2</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton2 INSTANCE;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton2</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> Singleton2 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (INSTANCE == <span class=\"hljs-keyword\">null</span>)&#123;<br>      INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton2();<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>支持延迟加载</p>\n<p>并发度低</p>\n</li>\n<li><p>双重检测</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton3</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> Singleton3 INSTANCE;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton3</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton3 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (INSTANCE == <span class=\"hljs-keyword\">null</span>)&#123;<br>      <span class=\"hljs-keyword\">synchronized</span> (Singleton3.class)&#123;<br>        <span class=\"hljs-keyword\">if</span> (INSTANCE == <span class=\"hljs-keyword\">null</span>)&#123;<br>          INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton3();<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>解决了懒汉式并发度低的问题</p>\n</li>\n<li><p>静态内部类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton4</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton4</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingletonStatic</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Singleton4 INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton4();<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton4 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> SingletonStatic.INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>既保证了线程安全，又能做到延迟加载</p>\n</li>\n<li><p>枚举</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Singleton5</span> </span>&#123;<br>  INSTANCE;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>保证了实例创建的线程安全性和实例的唯一性</p>\n</li>\n</ol>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>适配器模式的英文翻译是 Adapter Design Pattern。顾名思义，这个模式就是用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。</p>\n<p>ITarget 表示要转化成的接口定义。Adaptee 是一组不兼容 ITarget 接口定义的接口，Adaptor 将 Adaptee 转化成一组符合 ITarget 接口定义的接口。</p>\n<ol>\n<li><p>类适配器使用继承关系来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ITarget</span> </span>&#123; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span></span>; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span></span>; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptee</span> </span>&#123; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fa</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125; </span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fb</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125; </span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>&#125;<br>    <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Adaptee</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span> </span>&#123; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span> </span>&#123; <br>    <span class=\"hljs-keyword\">super</span>.fa(); <br>  &#125; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//...重新实现f2()... &#125; </span><br>    <span class=\"hljs-comment\">// 这里fc()不需要实现，直接继承自Adaptee，这是跟对象适配器最大的不同点</span><br> &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>对象适配器使用组合关系来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ITarget</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span></span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span></span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptee</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fa</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fb</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>&#125;<br>    <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> Adaptee adaptee;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Adaptor</span><span class=\"hljs-params\">(Adaptee adaptee)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.adaptee = adaptee;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    adaptee.fa(); <span class=\"hljs-comment\">//委托给Adaptee</span><br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">//...重新实现f2()...</span><br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    adaptee.fc();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>使用判断标准</strong>：一个是 Adaptee 接口的个数，另一个是 Adaptee 和 ITarget 的契合程度。</p>\n<ol>\n<li>如果 Adaptee 接口并不多，那两种实现方式都可以。</li>\n<li>如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都相同，那我们推荐使用类适配器，因为 Adaptor 复用父类 Adaptee 的接口，比起对象适配器的实现方式，Adaptor 的代码量要少一些。</li>\n<li>如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都不相同，那我们推荐使用对象适配器，因为组合结构相对于继承更加灵活。</li>\n</ol>\n","more":"<blockquote>\n<p>Thank the flame for its light, but do not forget the lampholder<br>standing in the shade with constancy of patience.</p>\n<p>谢谢火焰给你光明，但是不要忘了那执灯的人，他是坚忍地站在黑暗当中呢。</p>\n</blockquote>\n<img src=\"/article/41682/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.jpg\" class title=\"点击查看源网页\">\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\n<p><strong>什么是 GOF?</strong></p>\n<p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong> 的书，该书首次提到了软件开发中设计模式的概念。</p>\n<p>四位作者合称 <strong>GOF（四人帮，全拼 Gang of Four）</strong>。他们所提出的设计模式主要是基于以下的面向对象设计原则。</p>\n<ul>\n<li>对接口编程而不是对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<p>模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p>\n<p><strong>创建型模式</strong>:这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p>\n<blockquote>\n<ul>\n<li>工厂模式（Factory Pattern）</li>\n<li>抽象工厂模式（Abstract Factory Pattern）</li>\n<li>单例模式（Singleton Pattern）</li>\n<li>建造者模式（Builder Pattern）</li>\n<li>原型模式（Prototype Pattern）</li>\n</ul>\n</blockquote>\n<p><strong>结构型模式</strong>:这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p>\n<blockquote>\n<ul>\n<li>适配器模式（Adapter Pattern）</li>\n<li>桥接模式（Bridge Pattern）</li>\n<li>过滤器模式（Filter、Criteria Pattern）</li>\n<li>组合模式（Composite Pattern）</li>\n<li>装饰器模式（Decorator Pattern）</li>\n<li>外观模式（Facade Pattern）</li>\n<li>享元模式（Flyweight Pattern）</li>\n<li>代理模式（Proxy Pattern）</li>\n</ul>\n</blockquote>\n<p><strong>行为型模式</strong>:这些设计模式特别关注对象之间的通信。</p>\n<blockquote>\n<ul>\n<li>责任链模式（Chain of Responsibility Pattern）</li>\n<li>命令模式（Command Pattern）</li>\n<li>解释器模式（Interpreter Pattern）</li>\n<li>迭代器模式（Iterator Pattern）</li>\n<li>中介者模式（Mediator Pattern）</li>\n<li>备忘录模式（Memento Pattern）</li>\n<li>观察者模式（Observer Pattern）</li>\n<li>状态模式（State Pattern）</li>\n<li>空对象模式（Null Object Pattern）</li>\n<li>策略模式（Strategy Pattern）</li>\n<li>模板模式（Template Pattern）</li>\n<li>访问者模式（Visitor Pattern）</li>\n</ul>\n</blockquote>\n<img src=\"/article/41682/the-relationship-between-design-patterns.jpg\" class title=\"设计模式之间的关系\">\n<h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3><p><strong>1、开闭原则（Open Close Principle）</strong></p>\n<p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n<p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p>\n<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n<p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n<p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n<p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n<p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<p><strong>满足原则</strong></p>\n<ul>\n<li>开闭原则</li>\n<li>依赖倒转原则</li>\n<li>迪米特法则</li>\n</ul>\n<p><strong>实质</strong></p>\n<ol>\n<li>实例化对象不能new，用工厂方法代替</li>\n<li>将选择实现类，创建对象统一管理和控制，从而将调度这跟我们实现类解耦</li>\n</ol>\n<p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>\n<p><strong>主要解决：</strong>主要解决接口选择的问题。</p>\n<p><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。</p>\n<p><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。</p>\n<p><strong>关键代码：</strong>创建过程在其子类执行。</p>\n<p><strong>优点：</strong> </p>\n<ol>\n<li>一个调用者想创建一个对象，只要知道其名称就可以了。</li>\n<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li>\n<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>\n</ol>\n<p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p>\n<p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>\n<p><strong>实例</strong></p>\n<blockquote>\n<p>Car接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>TSL实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TSL</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br> <span class=\"hljs-meta\">@Override</span><br> <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span> </span>&#123;<br>     System.out.println(<span class=\"hljs-string\">&quot;TSL&quot;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>WL实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WL</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Car</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;WL&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>CarFactory接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-comment\">//工厂方法模式</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">CarFactory</span> </span>&#123;<br>\t<span class=\"hljs-function\">Car <span class=\"hljs-title\">getCar</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>TSLFactory工厂实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TSLFactory</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CarFactory</span> </span>&#123;<br> <span class=\"hljs-meta\">@Override</span><br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Car <span class=\"hljs-title\">getCar</span><span class=\"hljs-params\">()</span> </span>&#123;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> TSL();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p> WLFactory工厂实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WLFactory</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">CarFactory</span></span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Car <span class=\"hljs-title\">getCar</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> WL();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>Consumer实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bobo.factory.method;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Consumer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        <span class=\"hljs-comment\">//使用工厂创建</span><br>        Car car = <span class=\"hljs-keyword\">new</span> WLFactory().getCar();<br>        Car car1 = <span class=\"hljs-keyword\">new</span> TSLFactory().getCar();<br>        car.name();<br>        car1.name();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">WL<br>TSL<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例设计模式（Singleton Design Pattern）:一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。</p>\n<blockquote>\n<ol>\n<li>构造函数需要是 private 访问权限的，这样才能避免外部通过 new 创建实例；</li>\n<li>考虑对象创建时的线程安全问题；</li>\n<li>考虑是否支持延迟加载；</li>\n<li>考虑 getInstance() 性能是否高（是否加锁）。</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>饿汉式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton1</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton1 INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton1();<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton1</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton1 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不支持延迟加载</p>\n<p>线程安全</p>\n</li>\n<li><p>懒汉式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton2</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton2 INSTANCE;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton2</span><span class=\"hljs-params\">()</span></span>&#123;&#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> Singleton2 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (INSTANCE == <span class=\"hljs-keyword\">null</span>)&#123;<br>      INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton2();<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>支持延迟加载</p>\n<p>并发度低</p>\n</li>\n<li><p>双重检测</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton3</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> Singleton3 INSTANCE;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton3</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton3 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (INSTANCE == <span class=\"hljs-keyword\">null</span>)&#123;<br>      <span class=\"hljs-keyword\">synchronized</span> (Singleton3.class)&#123;<br>        <span class=\"hljs-keyword\">if</span> (INSTANCE == <span class=\"hljs-keyword\">null</span>)&#123;<br>          INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton3();<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>解决了懒汉式并发度低的问题</p>\n</li>\n<li><p>静态内部类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton4</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Singleton4</span><span class=\"hljs-params\">()</span> </span>&#123;&#125;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SingletonStatic</span></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Singleton4 INSTANCE = <span class=\"hljs-keyword\">new</span> Singleton4();<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton4 <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> SingletonStatic.INSTANCE;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>既保证了线程安全，又能做到延迟加载</p>\n</li>\n<li><p>枚举</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Singleton5</span> </span>&#123;<br>  INSTANCE;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>保证了实例创建的线程安全性和实例的唯一性</p>\n</li>\n</ol>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>适配器模式的英文翻译是 Adapter Design Pattern。顾名思义，这个模式就是用来做适配的，它将不兼容的接口转换为可兼容的接口，让原本由于接口不兼容而不能一起工作的类可以一起工作。</p>\n<p>ITarget 表示要转化成的接口定义。Adaptee 是一组不兼容 ITarget 接口定义的接口，Adaptor 将 Adaptee 转化成一组符合 ITarget 接口定义的接口。</p>\n<ol>\n<li><p>类适配器使用继承关系来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ITarget</span> </span>&#123; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span></span>; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span></span>; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptee</span> </span>&#123; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fa</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125; </span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fb</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125; </span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>&#125;<br>    <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Adaptee</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span> </span>&#123; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span> </span>&#123; <br>    <span class=\"hljs-keyword\">super</span>.fa(); <br>  &#125; <br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//...重新实现f2()... &#125; </span><br>    <span class=\"hljs-comment\">// 这里fc()不需要实现，直接继承自Adaptee，这是跟对象适配器最大的不同点</span><br> &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>对象适配器使用组合关系来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ITarget</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span></span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span></span>;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptee</span> </span>&#123;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fa</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fb</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">//... &#125;</span><br>&#125;<br>    <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Adaptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> Adaptee adaptee;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Adaptor</span><span class=\"hljs-params\">(Adaptee adaptee)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.adaptee = adaptee;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    adaptee.fa(); <span class=\"hljs-comment\">//委托给Adaptee</span><br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">f2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-comment\">//...重新实现f2()...</span><br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fc</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    adaptee.fc();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>使用判断标准</strong>：一个是 Adaptee 接口的个数，另一个是 Adaptee 和 ITarget 的契合程度。</p>\n<ol>\n<li>如果 Adaptee 接口并不多，那两种实现方式都可以。</li>\n<li>如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都相同，那我们推荐使用类适配器，因为 Adaptor 复用父类 Adaptee 的接口，比起对象适配器的实现方式，Adaptor 的代码量要少一些。</li>\n<li>如果 Adaptee 接口很多，而且 Adaptee 和 ITarget 接口定义大部分都不相同，那我们推荐使用对象适配器，因为组合结构相对于继承更加灵活。</li>\n</ol>\n","categories":[{"name":"设计模式","path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","path":"api/tags/设计模式.json"}]}