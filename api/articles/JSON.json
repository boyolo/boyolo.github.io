{"title":"JSON","slug":"JSON","date":"2022-01-27T13:06:53.000Z","updated":"2022-02-07T08:21:03.235Z","comments":true,"path":"api/articles/JSON.json","realPath":null,"excerpt":null,"covers":null,"cover":"/images/theme/coverphoto/JSON.jpeg","content":"<blockquote>\n<p>Let life be beautiful like summer flowers and death like autumn leaves.</p>\n<p>使生如夏花之绚烂，死如秋叶之静美。　　</p>\n</blockquote>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p>\n<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>\n<p>JSON 比 XML 更小、更快，更易解析。</p>\n<p>JSON 是轻量级的文本数据交换格式</p>\n<p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p>\n<p>JSON 具有自我描述性，更易理解</p>\n<h3 id=\"JSON-语法\"><a href=\"#JSON-语法\" class=\"headerlink\" title=\"JSON 语法\"></a>JSON 语法</h3><p><strong>语法规则</strong></p>\n<p>JSON 语法是 JavaScript 对象表示语法的子集。</p>\n<ul>\n<li><p>数据在名称/值对中</p>\n</li>\n<li><p>数据由逗号分隔</p>\n</li>\n<li><p>大括号 <strong>{}</strong> 保存对象</p>\n</li>\n<li><p>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</p>\n<p>数组可包含多个对象：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">[<br>    &#123; key1 : value1<span class=\"hljs-number\">-1</span> , key2:value1<span class=\"hljs-number\">-2</span> &#125;, <br>    &#123; key1 : value2<span class=\"hljs-number\">-1</span> , key2:value2<span class=\"hljs-number\">-2</span> &#125;, <br>    &#123; key1 : value3<span class=\"hljs-number\">-1</span> , key2:value3<span class=\"hljs-number\">-2</span> &#125;, <br>    ...<br>    &#123; key1 : valueN<span class=\"hljs-number\">-1</span> , key2:valueN<span class=\"hljs-number\">-2</span> &#125;, <br>]<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><strong>JSON 名称/值对</strong></p>\n<p>JSON 数据的书写格式是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">key : value<br></code></pre></td></tr></table></figure>\n<p>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值</p>\n<p>JSON 值可以是：</p>\n<ul>\n<li>数字（整数或浮点数）</li>\n<li>字符串（在双引号中）</li>\n<li>逻辑值（true 或 false）</li>\n<li>数组（在中括号中）</li>\n<li>对象（在大括号中）</li>\n<li>null</li>\n</ul>\n<hr>\n<p><strong>JSON 文件</strong></p>\n<ul>\n<li>JSON 文件的文件类型是 <strong>.json</strong></li>\n<li>JSON 文本的 MIME 类型是 <strong>application/json</strong></li>\n</ul>\n<h3 id=\"Json方法\"><a href=\"#Json方法\" class=\"headerlink\" title=\"Json方法\"></a>Json方法</h3><p>JSON 通常用于与服务端交换数据。</p>\n<p>在接收服务器数据时一般是字符串。</p>\n<h4 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a><strong>JSON.parse()</strong></h4><p>将一个 JSON 字符串转换为 JavaScript 对象。</p>\n<p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">JSON.parse(text[, reviver])<br></code></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><strong>text:</strong>必需， 一个有效的 JSON 字符串。</li>\n<li><strong>reviver:</strong> 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。</li>\n</ul>\n<p><strong>异常</strong></p>\n<p>解析数据:</p>\n<p>JSON 不能存储 Date 对象。如果你需要存储 Date 对象，需要将其转换为字符串。之后再将字符串转换为 Date 对象。</p>\n<p><strong>解析函数</strong></p>\n<p>JSON 不允许包含函数，但你可以将函数作为字符串存储，之后再将字符串转换为函数。</p>\n<h4 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify()\"></a><strong>JSON.stringify()</strong></h4><p>用于将 JavaScript 值转换为 JSON 字符串。</p>\n<p>我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">JSON.stringify(value[, replacer[, space]])<br></code></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><p>value:</p>\n<p>必需， 要转换的 JavaScript 值（通常为对象或数组）。</p>\n</li>\n<li><p>replacer:</p>\n<p>可选。用于转换结果的函数或数组。</p>\n<p>如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：””。</p>\n<p>如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。</p>\n</li>\n<li><p>space:</p>\n<p>可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\\t。</p>\n</li>\n</ul>\n<p><strong>解析数据</strong></p>\n<p>JSON 不能存储 Date 对象。</p>\n<p>JSON.stringify() 会将所有日期转换为字符串。</p>\n<p><strong>解析函数</strong></p>\n<p>JSON 不允许包含函数，JSON.stringify() 会删除 JavaScript 对象的函数，包括 key 和 value。</p>\n<h4 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a>eval()</h4><p>由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象。</p>\n<p>eval() 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> obj = eval (<span class=\"hljs-string\">&quot;(&quot;</span> + txt + <span class=\"hljs-string\">&quot;)&quot;</span>);<br></code></pre></td></tr></table></figure>\n<h3 id=\"JSON-对象\"><a href=\"#JSON-对象\" class=\"headerlink\" title=\"JSON 对象\"></a>JSON 对象</h3><p><strong>对象语法</strong></p>\n<p>JSON 对象使用在大括号({})中书写。</p>\n<p>对象可以包含多个 <strong>key/value（键/值）</strong>对。</p>\n<p>key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p>\n<p>key 和 value 中使用冒号(:)分割。</p>\n<p>每个 key/value 对使用逗号(,)分割。</p>\n<p><strong>访问对象值</strong></p>\n<p>可以使用点号 . 来访问对象的值；</p>\n<p>也可以使用中括号 [] 来访问对象的值。</p>\n<p><strong>嵌套 JSON 对象</strong></p>\n<p>JSON 对象中可以包含另外一个 JSON 对象</p>\n<p><strong>修改值</strong></p>\n<p>可以使用点号 . 来修改 JSON 对象的值</p>\n<p>可以使用中括号 [] 来修改 JSON 对象的值</p>\n<p><strong>删除对象属性</strong></p>\n<p>我们可以使用 <strong>delete</strong> 关键字来删除 JSON 对象的属性</p>\n<h3 id=\"JSON-数组\"><a href=\"#JSON-数组\" class=\"headerlink\" title=\"JSON 数组\"></a>JSON 数组</h3><p>JSON 数组在中括号中书写。</p>\n<p>JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p>\n<p>JavaScript 中，数组值可以是以上的 JSON 数据类型，也可以是 JavaScript 的表达式，包括函数，日期，及 <em>undefined</em>。</p>\n<p><strong>JSON 对象中的数组</strong></p>\n<p>对象属性的值可以是一个数组，我们可以使用索引值来访问数组</p>\n<p><strong>嵌套 JSON 对象中的数组</strong></p>\n<p>JSON 对象中数组可以包含另外一个数组，或者另外一个 JSON 对象</p>\n<p><strong>修改数组值</strong></p>\n<p>可以使用索引值来修改数组值</p>\n<p><strong>删除数组属性</strong></p>\n<p>我们可以使用 <strong>delete</strong> 关键字来删除 JSON 数组元素</p>\n<h3 id=\"Json乱码问题\"><a href=\"#Json乱码问题\" class=\"headerlink\" title=\"Json乱码问题\"></a>Json乱码问题</h3><p>在SpringMVC配置文件中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--    JSON乱码问题解决--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:annotation-driven</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:message-converters</span> <span class=\"hljs-attr\">register-defaults</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;objectMapper&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;failOnEmptyBeans&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;false&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mvc:message-converters</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p>Let life be beautiful like summer flowers and death like autumn leaves.</p>\n<p>使生如夏花之绚烂，死如秋叶之静美。　　</p>\n</blockquote>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p>\n<p>JSON 是存储和交换文本信息的语法，类似 XML。</p>\n<p>JSON 比 XML 更小、更快，更易解析。</p>\n<p>JSON 是轻量级的文本数据交换格式</p>\n<p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p>\n<p>JSON 具有自我描述性，更易理解</p>\n<h3 id=\"JSON-语法\"><a href=\"#JSON-语法\" class=\"headerlink\" title=\"JSON 语法\"></a>JSON 语法</h3><p><strong>语法规则</strong></p>\n<p>JSON 语法是 JavaScript 对象表示语法的子集。</p>\n<ul>\n<li><p>数据在名称/值对中</p>\n</li>\n<li><p>数据由逗号分隔</p>\n</li>\n<li><p>大括号 <strong>{}</strong> 保存对象</p>\n</li>\n<li><p>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</p>\n<p>数组可包含多个对象：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">[<br>    &#123; key1 : value1<span class=\"hljs-number\">-1</span> , key2:value1<span class=\"hljs-number\">-2</span> &#125;, <br>    &#123; key1 : value2<span class=\"hljs-number\">-1</span> , key2:value2<span class=\"hljs-number\">-2</span> &#125;, <br>    &#123; key1 : value3<span class=\"hljs-number\">-1</span> , key2:value3<span class=\"hljs-number\">-2</span> &#125;, <br>    ...<br>    &#123; key1 : valueN<span class=\"hljs-number\">-1</span> , key2:valueN<span class=\"hljs-number\">-2</span> &#125;, <br>]<br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<p><strong>JSON 名称/值对</strong></p>\n<p>JSON 数据的书写格式是：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">key : value<br></code></pre></td></tr></table></figure>\n<p>名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值</p>\n<p>JSON 值可以是：</p>\n<ul>\n<li>数字（整数或浮点数）</li>\n<li>字符串（在双引号中）</li>\n<li>逻辑值（true 或 false）</li>\n<li>数组（在中括号中）</li>\n<li>对象（在大括号中）</li>\n<li>null</li>\n</ul>\n<hr>\n<p><strong>JSON 文件</strong></p>\n<ul>\n<li>JSON 文件的文件类型是 <strong>.json</strong></li>\n<li>JSON 文本的 MIME 类型是 <strong>application/json</strong></li>\n</ul>\n<h3 id=\"Json方法\"><a href=\"#Json方法\" class=\"headerlink\" title=\"Json方法\"></a>Json方法</h3><p>JSON 通常用于与服务端交换数据。</p>\n<p>在接收服务器数据时一般是字符串。</p>\n<h4 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a><strong>JSON.parse()</strong></h4><p>将一个 JSON 字符串转换为 JavaScript 对象。</p>\n<p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">JSON.parse(text[, reviver])<br></code></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><strong>text:</strong>必需， 一个有效的 JSON 字符串。</li>\n<li><strong>reviver:</strong> 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。</li>\n</ul>\n<p><strong>异常</strong></p>\n<p>解析数据:</p>\n<p>JSON 不能存储 Date 对象。如果你需要存储 Date 对象，需要将其转换为字符串。之后再将字符串转换为 Date 对象。</p>\n<p><strong>解析函数</strong></p>\n<p>JSON 不允许包含函数，但你可以将函数作为字符串存储，之后再将字符串转换为函数。</p>\n<h4 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify()\"></a><strong>JSON.stringify()</strong></h4><p>用于将 JavaScript 值转换为 JSON 字符串。</p>\n<p>我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">JSON.stringify(value[, replacer[, space]])<br></code></pre></td></tr></table></figure>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li><p>value:</p>\n<p>必需， 要转换的 JavaScript 值（通常为对象或数组）。</p>\n</li>\n<li><p>replacer:</p>\n<p>可选。用于转换结果的函数或数组。</p>\n<p>如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：””。</p>\n<p>如果 replacer 是一个数组，则仅转换该数组中具有键值的成员。成员的转换顺序与键在数组中的顺序一样。当 value 参数也为数组时，将忽略 replacer 数组。</p>\n</li>\n<li><p>space:</p>\n<p>可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\\t。</p>\n</li>\n</ul>\n<p><strong>解析数据</strong></p>\n<p>JSON 不能存储 Date 对象。</p>\n<p>JSON.stringify() 会将所有日期转换为字符串。</p>\n<p><strong>解析函数</strong></p>\n<p>JSON 不允许包含函数，JSON.stringify() 会删除 JavaScript 对象的函数，包括 key 和 value。</p>\n<h4 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval()\"></a>eval()</h4><p>由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象。</p>\n<p>eval() 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">var</span> obj = eval (<span class=\"hljs-string\">&quot;(&quot;</span> + txt + <span class=\"hljs-string\">&quot;)&quot;</span>);<br></code></pre></td></tr></table></figure>\n<h3 id=\"JSON-对象\"><a href=\"#JSON-对象\" class=\"headerlink\" title=\"JSON 对象\"></a>JSON 对象</h3><p><strong>对象语法</strong></p>\n<p>JSON 对象使用在大括号({})中书写。</p>\n<p>对象可以包含多个 <strong>key/value（键/值）</strong>对。</p>\n<p>key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p>\n<p>key 和 value 中使用冒号(:)分割。</p>\n<p>每个 key/value 对使用逗号(,)分割。</p>\n<p><strong>访问对象值</strong></p>\n<p>可以使用点号 . 来访问对象的值；</p>\n<p>也可以使用中括号 [] 来访问对象的值。</p>\n<p><strong>嵌套 JSON 对象</strong></p>\n<p>JSON 对象中可以包含另外一个 JSON 对象</p>\n<p><strong>修改值</strong></p>\n<p>可以使用点号 . 来修改 JSON 对象的值</p>\n<p>可以使用中括号 [] 来修改 JSON 对象的值</p>\n<p><strong>删除对象属性</strong></p>\n<p>我们可以使用 <strong>delete</strong> 关键字来删除 JSON 对象的属性</p>\n<h3 id=\"JSON-数组\"><a href=\"#JSON-数组\" class=\"headerlink\" title=\"JSON 数组\"></a>JSON 数组</h3><p>JSON 数组在中括号中书写。</p>\n<p>JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。</p>\n<p>JavaScript 中，数组值可以是以上的 JSON 数据类型，也可以是 JavaScript 的表达式，包括函数，日期，及 <em>undefined</em>。</p>\n<p><strong>JSON 对象中的数组</strong></p>\n<p>对象属性的值可以是一个数组，我们可以使用索引值来访问数组</p>\n<p><strong>嵌套 JSON 对象中的数组</strong></p>\n<p>JSON 对象中数组可以包含另外一个数组，或者另外一个 JSON 对象</p>\n<p><strong>修改数组值</strong></p>\n<p>可以使用索引值来修改数组值</p>\n<p><strong>删除数组属性</strong></p>\n<p>我们可以使用 <strong>delete</strong> 关键字来删除 JSON 数组元素</p>\n<h3 id=\"Json乱码问题\"><a href=\"#Json乱码问题\" class=\"headerlink\" title=\"Json乱码问题\"></a>Json乱码问题</h3><p>在SpringMVC配置文件中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--    JSON乱码问题解决--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:annotation-driven</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mvc:message-converters</span> <span class=\"hljs-attr\">register-defaults</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;objectMapper&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;failOnEmptyBeans&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;false&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mvc:message-converters</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","categories":[{"name":"JSON","path":"api/categories/JSON.json"}],"tags":[{"name":"JSON","path":"api/tags/JSON.json"}]}