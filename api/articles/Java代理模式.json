{"title":"Java代理模式","slug":"Java代理模式","date":"2021-12-19T11:24:58.000Z","updated":"2022-01-20T13:13:40.968Z","comments":true,"path":"api/articles/Java代理模式.json","realPath":null,"excerpt":null,"covers":["/article/21345/20190508103432666.png"],"cover":"/images/theme/coverphoto/java.jpg","content":"<blockquote>\n<p>The trees, like the longings of the earth, stand atiptoe to peep  at the heaven.  </p>\n<p>群树如表示大地的愿望似的，踮起脚来向天空窥望。</p>\n</blockquote>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>假设现在有一个人（person接口），他的名字叫A（class A implement person），小A 40岁了必须要找对象，但是呢自己比较害羞不好意思开口，这样就需要一个媒婆来帮他找对象（MeiPo 代理类），至此就是静态代理模式，下面我们用代理来实现下：</p>\n<p><code>Class Person</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Class A</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiaoA</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-comment\">//个人条件</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;高富帅&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;有房有车的&quot;</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Class Meipo</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meipo2</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>\t<br>\t<span class=\"hljs-keyword\">private</span> XiaoA xiaoA;<br>\t<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Meipo2</span><span class=\"hljs-params\">(XiaoA xa)</span> </span>&#123;<br>\t\t<span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span><br>\t\t<span class=\"hljs-keyword\">this</span>.xiaoA = xa;<br>\t&#125;<br>\t<br>\t <span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\t<span class=\"hljs-comment\">// TODO Auto-generated method stub</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我是媒婆，要帮小A找对象，小A的条件为：&quot;</span>);<br>\t\txiaoA.findLove();<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;寻找中...&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;寻找到仙女一枚！&quot;</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Main</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestFindLove</span> </span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\tMeipo2 meipo2 = <span class=\"hljs-keyword\">new</span> Meipo2(<span class=\"hljs-keyword\">new</span> XiaoA());<br>\t\tmeipo2.findLove();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/21345/20190508103432666.png\" class title=\"img\">\n<p> 静态代理模式总结 </p>\n<ul>\n<li>真实对象和代理对象都要实现同一接口 </li>\n<li>代理对象要代理真实角色 </li>\n</ul>\n<p>好处：</p>\n<ol>\n<li>代理对象可以做很多真实对象做不了的事情 、</li>\n<li>真实对象可以专注做自己的事情</li>\n</ol>\n<p>缺点：</p>\n<p>一个真实角色会产生一个代理角色</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><h3 id=\"实现代理对象的步骤\"><a href=\"#实现代理对象的步骤\" class=\"headerlink\" title=\"实现代理对象的步骤\"></a>实现代理对象的步骤</h3><ol>\n<li>创建接口，定义目标类要完成的功能</li>\n<li>创建目标类，实现接口</li>\n<li>创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能<ol>\n<li>调用目标方法</li>\n<li>增强功能</li>\n</ol>\n</li>\n<li>使用Proxy类的静态方法，创建代理对象，并把返回值转为接口类型</li>\n</ol>\n<ul>\n<li>动态代理角色和静态代理角色一样</li>\n<li>动态代理的代理类时动态生成的，不是我们直接写好的</li>\n<li>分为两类<ul>\n<li>基于接口的动态的代理：<strong>基于JDK的动态代理</strong></li>\n<li>基于类的动态代理：cglib</li>\n<li>java字节码实现：javasist</li>\n</ul>\n</li>\n</ul>\n<p><strong>基于JDK的动态代理</strong></p>\n<p>JDK提供了java.lang.reflect.InvocationHandler接口和 java.lang.reflect.Proxy类，这两个类相互配合</p>\n<ol>\n<li>Proxy：代理</li>\n<li>InvocationHandler：调用处理程序</li>\n</ol>\n<p><strong>例</strong></p>\n<p>上面的静态代理是每来一个人就创建一个媒婆代理他，这样的话工作过于繁琐，这时我们为何我开一个媒婆公司呢？将找对象的人交给媒婆公司，让媒婆公司创建媒婆代理他传宗接代的任务！</p>\n<p><code>Class B</code></p>\n<p><strong>目标接口的实现类</strong>，也就是接下来的目标类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiaoB</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;矮穷矬&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;屌丝一枚&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>findLove</code>目标类中目标方法</p>\n<p>媒婆 改为 媒婆公司：<code>Class MeipoCompany</code></p>\n<p><strong>代理类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MeipoCompany</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">InvocationHandler</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">private</span> Person target; <span class=\"hljs-comment\">//被代理对象的引用作为一个成员变量保存下来了</span><br>  <span class=\"hljs-comment\">//传入对象</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTarget</span><span class=\"hljs-params\">(Object target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.target = target;<br>  &#125;<br>  <br>\t<span class=\"hljs-comment\">//获取被代理人的个人资料</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">(Person target)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>.target = target;<br>\t\tClass clazz = target.getClass();<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;被代理对象的class是:&quot;</span>+clazz);<br>\t\t<span class=\"hljs-keyword\">return</span> Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), <span class=\"hljs-keyword\">this</span>);<br>\t&#125;<br>\t<br> <br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>\t\t<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我是媒婆公司：&quot;</span> + <span class=\"hljs-string\">&quot;得给你找个异性才行&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;说下你的条件：&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;------------&quot;</span>);<br>\t\t<span class=\"hljs-comment\">//反射调用方法</span><br>\t\tmethod.invoke(target, args);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;------------&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;开始进行海选...&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;找到啦&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>在invoke()方法中，我们没有创建对象，所以，我们使用<code>method.invoke</code></strong></p>\n<p>两个参数：</p>\n<ol>\n<li>对象，这个对象是动态的，不是固定的，所以我们需要传入进来，可以通过调用该类的构造方法<code>setTarget()</code>进行传入</li>\n<li>参数，调用方法的参数，即args</li>\n</ol>\n<p><code>Main</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestFindLove</span> </span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\t<span class=\"hljs-keyword\">try</span> &#123;<br> \t\t\tPerson handler = (Person)<span class=\"hljs-keyword\">new</span> MeipoCompany().getInstance(<span class=\"hljs-keyword\">new</span> XiaoA());<br> \t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;代理类：&quot;</span>+A.getClass());<br> \t\t\thandler.findLove();<br>      System.out.println(<span class=\"hljs-string\">&quot;************************&quot;</span>);<br>      <span class=\"hljs-comment\">//1. 创建目标对象</span><br>      Person B = <span class=\"hljs-keyword\">new</span> XiaoB();<br>      <span class=\"hljs-comment\">//2. 创建 InvocationHandler 对象</span><br>      InvocationHandler handler1 = <span class=\"hljs-keyword\">new</span> MeipoCompany(B);<br>      <span class=\"hljs-comment\">//3.创建代理对象</span><br>      Person proxy = (Person)Proxy.newProxyInstance(B.getClassLoader(), B.getInterfaces(), handler1)<br> \t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;代理类：&quot;</span>+B.getClass());<br>      <span class=\"hljs-comment\">//4.通过代理执行方法</span><br> \t\t\tB.findLove();<br>\t\t&#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>\t\t\te.printStackTrace();<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//1. 创建目标对象</span><br>Person B = <span class=\"hljs-keyword\">new</span> XiaoB();<br><span class=\"hljs-comment\">//2. 创建 InvocationHandler 对象</span><br>InvocationHandler handler1 = <span class=\"hljs-keyword\">new</span> MeipoCompany(B);<br><span class=\"hljs-comment\">//3.创建代理对象</span><br>Person proxy = hander.getInstance(handler);<br>Person proxy = (Person)Proxy.newProxyInstance(B.getClassLoader(), B.getInterfaces(), handler1)<br>System.out.println(<span class=\"hljs-string\">&quot;代理类：&quot;</span>+B.getClass());<br><span class=\"hljs-comment\">//4.通过代理执行方法</span><br>proxy.findLove();<br></code></pre></td></tr></table></figure>\n<p>这段代码中不需要<code>MeipoCompany</code>中有<code>getInstance</code>方法，直接在main类中实现，等价于A的动态代理</p>\n</blockquote>\n<p>这里调用方法时，就会自动跳转到invoke方法，将方法名与参数传递给invoke中的method.invoke方法</p>\n<h3 id=\"InvocationHandler\"><a href=\"#InvocationHandler\" class=\"headerlink\" title=\"InvocationHandler\"></a>InvocationHandler</h3><p><strong>实现InvocationHandler，重写invoke方法</strong></p>\n<p>处理代理实例，并且返回结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;\t<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong><code>invoke</code>表示代理对象要执行的功能代码，代理类要完成的功能就写在invoke中。</strong></p>\n<ol>\n<li><p><strong>调用目标方法，执行目标方法的功能</strong></p>\n</li>\n<li><p><strong>功能增强，在目标方法调用时，增加功能</strong></p>\n</li>\n<li><p><strong>参数</strong></p>\n<blockquote>\n<ol>\n<li><p>Object proxy</p>\n<p>jdk创建的代理对象，无需赋值</p>\n</li>\n<li><p>Method method</p>\n<p>目标类中的方法，jdk提供，无需赋值</p>\n</li>\n<li><p>Object[] args</p>\n<p>目标类中方法的参数，jdk提供，无需赋值</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p><code>Method类</code>：表示方法的类，确切的说就目标类中的方法</p>\n<p><strong>作用</strong>：通过Method可以执行某个目标类的方法，<code>method.invoke()</code></p>\n<p>method.invoke(目标对象，方法的参数)</p>\n<h3 id=\"Proxy类\"><a href=\"#Proxy类\" class=\"headerlink\" title=\"Proxy类\"></a>Proxy类</h3><p>核心对象，创建代理对象</p>\n<p>之前的创建对象都是new类的构造方法，现在我们是使用Proxy类的对象，代替new的使用.</p>\n<p>静态方法<code>newProxyInstance</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title\">newProxyInstance</span><span class=\"hljs-params\">(ClassLoader loader,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                      InvocationHandler h)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>作用：创建代理对象，等同于静态代理中的new</strong></p>\n<p><strong>参数</strong></p>\n<blockquote>\n<ol>\n<li><p>ClassLoader loader</p>\n<p>类加载器，负责向内存中加载对象，使用反射获取对象的ClassLoader</p>\n<p><strong>是目标对象的类加载器</strong></p>\n</li>\n<li><p>Class&lt;?&gt;[] interfaces</p>\n<p>是接口，目标对象所实现的接口，也是反射获取的</p>\n</li>\n<li><p>InvocationHandler h</p>\n<p>是我们自己写的，代理类要完成的功能</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>返回值</strong>：就是目标对象的代理对象</p>\n","more":"<blockquote>\n<p>The trees, like the longings of the earth, stand atiptoe to peep  at the heaven.  </p>\n<p>群树如表示大地的愿望似的，踮起脚来向天空窥望。</p>\n</blockquote>\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><p>假设现在有一个人（person接口），他的名字叫A（class A implement person），小A 40岁了必须要找对象，但是呢自己比较害羞不好意思开口，这样就需要一个媒婆来帮他找对象（MeiPo 代理类），至此就是静态代理模式，下面我们用代理来实现下：</p>\n<p><code>Class Person</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Class A</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiaoA</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-comment\">//个人条件</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;高富帅&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;有房有车的&quot;</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Class Meipo</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Meipo2</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Person</span> </span>&#123;<br>\t<br>\t<span class=\"hljs-keyword\">private</span> XiaoA xiaoA;<br>\t<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Meipo2</span><span class=\"hljs-params\">(XiaoA xa)</span> </span>&#123;<br>\t\t<span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span><br>\t\t<span class=\"hljs-keyword\">this</span>.xiaoA = xa;<br>\t&#125;<br>\t<br>\t <span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\t<span class=\"hljs-comment\">// TODO Auto-generated method stub</span><br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我是媒婆，要帮小A找对象，小A的条件为：&quot;</span>);<br>\t\txiaoA.findLove();<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;寻找中...&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;寻找到仙女一枚！&quot;</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>Main</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestFindLove</span> </span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\tMeipo2 meipo2 = <span class=\"hljs-keyword\">new</span> Meipo2(<span class=\"hljs-keyword\">new</span> XiaoA());<br>\t\tmeipo2.findLove();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<img src=\"/article/21345/20190508103432666.png\" class title=\"img\">\n<p> 静态代理模式总结 </p>\n<ul>\n<li>真实对象和代理对象都要实现同一接口 </li>\n<li>代理对象要代理真实角色 </li>\n</ul>\n<p>好处：</p>\n<ol>\n<li>代理对象可以做很多真实对象做不了的事情 、</li>\n<li>真实对象可以专注做自己的事情</li>\n</ol>\n<p>缺点：</p>\n<p>一个真实角色会产生一个代理角色</p>\n<h2 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h2><h3 id=\"实现代理对象的步骤\"><a href=\"#实现代理对象的步骤\" class=\"headerlink\" title=\"实现代理对象的步骤\"></a>实现代理对象的步骤</h3><ol>\n<li>创建接口，定义目标类要完成的功能</li>\n<li>创建目标类，实现接口</li>\n<li>创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能<ol>\n<li>调用目标方法</li>\n<li>增强功能</li>\n</ol>\n</li>\n<li>使用Proxy类的静态方法，创建代理对象，并把返回值转为接口类型</li>\n</ol>\n<ul>\n<li>动态代理角色和静态代理角色一样</li>\n<li>动态代理的代理类时动态生成的，不是我们直接写好的</li>\n<li>分为两类<ul>\n<li>基于接口的动态的代理：<strong>基于JDK的动态代理</strong></li>\n<li>基于类的动态代理：cglib</li>\n<li>java字节码实现：javasist</li>\n</ul>\n</li>\n</ul>\n<p><strong>基于JDK的动态代理</strong></p>\n<p>JDK提供了java.lang.reflect.InvocationHandler接口和 java.lang.reflect.Proxy类，这两个类相互配合</p>\n<ol>\n<li>Proxy：代理</li>\n<li>InvocationHandler：调用处理程序</li>\n</ol>\n<p><strong>例</strong></p>\n<p>上面的静态代理是每来一个人就创建一个媒婆代理他，这样的话工作过于繁琐，这时我们为何我开一个媒婆公司呢？将找对象的人交给媒婆公司，让媒婆公司创建媒婆代理他传宗接代的任务！</p>\n<p><code>Class B</code></p>\n<p><strong>目标接口的实现类</strong>，也就是接下来的目标类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">XiaoB</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Person</span></span>&#123;<br>  <span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">findLove</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;矮穷矬&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;屌丝一枚&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>findLove</code>目标类中目标方法</p>\n<p>媒婆 改为 媒婆公司：<code>Class MeipoCompany</code></p>\n<p><strong>代理类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MeipoCompany</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">InvocationHandler</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">private</span> Person target; <span class=\"hljs-comment\">//被代理对象的引用作为一个成员变量保存下来了</span><br>  <span class=\"hljs-comment\">//传入对象</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTarget</span><span class=\"hljs-params\">(Object target)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.target = target;<br>  &#125;<br>  <br>\t<span class=\"hljs-comment\">//获取被代理人的个人资料</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">(Person target)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>&#123;<br>\t\t<span class=\"hljs-keyword\">this</span>.target = target;<br>\t\tClass clazz = target.getClass();<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;被代理对象的class是:&quot;</span>+clazz);<br>\t\t<span class=\"hljs-keyword\">return</span> Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), <span class=\"hljs-keyword\">this</span>);<br>\t&#125;<br>\t<br> <br>\t<span class=\"hljs-meta\">@Override</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>\t\t<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;我是媒婆公司：&quot;</span> + <span class=\"hljs-string\">&quot;得给你找个异性才行&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;说下你的条件：&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;------------&quot;</span>);<br>\t\t<span class=\"hljs-comment\">//反射调用方法</span><br>\t\tmethod.invoke(target, args);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;------------&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;开始进行海选...&quot;</span>);<br>\t\tSystem.out.println(<span class=\"hljs-string\">&quot;找到啦&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>在invoke()方法中，我们没有创建对象，所以，我们使用<code>method.invoke</code></strong></p>\n<p>两个参数：</p>\n<ol>\n<li>对象，这个对象是动态的，不是固定的，所以我们需要传入进来，可以通过调用该类的构造方法<code>setTarget()</code>进行传入</li>\n<li>参数，调用方法的参数，即args</li>\n</ol>\n<p><code>Main</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestFindLove</span> </span>&#123;<br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t\t<span class=\"hljs-keyword\">try</span> &#123;<br> \t\t\tPerson handler = (Person)<span class=\"hljs-keyword\">new</span> MeipoCompany().getInstance(<span class=\"hljs-keyword\">new</span> XiaoA());<br> \t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;代理类：&quot;</span>+A.getClass());<br> \t\t\thandler.findLove();<br>      System.out.println(<span class=\"hljs-string\">&quot;************************&quot;</span>);<br>      <span class=\"hljs-comment\">//1. 创建目标对象</span><br>      Person B = <span class=\"hljs-keyword\">new</span> XiaoB();<br>      <span class=\"hljs-comment\">//2. 创建 InvocationHandler 对象</span><br>      InvocationHandler handler1 = <span class=\"hljs-keyword\">new</span> MeipoCompany(B);<br>      <span class=\"hljs-comment\">//3.创建代理对象</span><br>      Person proxy = (Person)Proxy.newProxyInstance(B.getClassLoader(), B.getInterfaces(), handler1)<br> \t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;代理类：&quot;</span>+B.getClass());<br>      <span class=\"hljs-comment\">//4.通过代理执行方法</span><br> \t\t\tB.findLove();<br>\t\t&#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>\t\t\te.printStackTrace();<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//1. 创建目标对象</span><br>Person B = <span class=\"hljs-keyword\">new</span> XiaoB();<br><span class=\"hljs-comment\">//2. 创建 InvocationHandler 对象</span><br>InvocationHandler handler1 = <span class=\"hljs-keyword\">new</span> MeipoCompany(B);<br><span class=\"hljs-comment\">//3.创建代理对象</span><br>Person proxy = hander.getInstance(handler);<br>Person proxy = (Person)Proxy.newProxyInstance(B.getClassLoader(), B.getInterfaces(), handler1)<br>System.out.println(<span class=\"hljs-string\">&quot;代理类：&quot;</span>+B.getClass());<br><span class=\"hljs-comment\">//4.通过代理执行方法</span><br>proxy.findLove();<br></code></pre></td></tr></table></figure>\n<p>这段代码中不需要<code>MeipoCompany</code>中有<code>getInstance</code>方法，直接在main类中实现，等价于A的动态代理</p>\n</blockquote>\n<p>这里调用方法时，就会自动跳转到invoke方法，将方法名与参数传递给invoke中的method.invoke方法</p>\n<h3 id=\"InvocationHandler\"><a href=\"#InvocationHandler\" class=\"headerlink\" title=\"InvocationHandler\"></a>InvocationHandler</h3><p><strong>实现InvocationHandler，重写invoke方法</strong></p>\n<p>处理代理实例，并且返回结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;\t<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong><code>invoke</code>表示代理对象要执行的功能代码，代理类要完成的功能就写在invoke中。</strong></p>\n<ol>\n<li><p><strong>调用目标方法，执行目标方法的功能</strong></p>\n</li>\n<li><p><strong>功能增强，在目标方法调用时，增加功能</strong></p>\n</li>\n<li><p><strong>参数</strong></p>\n<blockquote>\n<ol>\n<li><p>Object proxy</p>\n<p>jdk创建的代理对象，无需赋值</p>\n</li>\n<li><p>Method method</p>\n<p>目标类中的方法，jdk提供，无需赋值</p>\n</li>\n<li><p>Object[] args</p>\n<p>目标类中方法的参数，jdk提供，无需赋值</p>\n</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p><code>Method类</code>：表示方法的类，确切的说就目标类中的方法</p>\n<p><strong>作用</strong>：通过Method可以执行某个目标类的方法，<code>method.invoke()</code></p>\n<p>method.invoke(目标对象，方法的参数)</p>\n<h3 id=\"Proxy类\"><a href=\"#Proxy类\" class=\"headerlink\" title=\"Proxy类\"></a>Proxy类</h3><p>核心对象，创建代理对象</p>\n<p>之前的创建对象都是new类的构造方法，现在我们是使用Proxy类的对象，代替new的使用.</p>\n<p>静态方法<code>newProxyInstance</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Object <span class=\"hljs-title\">newProxyInstance</span><span class=\"hljs-params\">(ClassLoader loader,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                      Class&lt;?&gt;[] interfaces,</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">                                      InvocationHandler h)</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>作用：创建代理对象，等同于静态代理中的new</strong></p>\n<p><strong>参数</strong></p>\n<blockquote>\n<ol>\n<li><p>ClassLoader loader</p>\n<p>类加载器，负责向内存中加载对象，使用反射获取对象的ClassLoader</p>\n<p><strong>是目标对象的类加载器</strong></p>\n</li>\n<li><p>Class&lt;?&gt;[] interfaces</p>\n<p>是接口，目标对象所实现的接口，也是反射获取的</p>\n</li>\n<li><p>InvocationHandler h</p>\n<p>是我们自己写的，代理类要完成的功能</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>返回值</strong>：就是目标对象的代理对象</p>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"代理模式","path":"api/categories/代理模式.json"}],"tags":[{"name":"Java,代理模式","path":"api/tags/Java,代理模式.json"}]}