{"title":"Java Lambda表达式","slug":"Java-Lambda表达式","date":"2021-12-19T12:10:44.000Z","updated":"2021-12-19T13:33:43.356Z","comments":true,"path":"api/articles/Java-Lambda表达式.json","realPath":null,"excerpt":null,"covers":null,"cover":"/images/theme/coverphoto/java.jpg","content":"<blockquote>\n<p>You smiled and talked to me of nothing and I felt that for this  I had been waiting long. </p>\n<p>你微微地笑着，不同我说什么话。而我觉得，为了这个，我已等待得久了。  </p>\n</blockquote>\n<h2 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h2><p>理解Functional Interface（<a href=\"/article/49002.html\" title=\"函数式接口\">函数式接口</a>）是学习Java8 Lambda表达式的关键所在。</p>\n<p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>\n<p>使用 Lambda 表达式可以</p>\n<ul>\n<li>使代码变的更加简洁紧凑。</li>\n<li>避免匿名内部类定义过多</li>\n<li>只有核心逻辑，没有无用代码</li>\n</ul>\n<p><strong>语法</strong></p>\n<p>lambda 表达式的语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">(parameters) -&gt; expression<br><span class=\"hljs-comment\">//或</span><br>(parameters) -&gt;&#123; statements; &#125;<br></code></pre></td></tr></table></figure>\n<p>以下是lambda表达式的重要特征:</p>\n<ul>\n<li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值；</li>\n<li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号；</li>\n<li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号；</li>\n<li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 1. 不需要参数,返回值为 5  </span><br>() -&gt; <span class=\"hljs-number\">5</span>  <br><span class=\"hljs-comment\">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br>x -&gt; <span class=\"hljs-number\">2</span> * x  <br><span class=\"hljs-comment\">// 3. 接受2个参数(数字),并返回他们的差值  </span><br>(x, y) -&gt; x – y  <br><span class=\"hljs-comment\">// 4. 接收2个int型整数,返回他们的和  </span><br>(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y) -&gt; x + y  <br><span class=\"hljs-comment\">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br>(String s) -&gt; System.out.print(s)<br></code></pre></td></tr></table></figure>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span></span>&#123;<br>      Java8Tester tester = <span class=\"hljs-keyword\">new</span> Java8Tester();<br>        <br>      <span class=\"hljs-comment\">// 类型声明</span><br>      MathOperation addition = (<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) -&gt; a + b;<br>        <br>      <span class=\"hljs-comment\">// 不用类型声明</span><br>      MathOperation subtraction = (a, b) -&gt; a - b;<br>        <br>      <span class=\"hljs-comment\">// 大括号中的返回语句</span><br>      MathOperation multiplication = (<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) -&gt; &#123; <span class=\"hljs-keyword\">return</span> a * b; &#125;;<br>        <br>      <span class=\"hljs-comment\">// 没有大括号及返回语句</span><br>      MathOperation division = (<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) -&gt; a / b;<br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;10 + 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, addition));<br>      System.out.println(<span class=\"hljs-string\">&quot;10 - 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, subtraction));<br>      System.out.println(<span class=\"hljs-string\">&quot;10 x 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, multiplication));<br>      System.out.println(<span class=\"hljs-string\">&quot;10 / 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, division));<br>        <br>      <span class=\"hljs-comment\">// 不用括号</span><br>      GreetingService greetService1 = message -&gt;<br>      System.out.println(<span class=\"hljs-string\">&quot;Hello &quot;</span> + message);<br>        <br>      <span class=\"hljs-comment\">// 用括号</span><br>      GreetingService greetService2 = (message) -&gt;<br>      System.out.println(<span class=\"hljs-string\">&quot;Hello &quot;</span> + message);<br>        <br>      greetService1.sayMessage(<span class=\"hljs-string\">&quot;Bobo&quot;</span>);<br>      greetService2.sayMessage(<span class=\"hljs-string\">&quot;Google&quot;</span>);<br>   &#125;<br>    <br>   <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">MathOperation</span> </span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">operation</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span>;<br>   &#125;<br>    <span class=\"hljs-comment\">//定义一个函数式接口</span><br>   <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingService</span> </span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayMessage</span><span class=\"hljs-params\">(String message)</span></span>;<br>   &#125;<br>    <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">operate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b, MathOperation mathOperation)</span></span>&#123;<br>      <span class=\"hljs-keyword\">return</span> mathOperation.operation(a, b);<br>   &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">$ javac Java8Tester.java </span><br><span class=\"hljs-comment\">$ java Java8Tester</span><br><span class=\"hljs-comment\">10 + 5 = 15</span><br><span class=\"hljs-comment\">10 - 5 = 5</span><br><span class=\"hljs-comment\">10 x 5 = 50</span><br><span class=\"hljs-comment\">10 / 5 = 2</span><br><span class=\"hljs-comment\">Hello Bobo</span><br><span class=\"hljs-comment\">Hello Google</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ul>\n<li>Lambda 表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面例子中，我们使用各种类型的Lambda表达式来定义MathOperation接口的方法。然后我们定义了sayMessage的执行。</li>\n<li>Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。</li>\n</ul>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br> <br>   <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> String salutation = <span class=\"hljs-string\">&quot;Hello! &quot;</span>;<br>   <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span></span>&#123;<br>      GreetingService greetService1 = message -&gt; <br>      System.out.println(salutation + message);<br>      greetService1.sayMessage(<span class=\"hljs-string\">&quot;Bobo&quot;</span>);<br>   &#125;<br>    <br>   <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingService</span> </span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayMessage</span><span class=\"hljs-params\">(String message)</span></span>;<br>   &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">$ javac Java8Tester.java </span><br><span class=\"hljs-comment\">$ java Java8Tester</span><br><span class=\"hljs-comment\">Hello! Bobo</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p>我们也可以直接在 lambda 表达式中访问外层的局部变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span> </span>&#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">1</span>;<br>        Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));<br>        s.convert(<span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// 输出结果为 3</span><br>    &#125;<br> <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Converter</span>&lt;<span class=\"hljs-title\">T1</span>, <span class=\"hljs-title\">T2</span>&gt; </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">convert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">1</span>;  <br>Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));<br>s.convert(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-comment\">//不可以在后面篡改 num</span><br>num = <span class=\"hljs-number\">5</span>;  <br><span class=\"hljs-comment\">//报错信息：Local variable num defined in an enclosing scope must be final or effectively </span><br> <span class=\"hljs-keyword\">final</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">String first = <span class=\"hljs-string\">&quot;&quot;</span>;  <br>Comparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length());  <span class=\"hljs-comment\">//编译会出错</span><br></code></pre></td></tr></table></figure>\n","more":"<blockquote>\n<p>You smiled and talked to me of nothing and I felt that for this  I had been waiting long. </p>\n<p>你微微地笑着，不同我说什么话。而我觉得，为了这个，我已等待得久了。  </p>\n</blockquote>\n<h2 id=\"Lambda表达式\"><a href=\"#Lambda表达式\" class=\"headerlink\" title=\"Lambda表达式\"></a>Lambda表达式</h2><p>理解Functional Interface（<a href=\"/article/49002.html\" title=\"函数式接口\">函数式接口</a>）是学习Java8 Lambda表达式的关键所在。</p>\n<p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>\n<p>使用 Lambda 表达式可以</p>\n<ul>\n<li>使代码变的更加简洁紧凑。</li>\n<li>避免匿名内部类定义过多</li>\n<li>只有核心逻辑，没有无用代码</li>\n</ul>\n<p><strong>语法</strong></p>\n<p>lambda 表达式的语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">(parameters) -&gt; expression<br><span class=\"hljs-comment\">//或</span><br>(parameters) -&gt;&#123; statements; &#125;<br></code></pre></td></tr></table></figure>\n<p>以下是lambda表达式的重要特征:</p>\n<ul>\n<li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值；</li>\n<li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号；</li>\n<li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号；</li>\n<li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 1. 不需要参数,返回值为 5  </span><br>() -&gt; <span class=\"hljs-number\">5</span>  <br><span class=\"hljs-comment\">// 2. 接收一个参数(数字类型),返回其2倍的值  </span><br>x -&gt; <span class=\"hljs-number\">2</span> * x  <br><span class=\"hljs-comment\">// 3. 接受2个参数(数字),并返回他们的差值  </span><br>(x, y) -&gt; x – y  <br><span class=\"hljs-comment\">// 4. 接收2个int型整数,返回他们的和  </span><br>(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y) -&gt; x + y  <br><span class=\"hljs-comment\">// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)  </span><br>(String s) -&gt; System.out.print(s)<br></code></pre></td></tr></table></figure>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span></span>&#123;<br>      Java8Tester tester = <span class=\"hljs-keyword\">new</span> Java8Tester();<br>        <br>      <span class=\"hljs-comment\">// 类型声明</span><br>      MathOperation addition = (<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) -&gt; a + b;<br>        <br>      <span class=\"hljs-comment\">// 不用类型声明</span><br>      MathOperation subtraction = (a, b) -&gt; a - b;<br>        <br>      <span class=\"hljs-comment\">// 大括号中的返回语句</span><br>      MathOperation multiplication = (<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) -&gt; &#123; <span class=\"hljs-keyword\">return</span> a * b; &#125;;<br>        <br>      <span class=\"hljs-comment\">// 没有大括号及返回语句</span><br>      MathOperation division = (<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b) -&gt; a / b;<br>        <br>      System.out.println(<span class=\"hljs-string\">&quot;10 + 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, addition));<br>      System.out.println(<span class=\"hljs-string\">&quot;10 - 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, subtraction));<br>      System.out.println(<span class=\"hljs-string\">&quot;10 x 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, multiplication));<br>      System.out.println(<span class=\"hljs-string\">&quot;10 / 5 = &quot;</span> + tester.operate(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, division));<br>        <br>      <span class=\"hljs-comment\">// 不用括号</span><br>      GreetingService greetService1 = message -&gt;<br>      System.out.println(<span class=\"hljs-string\">&quot;Hello &quot;</span> + message);<br>        <br>      <span class=\"hljs-comment\">// 用括号</span><br>      GreetingService greetService2 = (message) -&gt;<br>      System.out.println(<span class=\"hljs-string\">&quot;Hello &quot;</span> + message);<br>        <br>      greetService1.sayMessage(<span class=\"hljs-string\">&quot;Bobo&quot;</span>);<br>      greetService2.sayMessage(<span class=\"hljs-string\">&quot;Google&quot;</span>);<br>   &#125;<br>    <br>   <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">MathOperation</span> </span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">operation</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span></span>;<br>   &#125;<br>    <span class=\"hljs-comment\">//定义一个函数式接口</span><br>   <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingService</span> </span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayMessage</span><span class=\"hljs-params\">(String message)</span></span>;<br>   &#125;<br>    <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">operate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b, MathOperation mathOperation)</span></span>&#123;<br>      <span class=\"hljs-keyword\">return</span> mathOperation.operation(a, b);<br>   &#125;<br>&#125;<br><br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">$ javac Java8Tester.java </span><br><span class=\"hljs-comment\">$ java Java8Tester</span><br><span class=\"hljs-comment\">10 + 5 = 15</span><br><span class=\"hljs-comment\">10 - 5 = 5</span><br><span class=\"hljs-comment\">10 x 5 = 50</span><br><span class=\"hljs-comment\">10 / 5 = 2</span><br><span class=\"hljs-comment\">Hello Bobo</span><br><span class=\"hljs-comment\">Hello Google</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<ul>\n<li>Lambda 表达式主要用来定义行内执行的方法类型接口，例如，一个简单方法接口。在上面例子中，我们使用各种类型的Lambda表达式来定义MathOperation接口的方法。然后我们定义了sayMessage的执行。</li>\n<li>Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。</li>\n</ul>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 lambda 内部修改定义在域外的局部变量，否则会编译错误。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br> <br>   <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">static</span> String salutation = <span class=\"hljs-string\">&quot;Hello! &quot;</span>;<br>   <br>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span></span>&#123;<br>      GreetingService greetService1 = message -&gt; <br>      System.out.println(salutation + message);<br>      greetService1.sayMessage(<span class=\"hljs-string\">&quot;Bobo&quot;</span>);<br>   &#125;<br>    <br>   <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GreetingService</span> </span>&#123;<br>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sayMessage</span><span class=\"hljs-params\">(String message)</span></span>;<br>   &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">输出结果：</span><br><span class=\"hljs-comment\">$ javac Java8Tester.java </span><br><span class=\"hljs-comment\">$ java Java8Tester</span><br><span class=\"hljs-comment\">Hello! Bobo</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p>我们也可以直接在 lambda 表达式中访问外层的局部变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Java8Tester</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String args[])</span> </span>&#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">1</span>;<br>        Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));<br>        s.convert(<span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// 输出结果为 3</span><br>    &#125;<br> <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Converter</span>&lt;<span class=\"hljs-title\">T1</span>, <span class=\"hljs-title\">T2</span>&gt; </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">convert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">1</span>;  <br>Converter&lt;Integer, String&gt; s = (param) -&gt; System.out.println(String.valueOf(param + num));<br>s.convert(<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-comment\">//不可以在后面篡改 num</span><br>num = <span class=\"hljs-number\">5</span>;  <br><span class=\"hljs-comment\">//报错信息：Local variable num defined in an enclosing scope must be final or effectively </span><br> <span class=\"hljs-keyword\">final</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">String first = <span class=\"hljs-string\">&quot;&quot;</span>;  <br>Comparator&lt;String&gt; comparator = (first, second) -&gt; Integer.compare(first.length(), second.length());  <span class=\"hljs-comment\">//编译会出错</span><br></code></pre></td></tr></table></figure>\n","categories":[{"name":"Java","path":"api/categories/Java.json"},{"name":"Lambda表达式","path":"api/categories/Lambda表达式.json"}],"tags":[{"name":"Java,Lambda表达式","path":"api/tags/Java,Lambda表达式.json"}]}