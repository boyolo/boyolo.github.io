{"title":"JavaWeb","slug":"JavaWeb","date":"2022-01-01T07:25:20.000Z","updated":"2022-01-07T07:25:09.852Z","comments":true,"path":"api/articles/JavaWeb.json","realPath":null,"excerpt":null,"covers":["/article/60206/%E9%85%8D%E7%BD%AEtomcat0.png","/article/60206/%E9%85%8D%E7%BD%AEtomcat1.png","/article/60206/%E9%85%8D%E7%BD%AEtomcat2.png","/article/60206/%E9%85%8D%E7%BD%AEtomcat3.png","/article/60206/%E8%BF%87%E6%BB%A4%E5%99%A8.png"],"cover":"/images/theme/coverphoto/Javaweb.jpg","content":"<blockquote>\n<p>My day is done, and I am like a boat drawn on the beach,listening to the dance-music of the tide in the evening.</p>\n<p>我的白昼已经完了，我象一只泊在海滩上的小船，谛听着晚潮跳舞的乐声。　</p>\n</blockquote>\n<p>Java Web，是用Java技术来解决相关web互联网领域的技术栈。web包括：web<a href=\"https://baike.baidu.com/item/服务端/6492316\">服务端</a>和web<a href=\"https://baike.baidu.com/item/客户端/101081\">客户端</a>两部分。Java在客户端的应用有Java Applet，不过<a href=\"https://baike.baidu.com/item/使用/7741550\">使用</a>得很少，Java在<a href=\"https://baike.baidu.com/item/服务器端/3369401\">服务器端</a>的应用非常的丰富，比如<a href=\"https://baike.baidu.com/item/Servlet/477555\">Servlet</a>，<a href=\"https://baike.baidu.com/item/JSP/141543\">JSP</a>、第三方<a href=\"https://baike.baidu.com/item/框架/1212667\">框架</a>等等。Java技术对Web领域的发展注入了强大的动力。</p>\n<h2 id=\"JavaWeb\"><a href=\"#JavaWeb\" class=\"headerlink\" title=\"JavaWeb\"></a>JavaWeb</h2><p>搭建Java Web应用的开发环境—–部署Tomcat服务器、用eclipse创建Server服务、构建Java Web项目、建立第一个JSP文件、 运行JSP文件。</p>\n<p>第一个要点是掌握<a href=\"https://baike.baidu.com/item/tomcat/255751\">tomcat</a>的安装和部署。</p>\n<p>第二个要点是在IDEA中添加Server服务。把tomcat与IDEA进行关联，方便IDEA管理tomcat。</p>\n<p>第三个要点是构建Java Web项目。Web项目开发的第一步就是要建立项目。</p>\n<p>第四个要点是建立的项目如何在<a href=\"https://baike.baidu.com/item/Server/8873208\">Server</a>中运行。</p>\n<h3 id=\"Maven项目管理工具\"><a href=\"#Maven项目管理工具\" class=\"headerlink\" title=\"Maven项目管理工具\"></a>Maven项目管理工具</h3><p>Maven的核心思想：<strong>约定大于配置</strong></p>\n<a href=\"/article/37040.html\" title=\"&#96;点击跳转Maven配值&#96;\">&#96;点击跳转Maven配值&#96;</a>\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><a href=\"/article/55715.html\" title=\"点击跳转Servlet详解\">点击跳转Servlet详解</a>\n<p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的<a href=\"https://baike.baidu.com/item/服务器/100571\">服务器</a>端程序，具有独立于平台和<a href=\"https://baike.baidu.com/item/协议/13020269\">协议</a>的特性，主要功能在于交互式地浏览和生成数据，生成动态<a href=\"https://baike.baidu.com/item/Web/150564\">Web</a>内容。</p>\n<p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于<a href=\"https://baike.baidu.com/item/HTTP协议/1276942\">HTTP协议</a>的Web服务器。</p>\n<p>最早支持Servlet标准的是JavaSoft的Java <a href=\"https://baike.baidu.com/item/Web Server/9306055\">Web Server</a>，此后，一些其它的基于Java的Web服务器开始支持标准的Servlet。</p>\n<a href=\"/article/37040.html\" title=\"&#96;点击跳转Servlet配值&#96;\">&#96;点击跳转Servlet配值&#96;</a>\n<p><strong>写一个Servlet程序</strong></p>\n<ol>\n<li><p>写一个类去继承父类HttpServlet<br>HttpServlet是一个抽象类，但是没有任何抽象方法<br>HttpServlet类中自定义了很多doXxxx方法，每一种方法都对应了浏览器发送请求的方法，一般常用的浏览器发请求方式为get和post，这两种方式分别对应了这个类中的doGet方法和doPost方法。<br>HttpServlet类中，有两个service方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ServletClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>      PrintWriter writer = resp.getWriter();   <span class=\"hljs-comment\">//响应流 \t\t\t   </span><br>      writer.print(<span class=\"hljs-string\">&quot;Hello,Serlvet&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml里面添加Servlet配置</p>\n<p>Servlet映射</p>\n<p><a href=\"#Mapping问题\">点击跳转servlet映射问题</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>ServletClass<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>com.bobo.servlet.ServletClass<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>ServletClass<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/path<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置Tomcat</p>\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat0.png\" class title=\"配置tomcat0\">\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat1.png\" class title=\"image-20220101162955274\">\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat2.png\" class title=\"image-20220101163103863\">\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat3.png\" class title=\"image-20220101163153053\">\n</li>\n<li><p>启动Tomcat服务</p>\n</li>\n</ol>\n<h4 id=\"Servlet原理\"><a href=\"#Servlet原理\" class=\"headerlink\" title=\"Servlet原理\"></a>Servlet原理</h4><p><strong>Servlet的工作过程</strong></p>\n<p>步骤：</p>\n<ol>\n<li>Web Client 向Servlet容器（Tomcat）发出Http请求</li>\n<li>Servlet容器接收Web Client的请求</li>\n<li>Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。</li>\n<li>Servlet容器创建一个HttpResponse对象</li>\n<li>Servlet容器调用HttpServlet对象的doservice方法，把HttpRequest对象与HttpResponse对象作为参数传给HttpServlet 对象。</li>\n<li>HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。</li>\n<li>HttpServlet调用HttpResponse对象的有关方法，生成响应数据。</li>\n<li>Servlet容器把HttpServlet的响应结果传给Web Client。</li>\n</ol>\n<h4 id=\"Mapping问题\"><a href=\"#Mapping问题\" class=\"headerlink\" title=\"Mapping问题\"></a>Mapping问题</h4><ul>\n<li><p>一个Servlet可以指定一个映射路径</p>\n</li>\n<li><p>一个Servlet可以指定多个映射路径</p>\n</li>\n<li><p>一个Servlet可以指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/hello/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--默认请求路径--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>指定一些后缀或者前缀</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--可以自定义后缀实现请求映射 注意点，*前面不能加项目映射的路径--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>*.bobo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>优先级问题</p>\n<p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--404--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>error<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>com.bobo.servlet.ErrorServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>error<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"JSP\"><a href=\"#JSP\" class=\"headerlink\" title=\"JSP\"></a>JSP</h3><p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）是由<a href=\"https://baike.baidu.com/item/Sun Microsystems\">Sun Microsystems</a>公司主导创建的一种<a href=\"https://baike.baidu.com/item/动态网页技术/9415956\">动态网页技术</a>标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成<a href=\"https://baike.baidu.com/item/HTML\">HTML</a>、<a href=\"https://baike.baidu.com/item/XML\">XML</a>或其他格式文档的<a href=\"https://baike.baidu.com/item/Web\">Web</a>网页，然后返回给请求者。JSP技术以<a href=\"https://baike.baidu.com/item/Java\">Java</a>语言作为<a href=\"https://baike.baidu.com/item/脚本语言\">脚本语言</a>，为用户的<a href=\"https://baike.baidu.com/item/HTTP\">HTTP</a>请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。</p>\n<p>JSP将Java代码和特定变动内容嵌入到静态的页面中，实现以静态页面为模板，动态生成其中的部分内容。JSP引入了被称为“JSP动作”的XML标签，用来调用内建功能。另外，可以创建JSP标签库，然后像使用标准HTML或XML标签一样使用它们。标签库能增强功能和服务器性能，而且不受<a href=\"https://baike.baidu.com/item/跨平台\">跨平台</a>问题的限制。JSP文件在运行时会被其编译器转换成更原始的<a href=\"https://baike.baidu.com/item/Servlet\">Servlet</a>代码。JSP编译器可以把JSP文件编译成用Java代码写的Servlet，然后再由Java编译器来编译成能快速执行的二进制<a href=\"https://baike.baidu.com/item/机器码\">机器码</a>，也可以直接编译成二进制码。</p>\n<a href=\"/article/6685.html\" title=\"点击跳转JSP\">点击跳转JSP</a>\n<h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><a href=\"/article/30326.html\" title=\"点击跳转MVC三层架构\">点击跳转MVC三层架构</a>\n<p>MVC指MVC模式的某种框架，它强制性地使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。最典型的MVC就是<a href=\"/article/6685.html\" title=\"JSP\">JSP</a> + <a href=\"/article/55715.html\" title=\"servlet\">servlet</a> + <a href=\"/article/6685.html\" title=\"JavaBean\">JavaBean</a>的模式。</p>\n<p><strong>视图View</strong></p>\n<p>负责页面的显示；与用户的交互。包含各种表单。</p>\n<p><strong>控制器Controller</strong></p>\n<p>控制器负责将视图与模型一一对应起来。相当于一个模型分发器。所谓分发就是：①接收请求，并将该请求跳转（转发，重定向）到模型进行处理。②模型处理完毕后，再通过控制器，返回给视图中的请求处。建议使用Servlet实现控制器。</p>\n<p><strong>模型Model</strong></p>\n<p>模型负责各个功能的实现（如登录、增加、删除功能）。模型用JavaBean实现。</p>\n<blockquote>\n<p>JavaBeans :<br>①是Java中一种特殊的类（换言之：JavaBean就是一个Java类）.<br>一个Java类 ，满足以下要求，则可称为一个JavaBean<br>  a. public修饰的类，提供public 无参构造方法<br>  b. 所有属性 都是private<br>  c. 提供getter和setter方法</p>\n<p>②从使用层面来看，JavaBean分为2大类：<br>  a. 封装业务逻辑的JavaBean （eg:LoginDao.java 封装了登录逻辑）<br>  b. 封装数据的JavaBean （实体类：eg：Student.java  Vedio.java 。往往对应于数据库中的一张表，即数据库中有个Student表，项目中就有个Student.java类）</p>\n<p>③JavaBean 是一个可以重复使用的组件，通过编写一个组件来实现某种通用功能，“一次编写、任何地方执行、任何地方重用”。</p>\n</blockquote>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><img src=\"/article/60206/%E8%BF%87%E6%BB%A4%E5%99%A8.png\" class title=\"img\">\n<p><strong>过滤器如何编写</strong></p>\n<ol>\n<li><p>过滤器(Filter接口)是一个接口，所以需要一个实现这个接口的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.*;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(FilterConfig filterConfig)</span> <span class=\"hljs-keyword\">throws</span> ServletException </span>&#123;<br>        <br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doFilter</span><span class=\"hljs-params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>filterChain.doFilter()方法；</strong><br>执行目标资源，或是执行下一个过滤器！如果没有下一个过滤器那么执行的是目标资源，如果有，那么执行下一个过滤器</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>配置:在<code>web.xml</code>文件中配置，配置之后才会有效果，就如servlet一样</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>MyFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-class</span>&gt;</span>com.bobo.filter.MyFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-mapping</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>MyFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span><br>  \t<span class=\"hljs-comment\">&lt;!--只要是/filter下面的任何请求都会经过这个过滤器--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/filter/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>多个过滤器的执行顺序</strong></p>\n<p>配置顺序决定了过滤器的执行顺序<br>就是哪个文件在第一个，谁就是第一个执行</p>\n<p><strong>过滤器的四种拦截方式</strong>：</p>\n<ul>\n<li>REQUEST 是默认的，当输入其他的，那么默认的将取消（消失）</li>\n<li>请求（拦的是直接请求，不拦转发请求）：REQUEST</li>\n<li>转发（专门拦转发）：FORWARD</li>\n<li>包含（专门拦包含）：INCLUDE</li>\n<li>错误（专门拦错误）：ERROR</li>\n</ul>\n</li>\n</ol>\n<p><strong>Filter接口的生命周期</strong></p>\n<p>初始化(init())到使用（doFilter()）到关闭之前（destroy()）</p>\n<ol>\n<li>init(FilterConfig)<br>什么执行：创建Filter之后，马上执行；<br>什么时候创建呢：Filter会在服务器启动时就创建</li>\n<li>doFilter(ServletRequest,ServletResponse,FilterChain)<br>什么时候执行：每次过滤时都会执行</li>\n<li>destroy()<br>什么时候执行：在销毁之前执行<br>什么时候销毁呢：在服务器关闭时销毁</li>\n</ol>\n<blockquote>\n<p>当启动服务器时init方法马上执行了（在还没打开网页前已经执行了）<br>在过滤时(网页刷新时)才运行doFilter方法<br>当关掉服务器时执行destroy方法，就是当你点击关闭服务器是，就在执行了，伴随关闭一起执行</p>\n</blockquote>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.*;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CharaterEncodingFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>&#123;<br>    <span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-comment\">//web服务启动就初始化</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(FilterConfig filterConfig)</span> <span class=\"hljs-keyword\">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter初始化&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doFilter</span><span class=\"hljs-params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;<br>        servletRequest.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>        servletResponse.setContentType(<span class=\"hljs-string\">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class=\"hljs-comment\">//chain链</span><br>        <span class=\"hljs-comment\">//过滤中的所有代码，在特定请求的时候都会执行</span><br>        <span class=\"hljs-comment\">//必须要让过滤器继续同行</span><br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter执行前&quot;</span>);<br>        filterChain.doFilter(servletRequest,servletResponse);  <span class=\"hljs-comment\">//让我们的请求继续走，如果不写，程序到这里就会被拦截</span><br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter执行后&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">//注销</span><br>    <span class=\"hljs-comment\">//web服务器关闭时 过滤会注销</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter注销&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>通过监听获取Seesion中用户</strong></p>\n<p>因为要用到HttpServletRequest中的方法，所以对ServletRequest进行了强转，将<code>ServletRequest servletRequest</code>强制转换为子类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">HttpServletRequest req = (HttpServletRequest) servletRequest;<br></code></pre></td></tr></table></figure>\n<p>此时有一些困惑：子类除了完全继承父类的方法外还会拓展自己的方法，所以我们在调用子类方法时可能在父类实现中是找不到的，所以向下转型不安全的。</p>\n<p>其实<code>doFilter</code>的参数request对象的生成方式不是<code>ServletRequest request = new ServletRequest();</code>这种形式，而是<code>ServletRequest request = new HttpServletRequest();</code>这种形式，参数里的request不是父类ServletRequest的对象，而是HttpServletRequest的上转型对象。</p>\n<p>在这篇<a href=\"https://www.cnblogs.com/gwyy/p/9078135.html\">博客</a>中，博主给了很好的解释。</p>\n<h3 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h3><p>监听器就是监听某个对象的的状态变化的组件</p>\n<ul>\n<li>被监听的对象（三个域对象 request，session，servletContext）</li>\n<li>监听器：监听事件源对象， 事件源对象的状态的变化都会触发监听器 。</li>\n<li>注册监听器：将监听器与事件源进行绑定。</li>\n<li>响应行为：监听器监听到事件源的状态变化时，所涉及的功能代码（程序员编写代码）</li>\n</ul>\n<p>监听器的编写步骤：</p>\n<ol>\n<li><p>编写一个监听器类去实现监听器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionEvent;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyListener</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HttpSessionListener</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionCreated</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        <br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionDestroyed</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>覆盖监听器的方法</p>\n</li>\n<li><p>需要在web.xml中进行配置（注册）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--    注册监听器--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">listener</span>&gt;</span>  <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">listenerclass</span>&gt;</span>com.bobo.listenre.MyListener<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">listener-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">listener</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.ServletContext;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionEvent;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class=\"hljs-comment\">//统计网站在线人数 --统计session</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyListener</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HttpSessionListener</span></span>&#123;<br>    <span class=\"hljs-comment\">//创建session的监听</span><br>    <span class=\"hljs-comment\">//一旦创建session就会触发一次</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionCreated</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br>        System.out.println(httpSessionEvent.getSession().getId());<br>        Integer onlineCount =(Integer) ctx.getAttribute(<span class=\"hljs-string\">&quot;OnlineCount&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (onlineCount==<span class=\"hljs-keyword\">null</span>)&#123;<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(<span class=\"hljs-number\">1</span>);<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(count+<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        ctx.setAttribute(<span class=\"hljs-string\">&quot;onlineCount&quot;</span>,onlineCount);<br>    &#125;<br>    <span class=\"hljs-comment\">//销毁session的监听</span><br>    <span class=\"hljs-comment\">//一旦销毁session就会触发一次</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionDestroyed</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br><br>        Integer onlineCount =(Integer) ctx.getAttribute(<span class=\"hljs-string\">&quot;OnlineCount&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (onlineCount==<span class=\"hljs-keyword\">null</span>)&#123;<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(<span class=\"hljs-number\">1</span>);<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(count-<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        ctx.setAttribute(<span class=\"hljs-string\">&quot;onlineCount&quot;</span>,onlineCount);<br>    &#125;<br><br><span class=\"hljs-comment\">//    session销毁：</span><br>    <span class=\"hljs-comment\">//1。手动销毁  httpSessionEvent.getSession().invalidate();</span><br>    <span class=\"hljs-comment\">//2。自动销毁   web.xml中配置</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&lt;%@ page contentType=&quot;text/html; charset=utf-8&quot; language=&quot;java&quot; %&gt;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.055ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 2176.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">Title</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-54\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-54\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"704\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1050\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"1411\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1710\" y=\"0\"/>\n</g>\n</svg><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>当前有<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&lt;%=this.getServletConfig().getServletContext().getAttribute(&quot;onlineCount&quot;)%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>人在线<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>首先导入<code>commons-io-版本.jar</code>与<code>commons-fileupload-版本.jar</code></p>\n<p>注意事项：</p>\n<ol>\n<li>为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。</li>\n<li>为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。</li>\n<li>为防止一个目录下面出现太多文件，要使用hash算法打散存储。</li>\n<li>要限制上传文件的最大值。</li>\n<li>要限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。</li>\n</ol>\n<p><strong>通过表单上传文件</strong></p>\n<ul>\n<li>get  上传文件大小有限制</li>\n<li>post   上传文件大小没有限制</li>\n</ul>\n<p>必须要用 post 进行提交，这种方式，将会把数据封装在请求体中进行发送。</p>\n<p><strong>使用的类</strong></p>\n<ol>\n<li><p>FileItem类</p>\n<p>表单如果包含一个文件上传输入选项，这个表单的<code>enctype</code>属性必须设置为<code>enctype=&quot;multipart/form-date&quot;</code>。</p>\n</li>\n<li><p>ServletFileUpload类</p>\n<p>负责处理上传的文件数据，并将表单中的每个输入项封装成一个<code>FileItem</code>对象，使用parseRequest(HttpServletReqquest)方法可以将通过表单中的每一个HTML标签提交的数据封装成一个FileItem对象，然后以List列表的形式返回。</p>\n<p>在使用<code>ServletFileUpload</code>对象解析请求时需要<code>DiskFileItemFactory</code>对象，所以，我们需要在进行解析工作前构造好<code>DiskFileItemFactory</code>对象，并通过<code>ServletFileUpload</code>对象的构造方法或<code>setFileItemFactory()</code>方法设置<code>ServletFileUpload</code>对象的<code>fileItmlFactory</code>属性。</p>\n</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/linghuainian/article/details/82253247\">博文推荐</a></p>\n","more":"<blockquote>\n<p>My day is done, and I am like a boat drawn on the beach,listening to the dance-music of the tide in the evening.</p>\n<p>我的白昼已经完了，我象一只泊在海滩上的小船，谛听着晚潮跳舞的乐声。　</p>\n</blockquote>\n<p>Java Web，是用Java技术来解决相关web互联网领域的技术栈。web包括：web<a href=\"https://baike.baidu.com/item/服务端/6492316\">服务端</a>和web<a href=\"https://baike.baidu.com/item/客户端/101081\">客户端</a>两部分。Java在客户端的应用有Java Applet，不过<a href=\"https://baike.baidu.com/item/使用/7741550\">使用</a>得很少，Java在<a href=\"https://baike.baidu.com/item/服务器端/3369401\">服务器端</a>的应用非常的丰富，比如<a href=\"https://baike.baidu.com/item/Servlet/477555\">Servlet</a>，<a href=\"https://baike.baidu.com/item/JSP/141543\">JSP</a>、第三方<a href=\"https://baike.baidu.com/item/框架/1212667\">框架</a>等等。Java技术对Web领域的发展注入了强大的动力。</p>\n<h2 id=\"JavaWeb\"><a href=\"#JavaWeb\" class=\"headerlink\" title=\"JavaWeb\"></a>JavaWeb</h2><p>搭建Java Web应用的开发环境—–部署Tomcat服务器、用eclipse创建Server服务、构建Java Web项目、建立第一个JSP文件、 运行JSP文件。</p>\n<p>第一个要点是掌握<a href=\"https://baike.baidu.com/item/tomcat/255751\">tomcat</a>的安装和部署。</p>\n<p>第二个要点是在IDEA中添加Server服务。把tomcat与IDEA进行关联，方便IDEA管理tomcat。</p>\n<p>第三个要点是构建Java Web项目。Web项目开发的第一步就是要建立项目。</p>\n<p>第四个要点是建立的项目如何在<a href=\"https://baike.baidu.com/item/Server/8873208\">Server</a>中运行。</p>\n<h3 id=\"Maven项目管理工具\"><a href=\"#Maven项目管理工具\" class=\"headerlink\" title=\"Maven项目管理工具\"></a>Maven项目管理工具</h3><p>Maven的核心思想：<strong>约定大于配置</strong></p>\n<a href=\"/article/37040.html\" title=\"&#96;点击跳转Maven配值&#96;\">&#96;点击跳转Maven配值&#96;</a>\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><a href=\"/article/55715.html\" title=\"点击跳转Servlet详解\">点击跳转Servlet详解</a>\n<p>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的<a href=\"https://baike.baidu.com/item/服务器/100571\">服务器</a>端程序，具有独立于平台和<a href=\"https://baike.baidu.com/item/协议/13020269\">协议</a>的特性，主要功能在于交互式地浏览和生成数据，生成动态<a href=\"https://baike.baidu.com/item/Web/150564\">Web</a>内容。</p>\n<p>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于<a href=\"https://baike.baidu.com/item/HTTP协议/1276942\">HTTP协议</a>的Web服务器。</p>\n<p>最早支持Servlet标准的是JavaSoft的Java <a href=\"https://baike.baidu.com/item/Web Server/9306055\">Web Server</a>，此后，一些其它的基于Java的Web服务器开始支持标准的Servlet。</p>\n<a href=\"/article/37040.html\" title=\"&#96;点击跳转Servlet配值&#96;\">&#96;点击跳转Servlet配值&#96;</a>\n<p><strong>写一个Servlet程序</strong></p>\n<ol>\n<li><p>写一个类去继承父类HttpServlet<br>HttpServlet是一个抽象类，但是没有任何抽象方法<br>HttpServlet类中自定义了很多doXxxx方法，每一种方法都对应了浏览器发送请求的方法，一般常用的浏览器发请求方式为get和post，这两种方式分别对应了这个类中的doGet方法和doPost方法。<br>HttpServlet类中，有两个service方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ServletClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>      PrintWriter writer = resp.getWriter();   <span class=\"hljs-comment\">//响应流 \t\t\t   </span><br>      writer.print(<span class=\"hljs-string\">&quot;Hello,Serlvet&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>在web.xml里面添加Servlet配置</p>\n<p>Servlet映射</p>\n<p><a href=\"#Mapping问题\">点击跳转servlet映射问题</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>ServletClass<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>com.bobo.servlet.ServletClass<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>ServletClass<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/path<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置Tomcat</p>\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat0.png\" class title=\"配置tomcat0\">\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat1.png\" class title=\"image-20220101162955274\">\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat2.png\" class title=\"image-20220101163103863\">\n<img src=\"/article/60206/%E9%85%8D%E7%BD%AEtomcat3.png\" class title=\"image-20220101163153053\">\n</li>\n<li><p>启动Tomcat服务</p>\n</li>\n</ol>\n<h4 id=\"Servlet原理\"><a href=\"#Servlet原理\" class=\"headerlink\" title=\"Servlet原理\"></a>Servlet原理</h4><p><strong>Servlet的工作过程</strong></p>\n<p>步骤：</p>\n<ol>\n<li>Web Client 向Servlet容器（Tomcat）发出Http请求</li>\n<li>Servlet容器接收Web Client的请求</li>\n<li>Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中。</li>\n<li>Servlet容器创建一个HttpResponse对象</li>\n<li>Servlet容器调用HttpServlet对象的doservice方法，把HttpRequest对象与HttpResponse对象作为参数传给HttpServlet 对象。</li>\n<li>HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息。</li>\n<li>HttpServlet调用HttpResponse对象的有关方法，生成响应数据。</li>\n<li>Servlet容器把HttpServlet的响应结果传给Web Client。</li>\n</ol>\n<h4 id=\"Mapping问题\"><a href=\"#Mapping问题\" class=\"headerlink\" title=\"Mapping问题\"></a>Mapping问题</h4><ul>\n<li><p>一个Servlet可以指定一个映射路径</p>\n</li>\n<li><p>一个Servlet可以指定多个映射路径</p>\n</li>\n<li><p>一个Servlet可以指定通用映射路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/hello/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>默认请求路径</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--默认请求路径--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>指定一些后缀或者前缀</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--可以自定义后缀实现请求映射 注意点，*前面不能加项目映射的路径--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>*.bobo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>优先级问题</p>\n<p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--404--&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>error<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-class</span>&gt;</span>com.bobo.servlet.ErrorServlet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-class</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet</span>&gt;</span> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-mapping</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">servlet-name</span>&gt;</span>error<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-name</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"JSP\"><a href=\"#JSP\" class=\"headerlink\" title=\"JSP\"></a>JSP</h3><p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）是由<a href=\"https://baike.baidu.com/item/Sun Microsystems\">Sun Microsystems</a>公司主导创建的一种<a href=\"https://baike.baidu.com/item/动态网页技术/9415956\">动态网页技术</a>标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成<a href=\"https://baike.baidu.com/item/HTML\">HTML</a>、<a href=\"https://baike.baidu.com/item/XML\">XML</a>或其他格式文档的<a href=\"https://baike.baidu.com/item/Web\">Web</a>网页，然后返回给请求者。JSP技术以<a href=\"https://baike.baidu.com/item/Java\">Java</a>语言作为<a href=\"https://baike.baidu.com/item/脚本语言\">脚本语言</a>，为用户的<a href=\"https://baike.baidu.com/item/HTTP\">HTTP</a>请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。</p>\n<p>JSP将Java代码和特定变动内容嵌入到静态的页面中，实现以静态页面为模板，动态生成其中的部分内容。JSP引入了被称为“JSP动作”的XML标签，用来调用内建功能。另外，可以创建JSP标签库，然后像使用标准HTML或XML标签一样使用它们。标签库能增强功能和服务器性能，而且不受<a href=\"https://baike.baidu.com/item/跨平台\">跨平台</a>问题的限制。JSP文件在运行时会被其编译器转换成更原始的<a href=\"https://baike.baidu.com/item/Servlet\">Servlet</a>代码。JSP编译器可以把JSP文件编译成用Java代码写的Servlet，然后再由Java编译器来编译成能快速执行的二进制<a href=\"https://baike.baidu.com/item/机器码\">机器码</a>，也可以直接编译成二进制码。</p>\n<a href=\"/article/6685.html\" title=\"点击跳转JSP\">点击跳转JSP</a>\n<h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><a href=\"/article/30326.html\" title=\"点击跳转MVC三层架构\">点击跳转MVC三层架构</a>\n<p>MVC指MVC模式的某种框架，它强制性地使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。最典型的MVC就是<a href=\"/article/6685.html\" title=\"JSP\">JSP</a> + <a href=\"/article/55715.html\" title=\"servlet\">servlet</a> + <a href=\"/article/6685.html\" title=\"JavaBean\">JavaBean</a>的模式。</p>\n<p><strong>视图View</strong></p>\n<p>负责页面的显示；与用户的交互。包含各种表单。</p>\n<p><strong>控制器Controller</strong></p>\n<p>控制器负责将视图与模型一一对应起来。相当于一个模型分发器。所谓分发就是：①接收请求，并将该请求跳转（转发，重定向）到模型进行处理。②模型处理完毕后，再通过控制器，返回给视图中的请求处。建议使用Servlet实现控制器。</p>\n<p><strong>模型Model</strong></p>\n<p>模型负责各个功能的实现（如登录、增加、删除功能）。模型用JavaBean实现。</p>\n<blockquote>\n<p>JavaBeans :<br>①是Java中一种特殊的类（换言之：JavaBean就是一个Java类）.<br>一个Java类 ，满足以下要求，则可称为一个JavaBean<br>  a. public修饰的类，提供public 无参构造方法<br>  b. 所有属性 都是private<br>  c. 提供getter和setter方法</p>\n<p>②从使用层面来看，JavaBean分为2大类：<br>  a. 封装业务逻辑的JavaBean （eg:LoginDao.java 封装了登录逻辑）<br>  b. 封装数据的JavaBean （实体类：eg：Student.java  Vedio.java 。往往对应于数据库中的一张表，即数据库中有个Student表，项目中就有个Student.java类）</p>\n<p>③JavaBean 是一个可以重复使用的组件，通过编写一个组件来实现某种通用功能，“一次编写、任何地方执行、任何地方重用”。</p>\n</blockquote>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><img src=\"/article/60206/%E8%BF%87%E6%BB%A4%E5%99%A8.png\" class title=\"img\">\n<p><strong>过滤器如何编写</strong></p>\n<ol>\n<li><p>过滤器(Filter接口)是一个接口，所以需要一个实现这个接口的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.*;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(FilterConfig filterConfig)</span> <span class=\"hljs-keyword\">throws</span> ServletException </span>&#123;<br>        <br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doFilter</span><span class=\"hljs-params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>filterChain.doFilter()方法；</strong><br>执行目标资源，或是执行下一个过滤器！如果没有下一个过滤器那么执行的是目标资源，如果有，那么执行下一个过滤器</p>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>配置:在<code>web.xml</code>文件中配置，配置之后才会有效果，就如servlet一样</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>MyFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-class</span>&gt;</span>com.bobo.filter.MyFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-mapping</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter-name</span>&gt;</span>MyFilter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-name</span>&gt;</span><br>  \t<span class=\"hljs-comment\">&lt;!--只要是/filter下面的任何请求都会经过这个过滤器--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url-pattern</span>&gt;</span>/filter/*<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url-pattern</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>多个过滤器的执行顺序</strong></p>\n<p>配置顺序决定了过滤器的执行顺序<br>就是哪个文件在第一个，谁就是第一个执行</p>\n<p><strong>过滤器的四种拦截方式</strong>：</p>\n<ul>\n<li>REQUEST 是默认的，当输入其他的，那么默认的将取消（消失）</li>\n<li>请求（拦的是直接请求，不拦转发请求）：REQUEST</li>\n<li>转发（专门拦转发）：FORWARD</li>\n<li>包含（专门拦包含）：INCLUDE</li>\n<li>错误（专门拦错误）：ERROR</li>\n</ul>\n</li>\n</ol>\n<p><strong>Filter接口的生命周期</strong></p>\n<p>初始化(init())到使用（doFilter()）到关闭之前（destroy()）</p>\n<ol>\n<li>init(FilterConfig)<br>什么执行：创建Filter之后，马上执行；<br>什么时候创建呢：Filter会在服务器启动时就创建</li>\n<li>doFilter(ServletRequest,ServletResponse,FilterChain)<br>什么时候执行：每次过滤时都会执行</li>\n<li>destroy()<br>什么时候执行：在销毁之前执行<br>什么时候销毁呢：在服务器关闭时销毁</li>\n</ol>\n<blockquote>\n<p>当启动服务器时init方法马上执行了（在还没打开网页前已经执行了）<br>在过滤时(网页刷新时)才运行doFilter方法<br>当关掉服务器时执行destroy方法，就是当你点击关闭服务器是，就在执行了，伴随关闭一起执行</p>\n</blockquote>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.*;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CharaterEncodingFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Filter</span> </span>&#123;<br>    <span class=\"hljs-comment\">//初始化</span><br>    <span class=\"hljs-comment\">//web服务启动就初始化</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(FilterConfig filterConfig)</span> <span class=\"hljs-keyword\">throws</span> ServletException </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter初始化&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doFilter</span><span class=\"hljs-params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException </span>&#123;<br>        servletRequest.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>        servletResponse.setCharacterEncoding(<span class=\"hljs-string\">&quot;utf-8&quot;</span>);<br>        servletResponse.setContentType(<span class=\"hljs-string\">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class=\"hljs-comment\">//chain链</span><br>        <span class=\"hljs-comment\">//过滤中的所有代码，在特定请求的时候都会执行</span><br>        <span class=\"hljs-comment\">//必须要让过滤器继续同行</span><br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter执行前&quot;</span>);<br>        filterChain.doFilter(servletRequest,servletResponse);  <span class=\"hljs-comment\">//让我们的请求继续走，如果不写，程序到这里就会被拦截</span><br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter执行后&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">//注销</span><br>    <span class=\"hljs-comment\">//web服务器关闭时 过滤会注销</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;CharaterEncodingFilter注销&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>通过监听获取Seesion中用户</strong></p>\n<p>因为要用到HttpServletRequest中的方法，所以对ServletRequest进行了强转，将<code>ServletRequest servletRequest</code>强制转换为子类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">HttpServletRequest req = (HttpServletRequest) servletRequest;<br></code></pre></td></tr></table></figure>\n<p>此时有一些困惑：子类除了完全继承父类的方法外还会拓展自己的方法，所以我们在调用子类方法时可能在父类实现中是找不到的，所以向下转型不安全的。</p>\n<p>其实<code>doFilter</code>的参数request对象的生成方式不是<code>ServletRequest request = new ServletRequest();</code>这种形式，而是<code>ServletRequest request = new HttpServletRequest();</code>这种形式，参数里的request不是父类ServletRequest的对象，而是HttpServletRequest的上转型对象。</p>\n<p>在这篇<a href=\"https://www.cnblogs.com/gwyy/p/9078135.html\">博客</a>中，博主给了很好的解释。</p>\n<h3 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h3><p>监听器就是监听某个对象的的状态变化的组件</p>\n<ul>\n<li>被监听的对象（三个域对象 request，session，servletContext）</li>\n<li>监听器：监听事件源对象， 事件源对象的状态的变化都会触发监听器 。</li>\n<li>注册监听器：将监听器与事件源进行绑定。</li>\n<li>响应行为：监听器监听到事件源的状态变化时，所涉及的功能代码（程序员编写代码）</li>\n</ul>\n<p>监听器的编写步骤：</p>\n<ol>\n<li><p>编写一个监听器类去实现监听器接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionEvent;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyListener</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HttpSessionListener</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionCreated</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        <br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionDestroyed</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>覆盖监听器的方法</p>\n</li>\n<li><p>需要在web.xml中进行配置（注册）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--    注册监听器--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">listener</span>&gt;</span>  <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">listenerclass</span>&gt;</span>com.bobo.listenre.MyListener<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">listener-class</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">listener</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> javax.servlet.ServletContext;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionEvent;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class=\"hljs-comment\">//统计网站在线人数 --统计session</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyListener</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">HttpSessionListener</span></span>&#123;<br>    <span class=\"hljs-comment\">//创建session的监听</span><br>    <span class=\"hljs-comment\">//一旦创建session就会触发一次</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionCreated</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br>        System.out.println(httpSessionEvent.getSession().getId());<br>        Integer onlineCount =(Integer) ctx.getAttribute(<span class=\"hljs-string\">&quot;OnlineCount&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (onlineCount==<span class=\"hljs-keyword\">null</span>)&#123;<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(<span class=\"hljs-number\">1</span>);<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(count+<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        ctx.setAttribute(<span class=\"hljs-string\">&quot;onlineCount&quot;</span>,onlineCount);<br>    &#125;<br>    <span class=\"hljs-comment\">//销毁session的监听</span><br>    <span class=\"hljs-comment\">//一旦销毁session就会触发一次</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sessionDestroyed</span><span class=\"hljs-params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        ServletContext ctx = httpSessionEvent.getSession().getServletContext();<br><br>        Integer onlineCount =(Integer) ctx.getAttribute(<span class=\"hljs-string\">&quot;OnlineCount&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (onlineCount==<span class=\"hljs-keyword\">null</span>)&#123;<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(<span class=\"hljs-number\">1</span>);<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">int</span> count = onlineCount.intValue();<br>            onlineCount = <span class=\"hljs-keyword\">new</span> Integer(count-<span class=\"hljs-number\">1</span>);<br>        &#125;<br>        ctx.setAttribute(<span class=\"hljs-string\">&quot;onlineCount&quot;</span>,onlineCount);<br>    &#125;<br><br><span class=\"hljs-comment\">//    session销毁：</span><br>    <span class=\"hljs-comment\">//1。手动销毁  httpSessionEvent.getSession().invalidate();</span><br>    <span class=\"hljs-comment\">//2。自动销毁   web.xml中配置</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&lt;%@ page contentType=&quot;text/html; charset=utf-8&quot; language=&quot;java&quot; %&gt;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.055ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewbox=\"0 -791.3 2176.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">Title</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-54\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-69\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-74\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-54\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-69\" x=\"704\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-74\" x=\"1050\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"1411\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"1710\" y=\"0\"/>\n</g>\n</svg><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>当前有<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&lt;%=this.getServletConfig().getServletContext().getAttribute(&quot;onlineCount&quot;)%&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>人在线<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>首先导入<code>commons-io-版本.jar</code>与<code>commons-fileupload-版本.jar</code></p>\n<p>注意事项：</p>\n<ol>\n<li>为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。</li>\n<li>为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。</li>\n<li>为防止一个目录下面出现太多文件，要使用hash算法打散存储。</li>\n<li>要限制上传文件的最大值。</li>\n<li>要限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。</li>\n</ol>\n<p><strong>通过表单上传文件</strong></p>\n<ul>\n<li>get  上传文件大小有限制</li>\n<li>post   上传文件大小没有限制</li>\n</ul>\n<p>必须要用 post 进行提交，这种方式，将会把数据封装在请求体中进行发送。</p>\n<p><strong>使用的类</strong></p>\n<ol>\n<li><p>FileItem类</p>\n<p>表单如果包含一个文件上传输入选项，这个表单的<code>enctype</code>属性必须设置为<code>enctype=&quot;multipart/form-date&quot;</code>。</p>\n</li>\n<li><p>ServletFileUpload类</p>\n<p>负责处理上传的文件数据，并将表单中的每个输入项封装成一个<code>FileItem</code>对象，使用parseRequest(HttpServletReqquest)方法可以将通过表单中的每一个HTML标签提交的数据封装成一个FileItem对象，然后以List列表的形式返回。</p>\n<p>在使用<code>ServletFileUpload</code>对象解析请求时需要<code>DiskFileItemFactory</code>对象，所以，我们需要在进行解析工作前构造好<code>DiskFileItemFactory</code>对象，并通过<code>ServletFileUpload</code>对象的构造方法或<code>setFileItemFactory()</code>方法设置<code>ServletFileUpload</code>对象的<code>fileItmlFactory</code>属性。</p>\n</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/linghuainian/article/details/82253247\">博文推荐</a></p>\n","categories":[{"name":"JavaWeb","path":"api/categories/JavaWeb.json"},{"name":"Java","path":"api/categories/Java.json"},{"name":"JavaWeb","path":"api/categories/JavaWeb.json"}],"tags":[{"name":"JavaWeb,Java","path":"api/tags/JavaWeb,Java.json"}]}