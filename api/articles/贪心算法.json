{"title":"贪心算法","slug":"贪心算法","date":"2022-05-29T05:04:47.000Z","updated":"2022-07-11T13:10:18.137Z","comments":true,"path":"api/articles/贪心算法.json","realPath":null,"excerpt":null,"covers":["/article/51855/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96.jpg","/article/51855/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF.jpg","/article/51855/Huffman%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81.jpg","/article/51855/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.jpg"],"cover":"/images/theme/coverphoto/贪心算法.jpg","content":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><p>贪心算法解决问题的步骤:</p>\n<ol>\n<li>针对一组数据，我们定义了限制值和期望值，希望从中选出几个数据，在满足限制值的情况下，期望值最大。<strong>当看到这类问题的时候，首先要联想到贪心算法。</strong></li>\n<li>尝试看这个问题是否可以用贪心算法解决：每次选择当前情况下，在对限制值同等贡献量的情况下，对期望值贡献最大的数据。</li>\n<li>第三步，举几个例子看下贪心算法产生的结果是否是最优的。</li>\n</ol>\n<h3 id=\"贪心算法实战分析\"><a href=\"#贪心算法实战分析\" class=\"headerlink\" title=\"贪心算法实战分析\"></a>贪心算法实战分析</h3><ol>\n<li><p>分糖果</p>\n<blockquote>\n<p>有 m 个糖果和 n 个孩子。现在要把糖果分给这些孩子吃，但是糖果少，孩子多（m&lt;n），所以糖果只能分配给一部分孩子。</p>\n<p>每个糖果的大小不等，这 m 个糖果的大小分别是 s1，s2，s3，……，sm。除此之外，每个孩子对糖果大小的需求也是不一样的，只有糖果的大小大于等于孩子的对糖果大小的需求的时候，孩子才得到满足。假设这 n 个孩子对糖果大小的需求分别是 g1，g2，g3，……，gn。</p>\n<p>如何分配糖果，能尽可能满足最多数量的孩子？</p>\n</blockquote>\n<p><strong>抽象问题：从 n 个孩子中，抽取一部分孩子分配糖果，让满足的孩子的个数（期望值）是最大的。这个问题的限制值就是糖果个数 m。</strong></p>\n<p>对于一个孩子来说，如果小的糖果可以满足，就没必要用更大的糖果，这样更大的就可以留给其他对糖果大小需求更大的孩子。另一方面，对糖果大小需求小的孩子更容易被满足，所以，可以从需求小的孩子开始分配糖果。因为满足一个需求大的孩子跟满足一个需求小的孩子，对期望值的贡献是一样的。</p>\n<p>每次从剩下的孩子中，找出对糖果大小需求最小的，然后发给他剩下的糖果中能满足他的最小的糖果，这样得到的分配方案，也就是满足的孩子个数最多的方案。</p>\n</li>\n<li><p>钱币找零</p>\n<blockquote>\n<p>假设有 1 元、2 元、5 元、10 元、20 元、50 元、100 元这些面额的纸币，它们的张数分别是 c1、c2、c5、c10、c20、c50、c100。我们现在要用这些钱来支付 K 元，最少要用多少张纸币呢？</p>\n</blockquote>\n<p>先用面值最大的来支付，如果不够，就继续用更小一点面值的，以此类推，最后剩下的用 1 元来补齐。</p>\n</li>\n<li><p>区间覆盖</p>\n<blockquote>\n<p>假设有 n 个区间，区间的起始端点和结束端点分别是[l1, r1]，[l2, r2]，[l3, r3]，……，[ln, rn]。我们从这 n 个区间中选出一部分区间，这部分区间满足两两不相交（端点相交的情况不算相交），最多能选出多少个区间呢？</p>\n<img src=\"/article/51855/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96.jpg\" class title=\"区间覆盖\">\n</blockquote>\n<p><strong>解决思路:</strong>假设这 n 个区间中最左端点是 lmin，最右端点是 rmax。这个问题就相当于，我们选择几个不相交的区间，从左到右将[lmin, rmax]覆盖上。我们按照起始端点从小到大的顺序对这 n 个区间排序。</p>\n<p>每次选择的时候，左端点跟前面的已经覆盖的区间不重合的，右端点又尽量小的，这样可以让剩下的未覆盖区间尽可能的大，就可以放置更多的区间。这实际上就是一种贪心的选择方法。</p>\n<img src=\"/article/51855/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF.jpg\" class title=\"区间覆盖解决思路\">\n</li>\n</ol>\n<h3 id=\"贪心算法实现Huffman压缩编码\"><a href=\"#贪心算法实现Huffman压缩编码\" class=\"headerlink\" title=\"贪心算法实现Huffman压缩编码\"></a>贪心算法实现Huffman压缩编码</h3><blockquote>\n<p>假设有一个包含 1000 个字符的文件，每个字符占 1 个 byte（1byte=8bits），存储这 1000 个字符就一共需要 8000bits，那有没有更加节省空间的存储方式呢？</p>\n<p>假设通过统计分析发现，这 1000 个字符中只包含 6 种不同字符，假设它们分别是 a、b、c、d、e、f。而 3 个二进制位（bit）就可以表示 8 个不同的字符，所以，为了尽量减少存储空间，每个字符我们用 3 个二进制位来表示。那存储这 1000 个字符只需要 3000bits 就可以了，比原来的存储方式节省了很多空间。不过，还有没有更加节省空间的存储方式呢？</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">a(000)、b(001)、c(010)、d(011)、e(100)、f(101)<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>霍夫曼编码是一种十分有效的编码方法</strong>，广泛用于数据压缩中，其压缩率通常在 20%～90% 之间。</p>\n<p>霍夫曼编码不仅会考察文本中有多少个不同字符，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。霍夫曼编码试图用这种不等长的编码方法，来进一步增加压缩的效率。</p>\n<p>如何给不同频率的字符选择不同长度的编码呢？<strong>根据贪心的思想，可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码。</strong></p>\n<blockquote>\n<p>对于等长的编码来说，解压缩起来很简单。比如用 3 个 bit 表示一个字符。在解压缩的时候，每次从文本中读取 3 位二进制码，然后翻译成对应的字符。</p>\n<p><strong>但是，霍夫曼编码是不等长的，每次应该读取 1 位还是 2 位、3 位等等来解压缩呢？</strong>这个问题就导致霍夫曼编码解压缩起来比较复杂。为了避免解压缩过程中的歧义，<strong>霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。</strong></p>\n</blockquote>\n<p><strong>霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。</strong></p>\n<p>假设这 6 个字符出现的频率从高到低依次是 a、b、c、d、e、f。把它们编码下面这个样子，任何一个字符的编码都不是另一个的前缀，<strong>在解压缩的时候，每次会读取尽可能长的可解压的二进制串，所以在解压缩的时候也不会歧义。</strong></p>\n<img src=\"/article/51855/Huffman%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81.jpg\" class title=\"Huffman压缩编码\">\n<p><strong>根据字符出现频率的不同，给不同的字符进行不同长度的编码</strong></p>\n<p>把每个字符看作一个节点，并且附带着把频率放到优先级队列中。从队列中取出频率最小的两个节点 A、B，然后新建一个节点 C，把频率设置为两个节点的频率之和，并把这个新节点 C 作为节点 A、B 的父节点。最后再把 C 节点放入到优先级队列中。重复这个过程，直到队列中没有数据。</p>\n\n<p><strong>给每一条边加上画一个权值，指向左子节点的边标记为 0，指向右子节点的边，标记为 1，那从根节点到叶节点的路径就是叶节点对应字符的霍夫曼编码。</strong></p>\n<img src=\"/article/51855/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.jpg\" class title=\"霍夫曼编码\">\n","more":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><p>贪心算法解决问题的步骤:</p>\n<ol>\n<li>针对一组数据，我们定义了限制值和期望值，希望从中选出几个数据，在满足限制值的情况下，期望值最大。<strong>当看到这类问题的时候，首先要联想到贪心算法。</strong></li>\n<li>尝试看这个问题是否可以用贪心算法解决：每次选择当前情况下，在对限制值同等贡献量的情况下，对期望值贡献最大的数据。</li>\n<li>第三步，举几个例子看下贪心算法产生的结果是否是最优的。</li>\n</ol>\n<h3 id=\"贪心算法实战分析\"><a href=\"#贪心算法实战分析\" class=\"headerlink\" title=\"贪心算法实战分析\"></a>贪心算法实战分析</h3><ol>\n<li><p>分糖果</p>\n<blockquote>\n<p>有 m 个糖果和 n 个孩子。现在要把糖果分给这些孩子吃，但是糖果少，孩子多（m&lt;n），所以糖果只能分配给一部分孩子。</p>\n<p>每个糖果的大小不等，这 m 个糖果的大小分别是 s1，s2，s3，……，sm。除此之外，每个孩子对糖果大小的需求也是不一样的，只有糖果的大小大于等于孩子的对糖果大小的需求的时候，孩子才得到满足。假设这 n 个孩子对糖果大小的需求分别是 g1，g2，g3，……，gn。</p>\n<p>如何分配糖果，能尽可能满足最多数量的孩子？</p>\n</blockquote>\n<p><strong>抽象问题：从 n 个孩子中，抽取一部分孩子分配糖果，让满足的孩子的个数（期望值）是最大的。这个问题的限制值就是糖果个数 m。</strong></p>\n<p>对于一个孩子来说，如果小的糖果可以满足，就没必要用更大的糖果，这样更大的就可以留给其他对糖果大小需求更大的孩子。另一方面，对糖果大小需求小的孩子更容易被满足，所以，可以从需求小的孩子开始分配糖果。因为满足一个需求大的孩子跟满足一个需求小的孩子，对期望值的贡献是一样的。</p>\n<p>每次从剩下的孩子中，找出对糖果大小需求最小的，然后发给他剩下的糖果中能满足他的最小的糖果，这样得到的分配方案，也就是满足的孩子个数最多的方案。</p>\n</li>\n<li><p>钱币找零</p>\n<blockquote>\n<p>假设有 1 元、2 元、5 元、10 元、20 元、50 元、100 元这些面额的纸币，它们的张数分别是 c1、c2、c5、c10、c20、c50、c100。我们现在要用这些钱来支付 K 元，最少要用多少张纸币呢？</p>\n</blockquote>\n<p>先用面值最大的来支付，如果不够，就继续用更小一点面值的，以此类推，最后剩下的用 1 元来补齐。</p>\n</li>\n<li><p>区间覆盖</p>\n<blockquote>\n<p>假设有 n 个区间，区间的起始端点和结束端点分别是[l1, r1]，[l2, r2]，[l3, r3]，……，[ln, rn]。我们从这 n 个区间中选出一部分区间，这部分区间满足两两不相交（端点相交的情况不算相交），最多能选出多少个区间呢？</p>\n<img src=\"/article/51855/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96.jpg\" class title=\"区间覆盖\">\n</blockquote>\n<p><strong>解决思路:</strong>假设这 n 个区间中最左端点是 lmin，最右端点是 rmax。这个问题就相当于，我们选择几个不相交的区间，从左到右将[lmin, rmax]覆盖上。我们按照起始端点从小到大的顺序对这 n 个区间排序。</p>\n<p>每次选择的时候，左端点跟前面的已经覆盖的区间不重合的，右端点又尽量小的，这样可以让剩下的未覆盖区间尽可能的大，就可以放置更多的区间。这实际上就是一种贪心的选择方法。</p>\n<img src=\"/article/51855/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF.jpg\" class title=\"区间覆盖解决思路\">\n</li>\n</ol>\n<h3 id=\"贪心算法实现Huffman压缩编码\"><a href=\"#贪心算法实现Huffman压缩编码\" class=\"headerlink\" title=\"贪心算法实现Huffman压缩编码\"></a>贪心算法实现Huffman压缩编码</h3><blockquote>\n<p>假设有一个包含 1000 个字符的文件，每个字符占 1 个 byte（1byte=8bits），存储这 1000 个字符就一共需要 8000bits，那有没有更加节省空间的存储方式呢？</p>\n<p>假设通过统计分析发现，这 1000 个字符中只包含 6 种不同字符，假设它们分别是 a、b、c、d、e、f。而 3 个二进制位（bit）就可以表示 8 个不同的字符，所以，为了尽量减少存储空间，每个字符我们用 3 个二进制位来表示。那存储这 1000 个字符只需要 3000bits 就可以了，比原来的存储方式节省了很多空间。不过，还有没有更加节省空间的存储方式呢？</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">a(000)、b(001)、c(010)、d(011)、e(100)、f(101)<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>霍夫曼编码是一种十分有效的编码方法</strong>，广泛用于数据压缩中，其压缩率通常在 20%～90% 之间。</p>\n<p>霍夫曼编码不仅会考察文本中有多少个不同字符，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。霍夫曼编码试图用这种不等长的编码方法，来进一步增加压缩的效率。</p>\n<p>如何给不同频率的字符选择不同长度的编码呢？<strong>根据贪心的思想，可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码。</strong></p>\n<blockquote>\n<p>对于等长的编码来说，解压缩起来很简单。比如用 3 个 bit 表示一个字符。在解压缩的时候，每次从文本中读取 3 位二进制码，然后翻译成对应的字符。</p>\n<p><strong>但是，霍夫曼编码是不等长的，每次应该读取 1 位还是 2 位、3 位等等来解压缩呢？</strong>这个问题就导致霍夫曼编码解压缩起来比较复杂。为了避免解压缩过程中的歧义，<strong>霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。</strong></p>\n</blockquote>\n<p><strong>霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。</strong></p>\n<p>假设这 6 个字符出现的频率从高到低依次是 a、b、c、d、e、f。把它们编码下面这个样子，任何一个字符的编码都不是另一个的前缀，<strong>在解压缩的时候，每次会读取尽可能长的可解压的二进制串，所以在解压缩的时候也不会歧义。</strong></p>\n<img src=\"/article/51855/Huffman%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81.jpg\" class title=\"Huffman压缩编码\">\n<p><strong>根据字符出现频率的不同，给不同的字符进行不同长度的编码</strong></p>\n<p>把每个字符看作一个节点，并且附带着把频率放到优先级队列中。从队列中取出频率最小的两个节点 A、B，然后新建一个节点 C，把频率设置为两个节点的频率之和，并把这个新节点 C 作为节点 A、B 的父节点。最后再把 C 节点放入到优先级队列中。重复这个过程，直到队列中没有数据。</p>\n\n<p><strong>给每一条边加上画一个权值，指向左子节点的边标记为 0，指向右子节点的边，标记为 1，那从根节点到叶节点的路径就是叶节点对应字符的霍夫曼编码。</strong></p>\n<img src=\"/article/51855/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81.jpg\" class title=\"霍夫曼编码\">\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"贪心算法","path":"api/categories/贪心算法.json"}],"tags":[{"name":"数据结构与算法,贪心算法","path":"api/tags/数据结构与算法,贪心算法.json"}]}