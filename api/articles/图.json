{"title":"图","slug":"图","date":"2022-05-22T04:57:59.000Z","updated":"2022-06-09T07:23:48.496Z","comments":true,"path":"api/articles/图.json","realPath":null,"excerpt":null,"covers":["/article/47098/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.webp","/article/47098/%E9%82%BB%E6%8E%A5%E8%A1%A8.jpg","/article/47098/%E9%82%BB%E6%8E%A5%E8%A1%A8%E4%B8%8E%E9%80%86%E9%82%BB%E6%8E%A5%E8%A1%A8.jpg","/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88BFS%EF%BC%89%E7%A4%BA%E4%BE%8B%E5%9B%BE.jpg","/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E5%88%86%E8%A7%A3%E5%9B%BE1.jpg","/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E5%88%86%E8%A7%A3%E5%9B%BE2.jpg"],"cover":"/images/theme/coverphoto/图.jpg","content":"<h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><p><strong>如何理解“图”？</strong></p>\n<p><strong>图（Graph）</strong>和树比起来，这是一种更加复杂的非线性表结构。</p>\n<p>图中的元素就叫做<strong>顶点（vertex）</strong>，图中的一个顶点可以与任意其他顶点建立连接关系。这种建立的关系叫做<strong>边（edge）</strong>。跟顶点相连接的边的条数叫做顶点的<strong>度（degree）</strong>。</p>\n<p>边有方向的图叫做<strong>“有向图”</strong>。边没有方向的图就叫做<strong>“无向图”</strong>。</p>\n<p>在有向图中，我们把度分为<strong>入度（In-degree）和出度（Out-degree）</strong>。</p>\n<p>顶点的入度，表示有多少条边指向这个顶点；顶点的出度，表示有多少条边是以这个顶点为起点指向其他顶点。</p>\n<p><strong>带权图（weighted graph）</strong>。在带权图中，每条边都有一个<strong>权重（weight）</strong>。</p>\n<h3 id=\"邻接矩阵存储方法\"><a href=\"#邻接矩阵存储方法\" class=\"headerlink\" title=\"邻接矩阵存储方法\"></a>邻接矩阵存储方法</h3><p>图最直观的一种存储方法就是，<strong>邻接矩阵（Adjacency Matrix）</strong>。</p>\n<p>邻接矩阵的底层依赖一个二维数组。对于无向图来说，如果顶点 i 与顶点 j 之间有边，我们就将 A[i][j]和 A[j][i]标记为 1；对于有向图来说，如果顶点 i 到顶点 j 之间，有一条箭头从顶点 i 指向顶点 j 的边，那我们就将 A[i][j]标记为 1。同理，如果有一条箭头从顶点 j 指向顶点 i 的边，我们就将 A[j][i]标记为 1。对于带权图，数组中就存储相应的权重。</p>\n<img src=\"/article/47098/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.webp\" class title=\"邻接矩阵\">\n<p><strong>优点：</strong></p>\n<ol>\n<li>邻接矩阵的存储方式简单、直接，因为基于数组，所以在获取两个顶点的关系时，就非常高效。</li>\n<li>其次，用邻接矩阵存储图的另外一个好处是方便计算。这是因为，用邻接矩阵的方式存储图，可以将很多图的运算转换成矩阵之间的运算。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>对于无向图来说，如果 A[i][j]等于 1，那 A[j][i]也肯定等于 1</p>\n<p>无向图的二维数组中，如果我们将其用对角线划分为上下两部分，那只需要利用上面或者下面这样一半的空间就足够了，另外一半白白浪费掉了。</p>\n</li>\n<li><p>如果存储的是稀疏图（Sparse Matrix），顶点很多，但每个顶点的边并不多，那邻接矩阵的存储方法就更加浪费空间了。</p>\n</li>\n</ol>\n<h3 id=\"邻接表存储方法\"><a href=\"#邻接表存储方法\" class=\"headerlink\" title=\"邻接表存储方法\"></a>邻接表存储方法</h3><p><strong>邻接表</strong></p>\n<img src=\"/article/47098/%E9%82%BB%E6%8E%A5%E8%A1%A8.jpg\" class title=\"邻接表\">\n<p>每个顶点对应一条链表，链表中存储的是与这个顶点相连接的其他顶点。</p>\n<p>有向图的邻接表存储方式，每个顶点对应的链表里面，存储的是指向的顶点</p>\n<p>无向图的邻接表存储方式，每个顶点的链表中存储的，是跟这个顶点有边相连的顶点</p>\n<p><strong>图的算法实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>&#123; <span class=\"hljs-comment\">// 无向图</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> v; <span class=\"hljs-comment\">// 顶点的个数</span><br>  <span class=\"hljs-keyword\">private</span> LinkedList&lt;Integer&gt; adj[]; <span class=\"hljs-comment\">// 邻接表</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.v = v;<br>    adj = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;v; ++i) &#123;<br>      adj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// 无向图一条边存两次</span><br>    adj[s].add(t);<br>    adj[t].add(s);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>逆邻接表</strong></p>\n<p>逆邻接表中，每个顶点的链表中，存储的是指向这个顶点的顶点</p>\n<img src=\"/article/47098/%E9%82%BB%E6%8E%A5%E8%A1%A8%E4%B8%8E%E9%80%86%E9%82%BB%E6%8E%A5%E8%A1%A8.jpg\" class title=\"邻接表与逆邻接表\">\n<h3 id=\"“搜索”算法？\"><a href=\"#“搜索”算法？\" class=\"headerlink\" title=\"“搜索”算法？\"></a>“搜索”算法？</h3><p>算法是作用于具体数据结构之上的，深度优先搜索算法和广度优先搜索算法都是基于“图”这种数据结构的。</p>\n<ol>\n<li><p>广度优先搜索（BFS）</p>\n<p>广度优先搜索（Breadth-First-Search，简称 BFS）。直观地讲，它其实就是一种“地毯式”层层推进的搜索策略，即先查找离起始顶点最近的，然后是次近的，依次往外搜索。</p>\n<img src=\"/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88BFS%EF%BC%89%E7%A4%BA%E4%BE%8B%E5%9B%BE.jpg\" class title=\"广度优先搜索（BFS）示例图\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (s == t) <span class=\"hljs-keyword\">return</span>;<br>  <span class=\"hljs-comment\">//visited 是用来记录已经被访问的顶点</span><br>  <span class=\"hljs-keyword\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[v];<br>  visited[s]=<span class=\"hljs-keyword\">true</span>;<br>  <span class=\"hljs-comment\">//queue 是一个队列，用来存储已经被访问、但相连的顶点还没有被访问的顶点</span><br>  Queue&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>  queue.add(s);<br>  <span class=\"hljs-comment\">//prev 用来记录搜索路径</span><br>  <span class=\"hljs-keyword\">int</span>[] prev = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    prev[i] = -<span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">while</span> (queue.size() != <span class=\"hljs-number\">0</span>) &#123;<br>   <span class=\"hljs-keyword\">int</span> w = queue.poll();<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; adj[w].size(); ++i) &#123;<br>      <span class=\"hljs-keyword\">int</span> q = adj[w].get(i);<br>      <span class=\"hljs-keyword\">if</span> (!visited[q]) &#123;<br>        prev[q] = w;<br>        <span class=\"hljs-keyword\">if</span> (q == t) &#123;<br>          print(prev, s, t);<br>          <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        visited[q] = <span class=\"hljs-keyword\">true</span>;<br>        queue.add(q);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] prev, <span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// 递归打印s-&gt;t的路径</span><br>  <span class=\"hljs-keyword\">if</span> (prev[t] != -<span class=\"hljs-number\">1</span> &amp;&amp; t != s) &#123;<br>    print(prev, s, prev[t]);<br>  &#125;<br>  System.out.print(t + <span class=\"hljs-string\">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其中 s 表示起始顶点，t 表示终止顶点。搜索一条从 s 到 t 的路径。实际上，这样求得的路径就是从 s 到 t 的最短路径。</p>\n<p><strong>visited</strong> 是用来记录已经被访问的顶点，用来避免顶点被重复访问。如果顶点 q 被访问，那相应的 visited[q]会被设置为 true。</p>\n<p><strong>queue</strong> 是一个队列，用来存储已经被访问、但相连的顶点还没有被访问的顶点。因为广度优先搜索是逐层访问的，也就是说，我们只有把第 k 层的顶点都访问完成之后，才能访问第 k+1 层的顶点。当我们访问到第 k 层的顶点的时候，我们需要把第 k 层的顶点记录下来，稍后才能通过第 k 层的顶点来找第 k+1 层的顶点。所以，我们用这个队列来实现记录的功能。</p>\n<p><strong>prev</strong> 用来记录搜索路径。当我们从顶点 s 开始，广度优先搜索到顶点 t 后，prev 数组中存储的就是搜索的路径。不过，这个路径是反向存储的。prev[w]存储的是，顶点 w 是从哪个前驱顶点遍历过来的。比如，我们通过顶点 2 的邻接表访问到顶点 3，那 prev[3]就等于 2。为了正向打印出路径，我们需要递归地来打印，你可以看下 print() 函数的实现方式。</p>\n<blockquote>\n<img src=\"/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E5%88%86%E8%A7%A3%E5%9B%BE1.jpg\" class title=\"广度优先搜索的分解图\">\n<img src=\"/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E5%88%86%E8%A7%A3%E5%9B%BE2.jpg\" class title=\"广度优先搜索的分解图\">\n\n</blockquote>\n<p><strong>最坏情况时间复杂度</strong>：最坏情况下，终止顶点 t 离起始顶点 s 很远，需要遍历完整个图才能找到。这个时候，每个顶点都要进出一遍队列，每个边也都会被访问一次，所以，广度优先搜索的时间复杂度是 O(V+E)，其中，V 表示顶点的个数，E 表示边的个数。当然，对于一个连通图来说，也就是说一个图中的所有顶点都是连通的，E 肯定要大于等于 V-1，所以，<strong>广度优先搜索的时间复杂度也可以简写为 O(E)。</strong></p>\n<p><strong>空间复杂度</strong>：广度优先搜索的空间消耗主要在几个辅助变量 visited 数组、queue 队列、prev 数组上。这三个存储空间的大小都不会超过顶点的个数，<strong>所以空间复杂度是 O(V)。</strong></p>\n</li>\n<li><p>深度优先搜索（DFS）</p>\n<p>深度优先搜索（Depth-First-Search，简称 DFS）</p>\n\n<p>实线箭头表示遍历，虚线箭头表示回退</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//当已经找到终止顶点 t 之后，就不再递归地继续查找了。</span><br><span class=\"hljs-keyword\">boolean</span> found = <span class=\"hljs-keyword\">false</span>; <span class=\"hljs-comment\">// 全局变量或者类成员变量</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123;<br>  found = <span class=\"hljs-keyword\">false</span>;<br>  <span class=\"hljs-keyword\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[v];<br>  <span class=\"hljs-keyword\">int</span>[] prev = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    prev[i] = -<span class=\"hljs-number\">1</span>;<br>  &#125;<br>  recurDfs(s, t, visited, prev);<br>  print(prev, s, t);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">recurDfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> w, <span class=\"hljs-keyword\">int</span> t, <span class=\"hljs-keyword\">boolean</span>[] visited, <span class=\"hljs-keyword\">int</span>[] prev)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">return</span>;<br>  visited[w] = <span class=\"hljs-keyword\">true</span>;<br>  <span class=\"hljs-keyword\">if</span> (w == t) &#123;<br>    found = <span class=\"hljs-keyword\">true</span>;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; adj[w].size(); ++i) &#123;<br>    <span class=\"hljs-keyword\">int</span> q = adj[w].get(i);<br>    <span class=\"hljs-keyword\">if</span> (!visited[q]) &#123;<br>      prev[q] = w;<br>      recurDfs(q, t, visited, prev);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>时间复杂度：</strong>每条边最多会被访问两次，一次是遍历，一次是回退。所以，图上的深度优先搜索算法的<strong>时间复杂度是 O(E)</strong>，E 表示边的个数。</p>\n<p><strong>空间复杂度</strong>：深度优先搜索算法的消耗内存主要是 visited、prev 数组和递归调用栈。visited、prev 数组的大小跟顶点的个数 V 成正比，递归调用栈的最大深度不会超过顶点的个数，所以<strong>总的空间复杂度就是 O(V)</strong>。</p>\n</li>\n</ol>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p><strong>拓扑排序（Topological Sorting</strong>）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。且该序列必须满足下面两个条件：</p>\n<ol>\n<li>每个顶点出现且只出现一次。</li>\n<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。</li>\n</ol>\n<p><strong>有向无环图</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> v; <span class=\"hljs-comment\">// 顶点的个数</span><br>  <span class=\"hljs-keyword\">private</span> LinkedList&lt;Integer&gt; adj[]; <span class=\"hljs-comment\">// 邻接表</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.v = v;<br>    adj = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;v; ++i) &#123;<br>      adj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// s先于t，边s-&gt;t</span><br>    adj[s].add(t);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Kahn-算法\"><a href=\"#Kahn-算法\" class=\"headerlink\" title=\"Kahn 算法\"></a>Kahn 算法</h4><p>贪心算法思想</p>\n<p>定义数据结构的时候，如果 s 需要先于 t 执行，那就添加一条 s 指向 t 的边。</p>\n<p>如果某个顶点入度为 0， 也就表示，没有任何顶点必须先于这个顶点执行，那么这个顶点就可以执行了。</p>\n<p>先从图中，找出一个入度为 0 的顶点，将其输出到拓扑排序的结果序列中，并且把这个顶点从图中删除（也就是把这个顶点可达的顶点的入度都减 1）。</p>\n<p>循环执行上面的过程，直到所有的顶点都被输出。最后输出的序列，就是满足局部依赖关系的拓扑排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">topoSortByKahn</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[] inDegree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[v]; <span class=\"hljs-comment\">// 统计每个顶点的入度</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; adj[i].size(); ++j) &#123;<br>      <span class=\"hljs-keyword\">int</span> w = adj[i].get(j); <span class=\"hljs-comment\">// i-&gt;w</span><br>      inDegree[w]++;<br>    &#125;<br>  &#125;<br>  LinkedList&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    <span class=\"hljs-keyword\">if</span> (inDegree[i] == <span class=\"hljs-number\">0</span>) queue.add(i);<br>  &#125;<br>  <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) &#123;<br>    <span class=\"hljs-keyword\">int</span> i = queue.remove();<br>    System.out.print(<span class=\"hljs-string\">&quot;-&gt;&quot;</span> + i);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; adj[i].size(); ++j) &#123;<br>      <span class=\"hljs-keyword\">int</span> k = adj[i].get(j);<br>      inDegree[k]--;<br>      <span class=\"hljs-keyword\">if</span> (inDegree[k] == <span class=\"hljs-number\">0</span>) queue.add(k);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>时间复杂度：</strong></p>\n<p>每个顶点被访问了一次，每个边也都被访问了一次，所以，Kahn 算法的时间复杂度就是 O(V+E)（V 表示顶点个数，E 表示边的个数）。</p>\n<h4 id=\"DFS-算法\"><a href=\"#DFS-算法\" class=\"headerlink\" title=\"DFS 算法\"></a>DFS 算法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">topoSortByDFS</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-comment\">// 先构建逆邻接表，边s-&gt;t表示，s依赖于t，t先于s</span><br>  LinkedList&lt;Integer&gt; inverseAdj[] = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123; <span class=\"hljs-comment\">// 申请空间</span><br>    inverseAdj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123; <span class=\"hljs-comment\">// 通过邻接表生成逆邻接表</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; adj[i].size(); ++j) &#123;<br>      <span class=\"hljs-keyword\">int</span> w = adj[i].get(j); <span class=\"hljs-comment\">// i-&gt;w</span><br>      inverseAdj[w].add(i); <span class=\"hljs-comment\">// w-&gt;i</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123; <span class=\"hljs-comment\">// 深度优先遍历图</span><br>    <span class=\"hljs-keyword\">if</span> (visited[i] == <span class=\"hljs-keyword\">false</span>) &#123;<br>      visited[i] = <span class=\"hljs-keyword\">true</span>;<br>      dfs(i, inverseAdj, visited);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    <span class=\"hljs-keyword\">int</span> vertex, LinkedList&lt;Integer&gt; inverseAdj[], <span class=\"hljs-keyword\">boolean</span>[] visited)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; inverseAdj[vertex].size(); ++i) &#123;<br>    <span class=\"hljs-keyword\">int</span> w = inverseAdj[vertex].get(i);<br>    <span class=\"hljs-keyword\">if</span> (visited[w] == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">continue</span>;<br>    visited[w] = <span class=\"hljs-keyword\">true</span>;<br>    dfs(w, inverseAdj, visited);<br>  &#125; <span class=\"hljs-comment\">// 先把vertex这个顶点可达的所有顶点都打印出来之后，再打印它自己</span><br>  System.out.print(<span class=\"hljs-string\">&quot;-&gt;&quot;</span> + vertex);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第一部分是通过邻接表构造逆邻接表。</p>\n<p>邻接表中，边 s-&gt;t 表示 s 先于 t 执行，也就是 t 要依赖 s。在逆邻接表中，边 s-&gt;t 表示 s 依赖于 t，s 后于 t 执行。</p>\n<p>第二部分是递归处理每个顶点。</p>\n<p>对于顶点 vertex 来说，先输出它可达的所有顶点，也就是说，先把它依赖的所有的顶点输出了，然后再输出自己。</p>\n<p><strong>时间复杂度：</strong></p>\n<p>每个顶点被访问两次，每条边都被访问一次，所以时间复杂度也是 O(V+E)。</p>\n<h3 id=\"最短路径算法\"><a href=\"#最短路径算法\" class=\"headerlink\" title=\"最短路径算法\"></a>最短路径算法</h3><blockquote>\n<p>将整个地图抽象成一个有向有权图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>&#123; <span class=\"hljs-comment\">// 有向有权图的邻接表表示</span><br>  <span class=\"hljs-keyword\">private</span> LinkedList&lt;Edge&gt; adj[]; <span class=\"hljs-comment\">// 邻接表</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> v; <span class=\"hljs-comment\">// 顶点个数</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.v = v;<br>    <span class=\"hljs-keyword\">this</span>.adj = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>      <span class=\"hljs-keyword\">this</span>.adj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123; <span class=\"hljs-comment\">// 添加一条边</span><br>    <span class=\"hljs-keyword\">this</span>.adj[s].add(<span class=\"hljs-keyword\">new</span> Edge(s, t, w));<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Edge</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> sid; <span class=\"hljs-comment\">// 边的起始顶点编号</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> tid; <span class=\"hljs-comment\">// 边的终止顶点编号</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> w; <span class=\"hljs-comment\">// 权重</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Edge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sid, <span class=\"hljs-keyword\">int</span> tid, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">this</span>.sid = sid;<br>      <span class=\"hljs-keyword\">this</span>.tid = tid;<br>      <span class=\"hljs-keyword\">this</span>.w = w;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 下面这个类是为了dijkstra实现用的</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vertex</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> id; <span class=\"hljs-comment\">// 顶点编号ID</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> dist; <span class=\"hljs-comment\">// 从起始顶点到这个顶点的距离</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Vertex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id, <span class=\"hljs-keyword\">int</span> dist)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">this</span>.id = id;<br>      <span class=\"hljs-keyword\">this</span>.dist = dist;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>Dijkstra 算法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 因为Java提供的优先级队列，没有暴露更新数据的接口，所以我们需要重新实现一个</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PriorityQueue</span> </span>&#123; <span class=\"hljs-comment\">// 根据vertex.dist构建小顶堆</span><br>  <span class=\"hljs-keyword\">private</span> Vertex[] nodes;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> count;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">PriorityQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.nodes = <span class=\"hljs-keyword\">new</span> Vertex[v+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">this</span>.count = v;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Vertex <span class=\"hljs-title\">poll</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现... &#125;</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(Vertex vertex)</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现...&#125;</span><br>  <span class=\"hljs-comment\">// 更新结点的值，并且从下往上堆化，重新符合堆的定义。时间复杂度O(logn)。</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Vertex vertex)</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现...&#125; </span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现...&#125;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// 从顶点s到顶点t的最短路径</span><br>  <span class=\"hljs-keyword\">int</span>[] predecessor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-keyword\">this</span>.v]; <span class=\"hljs-comment\">// 用来还原最短路径</span><br>  Vertex[] vertexes = <span class=\"hljs-keyword\">new</span> Vertex[<span class=\"hljs-keyword\">this</span>.v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.v; ++i) &#123;<br>    vertexes[i] = <span class=\"hljs-keyword\">new</span> Vertex(i, Integer.MAX_VALUE);<br>  &#125;<br>  PriorityQueue queue = <span class=\"hljs-keyword\">new</span> PriorityQueue(<span class=\"hljs-keyword\">this</span>.v);<span class=\"hljs-comment\">// 小顶堆</span><br>  <span class=\"hljs-keyword\">boolean</span>[] inqueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[<span class=\"hljs-keyword\">this</span>.v]; <span class=\"hljs-comment\">// 标记是否进入过队列</span><br>  vertexes[s].dist = <span class=\"hljs-number\">0</span>;<br>  queue.add(vertexes[s]);<br>  inqueue[s] = <span class=\"hljs-keyword\">true</span>;<br>  <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) &#123;<br>    Vertex minVertex= queue.poll(); <span class=\"hljs-comment\">// 取堆顶元素并删除</span><br>    <span class=\"hljs-keyword\">if</span> (minVertex.id == t) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 最短路径产生了</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; adj[minVertex.id].size(); ++i) &#123;<br>      Edge e = adj[minVertex.id].get(i); <span class=\"hljs-comment\">// 取出一条minVetex相连的边</span><br>      Vertex nextVertex = vertexes[e.tid]; <span class=\"hljs-comment\">// minVertex--&gt;nextVertex</span><br>      <span class=\"hljs-keyword\">if</span> (minVertex.dist + e.w &lt; nextVertex.dist) &#123; <span class=\"hljs-comment\">// 更新next的dist</span><br>        nextVertex.dist = minVertex.dist + e.w;<br>        predecessor[nextVertex.id] = minVertex.id;<br>        <span class=\"hljs-keyword\">if</span> (inqueue[nextVertex.id] == <span class=\"hljs-keyword\">true</span>) &#123;<br>          queue.update(nextVertex); <span class=\"hljs-comment\">// 更新队列中的dist值</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>          queue.add(nextVertex);<br>          inqueue[nextVertex.id] = <span class=\"hljs-keyword\">true</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 输出最短路径</span><br>  System.out.print(s);<br>  print(s, t, predecessor);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t, <span class=\"hljs-keyword\">int</span>[] predecessor)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (s == t) <span class=\"hljs-keyword\">return</span>;<br>  print(s, predecessor[t], predecessor);<br>  System.out.print(<span class=\"hljs-string\">&quot;-&gt;&quot;</span> + t);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>用 vertexes 数组，记录从起始顶点到每个顶点的距离（dist）</p>\n<ol>\n<li><p>首先将所有顶点的 dist 都初始化为无穷大（Integer.MAX_VALUE），起始顶点的 dist 值初始化为 0，然后将其放到优先级队列中。</p>\n</li>\n<li><p>从优先级队列中取出 dist 最小的顶点 minVertex，然后考察这个顶点可达的所有顶点（nextVertex）</p>\n</li>\n<li>如果 minVertex 的 dist 值加上 minVertex 与 nextVertex 之间边的权重 w 小于 nextVertex 当前的 dist 值，也就是说，存在另一条更短的路径，它经过 minVertex 到达 nextVertex。把 nextVertex 的 dist 更新为 minVertex 的 dist 值加上 w。把 nextVertex 加入到优先级队列中。</li>\n<li>重复这个过程，直到找到终止顶点 t 或者队列为空。</li>\n</ol>\n<p>predecessor 数组的作用是为了还原最短路径，它记录每个顶点的前驱顶点。最后，通过递归的方式，将这个路径打印出来。</p>\n<p>inqueue 数组是为了避免将一个顶点多次添加到优先级队列中。更新了某个顶点的 dist 值之后，如果这个顶点已经在优先级队列中了，就不要再将它重复添加进去了。</p>\n<p><img src=\"/article/Dijkstra 算法.jpg\"><span class=\"image-caption\">Dijkstra 算法</span></p>\n<p><strong>时间复杂度</strong></p>\n<p>while 循环最多会执行 V 次（V 表示顶点的个数），而内部的 for 循环的执行次数不确定，跟每个顶点的相邻边的个数有关，分别记作 E0，E1，E2，……，E(V-1)。如果把这 V 个顶点的边都加起来，最大也不会超过图中所有边的个数 E（E 表示边的个数）。</p>\n<p>for 循环内部的代码涉及从优先级队列取数据、往优先级队列中添加数据、更新优先级队列中的数据，这样三个主要的操作。优先级队列是用堆来实现的，堆中的这几个操作，时间复杂度都是 O(logV)（堆中的元素个数不会超过顶点的个数 V）。</p>\n<p>时间复杂度就是 O(E*logV)</p>\n","more":"<h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><p><strong>如何理解“图”？</strong></p>\n<p><strong>图（Graph）</strong>和树比起来，这是一种更加复杂的非线性表结构。</p>\n<p>图中的元素就叫做<strong>顶点（vertex）</strong>，图中的一个顶点可以与任意其他顶点建立连接关系。这种建立的关系叫做<strong>边（edge）</strong>。跟顶点相连接的边的条数叫做顶点的<strong>度（degree）</strong>。</p>\n<p>边有方向的图叫做<strong>“有向图”</strong>。边没有方向的图就叫做<strong>“无向图”</strong>。</p>\n<p>在有向图中，我们把度分为<strong>入度（In-degree）和出度（Out-degree）</strong>。</p>\n<p>顶点的入度，表示有多少条边指向这个顶点；顶点的出度，表示有多少条边是以这个顶点为起点指向其他顶点。</p>\n<p><strong>带权图（weighted graph）</strong>。在带权图中，每条边都有一个<strong>权重（weight）</strong>。</p>\n<h3 id=\"邻接矩阵存储方法\"><a href=\"#邻接矩阵存储方法\" class=\"headerlink\" title=\"邻接矩阵存储方法\"></a>邻接矩阵存储方法</h3><p>图最直观的一种存储方法就是，<strong>邻接矩阵（Adjacency Matrix）</strong>。</p>\n<p>邻接矩阵的底层依赖一个二维数组。对于无向图来说，如果顶点 i 与顶点 j 之间有边，我们就将 A[i][j]和 A[j][i]标记为 1；对于有向图来说，如果顶点 i 到顶点 j 之间，有一条箭头从顶点 i 指向顶点 j 的边，那我们就将 A[i][j]标记为 1。同理，如果有一条箭头从顶点 j 指向顶点 i 的边，我们就将 A[j][i]标记为 1。对于带权图，数组中就存储相应的权重。</p>\n<img src=\"/article/47098/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.webp\" class title=\"邻接矩阵\">\n<p><strong>优点：</strong></p>\n<ol>\n<li>邻接矩阵的存储方式简单、直接，因为基于数组，所以在获取两个顶点的关系时，就非常高效。</li>\n<li>其次，用邻接矩阵存储图的另外一个好处是方便计算。这是因为，用邻接矩阵的方式存储图，可以将很多图的运算转换成矩阵之间的运算。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><p>对于无向图来说，如果 A[i][j]等于 1，那 A[j][i]也肯定等于 1</p>\n<p>无向图的二维数组中，如果我们将其用对角线划分为上下两部分，那只需要利用上面或者下面这样一半的空间就足够了，另外一半白白浪费掉了。</p>\n</li>\n<li><p>如果存储的是稀疏图（Sparse Matrix），顶点很多，但每个顶点的边并不多，那邻接矩阵的存储方法就更加浪费空间了。</p>\n</li>\n</ol>\n<h3 id=\"邻接表存储方法\"><a href=\"#邻接表存储方法\" class=\"headerlink\" title=\"邻接表存储方法\"></a>邻接表存储方法</h3><p><strong>邻接表</strong></p>\n<img src=\"/article/47098/%E9%82%BB%E6%8E%A5%E8%A1%A8.jpg\" class title=\"邻接表\">\n<p>每个顶点对应一条链表，链表中存储的是与这个顶点相连接的其他顶点。</p>\n<p>有向图的邻接表存储方式，每个顶点对应的链表里面，存储的是指向的顶点</p>\n<p>无向图的邻接表存储方式，每个顶点的链表中存储的，是跟这个顶点有边相连的顶点</p>\n<p><strong>图的算法实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>&#123; <span class=\"hljs-comment\">// 无向图</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> v; <span class=\"hljs-comment\">// 顶点的个数</span><br>  <span class=\"hljs-keyword\">private</span> LinkedList&lt;Integer&gt; adj[]; <span class=\"hljs-comment\">// 邻接表</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.v = v;<br>    adj = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;v; ++i) &#123;<br>      adj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// 无向图一条边存两次</span><br>    adj[s].add(t);<br>    adj[t].add(s);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>逆邻接表</strong></p>\n<p>逆邻接表中，每个顶点的链表中，存储的是指向这个顶点的顶点</p>\n<img src=\"/article/47098/%E9%82%BB%E6%8E%A5%E8%A1%A8%E4%B8%8E%E9%80%86%E9%82%BB%E6%8E%A5%E8%A1%A8.jpg\" class title=\"邻接表与逆邻接表\">\n<h3 id=\"“搜索”算法？\"><a href=\"#“搜索”算法？\" class=\"headerlink\" title=\"“搜索”算法？\"></a>“搜索”算法？</h3><p>算法是作用于具体数据结构之上的，深度优先搜索算法和广度优先搜索算法都是基于“图”这种数据结构的。</p>\n<ol>\n<li><p>广度优先搜索（BFS）</p>\n<p>广度优先搜索（Breadth-First-Search，简称 BFS）。直观地讲，它其实就是一种“地毯式”层层推进的搜索策略，即先查找离起始顶点最近的，然后是次近的，依次往外搜索。</p>\n<img src=\"/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%88BFS%EF%BC%89%E7%A4%BA%E4%BE%8B%E5%9B%BE.jpg\" class title=\"广度优先搜索（BFS）示例图\">\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (s == t) <span class=\"hljs-keyword\">return</span>;<br>  <span class=\"hljs-comment\">//visited 是用来记录已经被访问的顶点</span><br>  <span class=\"hljs-keyword\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[v];<br>  visited[s]=<span class=\"hljs-keyword\">true</span>;<br>  <span class=\"hljs-comment\">//queue 是一个队列，用来存储已经被访问、但相连的顶点还没有被访问的顶点</span><br>  Queue&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>  queue.add(s);<br>  <span class=\"hljs-comment\">//prev 用来记录搜索路径</span><br>  <span class=\"hljs-keyword\">int</span>[] prev = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    prev[i] = -<span class=\"hljs-number\">1</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">while</span> (queue.size() != <span class=\"hljs-number\">0</span>) &#123;<br>   <span class=\"hljs-keyword\">int</span> w = queue.poll();<br>   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; adj[w].size(); ++i) &#123;<br>      <span class=\"hljs-keyword\">int</span> q = adj[w].get(i);<br>      <span class=\"hljs-keyword\">if</span> (!visited[q]) &#123;<br>        prev[q] = w;<br>        <span class=\"hljs-keyword\">if</span> (q == t) &#123;<br>          print(prev, s, t);<br>          <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        visited[q] = <span class=\"hljs-keyword\">true</span>;<br>        queue.add(q);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] prev, <span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// 递归打印s-&gt;t的路径</span><br>  <span class=\"hljs-keyword\">if</span> (prev[t] != -<span class=\"hljs-number\">1</span> &amp;&amp; t != s) &#123;<br>    print(prev, s, prev[t]);<br>  &#125;<br>  System.out.print(t + <span class=\"hljs-string\">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其中 s 表示起始顶点，t 表示终止顶点。搜索一条从 s 到 t 的路径。实际上，这样求得的路径就是从 s 到 t 的最短路径。</p>\n<p><strong>visited</strong> 是用来记录已经被访问的顶点，用来避免顶点被重复访问。如果顶点 q 被访问，那相应的 visited[q]会被设置为 true。</p>\n<p><strong>queue</strong> 是一个队列，用来存储已经被访问、但相连的顶点还没有被访问的顶点。因为广度优先搜索是逐层访问的，也就是说，我们只有把第 k 层的顶点都访问完成之后，才能访问第 k+1 层的顶点。当我们访问到第 k 层的顶点的时候，我们需要把第 k 层的顶点记录下来，稍后才能通过第 k 层的顶点来找第 k+1 层的顶点。所以，我们用这个队列来实现记录的功能。</p>\n<p><strong>prev</strong> 用来记录搜索路径。当我们从顶点 s 开始，广度优先搜索到顶点 t 后，prev 数组中存储的就是搜索的路径。不过，这个路径是反向存储的。prev[w]存储的是，顶点 w 是从哪个前驱顶点遍历过来的。比如，我们通过顶点 2 的邻接表访问到顶点 3，那 prev[3]就等于 2。为了正向打印出路径，我们需要递归地来打印，你可以看下 print() 函数的实现方式。</p>\n<blockquote>\n<img src=\"/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E5%88%86%E8%A7%A3%E5%9B%BE1.jpg\" class title=\"广度优先搜索的分解图\">\n<img src=\"/article/47098/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%9A%84%E5%88%86%E8%A7%A3%E5%9B%BE2.jpg\" class title=\"广度优先搜索的分解图\">\n\n</blockquote>\n<p><strong>最坏情况时间复杂度</strong>：最坏情况下，终止顶点 t 离起始顶点 s 很远，需要遍历完整个图才能找到。这个时候，每个顶点都要进出一遍队列，每个边也都会被访问一次，所以，广度优先搜索的时间复杂度是 O(V+E)，其中，V 表示顶点的个数，E 表示边的个数。当然，对于一个连通图来说，也就是说一个图中的所有顶点都是连通的，E 肯定要大于等于 V-1，所以，<strong>广度优先搜索的时间复杂度也可以简写为 O(E)。</strong></p>\n<p><strong>空间复杂度</strong>：广度优先搜索的空间消耗主要在几个辅助变量 visited 数组、queue 队列、prev 数组上。这三个存储空间的大小都不会超过顶点的个数，<strong>所以空间复杂度是 O(V)。</strong></p>\n</li>\n<li><p>深度优先搜索（DFS）</p>\n<p>深度优先搜索（Depth-First-Search，简称 DFS）</p>\n\n<p>实线箭头表示遍历，虚线箭头表示回退</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//当已经找到终止顶点 t 之后，就不再递归地继续查找了。</span><br><span class=\"hljs-keyword\">boolean</span> found = <span class=\"hljs-keyword\">false</span>; <span class=\"hljs-comment\">// 全局变量或者类成员变量</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123;<br>  found = <span class=\"hljs-keyword\">false</span>;<br>  <span class=\"hljs-keyword\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[v];<br>  <span class=\"hljs-keyword\">int</span>[] prev = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    prev[i] = -<span class=\"hljs-number\">1</span>;<br>  &#125;<br>  recurDfs(s, t, visited, prev);<br>  print(prev, s, t);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">recurDfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> w, <span class=\"hljs-keyword\">int</span> t, <span class=\"hljs-keyword\">boolean</span>[] visited, <span class=\"hljs-keyword\">int</span>[] prev)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">return</span>;<br>  visited[w] = <span class=\"hljs-keyword\">true</span>;<br>  <span class=\"hljs-keyword\">if</span> (w == t) &#123;<br>    found = <span class=\"hljs-keyword\">true</span>;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; adj[w].size(); ++i) &#123;<br>    <span class=\"hljs-keyword\">int</span> q = adj[w].get(i);<br>    <span class=\"hljs-keyword\">if</span> (!visited[q]) &#123;<br>      prev[q] = w;<br>      recurDfs(q, t, visited, prev);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>时间复杂度：</strong>每条边最多会被访问两次，一次是遍历，一次是回退。所以，图上的深度优先搜索算法的<strong>时间复杂度是 O(E)</strong>，E 表示边的个数。</p>\n<p><strong>空间复杂度</strong>：深度优先搜索算法的消耗内存主要是 visited、prev 数组和递归调用栈。visited、prev 数组的大小跟顶点的个数 V 成正比，递归调用栈的最大深度不会超过顶点的个数，所以<strong>总的空间复杂度就是 O(V)</strong>。</p>\n</li>\n</ol>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><p><strong>拓扑排序（Topological Sorting</strong>）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。且该序列必须满足下面两个条件：</p>\n<ol>\n<li>每个顶点出现且只出现一次。</li>\n<li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。</li>\n</ol>\n<p><strong>有向无环图</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>&#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> v; <span class=\"hljs-comment\">// 顶点的个数</span><br>  <span class=\"hljs-keyword\">private</span> LinkedList&lt;Integer&gt; adj[]; <span class=\"hljs-comment\">// 邻接表</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.v = v;<br>    adj = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;v; ++i) &#123;<br>      adj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// s先于t，边s-&gt;t</span><br>    adj[s].add(t);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Kahn-算法\"><a href=\"#Kahn-算法\" class=\"headerlink\" title=\"Kahn 算法\"></a>Kahn 算法</h4><p>贪心算法思想</p>\n<p>定义数据结构的时候，如果 s 需要先于 t 执行，那就添加一条 s 指向 t 的边。</p>\n<p>如果某个顶点入度为 0， 也就表示，没有任何顶点必须先于这个顶点执行，那么这个顶点就可以执行了。</p>\n<p>先从图中，找出一个入度为 0 的顶点，将其输出到拓扑排序的结果序列中，并且把这个顶点从图中删除（也就是把这个顶点可达的顶点的入度都减 1）。</p>\n<p>循环执行上面的过程，直到所有的顶点都被输出。最后输出的序列，就是满足局部依赖关系的拓扑排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">topoSortByKahn</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-keyword\">int</span>[] inDegree = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[v]; <span class=\"hljs-comment\">// 统计每个顶点的入度</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; adj[i].size(); ++j) &#123;<br>      <span class=\"hljs-keyword\">int</span> w = adj[i].get(j); <span class=\"hljs-comment\">// i-&gt;w</span><br>      inDegree[w]++;<br>    &#125;<br>  &#125;<br>  LinkedList&lt;Integer&gt; queue = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>    <span class=\"hljs-keyword\">if</span> (inDegree[i] == <span class=\"hljs-number\">0</span>) queue.add(i);<br>  &#125;<br>  <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) &#123;<br>    <span class=\"hljs-keyword\">int</span> i = queue.remove();<br>    System.out.print(<span class=\"hljs-string\">&quot;-&gt;&quot;</span> + i);<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; adj[i].size(); ++j) &#123;<br>      <span class=\"hljs-keyword\">int</span> k = adj[i].get(j);<br>      inDegree[k]--;<br>      <span class=\"hljs-keyword\">if</span> (inDegree[k] == <span class=\"hljs-number\">0</span>) queue.add(k);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>时间复杂度：</strong></p>\n<p>每个顶点被访问了一次，每个边也都被访问了一次，所以，Kahn 算法的时间复杂度就是 O(V+E)（V 表示顶点个数，E 表示边的个数）。</p>\n<h4 id=\"DFS-算法\"><a href=\"#DFS-算法\" class=\"headerlink\" title=\"DFS 算法\"></a>DFS 算法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">topoSortByDFS</span><span class=\"hljs-params\">()</span> </span>&#123;<br>  <span class=\"hljs-comment\">// 先构建逆邻接表，边s-&gt;t表示，s依赖于t，t先于s</span><br>  LinkedList&lt;Integer&gt; inverseAdj[] = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123; <span class=\"hljs-comment\">// 申请空间</span><br>    inverseAdj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>  &#125;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123; <span class=\"hljs-comment\">// 通过邻接表生成逆邻接表</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; adj[i].size(); ++j) &#123;<br>      <span class=\"hljs-keyword\">int</span> w = adj[i].get(j); <span class=\"hljs-comment\">// i-&gt;w</span><br>      inverseAdj[w].add(i); <span class=\"hljs-comment\">// w-&gt;i</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">boolean</span>[] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123; <span class=\"hljs-comment\">// 深度优先遍历图</span><br>    <span class=\"hljs-keyword\">if</span> (visited[i] == <span class=\"hljs-keyword\">false</span>) &#123;<br>      visited[i] = <span class=\"hljs-keyword\">true</span>;<br>      dfs(i, inverseAdj, visited);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(</span></span><br><span class=\"hljs-params\"><span class=\"hljs-function\">    <span class=\"hljs-keyword\">int</span> vertex, LinkedList&lt;Integer&gt; inverseAdj[], <span class=\"hljs-keyword\">boolean</span>[] visited)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; inverseAdj[vertex].size(); ++i) &#123;<br>    <span class=\"hljs-keyword\">int</span> w = inverseAdj[vertex].get(i);<br>    <span class=\"hljs-keyword\">if</span> (visited[w] == <span class=\"hljs-keyword\">true</span>) <span class=\"hljs-keyword\">continue</span>;<br>    visited[w] = <span class=\"hljs-keyword\">true</span>;<br>    dfs(w, inverseAdj, visited);<br>  &#125; <span class=\"hljs-comment\">// 先把vertex这个顶点可达的所有顶点都打印出来之后，再打印它自己</span><br>  System.out.print(<span class=\"hljs-string\">&quot;-&gt;&quot;</span> + vertex);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>第一部分是通过邻接表构造逆邻接表。</p>\n<p>邻接表中，边 s-&gt;t 表示 s 先于 t 执行，也就是 t 要依赖 s。在逆邻接表中，边 s-&gt;t 表示 s 依赖于 t，s 后于 t 执行。</p>\n<p>第二部分是递归处理每个顶点。</p>\n<p>对于顶点 vertex 来说，先输出它可达的所有顶点，也就是说，先把它依赖的所有的顶点输出了，然后再输出自己。</p>\n<p><strong>时间复杂度：</strong></p>\n<p>每个顶点被访问两次，每条边都被访问一次，所以时间复杂度也是 O(V+E)。</p>\n<h3 id=\"最短路径算法\"><a href=\"#最短路径算法\" class=\"headerlink\" title=\"最短路径算法\"></a>最短路径算法</h3><blockquote>\n<p>将整个地图抽象成一个有向有权图</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Graph</span> </span>&#123; <span class=\"hljs-comment\">// 有向有权图的邻接表表示</span><br>  <span class=\"hljs-keyword\">private</span> LinkedList&lt;Edge&gt; adj[]; <span class=\"hljs-comment\">// 邻接表</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> v; <span class=\"hljs-comment\">// 顶点个数</span><br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.v = v;<br>    <span class=\"hljs-keyword\">this</span>.adj = <span class=\"hljs-keyword\">new</span> LinkedList[v];<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; v; ++i) &#123;<br>      <span class=\"hljs-keyword\">this</span>.adj[i] = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br>  &#125;<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123; <span class=\"hljs-comment\">// 添加一条边</span><br>    <span class=\"hljs-keyword\">this</span>.adj[s].add(<span class=\"hljs-keyword\">new</span> Edge(s, t, w));<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Edge</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> sid; <span class=\"hljs-comment\">// 边的起始顶点编号</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> tid; <span class=\"hljs-comment\">// 边的终止顶点编号</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> w; <span class=\"hljs-comment\">// 权重</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Edge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sid, <span class=\"hljs-keyword\">int</span> tid, <span class=\"hljs-keyword\">int</span> w)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">this</span>.sid = sid;<br>      <span class=\"hljs-keyword\">this</span>.tid = tid;<br>      <span class=\"hljs-keyword\">this</span>.w = w;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 下面这个类是为了dijkstra实现用的</span><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vertex</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> id; <span class=\"hljs-comment\">// 顶点编号ID</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> dist; <span class=\"hljs-comment\">// 从起始顶点到这个顶点的距离</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Vertex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id, <span class=\"hljs-keyword\">int</span> dist)</span> </span>&#123;<br>      <span class=\"hljs-keyword\">this</span>.id = id;<br>      <span class=\"hljs-keyword\">this</span>.dist = dist;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>Dijkstra 算法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 因为Java提供的优先级队列，没有暴露更新数据的接口，所以我们需要重新实现一个</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PriorityQueue</span> </span>&#123; <span class=\"hljs-comment\">// 根据vertex.dist构建小顶堆</span><br>  <span class=\"hljs-keyword\">private</span> Vertex[] nodes;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> count;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">PriorityQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.nodes = <span class=\"hljs-keyword\">new</span> Vertex[v+<span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">this</span>.count = v;<br>  &#125;<br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Vertex <span class=\"hljs-title\">poll</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现... &#125;</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(Vertex vertex)</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现...&#125;</span><br>  <span class=\"hljs-comment\">// 更新结点的值，并且从下往上堆化，重新符合堆的定义。时间复杂度O(logn)。</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Vertex vertex)</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现...&#125; </span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123; <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> 留给读者实现...&#125;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t)</span> </span>&#123; <span class=\"hljs-comment\">// 从顶点s到顶点t的最短路径</span><br>  <span class=\"hljs-keyword\">int</span>[] predecessor = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-keyword\">this</span>.v]; <span class=\"hljs-comment\">// 用来还原最短路径</span><br>  Vertex[] vertexes = <span class=\"hljs-keyword\">new</span> Vertex[<span class=\"hljs-keyword\">this</span>.v];<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.v; ++i) &#123;<br>    vertexes[i] = <span class=\"hljs-keyword\">new</span> Vertex(i, Integer.MAX_VALUE);<br>  &#125;<br>  PriorityQueue queue = <span class=\"hljs-keyword\">new</span> PriorityQueue(<span class=\"hljs-keyword\">this</span>.v);<span class=\"hljs-comment\">// 小顶堆</span><br>  <span class=\"hljs-keyword\">boolean</span>[] inqueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[<span class=\"hljs-keyword\">this</span>.v]; <span class=\"hljs-comment\">// 标记是否进入过队列</span><br>  vertexes[s].dist = <span class=\"hljs-number\">0</span>;<br>  queue.add(vertexes[s]);<br>  inqueue[s] = <span class=\"hljs-keyword\">true</span>;<br>  <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) &#123;<br>    Vertex minVertex= queue.poll(); <span class=\"hljs-comment\">// 取堆顶元素并删除</span><br>    <span class=\"hljs-keyword\">if</span> (minVertex.id == t) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 最短路径产生了</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; adj[minVertex.id].size(); ++i) &#123;<br>      Edge e = adj[minVertex.id].get(i); <span class=\"hljs-comment\">// 取出一条minVetex相连的边</span><br>      Vertex nextVertex = vertexes[e.tid]; <span class=\"hljs-comment\">// minVertex--&gt;nextVertex</span><br>      <span class=\"hljs-keyword\">if</span> (minVertex.dist + e.w &lt; nextVertex.dist) &#123; <span class=\"hljs-comment\">// 更新next的dist</span><br>        nextVertex.dist = minVertex.dist + e.w;<br>        predecessor[nextVertex.id] = minVertex.id;<br>        <span class=\"hljs-keyword\">if</span> (inqueue[nextVertex.id] == <span class=\"hljs-keyword\">true</span>) &#123;<br>          queue.update(nextVertex); <span class=\"hljs-comment\">// 更新队列中的dist值</span><br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>          queue.add(nextVertex);<br>          inqueue[nextVertex.id] = <span class=\"hljs-keyword\">true</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-comment\">// 输出最短路径</span><br>  System.out.print(s);<br>  print(s, t, predecessor);<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span> t, <span class=\"hljs-keyword\">int</span>[] predecessor)</span> </span>&#123;<br>  <span class=\"hljs-keyword\">if</span> (s == t) <span class=\"hljs-keyword\">return</span>;<br>  print(s, predecessor[t], predecessor);<br>  System.out.print(<span class=\"hljs-string\">&quot;-&gt;&quot;</span> + t);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>用 vertexes 数组，记录从起始顶点到每个顶点的距离（dist）</p>\n<ol>\n<li><p>首先将所有顶点的 dist 都初始化为无穷大（Integer.MAX_VALUE），起始顶点的 dist 值初始化为 0，然后将其放到优先级队列中。</p>\n</li>\n<li><p>从优先级队列中取出 dist 最小的顶点 minVertex，然后考察这个顶点可达的所有顶点（nextVertex）</p>\n</li>\n<li>如果 minVertex 的 dist 值加上 minVertex 与 nextVertex 之间边的权重 w 小于 nextVertex 当前的 dist 值，也就是说，存在另一条更短的路径，它经过 minVertex 到达 nextVertex。把 nextVertex 的 dist 更新为 minVertex 的 dist 值加上 w。把 nextVertex 加入到优先级队列中。</li>\n<li>重复这个过程，直到找到终止顶点 t 或者队列为空。</li>\n</ol>\n<p>predecessor 数组的作用是为了还原最短路径，它记录每个顶点的前驱顶点。最后，通过递归的方式，将这个路径打印出来。</p>\n<p>inqueue 数组是为了避免将一个顶点多次添加到优先级队列中。更新了某个顶点的 dist 值之后，如果这个顶点已经在优先级队列中了，就不要再将它重复添加进去了。</p>\n<p><img src=\"/article/Dijkstra 算法.jpg\"><span class=\"image-caption\">Dijkstra 算法</span></p>\n<p><strong>时间复杂度</strong></p>\n<p>while 循环最多会执行 V 次（V 表示顶点的个数），而内部的 for 循环的执行次数不确定，跟每个顶点的相邻边的个数有关，分别记作 E0，E1，E2，……，E(V-1)。如果把这 V 个顶点的边都加起来，最大也不会超过图中所有边的个数 E（E 表示边的个数）。</p>\n<p>for 循环内部的代码涉及从优先级队列取数据、往优先级队列中添加数据、更新优先级队列中的数据，这样三个主要的操作。优先级队列是用堆来实现的，堆中的这几个操作，时间复杂度都是 O(logV)（堆中的元素个数不会超过顶点的个数 V）。</p>\n<p>时间复杂度就是 O(E*logV)</p>\n","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json"},{"name":"图","path":"api/categories/图.json"}],"tags":[{"name":"数据结构与算法,图","path":"api/tags/数据结构与算法,图.json"}]}